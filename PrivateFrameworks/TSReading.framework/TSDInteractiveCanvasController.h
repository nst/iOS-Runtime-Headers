/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TSReading.framework/TSReading
 */

@interface TSDInteractiveCanvasController : NSObject <NSCoding, TSDBackgroundLayoutAndRenderStateDelegate, TSDCanvasDelegate, TSDErrorPresenter, TSDModalOperationPresenter, TSDRepTrackerDelegateCreation, TSDTilingLayerDelegate, TSKChangeSourceObserver, TSKScrollViewDelegate> {
    <TSDRepDirectLayerHostProvider> * _directLayerHostProvider;
    bool  _orbTextGesturesInFlight;
    bool  mAnimatingScroll;
    bool  mAnimatingViewScale;
    <TSDAnnotationPopoverController> * mAnnotationPopoverController;
    TSDBackgroundLayoutAndRenderState * mBackgroundLayoutAndRenderState;
    NSMutableArray * mBackgroundRenderingObjects;
    NSSet * mCachedTopLevelTilingLayers;
    TSDCanvas * mCanvas;
    NSObject<TSDCanvasEditor> * mCanvasEditor;
    struct __CFDictionary { } * mContainerLayersByRep;
    bool  mCreateRepsForOffscreenLayouts;
    TSDCanvasAnimation * mCurrentAnimation;
    bool  mCurrentlyScrolling;
    bool  mCurrentlyWaitingOnThreadedLayoutAndRender;
    NSMutableArray * mDecorators;
    <TSDInteractiveCanvasControllerDelegate> * mDelegate;
    struct __CFDictionary { } * mDirectLayerHostsByRep;
    int  mDisableThreadedLayoutAndRender;
    TSDDisplayLinkDispatch * mDisplayLinkDispatch;
    <TSDAnnotationHosting> * mDisplayedAnnotation;
    TSDDynamicOperationController * mDynOpController;
    int  mDynamicOperationCounter;
    double  mDynamicViewScale;
    bool  mDynamicallyZooming;
    TSDEditorController * mEditorController;
    unsigned int  mEmbeddedCanvasScrolling;
    bool  mForceTilingLayoutOnThreadWhenScrolling;
    TSDGestureDispatcher * mGestureDispatcher;
    TSDGuideController * mGuideController;
    bool  mHadLayerHost;
    bool  mHasBeenTornDown;
    NSMutableArray * mHiddenTopLevelLayers;
    NSObject<TSDImageHUDController> * mIAHUDController;
    long long  mIAHUDLock;
    bool  mIgnoreContentOffsetChanges;
    NSObject<TSDImageHUDController> * mImageHUDController;
    long long  mImageHUDLock;
    bool  mInDynamicOperation;
    bool  mInReadMode;
    bool  mInVersionBrowsingMode;
    NSMutableArray * mInspectorGestureRecognizersToReenable;
    bool  mInspectorModeEnabled;
    id /* block */  mInspectorSingleTapBlock;
    struct CGPoint { 
        double x; 
        double y; 
    }  mLastTapPoint;
    <TSDCanvasLayerHosting> * mLayerHost;
    bool  mLayerHostHasBeenTornDown;
    NSArray * mLayersWithZoomFadeAnimation;
    bool  mLayoutAndRenderOnThreadDuringScroll;
    bool  mNestedCanvasAllowLayoutAndRenderOnThread;
    NSMutableArray * mNextLayoutBlocks;
    NSMutableSet * mNotificationsToPostWithValidLayouts;
    CALayer * mOverlayLayer;
    bool  mOverlayLayerSuppressed;
    CALayer * mPopoutLayer;
    bool  mPreventSettingNilEditorOnTextResponder;
    CALayer * mRepContainerLayer;
    struct __CFDictionary { } * mRepLayersByRep;
    bool  mRepViewsNeedUpdating;
    struct __CFDictionary { } * mRepsByContainerLayer;
    struct __CFDictionary { } * mRepsByRepLayer;
    bool  mResizeCanvasOnLayout;
    NSObject<TSDRulerController> * mRulerController;
    <TSDEditor> * mSelectionChangeNotificationDeferredEditor;
    struct CGColor { } * mSelectionHighlightColor;
    NSRecursiveLock * mSelfSync;
    bool  mShouldAnimateAutoscroll;
    bool  mShouldAutoscrollToSelectionAfterGestures;
    bool  mShouldAutoscrollToSelectionAfterLayout;
    bool  mShouldCenterSelectionWhenAutoscrolling;
    bool  mShouldClipThemeContentToCanvas;
    bool  mShouldSuppressRendering;
    bool  mShowGrayOverlay;
    bool  mShowInvisibleObjects;
    bool  mShowUserDefinedGuides;
    bool  mStaticLayoutAndRenderOnThread;
    bool  mSupportsBackgroundTileRendering;
    bool  mSuppressAutozoomToSelectionAfterLayout;
    bool  mSuppressedAutozoom;
    bool  mSuppressingKeyboard;
    bool  mSuspendedLowPriorityThreadDispatcher;
    TSDTrackerManipulatorCoordinator * mTMCoordinator;
    double  mTargetPointSize;
    bool  mTeardownOnBackgroundThread;
    bool  mTemporarilyDisabledLayoutAndRenderOnThreadDuringScroll;
    bool  mTextGesturesInFlight;
    TSDTextInputResponder * mTextInputResponder;
    unsigned long long  mTextInputResponderShareCount;
    TSDInteractiveCanvasController * mTextInputResponderSource;
    TSDTileStorage * mTileStorage;
    TSDTrackingController * mTrackingController;
    NSFormatter * mUnitFormatter;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mUnobscuredScrollViewFrame;
    bool  mUsesAlternateDrawableSelectionHighlight;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mVisibleBoundsRectForTiling;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mVisibleUnscaledRect;
    struct CGPoint { 
        double x; 
        double y; 
    }  mZoomCenterInBounds;
}

@property (nonatomic, readonly) TSKAccessController *accessController;
@property (nonatomic, readonly) NSArray *additionalLayersOverRepLayers;
@property (nonatomic, readonly) NSArray *additionalLayersUnderRepLayers;
@property (nonatomic) bool allowLayoutAndRenderOnThread;
@property (nonatomic, readonly) bool animatingViewScale;
@property (nonatomic, readonly) TSDCanvas *canvas;
@property (nonatomic, retain) NSObject<TSDCanvasEditor> *canvasEditor;
@property (nonatomic, readonly) TSDCanvasLayer *canvasLayer;
@property (nonatomic, readonly) id canvasReferenceController;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } canvasScrollingOutset;
@property (nonatomic, readonly) TSDCanvasView *canvasView;
@property (nonatomic, readonly) struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; } centerPlusMovementContentPlacement;
@property (nonatomic, readonly) TSKChangeNotifier *changeNotifier;
@property (nonatomic) bool createRepsForOffscreenLayouts;
@property (nonatomic, readonly) double currentViewScale;
@property (nonatomic, readonly) bool currentlyScrolling;
@property (nonatomic, readonly) bool currentlyWaitingOnThreadedLayoutAndRender;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } defaultMinimumUnscaledCanvasSize;
@property (nonatomic, readonly) double defaultViewScale;
@property (nonatomic) <TSDInteractiveCanvasControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) <TSDRepDirectLayerHostProvider> *directLayerHostProvider;
@property (nonatomic, readonly) TSKDocumentRoot *documentRoot;
@property (nonatomic, readonly) <TSKDocumentRootProvider> *documentRootProvider;
@property (nonatomic, readonly, retain) TSDDynamicOperationController *dynamicOperationController;
@property (nonatomic, readonly) TSDEditorController *editorController;
@property (nonatomic, readonly) double fitWidthViewScale;
@property (nonatomic) bool forceTilingLayoutOnThreadWhenScrolling;
@property (nonatomic, readonly, retain) TSDGestureDispatcher *gestureDispatcher;
@property (nonatomic, readonly) TSDGuideStorage *guideStorage;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool inReadMode;
@property (nonatomic) bool inVersionBrowsingMode;
@property (nonatomic, copy) NSArray *infosToDisplay;
@property (nonatomic, readonly) bool inspectorModeEnabled;
@property (nonatomic) struct CGPoint { double x1; double x2; } lastTapPoint;
@property (nonatomic) <TSDCanvasLayerHosting> *layerHost;
@property (nonatomic, readonly) TSDLayoutController *layoutController;
@property (nonatomic) bool nestedCanvasAllowLayoutAndRenderOnThread;
@property (nonatomic, readonly) TSPObjectContext *objectContext;
@property (nonatomic) bool orbTextGesturesInFlight;
@property (nonatomic, readonly) CALayer *overlayLayer;
@property (nonatomic) bool overlayLayerSuppressed;
@property (copy) NSSet *p_cachedTopLevelTilingLayers;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } p_visibleBoundsRectForTiling;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } p_visibleUnscaledRect;
@property (nonatomic) bool preventSettingNilEditorOnTextResponder;
@property (nonatomic, readonly) CALayer *repContainerLayer;
@property (nonatomic) bool resizeCanvasOnLayout;
@property (nonatomic) NSObject<TSDRulerController> *rulerController;
@property (nonatomic, readonly) struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; } screenBottomContentPlacement;
@property (nonatomic, readonly) struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; } screenTopContentPlacement;
@property (nonatomic) struct CGColor { }*selectionHighlightColor;
@property (nonatomic) bool shouldAutoscrollToSelectionAfterLayout;
@property (nonatomic) bool shouldClipThemeContentToCanvas;
@property (nonatomic) bool shouldShowUserDefinedGuides;
@property (nonatomic) bool shouldSuppressRendering;
@property (nonatomic) bool showGrayOverlay;
@property (nonatomic) bool showInvisibleObjects;
@property (nonatomic) bool showsComments;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } sizeOfScrollViewEnclosingCanvas;
@property (nonatomic) bool staticLayoutAndRenderOnThread;
@property (readonly) Class superclass;
@property (nonatomic) bool supportsBackgroundTileRendering;
@property (nonatomic) bool suppressAutozoomToSelectionAfterLayout;
@property (nonatomic) bool textGesturesInFlight;
@property (nonatomic, readonly) TSDTextInputResponder *textInputResponder;
@property (nonatomic, readonly, retain) TSDTrackerManipulatorCoordinator *tmCoordinator;
@property (nonatomic, readonly) TSDContainerRep *topLevelContainerRepForEditing;
@property (nonatomic, readonly) struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; } touchContentPlacement;
@property (nonatomic, retain) TSDTrackingController *trackingController;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } unobscuredScrollViewFrame;
@property (nonatomic) bool usesAlternateDrawableSelectionHighlight;
@property (nonatomic) double viewScale;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleBoundsRect;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleBoundsRectClippedToWindow;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleBoundsRectForTiling;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleBoundsRectUsingSizeOfEnclosingScrollView;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleUnscaledRect;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleUnscaledRectForAutoscroll;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleUnscaledRectForCanvasUI;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleUnscaledRectForScrollingAutomatically;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleUnscaledRectValidWhileZooming;

// Image: /System/Library/PrivateFrameworks/TSReading.framework/TSReading

+ (id)keyPathsForValuesAffectingCurrentViewScale;
+ (id)keyPathsForValuesAffectingDocumentRoot;
+ (id)keyPathsForValuesAffectingEditorController;
+ (id)keyPathsForValuesAffectingViewScale;
+ (bool)selectorIsActionMethod:(SEL)arg1;
+ (double)smallRepOutsetForHitTesting;

- (id)accessController;
- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (id)actionGhostKnobForRep:(id)arg1;
- (void)actionGhostKnobHitForRep:(id)arg1;
- (void)addBackgroundRenderingObject:(id)arg1;
- (void)addCommonObservers;
- (void)addDecorator:(id)arg1;
- (id)additionalLayersOverRepLayers;
- (id)additionalLayersUnderRepLayers;
- (id)additionalVisibleInfosForCanvas:(id)arg1;
- (bool)allowAutoscroll;
- (bool)allowLayoutAndRenderOnThread;
- (bool)allowNegativeAutoscroll;
- (id)ancestorRepOfRep:(id)arg1 orDelegateConformingToProtocol:(id)arg2;
- (void)animateToViewScale:(double)arg1 contentOffset:(struct CGPoint { double x1; double x2; })arg2 duration:(double)arg3;
- (void)animateToViewScale:(double)arg1 contentOffset:(struct CGPoint { double x1; double x2; })arg2 duration:(double)arg3 completion:(id /* block */)arg4;
- (void)animateToViewScale:(double)arg1 contentOffset:(struct CGPoint { double x1; double x2; })arg2 duration:(double)arg3 forceAnimation:(bool)arg4 completion:(id /* block */)arg5;
- (bool)animatingViewScale;
- (double)animationBeginTime;
- (double)animationDuration;
- (id)annotationController;
- (void)asyncProcessChanges:(id)arg1 forChangeSource:(id)arg2;
- (bool)attachedCommentsAllowedForDrawable:(id)arg1;
- (void)backgroundLayoutAndRenderState:(id)arg1 performWorkInBackgroundTilingOnly:(bool)arg2;
- (bool)backgroundLayoutAndRenderState:(id)arg1 shouldDispatchBackgroundWork:(id /* block */)arg2;
- (void)backgroundLayoutAndRenderStateDidPerformBackgroundWork:(id)arg1;
- (void)beginAnimations:(id)arg1 context:(void*)arg2;
- (void)beginDynamicOperation;
- (id)beginEditingRep:(id)arg1;
- (id)beginEditingRep:(id)arg1 clearingSelection:(bool)arg2 withEditorProvider:(id /* block */)arg3;
- (id)beginEditingRepForInfo:(id)arg1;
- (void)beginPossiblyParallelInspectorDynamicOperation;
- (void)beginScrollingOperation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRectForActiveGuidesForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)canDrawTilingLayerInBackground:(id)arg1;
- (bool)canPerformInteractiveAction:(SEL)arg1 withSender:(id)arg2;
- (bool)canZoomToCurrentSelection;
- (id)canvas;
- (void)canvas:(id)arg1 createdRep:(id)arg2;
- (id)canvas:(id)arg1 layoutGeometryProviderForLayout:(id)arg2;
- (void)canvas:(id)arg1 willLayoutRep:(id)arg2;
- (void)canvasDidLayout:(id)arg1;
- (void)canvasDidUpdateRepsFromLayouts:(id)arg1;
- (void)canvasDidUpdateVisibleBounds:(id)arg1;
- (void)canvasDidValidateLayouts:(id)arg1;
- (void)canvasDidValidateLayoutsWithDependencies:(id)arg1;
- (id)canvasEditor;
- (id)canvasLayer;
- (void)canvasLayoutInvalidated:(id)arg1;
- (id)canvasReferenceController;
- (struct CGSize { double x1; double x2; })canvasScrollingOutset;
- (id)canvasView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })canvasViewBoundsWithBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)canvasViewShouldBecomeFirstResponder:(id)arg1;
- (void)canvasWillLayout:(id)arg1;
- (void)canvasWillUpdateRepsFromLayouts:(id)arg1;
- (struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; })centerPlusMovementContentPlacement;
- (void)changeFirstResponderIfNecessary;
- (id)changeNotifier;
- (id)clampContentLocation:(id)arg1 forPlacement:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; })arg2;
- (id)clampedCenterContentLocationForPoint:(struct CGPoint { double x1; double x2; })arg1 withPlacement:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; })arg2 viewScale:(double)arg3;
- (struct CGPoint { double x1; double x2; })clampedCenterPointForPoint:(struct CGPoint { double x1; double x2; })arg1 withPlacement:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; })arg2 viewScale:(double)arg3;
- (struct CGPoint { double x1; double x2; })clampedUnscaledContentOffset:(struct CGPoint { double x1; double x2; })arg1 forViewScale:(double)arg2;
- (struct CGPoint { double x1; double x2; })clampedUnscaledContentOffset:(struct CGPoint { double x1; double x2; })arg1 forViewScale:(double)arg2 scrollViewBoundsSize:(struct CGSize { double x1; double x2; })arg3;
- (void)closeOverlays;
- (void)commitAnimations;
- (id)containerLayerForRep:(id)arg1;
- (struct CGPoint { double x1; double x2; })contentOffset;
- (struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; })contentPlacementForPoint:(struct CGPoint { double x1; double x2; })arg1 inView:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertBoundsToUnscaledPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertBoundsToUnscaledRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })convertBoundsToUnscaledSize:(struct CGSize { double x1; double x2; })arg1;
- (id)convertContentLocation:(id)arg1 fromPlacement:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; })arg2 toPlacement:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; })arg3;
- (struct CGPoint { double x1; double x2; })convertUnscaledToBoundsPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertUnscaledToBoundsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })convertUnscaledToBoundsSize:(struct CGSize { double x1; double x2; })arg1;
- (bool)createRepsForOffscreenLayouts;
- (double)currentViewScale;
- (bool)currentlyScrolling;
- (bool)currentlyWaitingOnThreadedLayoutAndRender;
- (void)dealloc;
- (int)defaultKnobTypeForRep:(id)arg1;
- (struct CGSize { double x1; double x2; })defaultMinimumUnscaledCanvasSize;
- (double)defaultViewScale;
- (id)delegate;
- (void)deselectAll:(id)arg1;
- (void)didEndDrawingTilingLayerInBackground:(id)arg1 withToken:(id)arg2;
- (void)didLayoutAndRenderOnThread;
- (id)directLayerHostProvider;
- (void)disableThreadedLayoutAndRender;
- (void)discardRepForClassChange:(id)arg1;
- (void)displayRulerForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)displayRulerWithSlowFade:(bool)arg1;
- (id)documentRoot;
- (id)documentRootProvider;
- (void)doubleTappedCanvasBackgroundAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (id)dynamicOperationController;
- (id)editorController;
- (void)embeddedCanvasDidEndScrolling;
- (void)embeddedCanvasWillBeginScrolling;
- (void)enableThreadedLayoutAndRender;
- (void)encodeWithCoder:(id)arg1;
- (void)endDynamicOperation;
- (void)endEditing;
- (void)endPossiblyParallelInspectorDynamicOperation;
- (void)endScrollingOperation;
- (double)fitWidthViewScale;
- (void)forceBackgroundLayout;
- (void)forceStopScrolling;
- (bool)forceTilingLayoutOnThreadWhenScrolling;
- (void)forwardInvocation:(id)arg1;
- (id)gestureDispatcher;
- (id)gestureTargetStack:(id)arg1;
- (struct CGSize { double x1; double x2; })growUnscaledCanvasLayerSize:(struct CGSize { double x1; double x2; })arg1;
- (id)guideStorage;
- (bool)handleDoubleTapAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)handleSingleTapAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)hasAnnotations;
- (void)hideRuler;
- (id)hitKnobAtPoint:(struct CGPoint { double x1; double x2; })arg1 returningRep:(id*)arg2;
- (id)hitRep:(struct CGPoint { double x1; double x2; })arg1;
- (id)hitRep:(struct CGPoint { double x1; double x2; })arg1 withGesture:(id)arg2 passingTest:(id /* block */)arg3;
- (id)hitRepChromeAtUnscaledPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)hitRepsAtPoint:(struct CGPoint { double x1; double x2; })arg1 withSlop:(struct CGSize { double x1; double x2; })arg2;
- (double)i_adjustViewScale:(double)arg1;
- (struct CGSize { double x1; double x2; })i_canvasCenterOffsetForProposedViewScale:(double)arg1 originalViewScale:(double)arg2;
- (void)i_canvasContentsScaleDidChange;
- (void)i_canvasWideGamutValueDidChange;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })i_clippingBoundsForScrollViewEnclosingCanvas;
- (id)i_currentAnimation;
- (void)i_cvcWillBecomeFirstResponder;
- (void)i_cvcWillResignFirstResponder;
- (id)i_descriptionForViewScale:(double)arg1;
- (void)i_drawRepWithReadLock:(id)arg1 inContext:(struct CGContext { }*)arg2 forLayer:(id)arg3;
- (bool)i_inPrintPreviewMode;
- (void)i_invalidateSelectionHighlightLayers;
- (void)i_layerHostHasBeenTornDown;
- (void)i_layout;
- (void)i_layoutRegistered:(id)arg1;
- (void)i_layoutUnregistered:(id)arg1;
- (bool)i_needsLayout;
- (double)i_nextCanvasViewScaleDetentForProposedViewScale:(double)arg1 greater:(bool)arg2;
- (void)i_recordUserViewScale;
- (void)i_repNeedsDisplay:(id)arg1;
- (void)i_repNeedsDisplay:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)i_syncWithLayoutThread;
- (bool)i_temporarilyDisabledLayoutAndRenderOnThreadDuringScroll;
- (id)i_tileStorage;
- (id)i_topLevelLayersForTiling;
- (void)i_viewDidZoomToViewScale:(double)arg1;
- (void)i_viewIsZoomingAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)i_viewScaleDidChange;
- (double)i_viewScaleForProposedViewScale:(double)arg1 originalViewScale:(double)arg2;
- (void)i_viewScrollDidChange;
- (void)i_viewScrollWillChange;
- (void)i_viewScrollingEnded;
- (void)i_viewWillBeginZooming;
- (bool)inReadMode;
- (bool)inVersionBrowsingMode;
- (id)infoForModel:(id)arg1 withSelection:(id)arg2;
- (id)infoToScrollToForModel:(id)arg1 withSelection:(id)arg2;
- (id)infosForGuides;
- (id)infosToDisplay;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (bool)inspectorModeEnabled;
- (void)invalidateComments;
- (void)invalidateLayers;
- (void)invalidateLayoutInBackground:(id)arg1;
- (void)invalidateReps;
- (void)invalidateRepsIfSynced;
- (void)invalidateRepsInBackground;
- (void)invalidateVisibleBounds;
- (void)invalidateVisibleBoundsInBackground;
- (bool)isCanvasInteractive;
- (bool)isInDynamicOperation;
- (bool)isInInspectorDynamicOperation;
- (bool)isPrinting;
- (bool)isPrintingCanvas;
- (bool)keyboardSuppressedAndTextInputEditorIgnoresFirstResponderChanges;
- (struct CGPoint { double x1; double x2; })lastTapPoint;
- (id)layerForRep:(id)arg1;
- (id)layerHost;
- (id)layoutController;
- (id)layoutForInfo:(id)arg1;
- (id)layoutForInfoNearestVisibleRect:(id)arg1;
- (id)layoutForInfoNearestVisibleRect:(id)arg1 intersectingSelection:(id)arg2;
- (id)layoutForModel:(id)arg1 withSelection:(id)arg2;
- (void)layoutIfNeeded;
- (void)layoutInvalidated;
- (id)layoutsForInfo:(id)arg1;
- (id)layoutsForInfo:(id)arg1 intersectingSelection:(id)arg2;
- (id)layoutsForModel:(id)arg1 withSelection:(id)arg2;
- (id)localizedPercentStringForAlignmentGuide:(id)arg1;
- (void)makeEditorPerformAction:(SEL)arg1 withSender:(id)arg2;
- (void)makeUserDefinedGuidesVisible;
- (id)methodSignatureForSelector:(SEL)arg1;
- (bool)mustDrawTilingLayerOnMainThread:(id)arg1;
- (bool)nestedCanvasAllowLayoutAndRenderOnThread;
- (id)newCanvasEditor;
- (struct CGColor { }*)newDefaultSelectionHighlightColor;
- (id)objectContext;
- (bool)orbTextGesturesInFlight;
- (id)overlayLayer;
- (bool)overlayLayerSuppressed;
- (void)p_acquireLockAndPerformAction:(id /* block */)arg1;
- (bool)p_allowUpdateViewsFromReps;
- (void)p_applyViewScale:(double)arg1 andContentOffset:(struct CGPoint { double x1; double x2; })arg2;
- (void)p_autoscrollToSelection:(id)arg1 withInfo:(id)arg2 isInitialSelection:(bool)arg3 focusRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (void)p_autoscrollToSelection:(id)arg1 withInfo:(id)arg2 isInitialSelection:(bool)arg3 focusRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 scrollImmediately:(bool)arg5 skipZoom:(bool)arg6;
- (id)p_backgroundLayoutAndRenderState;
- (void)p_beginZoomingOperation;
- (id)p_cachedTopLevelTilingLayers;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_calculateVisibleBoundsRectForTiling;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_calculateVisibleUnscaledRect;
- (bool)p_centerOnInitialSelection;
- (void)p_commonInit;
- (bool)p_currentlyScrolling;
- (bool)p_currentlyScrollingIncludeEmbeddedCanvasScrolling:(bool)arg1;
- (id)p_decorators;
- (void)p_discardContainerLayer:(id)arg1 forRep:(id)arg2;
- (void)p_discardLayer:(id)arg1 forRep:(id)arg2;
- (void)p_drawLayerWithReadLock:(id)arg1;
- (void)p_editorControllerDidChangeCurrentEditors:(id)arg1;
- (void)p_editorControllerDidChangeTextInputEditor:(id)arg1;
- (void)p_editorControllerSelectionDidChange:(id)arg1;
- (void)p_editorControllerSelectionDidChangeAndWantsKeyboard:(id)arg1;
- (void)p_editorDidChangeSelection:(id)arg1 withSelectionFlags:(unsigned long long)arg2;
- (void)p_editorDoneChangingSelection:(id)arg1;
- (void)p_editorDoneChangingSelection:(id)arg1 withFlags:(unsigned long long)arg2;
- (bool)p_endEditingToBeginEditingRep:(id)arg1;
- (void)p_endZoomingOperation;
- (void)p_guideColorChanged:(id)arg1;
- (void)p_iccWillBecomeFirstResponderNotification:(id)arg1;
- (void)p_iccWillResignFirstResponderNotification:(id)arg1;
- (void)p_invalidateForBackgroundLayout;
- (void)p_invalidateTilingLayers;
- (void)p_layoutWithReadLock;
- (void)p_maybeSetTextResponderEditorTo:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_outsetSelectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)p_overlayLayerForReps:(id)arg1;
- (void)p_postNotificationOnMainThreadWithValidLayouts:(id)arg1;
- (void)p_recursiveHitKnobAtPoint:(struct CGPoint { double x1; double x2; })arg1 inRep:(id)arg2 minDistance:(double*)arg3 hitKnob:(id*)arg4 hitRep:(id*)arg5;
- (void)p_recursivelyClearLayerDelegate:(id)arg1;
- (void)p_recursivelyUpdateLayerEdgeAntialiasingForLayer:(id)arg1;
- (void)p_recursivelyUpdateLayerForRep:(id)arg1 accumulatingLayers:(id)arg2 andReps:(id)arg3;
- (id)p_repForLayout:(id)arg1 createIfNeeded:(bool)arg2;
- (void)p_rulerUnitsDidChangeNotification:(id)arg1;
- (void)p_scrollModelToVisible:(id)arg1 withSelection:(id)arg2;
- (void)p_scrollToPrimarySelectionForEditor:(id)arg1 skipZoom:(bool)arg2;
- (void)p_scrollViewDidEndScrollingAnimation:(id)arg1;
- (id)p_setSelection:(id)arg1 onInfo:(id)arg2 withFlags:(unsigned long long)arg3;
- (void)p_setTargetPointSize:(double)arg1;
- (void)p_setupPopoutLayerForReps:(id)arg1;
- (bool)p_shouldLayoutAndRenderOnThread;
- (bool)p_shouldLayoutAndRenderOnThreadForcePendingLayout:(bool)arg1;
- (bool)p_shouldSuppressAutozoomForEditor:(id)arg1;
- (double)p_targetPointSize;
- (void)p_textGesturesDidEndNotification:(id)arg1;
- (void)p_textGesturesWillBeginNotification:(id)arg1;
- (void)p_updateCanvasSizeFromLayouts;
- (void)p_updateLayersFromReps;
- (void)p_updateViewsFromReps;
- (void)p_updateViewsFromRepsForceUpdate:(bool)arg1;
- (void)p_viewScrollingEnded;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_visibleBoundsRectForTiling;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_visibleBoundsRectUsingSizeOfEnclosingScrollView:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_visibleUnscaledRect;
- (void)p_willEnterForeground:(id)arg1;
- (void)performBlockAfterNextLayout:(id /* block */)arg1;
- (void)performBlockNextFrame:(id /* block */)arg1;
- (void)popThreadedLayoutAndRenderDisabled;
- (void)presentError:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)presentErrors:(id)arg1 withLocalizedDescription:(id)arg2 completionHandler:(id /* block */)arg3;
- (bool)preventSettingNilEditorOnTextResponder;
- (id)provideDynamicGuides;
- (id)provideUserDefinedGuides;
- (void)pushThreadedLayoutAndRenderDisabled;
- (id)queueForDrawingTilingLayerInBackground:(id)arg1;
- (void)recreateAllLayoutsAndReps;
- (void)removeBackgroundRenderingObject:(id)arg1;
- (void)removeCommonObservers;
- (void)removeDecorator:(id)arg1;
- (id)repContainerLayer;
- (id)repForContainerLayer:(id)arg1;
- (id)repForInfo:(id)arg1;
- (id)repForInfo:(id)arg1 createIfNeeded:(bool)arg2;
- (id)repForLayer:(id)arg1;
- (id)repForLayout:(id)arg1;
- (id)replaceImageController;
- (id)repsForInfo:(id)arg1;
- (bool)resizeCanvasOnLayout;
- (bool)respondsToSelector:(SEL)arg1;
- (void)resumeEditing;
- (void)reuseTextInputResponderFrom:(id)arg1;
- (id)rulerController;
- (struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; })screenBottomContentPlacement;
- (struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; })screenTopContentPlacement;
- (void)scrollCurrentSelectionToVisible;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })scrollFocusRectForModel:(id)arg1 withSelection:(id)arg2;
- (void)scrollRectToVisible:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(bool)arg2;
- (void)scrollRectToVisibleCenter:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(bool)arg2 onlyScrollNecessaryAxes:(bool)arg3;
- (void)scrollRectToVisibleWithSelectionOutset:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(bool)arg2;
- (void)scrollSearchReferenceToVisible:(id)arg1;
- (void)scrollToPrimarySelection;
- (void)scrollToPrimarySelectionForEditor:(id)arg1;
- (void)scrollToSelection:(id)arg1 onModel:(id)arg2;
- (void)scrollToSelection:(id)arg1 onModel:(id)arg2 scrollImmediately:(bool)arg3;
- (struct CGPoint { double x1; double x2; })scrollView:(id)arg1 restrictContentOffset:(struct CGPoint { double x1; double x2; })arg2;
- (void)scrollView:(id)arg1 willAnimateToContentOffset:(struct CGPoint { double x1; double x2; })arg2;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidEndScrollingAnimation:(id)arg1;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewDidScrollToTop:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2 targetContentOffset:(inout struct CGPoint { double x1; double x2; }*)arg3;
- (bool)selectionContainsOnlyInfosOnCanvas:(id)arg1 model:(id)arg2;
- (struct CGColor { }*)selectionHighlightColor;
- (void)setAllowLayoutAndRenderOnThread:(bool)arg1;
- (void)setAnimation:(id)arg1 forLayer:(id)arg2 forKey:(id)arg3;
- (void)setAnimationCompletionBlock:(id /* block */)arg1;
- (void)setAnimationDelay:(double)arg1;
- (void)setAnimationDelegate:(id)arg1;
- (void)setAnimationDidStopSelector:(SEL)arg1;
- (void)setAnimationDuration:(double)arg1;
- (void)setAnimationFilterBlock:(id /* block */)arg1;
- (void)setAnimationRepeatAutoreverses:(bool)arg1;
- (void)setAnimationRepeatCount:(float)arg1;
- (void)setAnimationStartDate:(id)arg1;
- (void)setAnimationTimingFunction:(id)arg1;
- (void)setAnimationUseRepFiltering:(bool)arg1;
- (void)setAnimationWillStartSelector:(SEL)arg1;
- (void)setCanvasEditor:(id)arg1;
- (void)setContentOffset:(struct CGPoint { double x1; double x2; })arg1 animated:(bool)arg2;
- (void)setContentOffset:(struct CGPoint { double x1; double x2; })arg1 clamp:(bool)arg2 animated:(bool)arg3;
- (void)setContentOffset:(struct CGPoint { double x1; double x2; })arg1 clamp:(bool)arg2 animated:(bool)arg3 completionBlock:(id /* block */)arg4;
- (void)setCreateRepsForOffscreenLayouts:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDirectLayerHostProvider:(id)arg1;
- (void)setForceTilingLayoutOnThreadWhenScrolling:(bool)arg1;
- (void)setInReadMode:(bool)arg1;
- (void)setInVersionBrowsingMode:(bool)arg1;
- (void)setInfosToDisplay:(id)arg1;
- (void)setKeyboardSuppressedAndTextInputEditorIgnoresFirstResponderChanges:(bool)arg1;
- (void)setLastTapPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setLayerHost:(id)arg1;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 onLayer:(id)arg2;
- (void)setNeedsDisplayOnLayer:(id)arg1;
- (void)setNestedCanvasAllowLayoutAndRenderOnThread:(bool)arg1;
- (void)setOrbTextGesturesInFlight:(bool)arg1;
- (void)setOverlayLayerSuppressed:(bool)arg1;
- (void)setP_cachedTopLevelTilingLayers:(id)arg1;
- (void)setP_visibleBoundsRectForTiling:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setP_visibleUnscaledRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setPreventSettingNilEditorOnTextResponder:(bool)arg1;
- (void)setResizeCanvasOnLayout:(bool)arg1;
- (void)setRulerController:(id)arg1;
- (void)setSelection:(id)arg1 onModel:(id)arg2 withFlags:(unsigned long long)arg3;
- (void)setSelectionHighlightColor:(struct CGColor { }*)arg1;
- (void)setShouldAutoscrollToSelectionAfterLayout:(bool)arg1;
- (void)setShouldClipThemeContentToCanvas:(bool)arg1;
- (void)setShouldShowUserDefinedGuides:(bool)arg1;
- (void)setShouldSuppressRendering:(bool)arg1;
- (void)setShouldSuppressRendering:(bool)arg1 animated:(bool)arg2;
- (void)setShowGrayOverlay:(bool)arg1;
- (void)setShowInvisibleObjects:(bool)arg1;
- (void)setShowsComments:(bool)arg1;
- (void)setStaticLayoutAndRenderOnThread:(bool)arg1;
- (void)setSupportsBackgroundTileRendering:(bool)arg1;
- (void)setSuppressAutozoomToSelectionAfterLayout:(bool)arg1;
- (void)setTextGesturesInFlight:(bool)arg1;
- (void)setTrackingController:(id)arg1;
- (void)setUnobscuredScrollViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setUsesAlternateDrawableSelectionHighlight:(bool)arg1;
- (void)setViewScale:(double)arg1;
- (void)setViewScale:(double)arg1 andScrollViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 animated:(bool)arg3;
- (void)setViewScale:(double)arg1 andScrollViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 maintainPosition:(bool)arg3 animated:(bool)arg4;
- (void)setViewScale:(double)arg1 contentOffset:(struct CGPoint { double x1; double x2; })arg2 clampOffset:(bool)arg3 animated:(bool)arg4;
- (void)setViewScale:(double)arg1 contentOffset:(struct CGPoint { double x1; double x2; })arg2 clampOffset:(bool)arg3 animationDuration:(double)arg4 completion:(id /* block */)arg5;
- (void)setViewScale:(double)arg1 contentOffset:(struct CGPoint { double x1; double x2; })arg2 clampOffset:(bool)arg3 animationDuration:(double)arg4 forceAnimation:(bool)arg5 completion:(id /* block */)arg6;
- (bool)shouldAutoscrollToSelectionAfterLayout;
- (bool)shouldBeginDrawingTilingLayerInBackground:(id)arg1 returningToken:(id*)arg2 andQueue:(id*)arg3;
- (bool)shouldClipThemeContentToCanvas;
- (bool)shouldDisplayCommentUIForInfo:(id)arg1;
- (bool)shouldEverShowPathHighlightOnInvisibleShapes;
- (bool)shouldLayoutTilingLayer:(id)arg1;
- (bool)shouldPopKnobsOutsideEnclosingScrollView;
- (bool)shouldResampleImages;
- (bool)shouldResizeCanvasToScrollView;
- (bool)shouldShowInstructionalText;
- (bool)shouldShowOnRepHyperlinkUI;
- (bool)shouldShowPathHighlightOnUnselectedInvisibleShapes;
- (bool)shouldShowTextOverflowGlyphs;
- (bool)shouldShowUserDefinedGuides;
- (bool)shouldSuppressRendering;
- (bool)shouldZoomOnSelectionChange;
- (bool)showGrayOverlay;
- (bool)showInvisibleObjects;
- (void)showOrHideComments:(id)arg1;
- (bool)showsComments;
- (struct CGSize { double x1; double x2; })sizeOfScrollViewEnclosingCanvas;
- (struct CGPoint { double x1; double x2; })smartZoomCenterForNoSelection;
- (bool)spellCheckingSupported;
- (bool)spellCheckingSuppressed;
- (bool)staticLayoutAndRenderOnThread;
- (bool)supportsBackgroundTileRendering;
- (bool)suppressAutozoomToSelectionAfterLayout;
- (void)syncProcessChanges:(id)arg1 forChangeSource:(id)arg2;
- (void)tappedCanvasBackgroundAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)teardown;
- (void)teardownBackgroundRendering;
- (void)teardownCanvasEditor;
- (bool)textGesturesInFlight;
- (id)textInputResponder;
- (id)tmCoordinator;
- (void)toggleHyperlinkUIForRep:(id)arg1;
- (void)toggleShouldShowUserDefinedGuides;
- (id)topLevelContainerRepForEditing;
- (id)topLevelRepsForDragSelecting;
- (id)topLevelRepsForHitTesting;
- (id)topLevelZOrderedSiblingsOfInfos:(id)arg1;
- (struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; })touchContentPlacement;
- (id)trackingController;
- (id)unitFormatter;
- (id)unitStringForAngle:(double)arg1;
- (id)unitStringForAngle:(double)arg1 andLength:(double)arg2;
- (id)unitStringForNumber:(double)arg1;
- (id)unitStringForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)unitStringForSize:(struct CGSize { double x1; double x2; })arg1;
- (void)unobscuredFrameDidChange;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unobscuredFrameOfView:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unobscuredScrollViewFrame;
- (void)updateSelectionForTapAtPoint:(struct CGPoint { double x1; double x2; })arg1 extendingSelection:(bool)arg2;
- (void)updateSelectionForTapOnSelectedRep:(id)arg1;
- (bool)usesAlternateDrawableSelectionHighlight;
- (id)validatedLayoutForInfo:(id)arg1;
- (void)viewDidEndZooming;
- (double)viewScale;
- (double)viewScaleForZoomToFitRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 outset:(bool)arg2 fitWidthOnly:(bool)arg3;
- (id)viewWithTransferredLayers;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleBoundsForTilingLayer:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleBoundsRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleBoundsRectClippedToWindow;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleBoundsRectForTiling;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleBoundsRectUsingSizeOfEnclosingScrollView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleScaledBoundsForClippingRepsOnCanvas:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleUnscaledRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleUnscaledRectForAutoscroll;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleUnscaledRectForCanvasUI;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleUnscaledRectForScrollingAutomatically;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleUnscaledRectValidWhileZooming;
- (bool)wantsUpdatedScrollIndicatorInsets;
- (void)zoomToCurrentSelection;
- (bool)zoomToFitRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 outset:(bool)arg2 fitWidthOnly:(bool)arg3 centerHorizontally:(bool)arg4 centerVertically:(bool)arg5 animated:(bool)arg6;
- (void)zoomWithAnimationToUnscaledRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

// Image: /System/Library/PrivateFrameworks/SilexText.framework/SilexText

- (void)disableAllGestures;
- (void)disableGestureKinds:(id)arg1;
- (void)disableNormalGestures;
- (void)enableGestureKinds:(id)arg1;
- (id)gestureRecognizerWithKind:(id)arg1;
- (id)gestureWithKind:(id)arg1;

@end
