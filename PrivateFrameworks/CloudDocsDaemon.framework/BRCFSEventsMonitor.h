/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon
 */

@interface BRCFSEventsMonitor : NSObject <BRCModule, BRCSuspendable> {
    PQLConnection * _db;
    <BRCFSEventsDelegate> * _delegate;
    NSString * _devicePath;
    bool  _drainEvents;
    NSObject<OS_dispatch_source> * _historicalEventSource;
    bool  _isCancelled;
    NSString * _name;
    BRCFSEventsPersistedState * _persistedState;
    BRCFSEventsPersistedState * _rendezVous;
    int  _resetCount;
    BRCRelativePath * _root;
    NSString * _rootPathRelativeToDevice;
    NSObject<OS_dispatch_source> * _rootVnodeWatcher;
    NSObject<OS_dispatch_semaphore> * _semaphore;
    BRCAccountSession * _session;
    struct __FSEventStream { } * _stream;
    NSObject<OS_dispatch_queue> * _streamQueue;
    int  _suspendCount;
    BRCVolume * _volume;
}

@property (setter=setDB:, nonatomic, retain) PQLConnection *db;
@property (readonly, copy) NSString *debugDescription;
@property <BRCFSEventsDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isCancelled;
@property (nonatomic, readonly) BRCRelativePath *root;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool volumeIsCaseSensitive;

- (void).cxx_destruct;
- (void)_cancel;
- (void)_close;
- (void)_updatePersistedStateWithState:(id)arg1;
- (void)cancel;
- (void)close;
- (id)db;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (void)didProcessEventID:(unsigned long long)arg1;
- (void)flushStream;
- (void)fseventAtPath:(id)arg1 withFlags:(unsigned int)arg2 andID:(unsigned long long)arg3 eventIndex:(unsigned int)arg4 eventCount:(unsigned int)arg5 initialScan:(bool)arg6;
- (id)initWithAccountSession:(id)arg1;
- (id)initWithAccountSession:(id)arg1 name:(id)arg2;
- (bool)isCancelled;
- (bool)openWithRoot:(id)arg1 resetStreamIfNeeded:(bool)arg2 volume:(id)arg3 error:(id*)arg4;
- (bool)openWithRoot:(id)arg1 volume:(id)arg2 error:(id*)arg3;
- (void)reset;
- (void)resume;
- (id)root;
- (void)setDB:(id)arg1;
- (void)setDelegate:(id)arg1;
- (bool)setUpRoot:(id)arg1 resetStreamIfNeeded:(bool)arg2 volume:(id)arg3 error:(id*)arg4;
- (bool)setUpStreamSynchronously:(bool)arg1 error:(id*)arg2;
- (void)signalAfterCurrentFSEvent:(id)arg1;
- (void)stopWatcher;
- (void)suspend;
- (bool)volumeIsCaseSensitive;

@end
