/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

@interface MPQueuePlayer : NSObject <MPAVRoutingControllerDelegate> {
    NSObject<OS_dispatch_queue> * _accessQueue;
    unsigned long long  _allowsExternalPlaybackRevisionID;
    AVPlayerItem * _currentItem;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _currentTime;
    long long  _defaultItemEQPresetType;
    bool  _isExternalPlaybackActive;
    MPAVRoute * _lastPickedRoute;
    bool  _outputObscuredDueToInsufficientExternalProtection;
    bool  _pausedForPlaybackQueueTransaction;
    id  _playbackQueueCommitHandler;
    long long  _playbackQueueTransactionCount;
    AVQueuePlayer * _player;
    float  _playerRate;
    NSMutableArray * _queuedOperations;
    float  _rate;
    float  _rateBeforePlaybackQueueTransaction;
    bool  _routeDidChangeDuringPlaybackQueueTransaction;
    MPAVRoutingController * _routingController;
    long long  _status;
    unsigned long long  _usesAudioOnlyModeForExternalPlaybackRevisionID;
    unsigned long long  _usesExternalPlaybackWhileExternalScreenIsActiveRevisionID;
}

@property (nonatomic, readonly) long long _externalProtectionStatus;
@property (nonatomic, readonly) AVPlayer *_player;
@property (nonatomic) long long actionAtItemEnd;
@property (nonatomic, readonly) bool allowsExternalPlayback;
@property (getter=isClosedCaptionDisplayEnabled, nonatomic) bool closedCaptionDisplayEnabled;
@property (nonatomic, readonly) AVPlayerItem *currentItem;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) long long defaultItemEQPresetType;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disallowsAMRAudio;
@property (nonatomic, readonly) NSError *error;
@property (getter=isExternalPlaybackActive, nonatomic, readonly) bool externalPlaybackActive;
@property (nonatomic, readonly) long long externalPlaybackType;
@property (nonatomic, copy) NSString *externalPlaybackVideoGravity;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isPlaybackQueueTransactionActive;
@property (nonatomic, readonly) NSArray *items;
@property (nonatomic) bool limitsBandwidthForCellularAccess;
@property (nonatomic, readonly) bool outputObscuredDueToInsufficientExternalProtection;
@property (nonatomic, copy) id playbackQueueCommitHandler;
@property (nonatomic, readonly) id playerAVAudioSession;
@property (nonatomic, readonly) float playerRate;
@property (nonatomic) float rate;
@property (nonatomic, readonly) long long status;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool usesAudioOnlyModeForExternalPlayback;
@property (nonatomic, readonly) bool usesExternalPlaybackWhileExternalScreenIsActive;

- (void).cxx_destruct;
- (bool)_CALayerDestinationIsTVOut;
- (void)_currentItemDidChangeNotification:(id)arg1;
- (long long)_externalProtectionStatus;
- (id)_player;
- (bool)_resumePlayback:(double)arg1 error:(id*)arg2;
- (void)_setCALayerDestinationIsTVOut:(bool)arg1;
- (void)_setClientName:(id)arg1;
- (void)_setEQPreset:(int)arg1;
- (void)_setExpectedAssetTypes:(id)arg1;
- (void)_setPreferredLanguageList:(id)arg1;
- (void)_setPreparesItemsForPlaybackAsynchronously:(bool)arg1;
- (void)_setStoppingFadeOutDuration:(float)arg1;
- (void)_setUserVolume:(float)arg1;
- (void)_setWantsVolumeChangesWhenPausedOrInactive:(bool)arg1;
- (float)_userVolume;
- (long long)actionAtItemEnd;
- (id)addBoundaryTimeObserverForTimes:(id)arg1 queue:(id)arg2 usingBlock:(id)arg3;
- (id)addPeriodicTimeObserverForInterval:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 queue:(id)arg2 usingBlock:(id)arg3;
- (void)advanceToNextItem;
- (bool)allowsExternalPlayback;
- (void)beginPlaybackQueueTransactionAndPause:(bool)arg1;
- (void)commitPlaybackQueueTransaction;
- (id)currentItem;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })currentTime;
- (void)dealloc;
- (long long)defaultItemEQPresetType;
- (bool)disallowsAMRAudio;
- (id)error;
- (long long)externalPlaybackType;
- (id)externalPlaybackVideoGravity;
- (id)init;
- (void)insertItem:(id)arg1 afterItem:(id)arg2;
- (bool)isClosedCaptionDisplayEnabled;
- (bool)isExternalPlaybackActive;
- (bool)isPlaybackQueueTransactionActive;
- (id)items;
- (bool)limitsBandwidthForCellularAccess;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (bool)outputObscuredDueToInsufficientExternalProtection;
- (void)pause;
- (void)play;
- (id)playbackQueueCommitHandler;
- (id)playerAVAudioSession;
- (float)playerRate;
- (void)prepareItem:(id)arg1 withCompletionHandler:(id)arg2;
- (float)rate;
- (void)removeAllItems;
- (void)removeItem:(id)arg1;
- (void)removeTimeObserver:(id)arg1;
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toleranceBefore:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 toleranceAfter:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toleranceBefore:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 toleranceAfter:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 completionHandler:(id)arg4;
- (void)setActionAtItemEnd:(long long)arg1;
- (void)setAllowsExternalPlayback:(bool)arg1 shouldIgnorePlaybackQueueTransactions:(bool)arg2;
- (void)setClosedCaptionDisplayEnabled:(bool)arg1;
- (void)setCurrentPlaybackQueueTransactionDisplayTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setDefaultItemEQPresetType:(long long)arg1;
- (void)setDisallowsAMRAudio:(bool)arg1;
- (void)setExternalPlaybackVideoGravity:(id)arg1;
- (void)setLimitsBandwidthForCellularAccess:(bool)arg1;
- (void)setMediaSelectionCriteria:(id)arg1 forMediaCharacteristic:(id)arg2;
- (void)setPlaybackQueueCommitHandler:(id)arg1;
- (void)setRate:(float)arg1;
- (void)setUsesAudioOnlyModeForExternalPlayback:(bool)arg1 shouldIgnorePlaybackQueueTransactions:(bool)arg2;
- (void)setUsesExternalPlaybackWhileExternalScreenIsActive:(bool)arg1 shouldIgnorePlaybackQueueTransactions:(bool)arg2;
- (long long)status;
- (bool)usesAudioOnlyModeForExternalPlayback;
- (bool)usesExternalPlaybackWhileExternalScreenIsActive;

@end
