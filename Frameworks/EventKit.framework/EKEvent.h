/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/EventKit.framework/EventKit
 */

@interface EKEvent : EKCalendarItem <EKJunkInvitationProtocol_Private> {
    NSString * _birthdayPersonUniqueID;
    EKStructuredLocation * _cachedLocationPrediction;
    NSDate * _cachedLocationPredictionExpirationDate;
    bool  _locationPredictionFrozen;
    EKReadWriteLock * _locationPredictionLock;
    EKCalendarDate * _occurrenceEndDate;
    bool  _occurrenceIsAllDay;
    EKCalendarDate * _occurrenceStartDate;
    EKCalendarDate * _originalOccurrenceEndDate;
    NSNumber * _originalOccurrenceIsAllDay;
    EKCalendarDate * _originalOccurrenceStartDate;
    bool  _requiresDetachDueToSnoozedAlarm;
}

@property (nonatomic, readonly) NSString *UUID;
@property (getter=isAllDay, nonatomic) bool allDay;
@property (nonatomic, readonly) bool allowsAvailabilityModifications;
@property (nonatomic, readonly) bool allowsParticipationStatusModifications;
@property (nonatomic, readonly) bool allowsPrivacyLevelModifications;
@property (nonatomic, readonly) bool allowsProposedTimeModifications;
@property (nonatomic, readonly) bool allowsTravelTimeModifications;
@property (nonatomic) bool attendeeComment;
@property (nonatomic) bool attendeeReplyChanged;
@property (nonatomic) bool attendeeStatus;
@property (nonatomic, readonly) bool automaticLocationGeocodingAllowed;
@property (nonatomic) long long availability;
@property (nonatomic, readonly) NSString *birthdayContactIdentifier;
@property (nonatomic, readonly) long long birthdayPersonID;
@property (nonatomic, readonly) NSString *birthdayPersonUniqueID;
@property (nonatomic) unsigned long long cachedJunkStatus;
@property (nonatomic, readonly) bool canBeRespondedTo;
@property (nonatomic, readonly) bool canDetachSingleOccurrence;
@property (nonatomic, retain) NSURL *conferenceURL;
@property (nonatomic) bool dateChanged;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double duration;
@property (nonatomic, readonly) double durationIncludingTravel;
@property (nonatomic, readonly) bool eligibleForTravelAdvisories;
@property (nonatomic, readonly) EKCalendarDate *endCalendarDate;
@property (nonatomic, copy) NSDate *endDate;
@property (nonatomic, readonly) struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; } endDateGr;
@property (nonatomic, readonly) NSString *eventIdentifier;
@property (nonatomic, readonly) EKEventStore *eventStore;
@property (nonatomic) int externalTrackingStatus;
@property (nonatomic, readonly) NSURL *externalURL;
@property (nonatomic) bool firedTTL;
@property (nonatomic, readonly) bool hasPredictedLocation;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly, copy) NSDate *initialEndDate;
@property (nonatomic, readonly, copy) NSDate *initialStartDate;
@property (nonatomic) unsigned long long invitationStatus;
@property bool ipsos_allDayPreferred;
@property double ipsos_confidence;
@property (retain) NSArray *ipsos_dataFeatures;
@property bool ipsos_disableTimeAdjustment;
@property (readonly) double ipsos_duration;
@property unsigned long long ipsos_eventAttributes;
@property (retain) IPEventClassificationType *ipsos_eventClassificationType;
@property unsigned long long ipsos_eventStatus;
@property double ipsos_experimentalConfidence;
@property bool ipsos_isDateTimeTenseDependent;
@property bool ipsos_isEndTimeApproximate;
@property bool ipsos_isEventTimeOnlyAndReferrengingToSentDate;
@property bool ipsos_isTimeApproximate;
@property bool ipsos_isTimeOffset;
@property (retain) IPMessageUnit *ipsos_messageUnit;
@property bool ipsos_timeNeedsMeridianGuess;
@property unsigned long long ipsos_usedBubblesCount;
@property bool ipsos_usesDefaultClassificationTypeStartTime;
@property (nonatomic, readonly) bool isAllDayDirty;
@property (nonatomic, readonly) bool isDetached;
@property (nonatomic, readonly) bool isEditable;
@property (nonatomic, readonly) bool isEndDateDirty;
@property (nonatomic, readonly) bool isMaster;
@property (nonatomic) bool isPhantom;
@property (nonatomic, readonly) bool isStartDateDirty;
@property (nonatomic, readonly) bool isStatusDirty;
@property (nonatomic) unsigned long long junkStatus;
@property (nonatomic, readonly) NSURL *launchURL;
@property (nonatomic) bool locationChanged;
@property (nonatomic, readonly) bool locationIsAConferenceRoom;
@property (nonatomic) long long locationPredictionState;
@property (nonatomic, readonly) NSString *locationWithoutPrediction;
@property (nonatomic, retain) NSArray *locations;
@property (nonatomic, readonly) NSArray *locationsWithoutPrediction;
@property (nonatomic, readonly) NSDate *occurrenceDate;
@property (nonatomic, copy) EKCalendarDate *occurrenceEndDate;
@property (nonatomic) bool occurrenceIsAllDay;
@property (nonatomic, copy) EKCalendarDate *occurrenceStartDate;
@property (nonatomic, readonly) EKParticipant *organizer;
@property (nonatomic, copy) EKCalendarDate *originalOccurrenceEndDate;
@property (nonatomic, copy) NSNumber *originalOccurrenceIsAllDay;
@property (nonatomic, copy) EKCalendarDate *originalOccurrenceStartDate;
@property (nonatomic, readonly) NSDate *originalStartDate;
@property (nonatomic) long long participationStatus;
@property (nonatomic, retain) NSDate *participationStatusModifiedDate;
@property (nonatomic, readonly) long long pendingParticipationStatus;
@property (nonatomic, readonly) EKStructuredLocation *preferredLocationWithoutPrediction;
@property (nonatomic) long long privacyLevel;
@property (nonatomic, retain) NSDate *proposedStartDate;
@property (nonatomic) bool requiresDetachDueToSnoozedAlarm;
@property (nonatomic, readonly) bool responseMustApplyToAll;
@property (nonatomic, readonly) NSString *sendersEmail;
@property (nonatomic, readonly) NSString *sendersPhoneNumber;
@property (nonatomic, readonly) EKCalendarDate *startCalendarDate;
@property (nonatomic, readonly) EKCalendarDate *startCalendarDateIncludingTravelTime;
@property (nonatomic, copy) NSDate *startDate;
@property (nonatomic, readonly) struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; } startDateGr;
@property (nonatomic, readonly) NSDate *startDateIncludingTravel;
@property (nonatomic, readonly) long long status;
@property (nonatomic, copy) EKStructuredLocation *structuredLocation;
@property (nonatomic, retain) EKSuggestedEventInfo *suggestionInfo;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsJunkReporting;
@property (nonatomic) bool timeChanged;
@property (nonatomic) bool titleChanged;
@property (nonatomic) long long travelAdvisoryBehavior;
@property (nonatomic, readonly) bool travelAdvisoryBehaviorIsEffectivelyEnabled;
@property (nonatomic, readonly) long long travelRoutingMode;
@property (nonatomic, retain) EKStructuredLocation *travelStartLocation;
@property (nonatomic) double travelTime;

// Image: /System/Library/Frameworks/EventKit.framework/EventKit

+ (long long)_eventAvailabilityForParticipantStatus:(long long)arg1 supportedEventAvailabilities:(unsigned long long)arg2 isAllDayEvent:(bool)arg3;
+ (id)_locationStringForLocations:(id)arg1;
+ (id)eventWithEventStore:(id)arg1;
+ (Class)frozenClass;
+ (id)generateUniqueIDWithEvent:(id)arg1 originalEvent:(id)arg2 calendar:(id)arg3;
+ (id)knownRelationshipMultiValueKeys;
+ (id)knownRelationshipSingleValueKeys;

- (void).cxx_destruct;
- (void)_addNewAttendeesToRecentsIfNeeded;
- (void)_addOrganizerToRecentsIfNeeded;
- (void)_adjustAfterRebaseForMovingFromOldSource:(id)arg1 toNewSource:(id)arg2 committingItem:(id)arg3;
- (void)_adjustForNewCalendarBeforeCommit;
- (void)_applyTimeChangesToMaster;
- (bool)_canWriteConferenceURL;
- (void)_cancelDetachedEventsWithSpan:(long long)arg1;
- (bool)_cancelWithSpan:(long long)arg1 error:(id*)arg2;
- (bool)_checkStartDateConstraintAgainstDate:(struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })arg1 timeZone:(id)arg2 error:(id*)arg3;
- (void)_clearExceptionDatesAndUpdateDetachedOriginalDates;
- (void)_clearLocationPredictionCacheIfNotFrozen;
- (void)_clearLocationPredictionCacheIfNotFrozenHoldingLock;
- (id)_committedStartDate;
- (bool)_couldBeJunkCommon;
- (id)_dateForNextOccurrence;
- (void)_deleteFromOccurrenceDateOnward:(id)arg1;
- (void)_deleteThisOccurrence;
- (bool)_deleteWithSpan:(long long)arg1 error:(id*)arg2;
- (void)_detachWithStartDate:(id)arg1 newStartDate:(id)arg2 future:(bool)arg3;
- (id)_detectConferenceURL;
- (id)_effectiveTimeZone;
- (bool)_eventIsTheOnlyRemainingOccurrence;
- (bool)_fetchedEventIsConflict:(id)arg1 forStartDate:(id)arg2 endDate:(id)arg3;
- (void)_filterExceptionDates;
- (id)_generateNewUniqueID;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })_gregorianDateCorrectedForTimeZoneFromCalendarDate:(id)arg1 orNSDate:(id)arg2;
- (bool)_hasChangesForConferenceURLDetection;
- (bool)_hasExternalIDOrDeliverySource;
- (bool)_invitationChangedPropertyForFlag:(unsigned int)arg1;
- (bool)_isAllDay;
- (bool)_isInitialOccurrenceDate:(id)arg1;
- (bool)_isParticipationStatusDirty;
- (bool)_isSimpleRepeatingEvent;
- (bool)_needsPredictedLocationCacheUpdateHoldingLock;
- (bool)_noRemainingEarlierOccurrences;
- (bool)_occurrenceExistsOnDate:(double)arg1 timeZone:(id)arg2;
- (long long)_parentParticipationStatus;
- (id)_prioritizedConferencesSources;
- (id)_refreshDateForKey:(id)arg1;
- (bool)_reset;
- (void)_sendModifiedNote;
- (void)_setInvitationChangedProperty:(bool)arg1 forFlag:(unsigned int)arg2;
- (void)_setStartDate:(id)arg1 andClearProposedTimes:(bool)arg2;
- (bool)_shouldCancelInsteadOfDeleteWithSpan:(long long)arg1;
- (bool)_shouldDeclineInsteadOfDelete;
- (id)_travelTimeInternalDescription;
- (void)_updateConferenceURL;
- (id)_updateMasterDate:(id)arg1 forChangeToOccurrenceDate:(id)arg2 fromOriginalOccurrenceDate:(id)arg3;
- (id)_updatePredictedLocationCacheIfNeeded;
- (id)_updatePredictedLocationCacheIfNeededHoldingLock;
- (void)_updateSelfFromDetachedEventIfNeededForDelete;
- (bool)_validateAlarmIntervalConstrainedToRecurrenceInterval:(long long)arg1;
- (bool)_validateDatesAndRecurrencesGivenSpan:(long long)arg1 error:(id*)arg2;
- (bool)_validateDurationConstrainedToRecurrenceInterval;
- (void)_willCommit;
- (id)actions;
- (bool)allowsAlarmModifications;
- (bool)allowsAttendeesModifications;
- (bool)allowsAvailabilityModifications;
- (bool)allowsCalendarModifications;
- (bool)allowsParticipationStatusModifications;
- (bool)allowsPrivacyLevelModifications;
- (bool)allowsProposedTimeModifications;
- (bool)allowsRecurrenceModifications;
- (bool)allowsSpansOtherThanThisEvent;
- (bool)allowsTravelTimeModifications;
- (bool)attendeeComment;
- (bool)attendeeReplyChanged;
- (bool)attendeeStatus;
- (bool)automaticLocationGeocodingAllowed;
- (long long)availability;
- (id)birthdayContactIdentifier;
- (long long)birthdayPersonID;
- (id)birthdayPersonUniqueID;
- (unsigned long long)cachedJunkStatus;
- (bool)canBeRespondedTo;
- (bool)canDetachSingleOccurrence;
- (bool)canForward;
- (bool)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id*)arg3;
- (bool)changingAllDayPropertyIsAllowed;
- (void)clearDetectedConferenceURL;
- (void)clearInvitationStatus;
- (bool)commitWithSpan:(long long)arg1 error:(id*)arg2;
- (id)committedCopy;
- (id)committedValueForKey:(id)arg1;
- (long long)compareStartDateIncludingTravelWithEvent:(id)arg1;
- (long long)compareStartDateWithEvent:(id)arg1;
- (id)conferenceURL;
- (id)conferenceURLDetected;
- (id)conferenceURLForDisplay;
- (void)confirmPredictedLocation:(id)arg1;
- (bool)conformsToRecurrenceRules:(id)arg1;
- (bool)couldBeJunk;
- (bool)dateChanged;
- (id)description;
- (double)duration;
- (double)durationIncludingTravel;
- (bool)eligibleForTravelAdvisories;
- (id)endCalendarDate;
- (id)endDate;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })endDateGr;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })endDatePinnedForAllDay;
- (id)endDateRaw;
- (id)eventIdentifier;
- (int)externalTrackingStatus;
- (id)externalURI;
- (id)externalURL;
- (bool)firedTTL;
- (bool)hasAttendeeProposedTimes;
- (bool)hasPredictedLocation;
- (bool)hasSelfAttendee;
- (bool)hasValidEventAction;
- (unsigned long long)hash;
- (id)init;
- (id)initWithEventStore:(id)arg1;
- (id)initWithPersistentObject:(id)arg1;
- (id)initWithPersistentObject:(id)arg1 occurrenceDate:(id)arg2;
- (id)initialEndDate;
- (id)initialStartDate;
- (unsigned long long)invitationStatus;
- (bool)isAllDay;
- (bool)isAllDayDirty;
- (bool)isDetached;
- (bool)isEditable;
- (bool)isEndDateDirty;
- (bool)isEqual:(id)arg1;
- (bool)isFloating;
- (bool)isInvitation;
- (bool)isMaster;
- (bool)isPhantom;
- (bool)isProposedTimeEvent;
- (bool)isStartDateDirty;
- (bool)isStatusDirty;
- (bool)isTentative;
- (unsigned long long)junkStatus;
- (id)launchURL;
- (bool)locationChanged;
- (bool)locationIsAConferenceRoom;
- (long long)locationPredictionState;
- (id)locationWithoutPrediction;
- (id)locations;
- (id)locationsWithoutPrediction;
- (void)markAsSaved;
- (void)markEventAsAttendeeForward;
- (bool)needsOccurrenceCacheUpdate;
- (id)occurrenceDate;
- (id)occurrenceEndDate;
- (bool)occurrenceIsAllDay;
- (id)occurrenceStartDate;
- (id)originalOccurrenceEndDate;
- (id)originalOccurrenceIsAllDay;
- (id)originalOccurrenceStartDate;
- (id)originalStartDate;
- (void)overrideStartDate:(id)arg1;
- (long long)participationStatus;
- (id)participationStatusModifiedDate;
- (long long)pendingParticipationStatus;
- (id)potentialConflictOccurrenceDatesInTimePeriod:(double*)arg1;
- (id)preferredLocationWithoutPrediction;
- (long long)privacyLevel;
- (id)privacyLevelString;
- (id)proposedStartDate;
- (void)rebase;
- (id)recurrenceRule;
- (bool)refresh;
- (void)rejectPredictedLocation;
- (bool)removeWithSpan:(long long)arg1 error:(id*)arg2;
- (bool)requiresDetach;
- (bool)requiresDetachDueToSnoozedAlarm;
- (void)reset;
- (id)responseComment;
- (bool)responseMustApplyToAll;
- (bool)revert;
- (void)rollback;
- (id)scanForConflicts;
- (id)sendersEmail;
- (id)sendersPhoneNumber;
- (bool)serverSupportedProposeNewTime;
- (void)setAllDay:(bool)arg1;
- (void)setAttendeeComment:(bool)arg1;
- (void)setAttendeeStatus:(bool)arg1;
- (void)setAvailability:(long long)arg1;
- (void)setCachedJunkStatus:(unsigned long long)arg1;
- (void)setConferenceURL:(id)arg1;
- (void)setDateChanged:(bool)arg1;
- (void)setEndDate:(id)arg1;
- (void)setEndDateRaw:(id)arg1;
- (void)setExternalTrackingStatus:(int)arg1;
- (void)setFiredTTL:(bool)arg1;
- (void)setInvitationStatus:(unsigned long long)arg1;
- (void)setIsJunk:(bool)arg1 shouldSave:(bool)arg2;
- (void)setIsPhantom:(bool)arg1;
- (void)setJunkStatus:(unsigned long long)arg1;
- (void)setLocationChanged:(bool)arg1;
- (void)setLocationPredictionState:(long long)arg1;
- (void)setLocations:(id)arg1;
- (void)setNeedsOccurrenceCacheUpdate:(bool)arg1;
- (void)setNotes:(id)arg1;
- (void)setNotesCommon:(id)arg1;
- (void)setOccurrenceEndDate:(id)arg1;
- (void)setOccurrenceIsAllDay:(bool)arg1;
- (void)setOccurrenceStartDate:(id)arg1;
- (void)setOriginalOccurrenceEndDate:(id)arg1;
- (void)setOriginalOccurrenceIsAllDay:(id)arg1;
- (void)setOriginalOccurrenceStartDate:(id)arg1;
- (void)setOriginalStartDate:(id)arg1;
- (void)setParticipationStatus:(long long)arg1;
- (void)setParticipationStatusModifiedDate:(id)arg1;
- (void)setPredictedLocationFrozen:(bool)arg1;
- (void)setPrivacyLevel:(long long)arg1;
- (void)setProposedStartDate:(id)arg1;
- (void)setRecurrenceRule:(id)arg1;
- (void)setRequiresDetachDueToSnoozedAlarm:(bool)arg1;
- (void)setResponseComment:(id)arg1;
- (void)setStartDate:(id)arg1;
- (void)setStartDateRaw:(id)arg1;
- (void)setStatus:(long long)arg1;
- (void)setStructuredLocation:(id)arg1;
- (void)setSuggestionInfo:(id)arg1;
- (void)setTimeChanged:(bool)arg1;
- (void)setTimeZone:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitleChanged:(bool)arg1;
- (void)setTravelAdvisoryBehavior:(long long)arg1;
- (void)setTravelTime:(double)arg1;
- (void)setURL:(id)arg1;
- (void)setURLCommon:(id)arg1;
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2;
- (id)startCalendarDate;
- (id)startCalendarDateIncludingTravelTime;
- (id)startDate;
- (id)startDateForRecurrence;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })startDateGr;
- (id)startDateIncludingTravel;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })startDatePinnedForAllDay;
- (id)startDateRaw;
- (long long)status;
- (id)structuredLocation;
- (id)suggestionInfo;
- (bool)supportsJunkReporting;
- (bool)timeChanged;
- (id)title;
- (bool)titleChanged;
- (long long)travelAdvisoryBehavior;
- (bool)travelAdvisoryBehaviorIsEffectivelyEnabled;
- (long long)travelRoutingMode;
- (double)travelTime;
- (id)uniqueId;
- (void)updateConferenceURLIfNeeded;
- (bool)updateEventToEvent:(id)arg1;
- (bool)updateEventToEvent:(id)arg1 commit:(bool)arg2;
- (bool)updateWithGeocodedMapItemAndSaveWithCommit:(id)arg1 eventStore:(id)arg2 error:(id*)arg3;
- (bool)validate:(id*)arg1;
- (bool)validateRecurrenceRule:(id)arg1 error:(id*)arg2;
- (bool)validateWithSpan:(long long)arg1 error:(id*)arg2;

// Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI

- (id)_sortedEKParticipantsForSortingIgnoringNonHumans:(id)arg1;
- (id)attendeesWithoutOrganizerAndLocations;
- (long long)daySpan;
- (bool)hasHumanInviteesToDisplay;
- (id)sortEKParticipantsIgnoringNonHumans:(id)arg1;
- (id)sortedEKAttachmentsDisplayStrings;
- (id)sortedEKParticipantsDisplayStringsIgnoringNonHumans:(id)arg1;

// Image: /System/Library/PrivateFrameworks/CoreSuggestionsInternals.framework/CoreSuggestionsInternals

- (bool)sg_isCuratedEventFromSuggestionNewerThan:(struct SGUnixTimestamp_ { double x1; })arg1;

// Image: /System/Library/PrivateFrameworks/DataDetectorsNaturalLanguage.framework/DataDetectorsNaturalLanguage

- (bool)ipsos_allDayPreferred;
- (id)ipsos_betterDescription;
- (double)ipsos_confidence;
- (id)ipsos_dataFeatures;
- (bool)ipsos_disableTimeAdjustment;
- (double)ipsos_duration;
- (unsigned long long)ipsos_eventAttributes;
- (id)ipsos_eventClassificationType;
- (unsigned long long)ipsos_eventStatus;
- (double)ipsos_experimentalConfidence;
- (bool)ipsos_isDateTimeTenseDependent;
- (bool)ipsos_isEndTimeApproximate;
- (bool)ipsos_isEventTimeOnlyAndReferrengingToSentDate;
- (bool)ipsos_isTimeApproximate;
- (bool)ipsos_isTimeOffset;
- (id)ipsos_messageUnit;
- (bool)ipsos_timeNeedsMeridianGuess;
- (unsigned long long)ipsos_usedBubblesCount;
- (bool)ipsos_usesDefaultClassificationTypeStartTime;
- (void)setIpsos_allDayPreferred:(bool)arg1;
- (void)setIpsos_confidence:(double)arg1;
- (void)setIpsos_dataFeatures:(id)arg1;
- (void)setIpsos_disableTimeAdjustment:(bool)arg1;
- (void)setIpsos_eventAttributes:(unsigned long long)arg1;
- (void)setIpsos_eventClassificationType:(id)arg1;
- (void)setIpsos_eventStatus:(unsigned long long)arg1;
- (void)setIpsos_experimentalConfidence:(double)arg1;
- (void)setIpsos_isDateTimeTenseDependent:(bool)arg1;
- (void)setIpsos_isEndTimeApproximate:(bool)arg1;
- (void)setIpsos_isEventTimeOnlyAndReferrengingToSentDate:(bool)arg1;
- (void)setIpsos_isTimeApproximate:(bool)arg1;
- (void)setIpsos_isTimeOffset:(bool)arg1;
- (void)setIpsos_messageUnit:(id)arg1;
- (void)setIpsos_timeNeedsMeridianGuess:(bool)arg1;
- (void)setIpsos_usedBubblesCount:(unsigned long long)arg1;
- (void)setIpsos_usesDefaultClassificationTypeStartTime:(bool)arg1;

// Image: /System/Library/PrivateFrameworks/PhotoAnalysis.framework/Frameworks/PhotosGraph.framework/Frameworks/MediaMiningKit.framework/MediaMiningKit

- (bool)isBirthday;
- (bool)organizedByMe;

@end
