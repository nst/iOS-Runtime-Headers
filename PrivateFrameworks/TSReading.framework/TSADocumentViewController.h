/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TSReading.framework/TSReading
 */

@interface TSADocumentViewController : TSAViewController <TSDiOSCanvasViewControllerDelegate, TSKChangeSourceObserver, TSKDocumentViewController, TSKFindReplaceDelegate, TSKKeyboardObserver, TSKPopoverBasedViewControllerDelegate, TSWPInteractiveCanvasControllerDelegate, UIActionSheetDelegate> {
    TSKUIAlert * __openDocumentEvictionAlert;
    TSASyncResolveConflictViewController * __openDocumentResolveConflictViewController;
    TSKUIAlert * __openDocumentUpdatedAlert;
    TSDiOSCanvasViewController * _canvasViewController;
    UIButton * _closeButton;
    UIButton * _coachingTipsButton;
    double  _contentFrameAnimationDuration;
    TSADebugViewController * _debugViewController;
    TIADocument * _document;
    long long  _documentMode;
    long long  _documentModeBeforeReplaceController;
    bool  _documentModeChangeInProgress;
    UIButton * _doneButton;
    bool  _editMenuTapGRWasEnabledForFind;
    TSAFindReplaceUIController * _findReplaceUIController;
    double  _footerHeightPadding;
    long long  _helpViewVisibleState;
    bool  _inspectorIsCompletelyVisible;
    TSAInteractiveCanvasController * _interactiveCanvasController;
    bool  _isAbandoningDocument;
    bool  _isClosingDocument;
    bool  _isDocumentLoaded;
    bool  _isHidingStatusBar;
    bool  _isLandscapeOrientation;
    bool  _isPopoverGestureInFlight;
    bool  _isPrintingDocument;
    double  _keyboardHeight;
    bool  _navigatorHidden;
    <TSANavigatorViewController> * _navigatorViewController;
    TSKUIAlert * _openDocumentKeepOrDeleteAlert;
    bool  _preventDocumentModeChangesDuringSelectionChanges;
    bool  _printerOptionsShowing;
    bool  _registered;
    bool  _scheduledBackgroundInit;
    TSDScrollView * _scrollView;
    bool  _settingDocumentMode;
    UIButton * _sharingButton;
    bool  _shouldShowInstructionalText;
    bool  _waitingToZoomOut;
    double  mSavedCanvasViewScale;
    struct CGPoint { 
        double x; 
        double y; 
    }  mSavedContentOffset;
}

@property (nonatomic, readonly) NSArray *CJKLanguages;
@property (nonatomic, retain) TSKUIAlert *_openDocumentEvictionAlert;
@property (nonatomic, retain) TSASyncResolveConflictViewController *_openDocumentResolveConflictViewController;
@property (setter=_setOpenDocumentUpdatedAlert:, nonatomic, retain) TSKUIAlert *_openDocumentUpdatedAlert;
@property (nonatomic, readonly) bool allowEditMenuToAppear;
@property (nonatomic, readonly) bool allowImagePickerToAppear;
@property (nonatomic, readonly) bool allowTextEditingToBegin;
@property (nonatomic, readonly) NSArray *bidiLanguages;
@property (nonatomic, readonly) UIScrollView *canvasScrollView;
@property (nonatomic, retain) TSDiOSCanvasViewController *canvasViewController;
@property (nonatomic, readonly) bool chartDataEditorShowing;
@property (nonatomic, readonly) NSString *closeDocumentButtonTitle;
@property (nonatomic, readonly) UIButton *coachingTipsButton;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) TSADebugViewController *debugViewController;
@property (nonatomic, retain) TSAInteractiveCanvasController *defaultInteractiveCanvasController;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool displaySharingButton;
@property (nonatomic, readonly, retain) TIADocument *document;
@property (nonatomic) long long documentMode;
@property (nonatomic, readonly, retain) TSADocumentRoot *documentRoot;
@property (nonatomic) bool editMenuTapGRWasEnabledForFind;
@property (nonatomic, readonly) TSAFindReplaceUIController *findReplaceUIController;
@property (readonly) unsigned long long hash;
@property (getter=isHidingStatusBar, nonatomic) bool hidingStatusBar;
@property (nonatomic, retain) TSAInteractiveCanvasController *interactiveCanvasController;
@property (nonatomic, readonly) bool interactiveCanvasControllerAllowsHyperlinkInteraction;
@property (nonatomic, readonly) bool isBiDiEnabled;
@property (nonatomic, readonly) bool isCJKEnabled;
@property (nonatomic, readonly) bool isCanvasFullScreen;
@property (nonatomic, readonly) bool isCanvasInteractive;
@property (nonatomic, readonly) bool isClosingDocument;
@property (nonatomic, readonly) bool isDocumentLoaded;
@property (nonatomic) bool isLandscapeOrientation;
@property (nonatomic, readonly) bool isPopoverGestureInFlight;
@property (nonatomic, readonly) bool isPrintingCanvas;
@property (nonatomic, readonly) bool isPrintingDocument;
@property (nonatomic, readonly) NSArray *listLanguages;
@property (nonatomic, readonly) double modalToolbarTitleBaselineOffset;
@property (nonatomic, readonly) long long modalToolbarTitleBaselineOffsetBarMetrics;
@property (nonatomic, retain) <TSANavigatorViewController> *navigatorViewController;
@property (nonatomic, retain) TSKUIAlert *openDocumentKeepOrDeleteAlert;
@property (nonatomic, readonly) bool preventDocumentModeChangesDuringSelectionChanges;
@property (nonatomic) bool printerOptionsShowing;
@property (nonatomic, readonly) UIButton *sharingButton;
@property (nonatomic, readonly) bool shouldClipToScrollViewBoundsInVisibleBounds;
@property (nonatomic, readonly) bool shouldPopKnobsOutsideEnclosingScrollView;
@property (nonatomic, readonly) bool shouldResizeCanvasToScrollView;
@property (nonatomic, readonly) bool shouldShowInstructionalText;
@property (nonatomic, readonly) bool shouldShowTextOverflowGlyphs;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } sizeOfScrollViewEnclosingCanvas;
@property (nonatomic, readonly) bool spellCheckingSupported;
@property (nonatomic, readonly) bool spellCheckingSuppressed;
@property (readonly) Class superclass;
@property (nonatomic, readonly) double viewHeaderHeight;

+ (void)resetLastDocumentMode;

- (id)CJKLanguages;
- (id)_openDocumentEvictionAlert;
- (id)_openDocumentResolveConflictViewController;
- (id)_openDocumentUpdatedAlert;
- (void)_setOpenDocumentUpdatedAlert:(id)arg1;
- (void)abandonDocument;
- (void)adjustContentViewFrame;
- (void)adjustScrollViewInsets;
- (bool)allowEditMenuToAppear;
- (bool)allowImagePickerToAppear;
- (bool)allowTextEditingToBegin;
- (id)alternativeOpenCloseDocumentAnimationView;
- (void)asyncProcessChanges:(id)arg1 forChangeSource:(id)arg2;
- (double)autoZoomAnimationDurationForInteractiveCanvasController:(id)arg1;
- (void)backgroundInit;
- (id)bidiLanguages;
- (void)canvasEditorDidChangeSelection:(id)arg1;
- (id)canvasScrollView;
- (id)canvasViewController;
- (void)canvasWillEndEditingToBeginEditingRep:(id)arg1;
- (bool)chartDataEditorShowing;
- (id)childViewControllerForStatusBarStyle;
- (struct CGPoint { double x1; double x2; })clampedUnscaledContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (id)closeDocumentButton;
- (id)closeDocumentButtonTitle;
- (void)closeDocumentPressed;
- (id)coachingTipsButton;
- (void)commitChartDataEditorEdits;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentFrame;
- (id)contentView;
- (void)deRegisterForCanvasEditorNotifications;
- (void)dealloc;
- (id)debugViewController;
- (long long)defaultDocumentMode;
- (id)defaultInteractiveCanvasController;
- (void)didEnterBackground;
- (void)didReceiveMemoryWarning;
- (void)didReplaceDocument;
- (void)didSetContentViewFrame;
- (void)didSetDocumentToMode:(long long)arg1 fromMode:(long long)arg2 animated:(bool)arg3;
- (void)didStopCloseDocumentAnimation;
- (void)didStopLaunchDocumentAnimation;
- (void)didStopOpenDocumentAnimation;
- (void)dismissChartDataEditor:(id)arg1;
- (bool)displaySharingButton;
- (id)document;
- (long long)documentMode;
- (id)documentRoot;
- (void)documentWillClose;
- (void)documentWillCloseAfterError;
- (id)drawableFactory;
- (bool)editMenuTapGRWasEnabledForFind;
- (void)editorDidChangeSelection:(id)arg1;
- (double)externalKeyboardHideMinDuration;
- (id)findReplaceUIController;
- (void)forceChartDataEditorToCloseWithSave:(bool)arg1;
- (void)hideSharedUIPanelsForReadMode;
- (bool)inFindReplaceMode;
- (bool)inPrintPreviewMode;
- (id)initWithDefaultView;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (bool)insertControllerIsVisible;
- (void)insertedDrawableInfoDidFinishDragging:(id)arg1;
- (id)interactiveCanvasController;
- (void)interactiveCanvasController:(id)arg1 willAnimateToViewScale:(double)arg2 withDuration:(double)arg3 unscaledContentOffset:(struct CGPoint { double x1; double x2; })arg4;
- (void)interactiveCanvasControllerDidUpdateLayersFromReps:(id)arg1;
- (bool)isBiDiEnabled;
- (bool)isCJKEnabled;
- (bool)isCanvasFullScreen;
- (bool)isCanvasInteractive;
- (bool)isClosingDocument;
- (bool)isDocumentLoaded;
- (bool)isHidingStatusBar;
- (bool)isInspectorVisible;
- (bool)isKeyboardUp;
- (bool)isLandscapeOrientation;
- (bool)isLayoutBelowApplicationToolbar;
- (bool)isPopoverGestureInFlight;
- (bool)isPrintingCanvas;
- (bool)isPrintingDocument;
- (void)keyboardDidHideOrUndock:(id)arg1;
- (void)keyboardShowCanceled;
- (void)keyboardWillHideOrUndock:(id)arg1;
- (void)keyboardWillShowOrDock:(id)arg1;
- (long long)lastDocumentMode;
- (double)leftToolbarItemsInset;
- (id)listLanguages;
- (void)loadDocument;
- (id)mainInteractiveCanvasController;
- (double)mainToolsMenuMinimumHeight;
- (double)modalToolbarTitleBaselineOffset;
- (long long)modalToolbarTitleBaselineOffsetBarMetrics;
- (void)navigatePlay:(id)arg1;
- (bool)navigatorHiddenDefault;
- (id)navigatorViewController;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)openCloseAnimationAlternativeView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })openCloseAnimationCanvasFrame;
- (id)openDocumentKeepOrDeleteAlert;
- (id)p_arrayByAddingLanguage:(id)arg1 toArray:(id)arg2;
- (void)p_backgroundInit;
- (void)p_deregisterForNotifications;
- (long long)p_documentModeToRestoreFor:(long long)arg1;
- (void)p_editingCellDidChange:(id)arg1;
- (void)p_restoreTextSelectionAfterModalDismiss;
- (void)p_scrollToCurrentSelection;
- (void)p_scrollToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)p_setDocumentMode:(long long)arg1 animated:(bool)arg2 dismissOnTop:(bool)arg3;
- (bool)p_shouldZoomOutForCurrentSelection;
- (bool)p_shouldZoomOutFromTable;
- (void)p_startBackgroundInit;
- (void)p_teardown;
- (void)p_willEnterFullScreen:(id)arg1;
- (void)p_zoomOutForCurrentSelection;
- (double)paddingAboveChartDataEditor:(id)arg1;
- (double)paddingAboveHalfHeightAtTopOfScreen;
- (void)performCloseDocumentAnimation;
- (void)performOpenDocumentAnimation;
- (void)popoverController:(id)arg1 learnMoreAPDIDTapped:(id)arg2;
- (bool)popoverController:(id)arg1 shouldReceiveOutsideTouchAtLocation:(struct CGPoint { double x1; double x2; })arg2 inView:(id)arg3;
- (void)popoverControllerDidDismissPopoverBasedViewController:(id)arg1;
- (void)prepareCloseDocumentAnimation;
- (void)prepareOpenDocumentAnimation;
- (bool)preserveScrollViewClipping;
- (bool)preventDocumentModeChangesDuringSelectionChanges;
- (bool)printerOptionsShowing;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForPopoverFromToolbarButton:(id)arg1;
- (id)rectanglesObscuringView:(id)arg1;
- (void)registerForCanvasEditorNotifications;
- (double)rightToolbarItemsInset;
- (void)scrollToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCanvasScrollViewClipsToBoundsForKeyboardAnimation:(bool)arg1;
- (void)setCanvasViewController:(id)arg1;
- (void)setDefaultInteractiveCanvasController:(id)arg1;
- (void)setDocument:(id)arg1;
- (void)setDocumentMode:(long long)arg1;
- (void)setDocumentMode:(long long)arg1 animated:(bool)arg2;
- (void)setDocumentMode:(long long)arg1 animated:(bool)arg2 dismissOnTop:(bool)arg3;
- (void)setDocumentUnloaded;
- (void)setEditMenuTapGRWasEnabledForFind:(bool)arg1;
- (void)setHidingStatusBar:(bool)arg1;
- (void)setInteractiveCanvasController:(id)arg1;
- (void)setIsLandscapeOrientation:(bool)arg1;
- (void)setLastDocumentMode:(long long)arg1;
- (void)setNavigatorHiddenDefault:(bool)arg1;
- (void)setNavigatorViewController:(id)arg1;
- (void)setOpenDocumentKeepOrDeleteAlert:(id)arg1;
- (void)setPrinterOptionsShowing:(bool)arg1;
- (void)setSelection:(id)arg1 onModel:(id)arg2 withFlags:(unsigned long long)arg3;
- (void)set_openDocumentEvictionAlert:(id)arg1;
- (void)set_openDocumentResolveConflictViewController:(id)arg1;
- (id)sharingButton;
- (bool)shouldAdjustContentFrameWhileRotating;
- (bool)shouldAutoscrollToSelectionOnContentViewSizeChange;
- (bool)shouldIgnoreTextGestures;
- (bool)shouldShowInstructionalText;
- (bool)shouldShowTextOverflowGlyphs;
- (bool)showEditMenuOnChartInsert;
- (void)showInsertPopoverFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 popoverType:(int)arg2 withDoneButton:(bool)arg3;
- (void)showPlaceholderTools:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeOfScrollViewEnclosingCanvas;
- (id)superviewForChartDataEditor:(id)arg1;
- (bool)tappedCanvasBackgroundAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)teardown;
- (bool)teardownAppUIForDocumentManagerAction;
- (id)title;
- (double)toolbarSpaceWidth;
- (double)toolbarTextButtonSpaceWidth;
- (bool)toolsControllerIsVisible;
- (void)toolsFindReplace;
- (void)unloadDocument;
- (bool)useToolBarHeightForSetDocumentMode;
- (float)viewBottomInScreenCoordinates;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLoad;
- (double)viewHeaderHeight;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })visibleRootIndexRange;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleScaledCanvasRectWithoutKeyboard;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleUnscaledCanvasRectWithoutKeyboard;
- (bool)willChangeContentOffsetIfKeyboardHidden;
- (void)willEnterForeground;
- (void)willInsertDrawable;
- (void)willReplaceDocument;
- (void)willSetDocumentToMode:(long long)arg1 fromMode:(long long)arg2 animated:(bool)arg3;
- (void)willSetupApplicationToolbar;
- (bool)zoomOnSelectionChange:(id)arg1;
- (void)zoomOutAnimated:(bool)arg1;

@end
