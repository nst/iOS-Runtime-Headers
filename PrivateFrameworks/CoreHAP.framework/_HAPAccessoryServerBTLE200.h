/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP
 */

@interface _HAPAccessoryServerBTLE200 : HAPAccessoryServerBTLE <CBPeripheralDelegate, HAPBTLEControlOutputStreamDelegate, HAPPairSetupSessionClientDelegate, HAPSecuritySessionDelegate, HMFTimerDelegate> {
    bool  _badPairSetupCode;
    NSMapTable * _characteristicEnableEventCompletionHandlers;
    NSMapTable * _characteristicWriteCompletionHandlers;
    NSOperationQueue * _clientOperationQueue;
    id  _connectionCompletionHandler;
    HMFTimer * _connectionIdleTimer;
    long long  _connectionState;
    _HAPBTLEDiscoveryContext * _discoveryContext;
    HAPCharacteristic * _identifyCharacteristic;
    double  _pairSetupBackoffTimeInterval;
    HAPCharacteristic * _pairSetupCharacteristic;
    HAPPairSetupSession * _pairSetupSession;
    HAPCharacteristic * _pairVerifyCharacteristic;
    NSOperationQueue * _pairVerifyOperationQueue;
    bool  _pairing;
    HAPCharacteristic * _pairingFeaturesCharacteristic;
    HAPCharacteristic * _pairingsCharacteristic;
    NSMutableArray * _pendingRequests;
    NSMutableArray * _pendingResponses;
    NSOperationQueue * _requestOperationQueue;
    HAPSecuritySession * _securitySession;
    id  _setupCodeCompletionHandler;
    bool  _supportsMFiPairSetup;
    bool  _verified;
}

@property (getter=isBadSetupCode, nonatomic) bool badPairSetupCode;
@property (nonatomic, readonly) NSMapTable *characteristicEnableEventCompletionHandlers;
@property (nonatomic, readonly) NSMapTable *characteristicWriteCompletionHandlers;
@property (nonatomic, readonly) NSOperationQueue *clientOperationQueue;
@property (nonatomic, copy) id connectionCompletionHandler;
@property (nonatomic, retain) HMFTimer *connectionIdleTimer;
@property (nonatomic) long long connectionState;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) _HAPBTLEDiscoveryContext *discoveryContext;
@property (readonly) unsigned long long hash;
@property (nonatomic) HAPCharacteristic *identifyCharacteristic;
@property (nonatomic) double pairSetupBackoffTimeInterval;
@property (nonatomic) HAPCharacteristic *pairSetupCharacteristic;
@property (nonatomic, retain) HAPPairSetupSession *pairSetupSession;
@property (nonatomic) HAPCharacteristic *pairVerifyCharacteristic;
@property (nonatomic, readonly) NSOperationQueue *pairVerifyOperationQueue;
@property (getter=isPairing, nonatomic) bool pairing;
@property (nonatomic) HAPCharacteristic *pairingFeaturesCharacteristic;
@property (nonatomic) HAPCharacteristic *pairingsCharacteristic;
@property (nonatomic, readonly) NSMutableArray *pendingRequests;
@property (nonatomic, readonly) NSMutableArray *pendingResponses;
@property (nonatomic, readonly) NSOperationQueue *requestOperationQueue;
@property (nonatomic, retain) HAPSecuritySession *securitySession;
@property (nonatomic, copy) id setupCodeCompletionHandler;
@property (readonly) Class superclass;
@property (nonatomic) bool supportsMFiPairSetup;
@property (getter=isVerified, nonatomic) bool verified;

+ (id)executeWriteRequestForCharacteristic:(id)arg1 options:(long long)arg2 error:(id*)arg3;
+ (bool)isHAPDescriptor:(id)arg1;
+ (bool)isHAPService:(id)arg1;
+ (bool)parseReadResponse:(id)arg1 value:(id*)arg2 error:(id*)arg3;
+ (id)parseServiceSignatureResponse:(id)arg1 serviceInstanceID:(id)arg2 serviceType:(id)arg3 error:(id*)arg4;
+ (id)parseSignatureResponse:(id)arg1 error:(id*)arg2;
+ (bool)parseWriteResponse:(id)arg1 value:(id*)arg2 error:(id*)arg3;
+ (id)prepareWriteRequestForCharacteristic:(id)arg1 value:(id)arg2 authorizationData:(id)arg3 options:(long long)arg4 error:(id*)arg5;
+ (id)readRequestForCharacteristic:(id)arg1 options:(long long)arg2 error:(id*)arg3;
+ (id)signatureRequestForCharacteristic:(id)arg1 requiresAuthentication:(bool)arg2 error:(id*)arg3;
+ (id)signatureRequestForService:(id)arg1 characteristic:(id)arg2 requiresAuthentication:(bool)arg3 error:(id*)arg4;
+ (id)writeRequestForCharacteristic:(id)arg1 value:(id)arg2 authorizationData:(id)arg3 options:(long long)arg4 error:(id*)arg5;

- (void).cxx_destruct;
- (void)_cancelAllQueuedOperationsWithError:(id)arg1;
- (void)_cancelConnectionWithError:(id)arg1;
- (void)_cancelDiscoveryWithError:(id)arg1;
- (id)_characteristicForCBCharacteristic:(id)arg1;
- (void)_checkForAuthPrompt;
- (void)_createPrimaryAccessoryFromAdvertisementData;
- (id)_decryptData:(id)arg1 error:(id*)arg2;
- (bool)_delegateRespondsToSelector:(SEL)arg1;
- (void)_discoverCharacteristic:(id)arg1;
- (void)_discoverService:(id)arg1;
- (void)_discoverServices;
- (void)_discoverWithType:(long long)arg1 completionHandler:(id)arg2;
- (void)_enableEvent:(bool)arg1 forCharacteristic:(id)arg2 withCompletionHandler:(id)arg3 queue:(id)arg4;
- (void)_enableEvent:(bool)arg1 toCharacteristic:(id)arg2 completionHandler:(id)arg3;
- (void)_enableEvents:(bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(id)arg3 queue:(id)arg4;
- (id)_encryptDataAndGenerateAuthTag:(id)arg1 error:(id*)arg2;
- (void)_enqueueRequest:(id)arg1;
- (void)_establishSecureSession;
- (id)_getCharacteristicInstanceID:(id)arg1 error:(id*)arg2;
- (void)_getPairingFeaturesWithCompletionHandler:(id)arg1;
- (id)_getServiceInstanceID:(id)arg1;
- (void)_handleCompletedDiscovery;
- (void)_handleConnectionIdleTimeout;
- (void)_handleDiscoveredCharactersitic:(id)arg1 error:(id)arg2;
- (void)_handleDiscoveredService:(id)arg1 error:(id)arg2;
- (void)_handleDiscoveredServices:(id)arg1 error:(id)arg2;
- (void)_handleEventIndicationForCharacteristic:(id)arg1;
- (void)_handleHAPNotificationStateUpdateForCharacteristic:(id)arg1 error:(id)arg2;
- (void)_handlePairSetupSessionExchangeData:(id)arg1;
- (void)_handlePairingSetupCodeRequestWithCompletionHandler:(id)arg1;
- (void)_handleReadCharacteristicSignature:(id)arg1 error:(id)arg2;
- (void)_handleReadCharacteristicValue:(id)arg1 error:(id)arg2;
- (void)_handleReadDescriptorValue:(id)arg1 error:(id)arg2;
- (void)_handleReadServiceInstanceId:(id)arg1;
- (void)_handleReadServiceSignature:(id)arg1 error:(id)arg2;
- (void)_handleResponseData:(id)arg1 fromCharacteristic:(id)arg2 error:(id)arg3;
- (void)_handleSecuritySessionSetupExchangeData:(id)arg1;
- (void)_handleWriteCompletionForCharacteristic:(id)arg1 error:(id)arg2;
- (void)_kickConnectionIdleTimer;
- (unsigned long long)_maximumControlWriteLengthForRequest:(id)arg1;
- (void)_notifyDelegateOfReceivedEncryptedAuthenticatedData:(id)arg1 forCharacteristic:(id)arg2;
- (void)_notifyDelegateOfReceivedPlaintextData:(id)arg1 forCharacteristic:(id)arg2;
- (void)_notifyDelegateOfSentEncryptedAuthenticatedData:(id)arg1 forCharacteristic:(id)arg2;
- (void)_notifyDelegateOfSentPlaintextData:(id)arg1 forCharacteristic:(id)arg2;
- (unsigned long long)_outstandingRequests;
- (void)_pairingCompletedWithError:(id)arg1;
- (id)_parseCharacteristic:(id)arg1 error:(id*)arg2;
- (bool)_parsePairingFeaturesCharacteristic:(id)arg1 supportsMFiPairSetup:(bool*)arg2 error:(id*)arg3;
- (id)_parseService:(id)arg1 error:(id*)arg2;
- (id)_pendingRequestForCharacteristic:(id)arg1;
- (id)_pendingResponseForRequest:(id)arg1;
- (void)_performEnableEvent:(bool)arg1 toCharacteristic:(id)arg2 completionHandler:(id)arg3;
- (void)_performTimedWriteExecuteForCharacteristic:(id)arg1 value:(id)arg2 options:(long long)arg3 completionHandler:(id)arg4;
- (void)_performTimedWritePrepareWithValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 options:(long long)arg4 completionHandler:(id)arg5;
- (void)_performTimedWriteValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 options:(long long)arg4 completionHandler:(id)arg5;
- (void)_performWriteValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 options:(long long)arg4 completionHandler:(id)arg5;
- (void)_readCharacteristicSignature:(id)arg1;
- (void)_readCharacteristicSignatures;
- (void)_readCharacteristicValue:(id)arg1;
- (void)_readCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(id)arg3;
- (void)_readDescriptorValue:(id)arg1;
- (void)_readServiceSignature:(id)arg1;
- (void)_readValueForCharacteristic:(id)arg1 options:(long long)arg2 completionHandler:(id)arg3;
- (void)_reallySendRequest:(id)arg1 completionHandler:(id)arg2;
- (void)_requestResponseForRequest:(id)arg1;
- (void)_resetWithError:(id)arg1;
- (void)_restartConnectionIdleTimer:(double)arg1;
- (void)_resumeAllOperations;
- (void)_resumeConnectionIdleTimer;
- (void)_retryDiscovery;
- (void)_sendControlPacket:(id)arg1 forRequest:(id)arg2 completionHandler:(id)arg3;
- (void)_sendData:(id)arg1 toCharacteristic:(id)arg2 completionHandler:(id)arg3;
- (void)_sendPairingRequestData:(id)arg1 completionHandler:(id)arg2;
- (void)_sendRequest:(id)arg1 completionHandler:(id)arg2;
- (id)_serviceForCBService:(id)arg1;
- (void)_suspendAllOperations;
- (void)_suspendConnectionIdleTimer;
- (void)_updateConnectionIdleTime:(unsigned char)arg1;
- (void)_writeValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 options:(long long)arg4 completionHandler:(id)arg5;
- (bool)addPairingWithIdentifier:(id)arg1 publicKey:(id)arg2 admin:(bool)arg3 queue:(id)arg4 completion:(id)arg5;
- (id)characteristicEnableEventCompletionHandlers;
- (id)characteristicWriteCompletionHandlers;
- (id)clientOperationQueue;
- (void)connectWithCompletionHandler:(id)arg1;
- (id)connectionCompletionHandler;
- (id)connectionIdleTimer;
- (long long)connectionState;
- (void)continuePairingAfterAuthPrompt;
- (void)controlOutputStream:(id)arg1 didCloseWithError:(id)arg2;
- (void)controlOutputStream:(id)arg1 didReceiveRequestToSendControlPacket:(id)arg2 completionHandler:(id)arg3;
- (void)controlOutputStreamDidComplete:(id)arg1;
- (void)controlOutputStreamDidOpen:(id)arg1;
- (void)dealloc;
- (id)debugDescription;
- (id)description;
- (id)descriptionWithPointer:(bool)arg1;
- (void)disconnectWithCompletionHandler:(id)arg1;
- (void)discoverAccessories;
- (id)discoveryContext;
- (void)enableEvents:(bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(id)arg3 queue:(id)arg4;
- (id)getLocalPairingIdentityAndAllowCreation:(bool)arg1 error:(id*)arg2;
- (void)handleConnectionWithError:(id)arg1;
- (void)handleDisconnectionWithError:(id)arg1 completionQueue:(id)arg2 completionHandler:(id)arg3;
- (unsigned long long)hapBLEProtocolVersion;
- (id)identifyCharacteristic;
- (void)identifyWithCompletion:(id)arg1;
- (id)initWithPeripheral:(id)arg1 name:(id)arg2 pairingUsername:(id)arg3 statusFlags:(id)arg4 stateNumber:(id)arg5 stateChanged:(bool)arg6 configNumber:(id)arg7 category:(id)arg8 connectionIdleTime:(unsigned char)arg9 browser:(id)arg10 keyStore:(id)arg11;
- (bool)isBadSetupCode;
- (bool)isHAPCharacteristic:(id)arg1;
- (bool)isPairing;
- (bool)isSecuritySessionOpen;
- (bool)isVerified;
- (void)listPairingsWithCompletionQueue:(id)arg1 completionHandler:(id)arg2;
- (void)markNotifyingCharacteristicUpdatedforCharacteristic:(id)arg1;
- (double)pairSetupBackoffTimeInterval;
- (id)pairSetupCharacteristic;
- (id)pairSetupSession;
- (bool)pairSetupSession:(id)arg1 didPairWithPeer:(id)arg2 error:(id*)arg3;
- (bool)pairSetupSession:(id)arg1 didReceiveBackoffRequestWithTimeInterval:(double)arg2;
- (id)pairSetupSession:(id)arg1 didReceiveLocalPairingIdentityRequestWithError:(id*)arg2;
- (void)pairSetupSession:(id)arg1 didReceiveSetupCodeRequestWithCompletionHandler:(id)arg2;
- (void)pairSetupSession:(id)arg1 didReceiveSetupExchangeData:(id)arg2;
- (void)pairSetupSession:(id)arg1 didStopWithError:(id)arg2;
- (void)pairSetupSessionDidReceiveInvalidSetupCode:(id)arg1;
- (id)pairVerifyCharacteristic;
- (id)pairVerifyOperationQueue;
- (id)pairingFeaturesCharacteristic;
- (id)pairingsCharacteristic;
- (id)pendingRequests;
- (id)pendingResponses;
- (void)peripheral:(id)arg1 didDiscoverCharacteristicsForService:(id)arg2 error:(id)arg3;
- (void)peripheral:(id)arg1 didDiscoverDescriptorsForCharacteristic:(id)arg2 error:(id)arg3;
- (void)peripheral:(id)arg1 didDiscoverServices:(id)arg2;
- (void)peripheral:(id)arg1 didModifyServices:(id)arg2;
- (void)peripheral:(id)arg1 didUpdateNotificationStateForCharacteristic:(id)arg2 error:(id)arg3;
- (void)peripheral:(id)arg1 didUpdateValueForCharacteristic:(id)arg2 error:(id)arg3;
- (void)peripheral:(id)arg1 didUpdateValueForDescriptor:(id)arg2 error:(id)arg3;
- (void)peripheral:(id)arg1 didWriteValueForCharacteristic:(id)arg2 error:(id)arg3;
- (void)readCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(id)arg4;
- (bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(id)arg2;
- (bool)removePairingWithIdentifier:(id)arg1 publicKey:(id)arg2 queue:(id)arg3 completion:(id)arg4;
- (id)requestOperationQueue;
- (id)securitySession;
- (void)securitySession:(id)arg1 didCloseWithError:(id)arg2;
- (id)securitySession:(id)arg1 didReceiveLocalPairingIdentityRequestWithError:(id*)arg2;
- (id)securitySession:(id)arg1 didReceiveRequestForPeerPairingIdentityWithIdentifier:(id)arg2 error:(id*)arg3;
- (void)securitySession:(id)arg1 didReceiveSetupExchangeData:(id)arg2;
- (void)securitySessionDidOpen:(id)arg1;
- (void)securitySessionIsOpening:(id)arg1;
- (void)setBadPairSetupCode:(bool)arg1;
- (void)setConnectionCompletionHandler:(id)arg1;
- (void)setConnectionIdleTimer:(id)arg1;
- (void)setConnectionState:(long long)arg1;
- (void)setDiscoveryContext:(id)arg1;
- (void)setIdentifyCharacteristic:(id)arg1;
- (void)setPairSetupBackoffTimeInterval:(double)arg1;
- (void)setPairSetupCharacteristic:(id)arg1;
- (void)setPairSetupSession:(id)arg1;
- (void)setPairVerifyCharacteristic:(id)arg1;
- (void)setPairing:(bool)arg1;
- (void)setPairingFeaturesCharacteristic:(id)arg1;
- (void)setPairingsCharacteristic:(id)arg1;
- (void)setSecuritySession:(id)arg1;
- (void)setSecuritySessionOpen:(bool)arg1;
- (void)setSetupCodeCompletionHandler:(id)arg1;
- (void)setSupportsMFiPairSetup:(bool)arg1;
- (void)setVerified:(bool)arg1;
- (id)setupCodeCompletionHandler;
- (id)shortDescription;
- (bool)shouldVerifyHAPCharacteristic:(id)arg1;
- (bool)shouldVerifyHAPService:(id)arg1;
- (void)startPairing;
- (bool)stopPairingWithError:(id*)arg1;
- (bool)supportsMFiPairSetup;
- (void)timerDidFire:(id)arg1;
- (bool)tryPairingPassword:(id)arg1 error:(id*)arg2;
- (void)updateConnectionIdleTime:(unsigned char)arg1;
- (void)writeCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(id)arg4;

@end
