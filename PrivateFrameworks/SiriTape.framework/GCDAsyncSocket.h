/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SiriTape.framework/SiriTape
 */

@interface GCDAsyncSocket : NSObject {
    void * IsOnSocketQueueOrTargetQueueKey;
    NSObject<OS_dispatch_source> * accept4Source;
    NSObject<OS_dispatch_source> * accept6Source;
    unsigned short  config;
    NSData * connectInterface4;
    NSData * connectInterface6;
    NSObject<OS_dispatch_source> * connectTimer;
    GCDAsyncReadPacket * currentRead;
    GCDAsyncWritePacket * currentWrite;
    id  delegate;
    NSObject<OS_dispatch_queue> * delegateQueue;
    unsigned int  flags;
    GCDAsyncSocketPreBuffer * preBuffer;
    NSMutableArray * readQueue;
    NSObject<OS_dispatch_source> * readSource;
    struct __CFReadStream { } * readStream;
    NSObject<OS_dispatch_source> * readTimer;
    int  socket4FD;
    int  socket6FD;
    unsigned long long  socketFDBytesAvailable;
    NSObject<OS_dispatch_queue> * socketQueue;
    struct SSLContext { } * sslContext;
    int  sslErrCode;
    GCDAsyncSocketPreBuffer * sslPreBuffer;
    unsigned long long  sslWriteCachedLength;
    int  stateIndex;
    struct { 
        long long version; 
        void *info; 
        int (*retain)(); 
        int (*release)(); 
        int (*copyDescription)(); 
    }  streamContext;
    id  userData;
    NSMutableArray * writeQueue;
    NSObject<OS_dispatch_source> * writeSource;
    struct __CFWriteStream { } * writeStream;
    NSObject<OS_dispatch_source> * writeTimer;
}

@property (getter=isIPv4Enabled) bool IPv4Enabled;
@property (getter=isIPv4PreferredOverIPv6) bool IPv4PreferredOverIPv6;
@property (getter=isIPv6Enabled) bool IPv6Enabled;
@property bool autoDisconnectOnClosedReadStream;
@property (readonly) NSData *connectedAddress;
@property (readonly) NSString *connectedHost;
@property (readonly) unsigned short connectedPort;
@property id delegate;
@property (retain) NSObject<OS_dispatch_queue> *delegateQueue;
@property (readonly) bool isConnected;
@property (readonly) bool isDisconnected;
@property (readonly) bool isIPv4;
@property (readonly) bool isIPv6;
@property (readonly) bool isSecure;
@property (readonly) NSData *localAddress;
@property (readonly) NSString *localHost;
@property (readonly) unsigned short localPort;
@property (retain) id userData;

+ (id)CRData;
+ (id)CRLFData;
+ (id)LFData;
+ (id)ZeroData;
+ (void)cfstreamThread;
+ (id)gaiError:(int)arg1;
+ (bool)getHost:(id*)arg1 port:(unsigned short*)arg2 family:(char *)arg3 fromAddress:(id)arg4;
+ (bool)getHost:(id*)arg1 port:(unsigned short*)arg2 fromAddress:(id)arg3;
+ (id)hostFromAddress:(id)arg1;
+ (id)hostFromSockaddr4:(const struct sockaddr_in { unsigned char x1; unsigned char x2; unsigned short x3; struct in_addr { unsigned int x_4_1_1; } x4; BOOL x5[8]; }*)arg1;
+ (id)hostFromSockaddr6:(const struct sockaddr_in6 { unsigned char x1; unsigned char x2; unsigned short x3; unsigned int x4; struct in6_addr { union { unsigned char x_1_2_1[16]; unsigned short x_1_2_2[8]; unsigned int x_1_2_3[4]; } x_5_1_1; } x5; unsigned int x6; }*)arg1;
+ (void)ignore:(id)arg1;
+ (bool)isIPv4Address:(id)arg1;
+ (bool)isIPv6Address:(id)arg1;
+ (id)lookupHost:(id)arg1 port:(unsigned short)arg2 error:(id*)arg3;
+ (unsigned short)portFromAddress:(id)arg1;
+ (unsigned short)portFromSockaddr4:(const struct sockaddr_in { unsigned char x1; unsigned char x2; unsigned short x3; struct in_addr { unsigned int x_4_1_1; } x4; BOOL x5[8]; }*)arg1;
+ (unsigned short)portFromSockaddr6:(const struct sockaddr_in6 { unsigned char x1; unsigned char x2; unsigned short x3; unsigned int x4; struct in6_addr { union { unsigned char x_1_2_1[16]; unsigned short x_1_2_2[8]; unsigned int x_1_2_3[4]; } x_5_1_1; } x5; unsigned int x6; }*)arg1;
+ (void)scheduleCFStreams:(id)arg1;
+ (void)startCFStreamThreadIfNeeded;
+ (void)stopCFStreamThreadIfNeeded;
+ (void)unscheduleCFStreams:(id)arg1;

- (void).cxx_destruct;
- (bool)acceptOnInterface:(id)arg1 port:(unsigned short)arg2 error:(id*)arg3;
- (bool)acceptOnPort:(unsigned short)arg1 error:(id*)arg2;
- (bool)addStreamsToRunLoop;
- (bool)autoDisconnectOnClosedReadStream;
- (id)badConfigError:(id)arg1;
- (id)badParamError:(id)arg1;
- (void)cf_abortSSLHandshake:(id)arg1;
- (void)cf_finishSSLHandshake;
- (void)cf_startTLS;
- (void)closeWithError:(id)arg1;
- (void)completeCurrentRead;
- (void)completeCurrentWrite;
- (id)connectTimeoutError;
- (bool)connectToAddress:(id)arg1 error:(id*)arg2;
- (bool)connectToAddress:(id)arg1 viaInterface:(id)arg2 withTimeout:(double)arg3 error:(id*)arg4;
- (bool)connectToAddress:(id)arg1 withTimeout:(double)arg2 error:(id*)arg3;
- (bool)connectToHost:(id)arg1 onPort:(unsigned short)arg2 error:(id*)arg3;
- (bool)connectToHost:(id)arg1 onPort:(unsigned short)arg2 viaInterface:(id)arg3 withTimeout:(double)arg4 error:(id*)arg5;
- (bool)connectToHost:(id)arg1 onPort:(unsigned short)arg2 withTimeout:(double)arg3 error:(id*)arg4;
- (bool)connectWithAddress4:(id)arg1 address6:(id)arg2 error:(id*)arg3;
- (id)connectedAddress;
- (id)connectedHost;
- (id)connectedHost4;
- (id)connectedHost6;
- (id)connectedHostFromSocket4:(int)arg1;
- (id)connectedHostFromSocket6:(int)arg1;
- (unsigned short)connectedPort;
- (unsigned short)connectedPort4;
- (unsigned short)connectedPort6;
- (unsigned short)connectedPortFromSocket4:(int)arg1;
- (unsigned short)connectedPortFromSocket6:(int)arg1;
- (id)connectionClosedError;
- (bool)createReadAndWriteStream;
- (void)dealloc;
- (id)delegate;
- (id)delegateQueue;
- (void)didConnect:(int)arg1;
- (void)didNotConnect:(int)arg1 error:(id)arg2;
- (void)disconnect;
- (void)disconnectAfterReading;
- (void)disconnectAfterReadingAndWriting;
- (void)disconnectAfterWriting;
- (bool)doAccept:(int)arg1;
- (void)doConnectTimeout;
- (void)doReadData;
- (void)doReadEOF;
- (void)doReadTimeout;
- (void)doReadTimeoutWithExtension:(double)arg1;
- (void)doWriteData;
- (void)doWriteTimeout;
- (void)doWriteTimeoutWithExtension:(double)arg1;
- (bool)enableBackgroundingOnSocket;
- (bool)enableBackgroundingOnSocketWithCaveat;
- (bool)enableBackgroundingOnSocketWithCaveat:(bool)arg1;
- (void)endConnectTimeout;
- (void)endCurrentRead;
- (void)endCurrentWrite;
- (id)errnoError;
- (id)errnoErrorWithReason:(id)arg1;
- (void)flushSSLBuffers;
- (void)getDelegate:(id*)arg1 delegateQueue:(id*)arg2;
- (void)getInterfaceAddress4:(id*)arg1 address6:(id*)arg2 fromDescription:(id)arg3 port:(unsigned short)arg4;
- (id)init;
- (id)initWithDelegate:(id)arg1 delegateQueue:(id)arg2;
- (id)initWithDelegate:(id)arg1 delegateQueue:(id)arg2 socketQueue:(id)arg3;
- (id)initWithSocketQueue:(id)arg1;
- (bool)isConnected;
- (bool)isDisconnected;
- (bool)isIPv4;
- (bool)isIPv4Enabled;
- (bool)isIPv4PreferredOverIPv6;
- (bool)isIPv6;
- (bool)isIPv6Enabled;
- (bool)isSecure;
- (id)localAddress;
- (id)localHost;
- (id)localHost4;
- (id)localHost6;
- (id)localHostFromSocket4:(int)arg1;
- (id)localHostFromSocket6:(int)arg1;
- (unsigned short)localPort;
- (unsigned short)localPort4;
- (unsigned short)localPort6;
- (unsigned short)localPortFromSocket4:(int)arg1;
- (unsigned short)localPortFromSocket6:(int)arg1;
- (void)lookup:(int)arg1 didFail:(id)arg2;
- (void)lookup:(int)arg1 didSucceedWithAddress4:(id)arg2 address6:(id)arg3;
- (void)markSocketQueueTargetQueue:(id)arg1;
- (void)maybeClose;
- (void)maybeDequeueRead;
- (void)maybeDequeueWrite;
- (void)maybeStartTLS;
- (bool)openStreams;
- (id)otherError:(id)arg1;
- (void)performBlock:(id /* block */)arg1;
- (bool)preConnectWithInterface:(id)arg1 error:(id*)arg2;
- (float)progressOfReadReturningTag:(long long*)arg1 bytesDone:(unsigned long long*)arg2 total:(unsigned long long*)arg3;
- (float)progressOfWriteReturningTag:(long long*)arg1 bytesDone:(unsigned long long*)arg2 total:(unsigned long long*)arg3;
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned long long)arg4 maxLength:(unsigned long long)arg5 tag:(long long)arg6;
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned long long)arg4 tag:(long long)arg5;
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 maxLength:(unsigned long long)arg3 tag:(long long)arg4;
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)readDataToLength:(unsigned long long)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned long long)arg4 tag:(long long)arg5;
- (void)readDataToLength:(unsigned long long)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)readDataWithTimeout:(double)arg1 buffer:(id)arg2 bufferOffset:(unsigned long long)arg3 maxLength:(unsigned long long)arg4 tag:(long long)arg5;
- (void)readDataWithTimeout:(double)arg1 buffer:(id)arg2 bufferOffset:(unsigned long long)arg3 tag:(long long)arg4;
- (void)readDataWithTimeout:(double)arg1 tag:(long long)arg2;
- (id)readMaxedOutError;
- (struct __CFReadStream { }*)readStream;
- (id)readTimeoutError;
- (bool)registerForStreamCallbacksIncludingReadWrite:(bool)arg1;
- (void)removeStreamsFromRunLoop;
- (void)resumeReadSource;
- (void)resumeWriteSource;
- (void)setAutoDisconnectOnClosedReadStream:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegate:(id)arg1 delegateQueue:(id)arg2;
- (void)setDelegate:(id)arg1 delegateQueue:(id)arg2 synchronously:(bool)arg3;
- (void)setDelegate:(id)arg1 synchronously:(bool)arg2;
- (void)setDelegateQueue:(id)arg1;
- (void)setDelegateQueue:(id)arg1 synchronously:(bool)arg2;
- (void)setIPv4Enabled:(bool)arg1;
- (void)setIPv4PreferredOverIPv6:(bool)arg1;
- (void)setIPv6Enabled:(bool)arg1;
- (void)setUserData:(id)arg1;
- (void)setupReadAndWriteSourcesForNewlyConnectedSocket:(int)arg1;
- (void)setupReadTimerWithTimeout:(double)arg1;
- (void)setupWriteTimerWithTimeout:(double)arg1;
- (int)socket4FD;
- (int)socket6FD;
- (int)socketFD;
- (struct SSLContext { }*)sslContext;
- (id)sslError:(int)arg1;
- (int)sslReadWithBuffer:(void*)arg1 length:(unsigned long long*)arg2;
- (int)sslWriteWithBuffer:(const void*)arg1 length:(unsigned long long*)arg2;
- (void)ssl_continueSSLHandshake;
- (void)ssl_shouldTrustPeer:(bool)arg1 stateIndex:(int)arg2;
- (void)ssl_startTLS;
- (void)startConnectTimeout:(double)arg1;
- (void)startTLS:(id)arg1;
- (void)suspendReadSource;
- (void)suspendWriteSource;
- (void)synchronouslySetDelegate:(id)arg1;
- (void)synchronouslySetDelegate:(id)arg1 delegateQueue:(id)arg2;
- (void)synchronouslySetDelegateQueue:(id)arg1;
- (void)unmarkSocketQueueTargetQueue:(id)arg1;
- (id)userData;
- (bool)usingCFStreamForTLS;
- (bool)usingSecureTransportForTLS;
- (void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (struct __CFWriteStream { }*)writeStream;
- (id)writeTimeoutError;

@end
