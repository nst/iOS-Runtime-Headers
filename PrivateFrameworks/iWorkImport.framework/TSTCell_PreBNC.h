/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSTCell_PreBNC : NSObject <NSCopying> {
    TSKFormat * _baseFormat;
    unsigned int  _baseFormatID;
    TSTCellBorder * _cellBorder;
    unsigned short  _cellFlags;
    TSTCellSpec * _cellSpec;
    TSTCellStyle * _cellStyle;
    unsigned int  _cellStyleID;
    TSDCommentStorage * _commentStorage;
    unsigned int  _commentStorageID;
    TSTConditionalStyleSet * _conditionalStyle;
    unsigned char  _conditionalStyleAppliedRule;
    unsigned int  _conditionalStyleID;
    TSKFormat * _controlFormat;
    unsigned int  _controlFormatID;
    TSKFormat * _currencyFormat;
    unsigned int  _currencyFormatID;
    TSKFormat * _currentFormat;
    unsigned int  _currentFormatID;
    TSKFormat * _customFormat;
    unsigned int  _customFormatID;
    TSKFormat * _dateFormat;
    unsigned int  _dateFormatID;
    TSKFormat * _durationFormat;
    unsigned int  _durationFormatID;
    unsigned short  _explicitFormatFlags;
    unsigned int  _formulaID;
    TSTImportWarningSet * _importWarningSet;
    unsigned int  _importWarningSetID;
    TSULocale * _locale;
    TSKFormat * _multipleChoiceListFormat;
    unsigned int  _multipleChoiceListFormatID;
    TSKFormat * _numberFormat;
    unsigned int  _numberFormatID;
    TSWPParagraphStyle * _textStyle;
    unsigned int  _textStyleID;
    double  _valueDouble;
    unsigned int  _valueID;
    NSObject * _valueObject;
    int  _valueType;
}

@property (nonatomic, readonly) TSKFormat *baseFormat;
@property (nonatomic) unsigned int baseFormatID;
@property (nonatomic) bool boolValue;
@property (nonatomic, retain) TSTCellBorder *cellBorder;
@property (nonatomic, readonly) TSDFill *cellFill;
@property (nonatomic) unsigned short cellFlags;
@property (nonatomic, retain) TSTCellSpec *cellSpec;
@property (nonatomic, readonly) TSTCellSpec *cellSpecForDiff;
@property (nonatomic, retain) TSTCellStyle *cellStyle;
@property (nonatomic) unsigned int cellStyleID;
@property (nonatomic, retain) TSDCommentStorage *commentStorage;
@property (nonatomic) unsigned int commentStorageID;
@property (nonatomic, retain) TSTConditionalStyleSet *conditionalStyle;
@property (nonatomic) unsigned char conditionalStyleAppliedRule;
@property (nonatomic) unsigned int conditionalStyleID;
@property (nonatomic, readonly) TSKFormat *controlFormat;
@property (nonatomic) unsigned int controlFormatID;
@property (nonatomic, readonly) TSKFormat *currencyFormat;
@property (nonatomic) unsigned int currencyFormatID;
@property (nonatomic, readonly) TSKFormat *currentFormat;
@property (nonatomic) unsigned int currentFormatID;
@property (nonatomic, readonly) bool currentFormatIsExplicit;
@property (nonatomic, readonly) int currentFormatNegativeStyle;
@property (nonatomic, readonly) bool currentFormatUsesAccountingStyle;
@property (nonatomic, readonly) TSKFormat *customFormat;
@property (nonatomic) unsigned int customFormatID;
@property (nonatomic, readonly) NSString *customFormatString;
@property (nonatomic, readonly) bool dataIsReplaceable;
@property (nonatomic, readonly) TSKFormat *dateFormat;
@property (nonatomic) unsigned int dateFormatID;
@property (nonatomic, retain) NSDate *dateValue;
@property (nonatomic) double doubleValue;
@property (nonatomic, readonly) TSKFormat *durationFormat;
@property (nonatomic) unsigned int durationFormatID;
@property (nonatomic) double durationTimeIntervalValue;
@property (nonatomic, readonly) TSWPParagraphStyle *effectiveTextStyle;
@property (nonatomic) unsigned short explicitFormatFlags;
@property (nonatomic, readonly) int formatType;
@property (nonatomic, readonly) NSString *formattedValue;
@property (nonatomic) struct TSCEFormula { struct TSCEASTNodeArray {} *x1; struct TSCEFormulaTranslationFlags { unsigned char x_2_1_1; } x2; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_3_1_1; } x3; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_4_1_1; } x4; }*formula;
@property (nonatomic) unsigned int formulaID;
@property (nonatomic, retain) TSWPStorage *formulaSyntaxError;
@property (nonatomic) unsigned int formulaSyntaxErrorID;
@property (nonatomic, readonly) NSString *formulaSyntaxErrorString;
@property (nonatomic, readonly) bool hasAnyFormats;
@property (nonatomic, readonly) bool hasCellSpec;
@property (nonatomic, readonly) bool hasCellStyle;
@property (nonatomic, readonly) bool hasCommentStorage;
@property (nonatomic, readonly) bool hasConditionalStyle;
@property (nonatomic, readonly) bool hasControl;
@property (nonatomic, readonly) bool hasCurrentFormat;
@property (nonatomic, readonly) bool hasFormula;
@property (nonatomic, readonly) bool hasFormulaAnyError;
@property (nonatomic, readonly) bool hasFormulaEvaluationError;
@property (nonatomic, readonly) bool hasFormulaSyntaxError;
@property (nonatomic, readonly) bool hasImportWarningSet;
@property (nonatomic, readonly) bool hasMismatchedFormatAndValue;
@property (nonatomic, readonly) bool hasRichText;
@property (nonatomic, readonly) bool hasTextStyle;
@property (nonatomic, readonly) bool hasValueOrError;
@property (nonatomic, retain) TSTImportWarningSet *importWarningSet;
@property (nonatomic) unsigned int importWarningSetID;
@property (nonatomic, readonly) int interactionType;
@property (nonatomic, readonly) bool isEmpty;
@property (nonatomic, readonly) bool isEmptyForDataStore;
@property (nonatomic, readonly) bool isMostRecentlyExplicitPercent;
@property (nonatomic, readonly) TSULocale *locale;
@property (nonatomic, readonly) TSKFormat *multipleChoiceListFormat;
@property (nonatomic) unsigned int multipleChoiceListFormatID;
@property (nonatomic, readonly) TSKFormat *numberFormat;
@property (nonatomic) unsigned int numberFormatID;
@property (nonatomic) unsigned int richTextID;
@property (nonatomic, readonly) TSWPStorage *richTextStorageForLayout;
@property (nonatomic, retain) TSWPStorage *richTextValue;
@property (nonatomic, readonly) NSString *stringForEditing;
@property (nonatomic, readonly) NSString *stringForUnderlyingValue;
@property (nonatomic) unsigned int stringID;
@property (nonatomic, retain) NSString *stringValue;
@property (nonatomic, retain) TSWPParagraphStyle *textStyle;
@property (nonatomic) unsigned int textStyleID;
@property (nonatomic, readonly) bool valueIsNumberOrTime;
@property (nonatomic, readonly) bool valueIsStringOrNumber;
@property (nonatomic, readonly) bool valueIsText;
@property (nonatomic) int valueType;
@property (nonatomic, readonly) int writingDirection;

+ (bool)formatType:(int)arg1 sharesASpareSlotWithFormatType:(int)arg2;
+ (bool)hasASlotForFormatType:(int)arg1;
+ (bool)mismatchBetweenValueType:(int)arg1 andFormatType:(int)arg2;
+ (bool)p_TSTCellFormatIsANumberFormatTypeForMostRecentlySet:(int)arg1;
+ (id)stringForCellValueType:(int)arg1;

- (void).cxx_destruct;
- (void)applyPopupChoiceIndex:(unsigned long long)arg1;
- (void)bakeFormulaToValue;
- (id)baseFormat;
- (unsigned int)baseFormatID;
- (bool)boolValue;
- (id)cellBorder;
- (id)cellFill;
- (id)cellFillComparedToDefault:(id)arg1 suppressCS:(bool)arg2 isDefault:(bool*)arg3;
- (unsigned short)cellFlags;
- (id)cellSpec;
- (id)cellSpecForDiff;
- (id)cellStyle;
- (unsigned int)cellStyleID;
- (id)cellValueDescription;
- (id)cellValueTypeDescription;
- (void)clear;
- (void)clearAllFormats;
- (void)clearDataListIDs;
- (bool)clearNoncurrentImplicitFormats;
- (void)clearSpareFormatOfType:(int)arg1;
- (void)clearStrokes;
- (void)clearValue;
- (id)commentStorage;
- (unsigned int)commentStorageID;
- (id)conditionalStyle;
- (unsigned char)conditionalStyleAppliedRule;
- (unsigned int)conditionalStyleID;
- (id)controlFormat;
- (unsigned int)controlFormatID;
- (void)copyAllFormatsToCell:(id)arg1;
- (void)copyJustStrokesToCell:(id)arg1;
- (void)copyJustStyleAndStrokesToCell:(id)arg1;
- (void)copyToCell:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)currencyFormat;
- (unsigned int)currencyFormatID;
- (id)currentFormat;
- (unsigned int)currentFormatID;
- (bool)currentFormatIsExplicit;
- (int)currentFormatNegativeStyle;
- (bool)currentFormatUsesAccountingStyle;
- (id)customFormat;
- (unsigned int)customFormatID;
- (id)customFormatString;
- (bool)dataIsReplaceable;
- (id)dateFormat;
- (unsigned int)dateFormatID;
- (id)dateValue;
- (id)description;
- (double)doubleValue;
- (id)durationFormat;
- (unsigned int)durationFormatID;
- (double)durationTimeIntervalValue;
- (id)effectiveTextStyle;
- (unsigned short)explicitFormatFlags;
- (int)formatType;
- (id)formattedValue;
- (struct TSCEFormula { struct TSCEASTNodeArray {} *x1; struct TSCEFormulaTranslationFlags { unsigned char x_2_1_1; } x2; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_3_1_1; } x3; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_4_1_1; } x4; }*)formula;
- (unsigned int)formulaID;
- (id)formulaSyntaxError;
- (unsigned int)formulaSyntaxErrorID;
- (id)formulaSyntaxErrorString;
- (bool)hasAnyFormats;
- (bool)hasCellSpec;
- (bool)hasCellStyle;
- (bool)hasCommentStorage;
- (bool)hasConditionalStyle;
- (bool)hasControl;
- (bool)hasCurrentFormat;
- (bool)hasEqualContentToCell:(id)arg1;
- (bool)hasEqualContentToCell:(id)arg1 usingRichTextStyleComparisonBlock:(id /* block */)arg2;
- (bool)hasEqualValueToCell:(id)arg1;
- (bool)hasExplicitFormatOfType:(int)arg1 allowMismatchedSpare:(bool)arg2;
- (bool)hasFormatOfType:(int)arg1 allowMismatchedSpare:(bool)arg2;
- (bool)hasFormula;
- (bool)hasFormulaAnyError;
- (bool)hasFormulaEvaluationError;
- (bool)hasFormulaSyntaxError;
- (bool)hasImportWarningSet;
- (bool)hasMismatchedFormatAndValue;
- (bool)hasRichText;
- (bool)hasTextStyle;
- (bool)hasValueOrError;
- (id)importWarningSet;
- (unsigned int)importWarningSetID;
- (void)inflateFromStorageRef:(struct { struct { unsigned char x_1_1_1; unsigned int x_1_1_2 : 8; unsigned int x_1_1_3 : 16; unsigned int x_1_1_4 : 16; unsigned int x_1_1_5 : 16; unsigned int x_1_1_6 : 16; unsigned int x_1_1_7 : 16; } x1; unsigned char x2[0]; }*)arg1 dataStore:(id)arg2;
- (void)inflateFromStorageRef:(struct { struct { unsigned char x_1_1_1; unsigned int x_1_1_2 : 8; unsigned int x_1_1_3 : 16; unsigned int x_1_1_4 : 16; unsigned int x_1_1_5 : 16; unsigned int x_1_1_6 : 16; unsigned int x_1_1_7 : 16; } x1; unsigned char x2[0]; }*)arg1 dataStore:(id)arg2 suppressingTransmutation:(bool)arg3;
- (id)initWithLocale:(id)arg1;
- (id)initWithStorageRef:(struct { struct { unsigned char x_1_1_1; unsigned int x_1_1_2 : 8; unsigned int x_1_1_3 : 16; unsigned int x_1_1_4 : 16; unsigned int x_1_1_5 : 16; unsigned int x_1_1_6 : 16; unsigned int x_1_1_7 : 16; } x1; unsigned char x2[0]; }*)arg1 dataStore:(id)arg2;
- (int)interactionType;
- (bool)isEmpty;
- (bool)isEmptyForDataStore;
- (bool)isMostRecentlyExplicitPercent;
- (id)locale;
- (id)multipleChoiceListFormat;
- (unsigned int)multipleChoiceListFormatID;
- (id)numberFormat;
- (unsigned int)numberFormatID;
- (void)p_TSTCellSetMostRecentlySetDateFormat:(int)arg1;
- (void)p_TSTCellSetMostRecentlySetNumberFormat:(int)arg1;
- (void)p_TSTCellSetMostRecentlySetTextFormat:(int)arg1;
- (bool)p_currentFormatIsEqualToOtherCellFormat:(id)arg1;
- (int)p_mostRecentlySetDateFormatType;
- (int)p_mostRecentlySetNumberFormatType;
- (int)p_mostRecentlySetTextFormatType;
- (void)p_setFormatExplicit:(bool)arg1 fromFormatType:(int)arg2 setMostRecentlySet:(bool)arg3;
- (void)p_setFormatFlags:(unsigned short)arg1 explicit:(bool)arg2;
- (void)p_setFormatForFormulaResult:(id)arg1 propagation:(bool)arg2;
- (id)p_spareFormatOfType:(int)arg1 allowMismatchedSpare:(bool)arg2 explicitOnly:(bool)arg3;
- (unsigned int)richTextID;
- (id)richTextStorageForLayout;
- (id)richTextValue;
- (void)setBaseFormatID:(unsigned int)arg1;
- (void)setBoolValue:(bool)arg1;
- (void)setCellBorder:(id)arg1;
- (void)setCellFlags:(unsigned short)arg1;
- (void)setCellSpec:(id)arg1;
- (void)setCellSpec:(id)arg1 clearingID:(bool)arg2;
- (void)setCellSpecRepairingFormats:(id)arg1;
- (void)setCellStyle:(id)arg1;
- (void)setCellStyle:(id)arg1 clearingID:(bool)arg2;
- (void)setCellStyleID:(unsigned int)arg1;
- (void)setCommentStorage:(id)arg1;
- (void)setCommentStorage:(id)arg1 clearingID:(bool)arg2;
- (void)setCommentStorageID:(unsigned int)arg1;
- (void)setConditionalStyle:(id)arg1;
- (void)setConditionalStyle:(id)arg1 clearingID:(bool)arg2;
- (void)setConditionalStyleAppliedRule:(unsigned char)arg1;
- (void)setConditionalStyleID:(unsigned int)arg1;
- (void)setControlFormatID:(unsigned int)arg1;
- (void)setCurrencyFormatID:(unsigned int)arg1;
- (void)setCurrentFormat:(id)arg1 flags:(unsigned short)arg2;
- (void)setCurrentFormat:(id)arg1 isExplicit:(bool)arg2;
- (void)setCurrentFormatID:(unsigned int)arg1;
- (void)setCustomFormatID:(unsigned int)arg1;
- (void)setDateFormatID:(unsigned int)arg1;
- (void)setDateValue:(id)arg1;
- (void)setDefaultFormatForValue;
- (void)setDoubleValue:(double)arg1;
- (void)setDurationFormatID:(unsigned int)arg1;
- (void)setDurationTimeIntervalValue:(double)arg1;
- (void)setExplicitFormatFlags:(unsigned short)arg1;
- (void)setFormat:(id)arg1 shouldSetExplFlags:(bool)arg2 isExplicit:(bool)arg3 makeCurrent:(bool)arg4 clearingID:(bool)arg5;
- (void)setFormula:(struct TSCEFormula { struct TSCEASTNodeArray {} *x1; struct TSCEFormulaTranslationFlags { unsigned char x_2_1_1; } x2; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_3_1_1; } x3; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_4_1_1; } x4; }*)arg1;
- (void)setFormula:(struct TSCEFormula { struct TSCEASTNodeArray {} *x1; struct TSCEFormulaTranslationFlags { unsigned char x_2_1_1; } x2; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_3_1_1; } x3; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_4_1_1; } x4; }*)arg1 clearingID:(bool)arg2;
- (void)setFormulaByRef:(const struct TSCEFormula { struct TSCEASTNodeArray {} *x1; struct TSCEFormulaTranslationFlags { unsigned char x_2_1_1; } x2; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_3_1_1; } x3; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_4_1_1; } x4; }*)arg1;
- (void)setFormulaID:(unsigned int)arg1;
- (void)setFormulaSyntaxError:(id)arg1;
- (void)setFormulaSyntaxError:(id)arg1 clearingID:(bool)arg2;
- (void)setFormulaSyntaxErrorID:(unsigned int)arg1;
- (void)setImportWarningSet:(id)arg1;
- (void)setImportWarningSet:(id)arg1 clearingID:(bool)arg2;
- (void)setImportWarningSetID:(unsigned int)arg1;
- (void)setMultipleChoiceListFormatID:(unsigned int)arg1;
- (void)setNumberFormatID:(unsigned int)arg1;
- (void)setRichTextID:(unsigned int)arg1;
- (void)setRichTextValue:(id)arg1;
- (void)setRichTextValue:(id)arg1 clearingID:(bool)arg2 convertToPlaintextIfPossible:(bool)arg3;
- (void)setRichTextValueWithoutPlaintextCollapse:(id)arg1;
- (void)setSpareFormat:(id)arg1 isExplicit:(bool)arg2;
- (void)setStringID:(unsigned int)arg1;
- (void)setStringValue:(id)arg1;
- (void)setStringValue:(id)arg1 clearingID:(bool)arg2;
- (void)setTextStyle:(id)arg1;
- (void)setTextStyle:(id)arg1 clearingID:(bool)arg2;
- (void)setTextStyleID:(unsigned int)arg1;
- (void)setValueType:(int)arg1;
- (id)spareFormatOfType:(int)arg1 allowMismatchedSpare:(bool)arg2;
- (id)stringForEditing;
- (id)stringForUnderlyingValue;
- (unsigned int)stringID;
- (id)stringValue;
- (id)textStyle;
- (unsigned int)textStyleID;
- (void)updateCustomFormatFromPaste:(id)arg1;
- (id)upgradedBraveNewCell;
- (bool)valueIsNumberOrTime;
- (bool)valueIsStringOrNumber;
- (bool)valueIsText;
- (int)valueType;
- (int)writingDirection;

@end
