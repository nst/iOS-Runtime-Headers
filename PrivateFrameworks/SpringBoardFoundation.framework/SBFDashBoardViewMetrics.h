/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation
 */

@interface SBFDashBoardViewMetrics : NSObject

+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_cachedGlyphInsetsForString:(id)arg1 withFont:(id)arg2;
+ (bool)_isPortrait;
+ (double)_listToWeatherIndentX;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_reducedPageBoundsFromBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forPage:(unsigned long long)arg2;
+ (id)callToActionFont;
+ (double)clipProgressForScrollOffset:(double)arg1 withPageBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (double)clippingLineHeight;
+ (double)dateAlphaProgressForScrollOffset:(double)arg1 withPageBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (double)dateBaselineToListY;
+ (id)dateFont;
+ (double)dateOnlyLabelToLunarDateLabelBaselineDifferenceY;
+ (id)dateOnlyLunarDateFont;
+ (unsigned long long)dateTimeLayoutForPage:(unsigned long long)arg1;
+ (id)dateTimeLunarDateFont;
+ (double)dateTimeMinimumInset;
+ (bool)layoutCentersContent:(unsigned long long)arg1;
+ (bool)layoutHitsMaximumWidth:(unsigned long long)arg1;
+ (bool)layoutUsesMargin:(unsigned long long)arg1;
+ (double)listInsetXForPage:(unsigned long long)arg1;
+ (unsigned long long)listLayoutForPage:(unsigned long long)arg1;
+ (double)listMinY;
+ (unsigned long long)listScrollsDateTimeForPage:(unsigned long long)arg1;
+ (double)listToPageBottomInsetYForPage:(unsigned long long)arg1;
+ (double)listWidthForNotificationCenter;
+ (double)listWidthForPage:(unsigned long long)arg1;
+ (double)searchBarWidth;
+ (double)searchClippingLineMaxY;
+ (bool)searchSizeUsesMargins;
+ (double)singleLineDateViewBaselineDifferenceY;
+ (double)subtitleLabelToLunarDateLabelBaselineDifferenceY;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })suggestedContentInsetsForListForPage:(unsigned long long)arg1 pageBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })suggestedContentInsetsForTodayPageWithMultiLineDate:(bool)arg1 pageBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })suggestedFrameForCallToActionLabel:(id)arg1 yOffset:(double)arg2 inBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })suggestedFrameForDateOnlyViewInScreenCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 multiLineDate:(bool)arg2;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })suggestedFrameForDateTimeViewInScreenCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 centeredX:(bool)arg2;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })suggestedFrameForListForPage:(unsigned long long)arg1 pageBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })suggestedFrameForListForPage:(unsigned long long)arg1 pageBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 insets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })suggestedFrameForMediaArtworkForControlsFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 bottomInset:(double)arg2 inPageBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })suggestedFrameForMediaControlsForPageBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })suggestedFrameForPageControlForPageBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 desiredSize:(struct CGSize { double x1; double x2; })arg2;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })suggestedFrameForSearchControllerForPageBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })suggestedFrameForStatusView:(id)arg1 inView:(id)arg2 withInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3;
+ (struct CGPoint { double x1; double x2; })suggestedLeadingBottomCornerForWeatherViewForPageBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (id)timeFont;
+ (double)timeLabelBaselineY;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })timeLabelInsetsForTimeString:(id)arg1;
+ (double)timeLabelOffsetForScrollPercent:(double)arg1;
+ (double)timeLabelScrollPercentForPage:(unsigned long long)arg1;
+ (double)timeLabelToLunarDateLabelDifferenceY;
+ (double)timeLabelToSubtitleLabelDifferenceY;
+ (double)timeSubtitleBaselineY;
+ (id)timeSubtitleFont;
+ (double)timeToListInsetXforPage:(unsigned long long)arg1;
+ (double)timeToSubtitleLabelBaselineDifferenceY;
+ (bool)usesSideAlignedMainPageLayout;

@end
