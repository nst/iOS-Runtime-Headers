/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TNSheet : TSPObject <TSCEResolverContainer, TSDDrawableContainerInfo, TSDMutableContainerInfo, TSKDocumentObject, TSKModel, TSWPHeaderFooterProvider, TSWPStorageParent> {
    int  _layoutDirection;
    double  _pageFooterInset;
    double  _pageHeaderInset;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _printMargins;
    long long  _startPageNumber;
    bool  _usingStartPageNumber;
    NSMutableArray * mChildInfos;
    double  mContentScale;
    TSWPStorage * mHeaderFooters;
    bool  mInDocument;
    bool  mInPortraitPageOrientation;
    bool  mIsAutofitOn;
    NSString * mName;
    int  mPageOrder;
    NSMutableSet * mRemappedTableNames;
    bool  mShowPageNumbers;
    unsigned int  mTableNameCounter;
    bool  mUsesSingleHeaderFooter;
}

@property (getter=isAnchoredToText, nonatomic, readonly) bool anchoredToText;
@property (getter=isAttachedToBodyText, nonatomic, readonly) bool attachedToBodyText;
@property (nonatomic, readonly) bool autoListRecognition;
@property (nonatomic, readonly) bool autoListTermination;
@property (nonatomic, readonly) double bodyWidth;
@property (nonatomic, readonly) NSArray *childInfos;
@property (nonatomic, readonly) NSArray *containedModels;
@property (nonatomic) double contentScale;
@property (nonatomic, readonly) long long contentWritingDirection;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) TNDocumentRoot *documentRoot;
@property (getter=isFloatingAboveText, nonatomic, readonly) bool floatingAboveText;
@property (nonatomic, readonly) NSArray *footerStorages;
@property (nonatomic, copy) TSDInfoGeometry *geometry;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSEnumerator *headerFooterFragmentEnumerator;
@property (nonatomic, readonly) NSArray *headerStorages;
@property (nonatomic) bool inPortraitPageOrientation;
@property (getter=isInlineWithText, nonatomic, readonly) bool inlineWithText;
@property (nonatomic) bool isAutofitOn;
@property (nonatomic) int layoutDirection;
@property (nonatomic) bool matchesObjectPlaceholderGeometry;
@property (nonatomic, retain) NSString *name;
@property (nonatomic) TSPObject<TSDOwningAttachment> *owningAttachment;
@property (nonatomic, readonly) TSPObject<TSDOwningAttachment> *owningAttachmentNoRecurse;
@property double pageFooterInset;
@property double pageHeaderInset;
@property int pageOrder;
@property (nonatomic) NSObject<TSDContainerInfo> *parentInfo;
@property (nonatomic, readonly) bool preventsChangeTracking;
@property (nonatomic, readonly) bool preventsComments;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } printMargins;
@property (nonatomic) bool showPageNumbers;
@property long long startPageNumber;
@property (nonatomic, readonly) bool storageChangesInvalidateWrap;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsCollaborativeEditing;
@property (nonatomic, readonly) bool supportsMultipleColumns;
@property (nonatomic, readonly) bool textIsLinked;
@property (nonatomic) bool usesSingleHeaderFooter;
@property (getter=isUsingStartPageNumber) bool usingStartPageNumber;

+ (bool)needsObjectUUID;
+ (id)sheetForSelectionModel:(id)arg1 outIsPaginated:(bool*)arg2;

- (void)addChildInfo:(id)arg1;
- (void)addRemappedTableName:(id)arg1;
- (bool)autoListRecognition;
- (bool)autoListTermination;
- (double)bodyWidth;
- (bool)canMoveDrawables:(id)arg1 toIndexes:(id)arg2;
- (id)chartAndTableInfos;
- (id)chartInfos;
- (id)childEnumerator;
- (id)childInfos;
- (void)clearBackPointerToParentInfoIfNeeded:(id)arg1;
- (void)clearRemappedTableNames;
- (id)containedModels;
- (double)contentScale;
- (long long)contentWritingDirection;
- (id)copyWithContext:(id)arg1;
- (void)dealloc;
- (id)description;
- (id)documentRoot;
- (void)enumerateHeaderFooterStoragesWithBlock:(id /* block */)arg1;
- (id)footerStorages;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (id)geometry;
- (bool)hasReferenceToTables:(id)arg1;
- (id)headerFooter:(long long)arg1 fragmentAtIndex:(long long)arg2;
- (id)headerFooterFragmentEnumerator;
- (long long)headerFooterTypeForModel:(id)arg1;
- (long long)headerFragmentIndexForModel:(id)arg1;
- (id)headerStorages;
- (double)highestScaleFactorForRenderingDrawableInfo:(id)arg1;
- (void)i_importHeadersFooters:(id)arg1 headerType:(long long)arg2 useSingleHeaderFooter:(bool)arg3;
- (id)i_newHeaderFooterStorage;
- (bool)inPortraitPageOrientation;
- (id)infoForSelectionPath:(id)arg1;
- (id)initWithContext:(id)arg1;
- (id)initWithContext:(id)arg1 suppressingHeaderFooterCreation:(bool)arg2;
- (void)insertChildInfo:(id)arg1 above:(id)arg2;
- (void)insertChildInfo:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)insertChildInfo:(id)arg1 below:(id)arg2;
- (void)insertContainedModel:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)insertDrawableInfo:(id)arg1 atIndex:(unsigned long long)arg2 context:(id)arg3;
- (void)insertDrawableInfo:(id)arg1 context:(id)arg2;
- (void)insertDrawableInfos:(id)arg1 atIndex:(unsigned long long)arg2 context:(id)arg3;
- (void)insertDrawableInfos:(id)arg1 context:(id)arg2;
- (bool)isAnchoredToText;
- (bool)isAttachedToBodyText;
- (bool)isAutofitOn;
- (bool)isFloatingAboveText;
- (bool)isForm;
- (bool)isHeaderFooterEmpty:(long long)arg1;
- (bool)isHeaderFooterEmpty:(long long)arg1 fragmentAtIndex:(long long)arg2;
- (bool)isInlineWithText;
- (bool)isSelectable;
- (bool)isThemeContent;
- (bool)isUsingStartPageNumber;
- (Class)layoutClass;
- (int)layoutDirection;
- (bool)layoutIsLeftToRight;
- (bool)layoutIsRightToLeft;
- (void)loadFromArchive:(const struct SheetArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { int x_1_2_1; } x_4_1_1; } x4; struct RepeatedPtrField<TSP::Reference> { struct Arena {} *x_5_1_1; int x_5_1_2; int x_5_1_3; struct Rep {} *x_5_1_4; } x5; struct RepeatedPtrField<TSP::Reference> { struct Arena {} *x_6_1_1; int x_6_1_2; int x_6_1_3; struct Rep {} *x_6_1_4; } x6; struct RepeatedPtrField<TSP::Reference> { struct Arena {} *x_7_1_1; int x_7_1_2; int x_7_1_3; struct Rep {} *x_7_1_4; } x7; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_8_1_1; } x8; struct EdgeInsetsArchive {} *x9; struct Reference {} *x10; struct Reference {} *x11; struct Reference {} *x12; bool x13; bool x14; bool x15; bool x16; float x17; int x18; int x19; float x20; float x21; bool x22; bool x23; int x24; }*)arg1 unarchiver:(id)arg2;
- (void)loadFromUnarchiver:(id)arg1;
- (void)moveChildren:(id)arg1 toIndexes:(id)arg2;
- (void)moveDrawables:(id)arg1 toIndexes:(id)arg2;
- (void)moveModel:(id)arg1 toIndex:(unsigned long long)arg2;
- (id)name;
- (unsigned int)nextUntitledResolverIndex;
- (id)owningAttachment;
- (id)owningAttachmentNoRecurse;
- (void)p_createHeadersFooters:(long long)arg1 stylesheet:(id)arg2 mayAlreadyExist:(bool)arg3;
- (void)p_dolcDispatch:(id)arg1 skippingTextBoxes:(bool)arg2;
- (id)p_newHeaderFooterStorageWithStylesheet:(id)arg1;
- (void)p_setupHeadersFooters;
- (id)p_storagesForHeaderType:(long long)arg1;
- (double)pageFooterInset;
- (double)pageHeaderInset;
- (int)pageOrder;
- (id)parentInfo;
- (bool)preventsChangeTracking;
- (bool)preventsComments;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })printMargins;
- (id)remappedTableNames;
- (void)removeChildInfo:(id)arg1;
- (void)removeContainedModel:(id)arg1;
- (void)removeDrawableInfo:(id)arg1;
- (void)removeDrawableInfos:(id)arg1;
- (Class)repClass;
- (void)replaceChildInfo:(id)arg1 with:(id)arg2;
- (id)resolverMatchingName:(id)arg1;
- (bool)resolverNameIsUsed:(id)arg1;
- (id)resolversMatchingPrefix:(id)arg1;
- (void)rollbackNextUntitledResolverIndex:(unsigned int)arg1;
- (unsigned int)saveNextUntitledResolverIndex;
- (void)saveToArchive:(struct SheetArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { int x_1_2_1; } x_4_1_1; } x4; struct RepeatedPtrField<TSP::Reference> { struct Arena {} *x_5_1_1; int x_5_1_2; int x_5_1_3; struct Rep {} *x_5_1_4; } x5; struct RepeatedPtrField<TSP::Reference> { struct Arena {} *x_6_1_1; int x_6_1_2; int x_6_1_3; struct Rep {} *x_6_1_4; } x6; struct RepeatedPtrField<TSP::Reference> { struct Arena {} *x_7_1_1; int x_7_1_2; int x_7_1_3; struct Rep {} *x_7_1_4; } x7; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_8_1_1; } x8; struct EdgeInsetsArchive {} *x9; struct Reference {} *x10; struct Reference {} *x11; struct Reference {} *x12; bool x13; bool x14; bool x15; bool x16; float x17; int x18; int x19; float x20; float x21; bool x22; bool x23; int x24; }*)arg1 archiver:(id)arg2;
- (void)saveToArchiver:(id)arg1;
- (void)setChildInfos:(id)arg1;
- (void)setContentScale:(double)arg1;
- (void)setGeometry:(id)arg1;
- (void)setInPortraitPageOrientation:(bool)arg1;
- (void)setIsAutofitOn:(bool)arg1;
- (void)setLayoutDirection:(int)arg1;
- (void)setName:(id)arg1;
- (void)setOwningAttachment:(id)arg1;
- (void)setPageFooterInset:(double)arg1;
- (void)setPageHeaderInset:(double)arg1;
- (void)setPageOrder:(int)arg1;
- (void)setParentInfo:(id)arg1;
- (void)setPrimitiveGeometry:(id)arg1;
- (void)setPrintMargins:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setShowPageNumbers:(bool)arg1;
- (void)setStartPageNumber:(long long)arg1;
- (void)setUsesSingleHeaderFooter:(bool)arg1;
- (void)setUsingStartPageNumber:(bool)arg1;
- (bool)shouldBeDisplayed;
- (bool)showPageNumbers;
- (long long)startPageNumber;
- (bool)supportsMultipleColumns;
- (id)tableInfoForName:(id)arg1 caseSensitive:(bool)arg2;
- (id)tableInfos;
- (bool)textIsLinked;
- (bool)textIsVerticalAtCharIndex:(unsigned long long)arg1;
- (bool)usesSingleHeaderFooter;
- (void)wasAddedToDocumentRoot:(id)arg1 dolcContext:(id)arg2;
- (void)wasRemovedFromDocumentRoot:(id)arg1;
- (void)willBeAddedToDocumentRoot:(id)arg1 dolcContext:(id)arg2;
- (void)willBeRemovedFromDocumentRoot:(id)arg1;

@end
