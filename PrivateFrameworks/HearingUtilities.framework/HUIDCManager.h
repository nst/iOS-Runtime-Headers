/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HearingUtilities.framework/HearingUtilities
 */

@interface HUIDCManager : NSObject <HUIDCRemoteControllerDelegate, NSNetServiceBrowserDelegate> {
    NSNetServiceBrowser * _browser;
    <AXIDCControllerBrowserDelegateProtocol> * _delegate;
    Class  _remoteClass;
    NSMutableArray * _remoteControllers;
    <HUIDCManagerSecurityDelegate> * _securityDelegate;
    NSString * _serviceType;
    Class  _slaveClass;
    HUIDCSlaveController * _slaveController;
    long long  _state;
}

@property (nonatomic, retain) NSNetServiceBrowser *browser;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <AXIDCControllerBrowserDelegateProtocol> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSMutableArray *remoteControllers;
@property (nonatomic) <HUIDCManagerSecurityDelegate> *securityDelegate;
@property (nonatomic, retain) NSString *serviceType;
@property (nonatomic, retain) HUIDCSlaveController *slaveController;
@property (nonatomic) long long state;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)availableControllers;
- (id)availableRemoteControllers;
- (void)becomeMaster;
- (id)browser;
- (void)clearControllers;
- (void)controller:(id)arg1 didCloseConnectionWithError:(id)arg2;
- (void)controller:(id)arg1 didFinishSendingData:(id)arg2;
- (void)controller:(id)arg1 didReceiveData:(id)arg2;
- (void)controllerDidFinishConnecting:(id)arg1;
- (id)delegate;
- (id)initWithServiceType:(id)arg1;
- (id)initWithServiceType:(id)arg1 remoteClass:(Class)arg2 andSlaveClass:(Class)arg3;
- (void)netServiceBrowser:(id)arg1 didFindService:(id)arg2 moreComing:(bool)arg3;
- (void)netServiceBrowser:(id)arg1 didNotSearch:(id)arg2;
- (void)netServiceBrowser:(id)arg1 didRemoveService:(id)arg2 moreComing:(bool)arg3;
- (void)netServiceBrowserDidStopSearch:(id)arg1;
- (void)netServiceBrowserWillSearch:(id)arg1;
- (id)remoteControllerForHostname:(id)arg1;
- (id)remoteControllers;
- (void)resolveMasterWithCompletion:(id /* block */)arg1;
- (id)securityDelegate;
- (void)sendObject:(id)arg1 toAllControllersExcept:(id)arg2 withCompletion:(id /* block */)arg3;
- (void)sendObject:(id)arg1 toController:(id)arg2 withSendCompletion:(id /* block */)arg3;
- (id)serviceType;
- (void)setBrowser:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setRemoteControllers:(id)arg1;
- (void)setSecurityDelegate:(id)arg1;
- (void)setServiceType:(id)arg1;
- (void)setSlaveController:(id)arg1;
- (void)setState:(long long)arg1;
- (bool)shouldBecomeMaster;
- (id)slaveController;
- (long long)state;
- (void)stop;
- (void)transitionToSlaveWithCompletion:(id /* block */)arg1;
- (Class)validateClass:(Class)arg1 isKindOfClass:(Class)arg2;

@end
