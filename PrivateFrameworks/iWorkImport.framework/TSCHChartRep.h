/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSCHChartRep : TSWPTextHostRep <CALayerDelegate, TSCHChartRepPlatformProtocols, TSCHSupportsRendering> {
    TSCHSearchSelection * _selection;
    TSCHSelectionPath * mActiveTextEditingPath;
    bool  mBuildingChunks;
    bool  mBuildingFinalBackground;
    bool  mBuildingFinalElements;
    bool  mCDECausedSetNeedsDisplay;
    bool  mCDEIsEditingInfo;
    TSCHChartLayout * mChartLayout;
    bool  mChartRepGoingAway;
    int  mChunkPhase;
    long long  mCurrentChunk;
    CALayer * mDownloadIndicatorLayer;
    bool  mDrawingSearchReference;
    TSCHLegendMoveKnob * mDynamicLegendKnob;
    bool  mEditorIsEditingInfo;
    bool  mFinishedBecomingSelected;
    bool  mForceSeparateLegendLayer;
    unsigned long long  mInDynamicStandinLayoutOperation;
    unsigned long long  mInDynamicStandinOperation;
    bool  mInZoom;
    bool  mInvalidateLegendLayerForLayerBasedRep;
    bool  mIs2DRepFor3DChartRep;
    bool  mIsKPFExportForMultiData;
    bool  mIsLayerBasedRep;
    struct CGPoint { 
        double x; 
        double y; 
    }  mLastSubselectionLayerRelativeReferencePosition;
    CAShapeLayer * mLegendBorderHaloLayer;
    bool  mLegendBorderHaloLayerPathValid;
    TSCHRendererLayer * mLegendLayer;
    CAShapeLayer * mMediatorEditingHaloLayer;
    bool  mMediatorEditingHaloLayerPathValid;
    int  mRenderPassChunkPhase;
    NSArray * mRenderers;
    NSMutableArray * mRenderersWaitingForDownload;
    CALayer * mSubselectionKnobLayer;
    int  mTextureByGlyphStyle;
    unsigned long long  mTextureDeliveryStyle;
    unsigned long long  mTextureStage;
    bool  mWantsPreviewLayout;
}

@property (nonatomic, readonly, retain) TSCHSelectionPath *activeTextEditingPath;
@property (nonatomic, readonly) NSString *animationFilter;
@property (nonatomic, readonly) unsigned long long chartDeliveryStyle;
@property (nonatomic, readonly) TSCHChartDrawableInfo *chartInfo;
@property (nonatomic, readonly) TSCHChartLayout *chartLayout;
@property (nonatomic, readonly) bool chartRepGoingAway;
@property (nonatomic, readonly) double contentsScale;
@property (nonatomic, readonly) long long currentChunk;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool drawingSearchReference;
@property (nonatomic, retain) TSCHLegendMoveKnob *dynamicLegendKnob;
@property (nonatomic, readonly) bool forceRenderBlankBackground;
@property (nonatomic) bool forceSeparateLegendLayer;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool is2DRepFor3DChartRep;
@property (nonatomic, readonly) bool isCorrectRepClassForInfo;
@property (nonatomic, readonly) TSCHSearchSelection *selection;
@property (readonly) Class superclass;
@property (nonatomic) int textureByGlyphStyle;
@property (nonatomic) unsigned long long textureDeliveryStyle;
@property (nonatomic) unsigned long long textureStage;
@property (nonatomic, readonly) double viewScale;

+ (double)magicMoveAttributeMatchPercentBetweenOutgoingObject:(id)arg1 incomingObject:(id)arg2 mixingTypeContext:(id)arg3;

- (id)activeTextEditingPath;
- (id)animationFilter;
- (bool)buildShouldUseRenderer:(id)arg1;
- (bool)canDrawInParallel;
- (unsigned long long)chartDeliveryStyle;
- (id)chartInfo;
- (id)chartLayout;
- (bool)chartRepGoingAway;
- (void)clearRenderers;
- (double)contentsScale;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertUnscaledToBoundsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)currentChunk;
- (void)dealloc;
- (void)didEndZooming;
- (void)dismissMessageOverlayNowWithAnimation:(bool)arg1;
- (void)displayMessage:(id)arg1 zPosition:(double)arg2 style:(int)arg3;
- (void)drawInContext:(struct CGContext { }*)arg1;
- (id)drawableLayout;
- (bool)drawingSearchReference;
- (id)dynamicLegendKnob;
- (void)editor:(id)arg1 isDeselectingInfos:(id)arg2;
- (void)editor:(id)arg1 isSelectingInfos:(id)arg2;
- (bool)forceRenderBlankBackground;
- (bool)forceSeparateLegendLayer;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameInUnscaledCanvas;
- (bool)frameInUnscaledCanvasNeedsPaddingForShadows;
- (id)geometry;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })geometryFrame;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2 is2DRepFor3DChartRep:(bool)arg3;
- (bool)is2DRepFor3DChartRep;
- (bool)isCorrectRepClassForInfo;
- (bool)isDrawingIntoPDF;
- (bool)isEditing;
- (bool)isLayerBasedRep;
- (bool)messageIsVisible;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })outerShadowFrame;
- (int)p_backgroundLikePlaneStateForEffectiveStage:(long long)arg1;
- (bool)p_chartShouldDisplayMessage;
- (void)p_checkFillPropertiesForDataListeningWithChangedProperties:(id)arg1;
- (void)p_deleteMessageView;
- (void)p_forceDismissTransientMessage;
- (bool)p_hasBackgroundFill;
- (bool)p_hasBackgroundLayerForPieChart;
- (void)p_invalidateMessageOverlay;
- (bool)p_legendHitByLayoutPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)p_legendRenderer;
- (void)p_listenForDataChangesIfAppropriateForFill:(id)arg1 forProperty:(int)arg2;
- (void)p_messageAnimationDidStop:(id)arg1 finished:(id)arg2 context:(void*)arg3;
- (void)p_positionMessageView;
- (void)p_removeOrShowAndPositionMessageOverlay;
- (id)p_textImageForPath:(struct CGPath { }*)arg1 renderer:(id)arg2 selection:(id)arg3 shouldPulsate:(bool)arg4;
- (id)p_textureForDescription:(id)arg1;
- (void)p_topBarsShowedUp:(id)arg1;
- (bool)planeIsVisible:(int)arg1;
- (int)planeState:(int)arg1 finalElements:(bool)arg2;
- (int)planeState:(int)arg1 finalElements:(bool)arg2 chunkStage:(long long)arg3;
- (void)protected_renderChunkInBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textureSet:(id)arg2;
- (id)referenceLineLabelsSearchSelectionsToRender;
- (id)referenceLinesToRender;
- (bool)renderElements;
- (bool)renderElementsShadowOnly;
- (bool)renderElementsWithoutShadows;
- (bool)renderGrid;
- (void)renderIntoContext:(struct CGContext { }*)arg1 visible:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (bool)renderLabels;
- (bool)renderReferenceLines;
- (id)renderSeriesIndexSet;
- (id)renderSeriesIndexSetForFinalElements:(bool)arg1;
- (id)renderSeriesIndexSetForFinalElements:(bool)arg1 currentChunk:(long long)arg2;
- (bool)renderTrendLinesForSeriesIndex:(unsigned long long)arg1;
- (id)renderValueIndexSetForSeries:(unsigned long long)arg1;
- (id)renderValueIndexSetForSeries:(unsigned long long)arg1 finalElements:(bool)arg2;
- (id)renderValueIndexSetForSeries:(unsigned long long)arg1 finalElements:(bool)arg2 currentChunk:(long long)arg3;
- (id)renderers;
- (bool)requireSeparateLabelLayer;
- (struct CGPoint { double x1; double x2; })scaledSubpixelOffsetFromLayerFrameInScaledCanvas;
- (id)selection;
- (void)setDynamicLegendKnob:(id)arg1;
- (void)setForceSeparateLegendLayer:(bool)arg1;
- (void)setTextureByGlyphStyle:(int)arg1;
- (void)setTextureDeliveryStyle:(unsigned long long)arg1;
- (void)setTextureStage:(unsigned long long)arg1;
- (bool)shadowsEnabled;
- (bool)shouldUseChartAreaRectForEditMenuTargetRectMinY;
- (bool)shouldUseRenderer:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })targetRectForEditMenu;
- (int)textureByGlyphStyle;
- (unsigned long long)textureDeliveryStyle;
- (id)textureForDescription:(id)arg1;
- (unsigned long long)textureStage;
- (void)updateFromLayout;
- (void)updateMessageOverlayNow;
- (double)viewScale;
- (void)willBeginZooming;

@end
