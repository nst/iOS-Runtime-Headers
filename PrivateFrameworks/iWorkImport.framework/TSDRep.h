/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSDRep : NSObject <TSDMagicMoveMatching> {
    TSDCanvas * mCanvas;
    CALayer * mCollaboratorCursorLayer;
    bool  mCollaboratorCursorLayerValid;
    struct CGColor { } * mDefaultSelectionHighlightColor;
    CALayer * mDragAndDropHighlightLayer;
    bool  mHasBeenRemoved;
    TSDKnobTracker * mKnobTracker;
    TSDLayoutGeometry * mLastGeometryInRoot;
    TSDLayout * mLayout;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mOriginalLayerFrameInScaledCanvas;
    TSDRep<TSDContainerRep> * mParentRep;
    CALayer * mSelectionHighlightLayer;
    bool  mSelectionHighlightLayerValid;
    bool  mShowDragAndDropHighlight;
    bool  mShowTemporaryHighlight;
    CALayer * mTemporaryHighlightLayer;
    TSDLayout * mTemporaryMixingLayout;
    TSDTextureSet * mTexture;
    NSObject<OS_dispatch_queue> * mTextureAccessQueue;
    NSDictionary * mTextureActionAttributes;
    NSDictionary * mTextureAnimationInfo;
    int  mTextureByGlyphStyle;
    TSDTextureContext * mTextureContext;
    unsigned long long  mTextureDeliveryStyle;
    unsigned long long  mTextureStage;
    bool  mWantsToRedrawWithOpenGL;
}

@property (nonatomic, readonly) TSDCanvas *canvas;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frameForMagicMove;
@property (nonatomic, readonly) NSArray *hyperlinkRegions;
@property (nonatomic, readonly) TSDLayout *layout;
@property (nonatomic) TSDRep<TSDContainerRep> *parentRep;
@property (nonatomic, retain) TSDLayout *temporaryMixingLayout;
@property (retain) TSDTextureSet *texture;
@property (nonatomic, retain) NSDictionary *textureActionAttributes;
@property (nonatomic, readonly) double textureAngle;
@property (nonatomic, retain) NSDictionary *textureAnimationInfo;
@property (nonatomic) int textureByGlyphStyle;
@property (copy) TSDTextureContext *textureContext;
@property (nonatomic) unsigned long long textureDeliveryStyle;
@property (nonatomic) unsigned long long textureStage;

- (void)addBitmapsToRenderingQualityInfo:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (void)addToSet:(id)arg1;
- (id)additionalRepsForDragging;
- (bool)allowDragAcrossPageBoundaries;
- (double)angleInRoot;
- (void)antiAliasDefeatLayerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 forTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (void)antiAliasDefeatLayerTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg1 forFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)beginDragInlineWithText;
- (void)beginDrawingOperation;
- (bool)canClipThemeContentToCanvas;
- (bool)canEditWithEditor:(id)arg1;
- (id)canvas;
- (struct CGPoint { double x1; double x2; })centerForRotation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })clipRect;
- (void)computeDirectLayerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 andTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg2;
- (void)computeDirectLayerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 andTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg2 basedOnLayoutGeometry:(id)arg3;
- (void)computeDirectLayerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 andTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg2 basedOnTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 andSize:(struct CGSize { double x1; double x2; })arg4;
- (id)connectedReps;
- (bool)containsPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)containsPoint:(struct CGPoint { double x1; double x2; })arg1 withSlop:(struct CGSize { double x1; double x2; })arg2;
- (double)contentsScale;
- (struct CGPoint { double x1; double x2; })convertNaturalPointFromLayerRelative:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertNaturalPointFromUnscaledCanvas:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertNaturalPointToLayerRelative:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertNaturalPointToUnscaledCanvas:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertNaturalRectFromLayerRelative:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertNaturalRectFromUnscaledCanvas:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertNaturalRectToLayerRelative:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertNaturalRectToUnscaledCanvas:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)dealloc;
- (id)description;
- (bool)directlyManagesLayerContent;
- (void)drawInContext:(struct CGContext { }*)arg1;
- (void)endDragInlineWithText;
- (void)endDrawingOperation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForMagicMove;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameInScreenSpace;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameInUnscaledCanvas;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameInUnscaledCanvasIncludingChrome;
- (bool)handleDoubleTapAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)handleMultipleTapAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)handleSingleTapAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)handlesEditMenu;
- (id)hitRep:(struct CGPoint { double x1; double x2; })arg1;
- (id)hitRep:(struct CGPoint { double x1; double x2; })arg1 passingTest:(id)arg2;
- (id)hitRepChrome:(struct CGPoint { double x1; double x2; })arg1;
- (id)hitRepChrome:(struct CGPoint { double x1; double x2; })arg1 passingTest:(id)arg2;
- (id)hitReps:(struct CGPoint { double x1; double x2; })arg1 withSlop:(struct CGSize { double x1; double x2; })arg2;
- (id)hitReps:(struct CGPoint { double x1; double x2; })arg1 withSlopBlock:(id)arg2;
- (id)hyperlinkRegions;
- (void)i_applicationDidBecomeActive;
- (void)i_configureFontSmoothingForContext:(struct CGContext { }*)arg1 layer:(id)arg2;
- (bool)i_hasInteractiveCanvasController;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })i_layerFrameInScaledCanvasIgnoringDragging;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })i_originalLayerFrameInScaledCanvas;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })i_partition_deepClipRect;
- (id)i_repForDraggingIgnoringTopLevelEditing;
- (void)i_willBeRemoved;
- (void)i_willEnterForeground;
- (id)info;
- (id)infoForTransforming;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;
- (id)interactiveCanvasController;
- (bool)intersectsUnscaledRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isDrawingInFlippedContext;
- (bool)isLocked;
- (bool)isOpaque;
- (bool)isPlaceholder;
- (id)itemsToAddToEditMenu;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })layerFrameInScaledCanvas;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })layerFrameInScaledCanvasRelativeToParent;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })layerTransform;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })layerTransformInRootForZeroAnchor;
- (id)layout;
- (void)layoutInRootChangedFrom:(id)arg1 to:(id)arg2 translatedOnly:(bool)arg3;
- (void)markTextureDirty;
- (bool)masksToBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })naturalBounds;
- (struct CGPath { }*)newPathInScaledCanvasFromNaturalRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)opacity;
- (id)p_repForDraggingIgnoringTopLevelEditing:(bool)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })parentLayerInverseTransformInRootForZeroAnchor;
- (id)parentRep;
- (void)processChangedProperty:(int)arg1;
- (void)recursivelyDrawChildrenInContext:(struct CGContext { }*)arg1;
- (void)recursivelyDrawInContext:(struct CGContext { }*)arg1;
- (void)recursivelyPerformSelector:(SEL)arg1;
- (void)recursivelyPerformSelector:(SEL)arg1 withObject:(id)arg2;
- (void)recursivelyPerformSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (void)recursivelyPerformSelectorIfImplemented:(SEL)arg1;
- (void)recursivelyPerformSelectorIfImplemented:(SEL)arg1 withObject:(id)arg2;
- (void)recursivelyPerformSelectorIfImplemented:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (bool)repDirectlyManagesContentsScaleOfLayer:(id)arg1;
- (id)repForDragging;
- (id)repForHandleSingleTap;
- (id)repForRotating;
- (id)repForSelecting;
- (bool)resizeFromCenterOnly;
- (id)resizedGeometryForTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setParentRep:(id)arg1;
- (void)setTemporaryMixingLayout:(id)arg1;
- (void)setTexture:(id)arg1;
- (void)setTextureActionAttributes:(id)arg1;
- (void)setTextureAnimationInfo:(id)arg1;
- (void)setTextureAttributes:(id)arg1 textureBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)setTextureByGlyphStyle:(int)arg1;
- (void)setTextureContext:(id)arg1;
- (void)setTextureDeliveryStyle:(unsigned long long)arg1;
- (void)setTextureStage:(unsigned long long)arg1;
- (double)shortestDistanceToPoint:(struct CGPoint { double x1; double x2; })arg1 countAsHit:(bool*)arg2;
- (bool)shouldExpandHitRegionWhenSmall;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })targetRectForEditMenu;
- (id)temporaryMixingLayout;
- (id)texture;
- (id)textureActionAttributes;
- (double)textureAngle;
- (id)textureAnimationInfo;
- (int)textureByGlyphStyle;
- (id)textureContext;
- (unsigned long long)textureDeliveryStyle;
- (id)textureForContext:(id)arg1;
- (unsigned long long)textureStage;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformToConvertNaturalFromLayerRelative;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformToConvertNaturalToLayerRelative;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })unRotatedTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)updateChildrenFromLayout;
- (void)updateFromLayout;
- (void)updateLayerGeometryFromLayout:(id)arg1;
- (bool)wantsToDistortWithImagerContext;
- (bool)wantsToHandleTapsOnContainingGroup;
- (bool)wantsToHandleTapsWhenLocked;
- (void)willBeRemoved;
- (void)willBeginEyedropperMode;

@end
