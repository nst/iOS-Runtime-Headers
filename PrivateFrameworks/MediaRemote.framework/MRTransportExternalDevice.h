/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote
 */

@interface MRTransportExternalDevice : MRExternalDevice <MRProtocolClientConnectionDelegate> {
    unsigned int  _cachedServerDisconnectError;
    MRExternalClientConnection * _connection;
    unsigned int  _connectionOptions;
    long long  _connectionRecoveryBehavior;
    unsigned int  _connectionState;
    id /* block */  _connectionStateCallback;
    NSObject<OS_dispatch_queue> * _connectionStateCallbackQueue;
    id /* block */  _customDataCallback;
    NSObject<OS_dispatch_queue> * _customDataCallbackQueue;
    void * _customOrigin;
    void * _deviceInfo;
    bool  _disconnecting;
    bool  _forceReconnectOnConnectionFailure;
    bool  _isCallingClientCallback;
    id /* block */  _nameCallback;
    NSObject<OS_dispatch_queue> * _nameCallbackQueue;
    struct __CFData { } * _nowPlayingArtwork;
    struct __CFDictionary { } * _nowPlayingInfo;
    void * _nowPlayingItem;
    id /* block */  _pairingAllowedCallback;
    NSObject<OS_dispatch_queue> * _pairingAllowedCallbackQueue;
    id /* block */  _pairingCallback;
    NSObject<OS_dispatch_queue> * _pairingCallbackQueue;
    void * _playerPath;
    unsigned long long  _reconnectionAttemptCount;
    CURunLoopThread * _runLoopThread;
    NSObject<OS_dispatch_queue> * _serialQueue;
    MRSupportedProtocolMessages * _supportedMessages;
    MRExternalDeviceTransport * _transport;
    bool  _usingSystemPairing;
    id /* block */  _volumeCallback;
    NSObject<OS_dispatch_queue> * _volumeCallbackQueue;
    bool  _wantsNowPlayingArtworkNotifications;
    bool  _wantsNowPlayingNotifications;
    bool  _wantsVolumeNotifications;
    NSObject<OS_dispatch_queue> * _workerQueue;
}

@property (nonatomic, retain) MRExternalClientConnection *connection;
@property (nonatomic) long long connectionRecoveryBehavior;
@property (nonatomic, copy) id /* block */ connectionStateCallback;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *connectionStateCallbackQueue;
@property (nonatomic, copy) id /* block */ customDataCallback;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *customDataCallbackQueue;
@property (nonatomic) void*customOrigin;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isCallingClientCallback;
@property (nonatomic, copy) id /* block */ nameCallback;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *nameCallbackQueue;
@property (nonatomic) struct __CFData { }*nowPlayingArtwork;
@property (nonatomic) struct __CFDictionary { }*nowPlayingInfo;
@property (nonatomic) void*nowPlayingItem;
@property (nonatomic, copy) id /* block */ pairingAllowedCallback;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *pairingAllowedCallbackQueue;
@property (nonatomic, copy) id /* block */ pairingCallback;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *pairingCallbackQueue;
@property (nonatomic) void*playerPath;
@property (readonly) Class superclass;
@property (nonatomic, readonly) MRExternalDeviceTransport *transport;
@property (nonatomic, copy) id /* block */ volumeCallback;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *volumeCallbackQueue;

- (void)_callCientCustomDataCallback:(id)arg1 name:(id)arg2;
- (void)_callClientAllowsPairingCallback;
- (void)_callClientConnectionStateCallback:(unsigned int)arg1 error:(id)arg2;
- (void)_callClientNameCallback;
- (void)_callClientPairingCallback:(id /* block */)arg1;
- (void)_callVolumeCallback:(float)arg1 endpoint:(id)arg2 outputDevice:(id)arg3;
- (void)_cleanUpWithReason:(long long)arg1;
- (void)_contentItemUpdatedNotification:(id)arg1;
- (void*)_createPlaybackQueue:(bool)arg1;
- (void)_handleCryptoPairingMessage:(id)arg1;
- (void)_handleDeviceInfoChange:(void*)arg1 oldDevice:(void*)arg2;
- (void)_handleDeviceInfoUpdateMessage:(id)arg1;
- (void)_handleGenericMessage:(id)arg1;
- (void)_handleLegacyPlaybackQueueRequestWithCompletion:(id /* block */)arg1;
- (void)_handleNotificationMessage:(id)arg1;
- (void)_handleNotificationMessageLegacy:(id)arg1;
- (void)_handleNotificationMessageModern:(id)arg1;
- (void)_handlePlaybackQueueRequest:(void*)arg1 forPlayer:(void*)arg2 completion:(id /* block */)arg3;
- (void)_handlePlaybackQueueResponse:(id)arg1 completion:(id /* block */)arg2;
- (void)_handleRemoteCommand:(unsigned int)arg1 withOptions:(id)arg2 playerPath:(void*)arg3 completion:(id /* block */)arg4;
- (void)_handleRemoveClientMessage:(id)arg1;
- (void)_handleRemovePlayerMessage:(id)arg1;
- (void)_handleSetArtworkMessage:(id)arg1;
- (void)_handleSetConnectionStateMessage:(id)arg1;
- (void)_handleSetNowPlayingClientMessage:(id)arg1;
- (void)_handleSetNowPlayingPlayerMessage:(id)arg1;
- (void)_handleSetStateMessage:(id)arg1;
- (void)_handleSetStateMessageLegacy:(id)arg1;
- (void)_handleSetStateMessageModern:(id)arg1;
- (void)_handleSetVolumeControlAvailabilityMessage:(id)arg1;
- (void)_handleTransactionMessage:(id)arg1;
- (void)_handleUpdateClientMessage:(id)arg1;
- (void)_handleUpdateContentItemArtworkMessage:(id)arg1;
- (void)_handleUpdateContentItemsMessage:(id)arg1;
- (void)_handleVolumeDidChangeMessage:(id)arg1;
- (id)_initializeConnectionWithOptions:(unsigned int)arg1;
- (id)_loadDeviceInfo;
- (void)_localDeviceInfoDidChangeNotification:(id)arg1;
- (id)_openSecuritySession;
- (void)_registerOriginCallbacks;
- (id)_setupCustomOrigin;
- (void)_tearDownCustomOriginWithReason:(long long)arg1;
- (void)_transportDeviceInfoDidChangeNotification:(id)arg1;
- (void)_updateNowPlayingInfo;
- (void)clientConnection:(id)arg1 didReceiveMessage:(id)arg2;
- (void)clientDidDisconnect:(id)arg1;
- (void)connectWithOptions:(unsigned int)arg1;
- (id)connection;
- (long long)connectionRecoveryBehavior;
- (unsigned int)connectionState;
- (id /* block */)connectionStateCallback;
- (id)connectionStateCallbackQueue;
- (id)currentClientUpdatesConfigMessage;
- (id /* block */)customDataCallback;
- (id)customDataCallbackQueue;
- (void*)customOrigin;
- (void)dealloc;
- (id)description;
- (void*)deviceInfo;
- (void)disconnect:(id)arg1;
- (id)errorForCurrentState;
- (id)hostName;
- (id)init;
- (id)initWithTransport:(id)arg1;
- (bool)isCallingClientCallback;
- (bool)isPaired;
- (bool)isUsingSystemPairing;
- (bool)isValid;
- (void)modifyOutputContextOfType:(unsigned int)arg1 addingDeviceUIDs:(id)arg2 removingDeviceUIDs:(id)arg3 settingDeviceUIDs:(id)arg4 withReplyQueue:(id)arg5 completion:(id /* block */)arg6;
- (id)name;
- (id /* block */)nameCallback;
- (id)nameCallbackQueue;
- (struct __CFData { }*)nowPlayingArtwork;
- (struct __CFDictionary { }*)nowPlayingInfo;
- (void*)nowPlayingItem;
- (void)outputDeviceVolume:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (id /* block */)pairingAllowedCallback;
- (id)pairingAllowedCallbackQueue;
- (id /* block */)pairingCallback;
- (id)pairingCallbackQueue;
- (void)ping:(double)arg1 callback:(id /* block */)arg2 withQueue:(id)arg3;
- (void*)playerPath;
- (long long)port;
- (void)sendClientUpdatesConfigMessage;
- (void)sendClientUpdatesConfigMessageWithCompletion:(id /* block */)arg1;
- (void)sendCustomData:(id)arg1 withName:(id)arg2;
- (void)setConnection:(id)arg1;
- (void)setConnectionRecoveryBehavior:(long long)arg1;
- (void)setConnectionState:(unsigned int)arg1 error:(id)arg2;
- (void)setConnectionStateCallback:(id /* block */)arg1;
- (void)setConnectionStateCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setConnectionStateCallbackQueue:(id)arg1;
- (void)setCustomDataCallback:(id /* block */)arg1;
- (void)setCustomDataCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setCustomDataCallbackQueue:(id)arg1;
- (void)setCustomOrigin:(void*)arg1;
- (void)setDeviceInfo:(void*)arg1;
- (void)setIsCallingClientCallback:(bool)arg1;
- (void)setName:(id)arg1;
- (void)setNameCallback:(id /* block */)arg1;
- (void)setNameCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setNameCallbackQueue:(id)arg1;
- (void)setNowPlayingArtwork:(struct __CFData { }*)arg1;
- (void)setNowPlayingInfo:(struct __CFDictionary { }*)arg1;
- (void)setNowPlayingItem:(void*)arg1;
- (void)setOutputDeviceVolume:(float)arg1 outputDevice:(id)arg2 queue:(id)arg3 completion:(id /* block */)arg4;
- (void)setPairingAllowedCallback:(id /* block */)arg1;
- (void)setPairingAllowedCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setPairingAllowedCallbackQueue:(id)arg1;
- (void)setPairingCallback:(id /* block */)arg1;
- (void)setPairingCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setPairingCallbackQueue:(id)arg1;
- (void)setPlayerPath:(void*)arg1;
- (void)setSupportedMessages:(id)arg1;
- (void)setUsingSystemPairing:(bool)arg1;
- (void)setVolume:(float)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (void)setVolumeCallback:(id /* block */)arg1;
- (void)setVolumeCallback:(id /* block */)arg1 withQueue:(id)arg2;
- (void)setVolumeCallbackQueue:(id)arg1;
- (void)setWantsNowPlayingArtworkNotifications:(bool)arg1;
- (void)setWantsNowPlayingNotifications:(bool)arg1;
- (void)setWantsVolumeNotifications:(bool)arg1;
- (id)supportedMessages;
- (id)transport;
- (void)unpair;
- (id /* block */)volumeCallback;
- (id)volumeCallbackQueue;
- (void)volumeWithQueue:(id)arg1 completion:(id /* block */)arg2;
- (bool)wantsNowPlayingArtworkNotifications;
- (bool)wantsNowPlayingNotifications;
- (bool)wantsVolumeNotifications;

@end
