/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface _UICanvas : UIResponder <FBSSceneDelegate, UICoordinateSpace, _UICanvasLifecycleStateMonitoring, _UIContextBinderDelegate> {
    bool  _active;
    long long  _avkitRequestedOverscanCompensation;
    _UIContextBinder * _binder;
    <_UICanvasDelegate> * _delegate;
    NSPointerArray * _inheritingCanvases;
    <_UICanvasMetricsUpdating> * _metricsCalculator;
    FBSSceneSettings * _oldSettings;
    FBSSceneSettings * _overrideSettings;
    __UISceneSubstrate * _sceenSubstrate;
    FBSScene * _scene;
    UIScreen * _screen;
    long long  _screenRequestedOverscanCompensation;
    _UICanvas * _settingsCanvas;
    bool  respondingToLifecycleEvent;
    bool  runningInTaskSwitcher;
    long long  state;
    bool  suspendedEventsOnly;
    bool  suspendedUnderLock;
}

@property (nonatomic, readonly) NSArray *_allWindows;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _peripheryInsets;
@property (nonatomic, readonly) double _systemMinimumMargin;
@property (nonatomic, readonly) NSArray *_visibleWindows;
@property (getter=_isActive, setter=_setIsActive:, nonatomic) bool active;
@property (nonatomic, readonly) <_UIAnimationFenceCoordinating> *animationFencingCoordinator;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (nonatomic, readonly) <UICoordinateSpace> *coordinateSpace;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) <_UICanvasDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=_effectiveSettings, nonatomic, readonly) FBSSceneSettings *effectiveSettings;
@property (getter=_hasLifecycle, nonatomic, readonly) bool hasLifecycle;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool keepContextAssociationInBackground;
@property (getter=_oldSettings, nonatomic, readonly) FBSSceneSettings *oldSettings;
@property (getter=_isRespondingToLifecycleEvent, setter=_setIsRespondingToLifecycleEvent:, nonatomic) bool respondingToLifecycleEvent;
@property (getter=_runningInTaskSwitcher, setter=_setRunningInTaskSwitcher:, nonatomic) bool runningInTaskSwitcher;
@property (nonatomic, readonly) FBSScene *scene;
@property (nonatomic, readonly) UIScreen *screen;
@property (getter=_screenRequestedDisplayNativePixelSize, setter=_setScreenRequestedDisplayNativePixelSize:, nonatomic) struct CGSize { double x1; double x2; } screenRequestedDisplayNativePixelSize;
@property (getter=_screenRequestedOverscanCompensation, setter=_setScreenRequestedOverscanCompensation:, nonatomic) long long screenRequestedOverscanCompensation;
@property (nonatomic, readonly) _UICanvas *settingsCanvas;
@property (nonatomic, readonly) long long state;
@property (readonly) Class superclass;
@property (getter=_suspendedEventsOnly, setter=_setSuspendedEventsOnly:, nonatomic) bool suspendedEventsOnly;
@property (getter=_suspendedUnderLock, setter=_setSuspendedUnderLock:, nonatomic) bool suspendedUnderLock;
@property (nonatomic, readonly) NSArray *windows;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

+ (id)_actionsHandlers;
+ (id)_canvasForScene:(id)arg1 create:(bool)arg2;
+ (void)_enqueuePostSettingUpdateTransactionBlock:(id /* block */)arg1;
+ (void)_enumerateAllWindowsIncludingInternalWindows:(bool)arg1 onlyVisibleWindows:(bool)arg2 asCopy:(bool)arg3 withBlock:(id /* block */)arg4;
+ (id)_keyboardCanvasForScreen:(id)arg1;
+ (id)_settingsDiffActions;
+ (id)_unassociatedCanvasForScreen:(id)arg1 create:(bool)arg2;
+ (void)_updateVisibleCanvasAndWindowOrderWithTest:(id /* block */)arg1;
+ (bool)activeSettingsTransaction;
+ (id)canvasForScene:(id)arg1;
+ (id)canvases;
+ (void)setActiveSettingsTransaction:(bool)arg1;

- (void).cxx_destruct;
- (void)_addInheritingCanvas:(id)arg1;
- (id)_allWindows;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_canvasPeripheryInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_canvasSafeAreaInsetsForInterfaceOrientation:(long long)arg1;
- (double)_canvasSystemMinimumMargin;
- (void)_computeMetrics:(bool)arg1;
- (void)_didBecomeActive;
- (id)_displayConfigurationRequest;
- (id)_displayEdgeInfoProvider;
- (id)_effectiveSettings;
- (void)_enumerateWindowsIncludingInternalWindows:(bool)arg1 onlyVisibleWindows:(bool)arg2 asCopy:(bool)arg3 stopped:(bool*)arg4 withBlock:(id /* block */)arg5;
- (void)_enumerateWindowsIncludingInternalWindows:(bool)arg1 onlyVisibleWindows:(bool)arg2 asCopy:(bool)arg3 withBlock:(id /* block */)arg4;
- (bool)_hasLifecycle;
- (id)_inheritingWindowsIncludingInvisible:(bool)arg1;
- (void)_invalidate;
- (void)_invalidateScreen;
- (bool)_isActive;
- (bool)_isRespondingToLifecycleEvent;
- (id)_oldSettings;
- (void)_performActions:(id /* block */)arg1 withOverrideSettings:(id)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_peripheryInsets;
- (void)_prepareCanvasForResumeWithTest:(id /* block */)arg1;
- (void)_prepareCanvasForSuspend;
- (void)_recycleAttachmentForWindow:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_referenceBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_referenceBoundsForOrientation:(long long)arg1;
- (void)_removeInheritingCanvas:(id)arg1;
- (long long)_resolvedOverscanCompensation;
- (bool)_runningInTaskSwitcher;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_safeAreaInsetsForInterfaceOrientation:(long long)arg1;
- (struct CGSize { double x1; double x2; })_screenRequestedDisplayNativePixelSize;
- (long long)_screenRequestedOverscanCompensation;
- (void)_setAVKitRequestedRefreshRate:(double)arg1 HDRMode:(long long)arg2 overscanCompensation:(long long)arg3;
- (void)_setDisplayConfigurationRequest:(id)arg1;
- (void)_setIsActive:(bool)arg1;
- (void)_setIsRespondingToLifecycleEvent:(bool)arg1;
- (void)_setRunningInTaskSwitcher:(bool)arg1;
- (void)_setScreenRequestedDisplayNativePixelSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_setScreenRequestedOverscanCompensation:(long long)arg1;
- (void)_setSuspendedEventsOnly:(bool)arg1;
- (void)_setSuspendedUnderLock:(bool)arg1;
- (bool)_suspendedEventsOnly;
- (bool)_suspendedUnderLock;
- (double)_systemMinimumMargin;
- (void)_updateVisibleWindowOrderWithTest:(id /* block */)arg1;
- (id)_visibleWindows;
- (void)_willAttach;
- (void)_willResignActive;
- (bool)_windowIsFront:(id)arg1;
- (void)_windowUpdatedProperties:(id)arg1;
- (void)_windowUpdatedVisibility:(id)arg1;
- (id)allWindowsIncludingInternalWindows:(bool)arg1 onlyVisibleWindows:(bool)arg2;
- (id)animationFencingCoordinator;
- (void)attachWindow:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromCoordinateSpace:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toCoordinateSpace:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromCoordinateSpace:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toCoordinateSpace:(id)arg2;
- (id)coordinateSpace;
- (id)delegate;
- (id)description;
- (void)detachWindow:(id)arg1;
- (void)enrolledBindablesDidChangeForBinder:(id)arg1;
- (void)inheritSettingsFromCanvas:(id)arg1;
- (id)initWithScene:(id)arg1;
- (bool)keepContextAssociationInBackground;
- (id)scene;
- (void)scene:(id)arg1 didReceiveActions:(id)arg2;
- (void)scene:(id)arg1 didUpdateWithDiff:(id)arg2 transitionContext:(id)arg3 completion:(id /* block */)arg4;
- (id)sceneLayerForWindow:(id)arg1;
- (id)screen;
- (void)setDelegate:(id)arg1;
- (void)setKeepContextAssociationInBackground:(bool)arg1;
- (id)settingsCanvas;
- (long long)state;
- (id)windows;

// Image: /System/Library/Frameworks/AVKit.framework/AVKit

- (void)_avkit_setPreferredRefreshRate:(double)arg1 HDRMode:(long long)arg2 overscanCompensation:(long long)arg3;
- (bool)avkit_isInBackground;
- (void)avkit_resetPreferredModeSwitchRequest;
- (bool)avkit_screenHasWindowsExcludingWindow:(id)arg1;
- (long long)avkit_screenType;
- (void)avkit_setPreferredRefreshRate:(double)arg1 HDRMode:(long long)arg2;

@end
