/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos
 */

@interface RCCaptureOutputWriter : NSObject <AVCaptureAudioDataOutputSampleBufferDelegate> {
    AVCaptureSession * _AVCaptureSession;
    long long  _AVCaptureSessionStartupState;
    NSURL * _activeOutputFileURL;
    AVAssetWriter * _assetWriter;
    <RCCaptureOutputWriterDelegate> * _captureOutputDelegate;
    NSMutableArray * _delegateBlocks;
    double  _finalizedAssetDuration;
    bool  _finalizedAssetEncounteredError;
    NSURL * _finalizedAssetURL;
    bool  _handledAVCaptureSessionFailedToStart;
    bool  _handledAVCaptureSessionTerminatedAbnormally;
    bool  _isProcessingSamples;
    unsigned long long  _maxRecordedFileSize;
    NSObject<OS_dispatch_queue> * _queue;
    NSDate * _recordingCreationDate;
    NSUUID * _recordingSessionID;
    AVCaptureAudioDataOutput * _sampleBufferDataOutput;
    NSObject<OS_dispatch_queue> * _sampleBufferQueue;
    unsigned long long  _sampleBuffersWritten;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _sampleBuffersWrittenDuration;
    double  _storeDemoTimeLimit;
    bool  _waitingForAVCaptureSessionDidStart;
    long long  _writerState;
}

@property (nonatomic, readonly) AVCaptureSession *AVCaptureSession;
@property (nonatomic, retain) NSURL *activeOutputFileURL;
@property (nonatomic, retain) AVAssetWriter *assetWriter;
@property (nonatomic, readonly) double assetWritingCheckpointInterval;
@property (nonatomic) <RCCaptureOutputWriterDelegate> *captureOutputDelegate;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double finalizedAssetDuration;
@property (nonatomic, readonly) bool finalizedAssetEncounteredError;
@property (nonatomic, readonly) NSURL *finalizedAssetURL;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long maxRecordedFileSize;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, retain) NSDate *recordingCreationDate;
@property (nonatomic, copy) NSUUID *recordingSessionID;
@property (nonatomic, retain) AVCaptureAudioDataOutput *sampleBufferDataOutput;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *sampleBufferQueue;
@property (nonatomic) double storeDemoTimeLimit;
@property (readonly) Class superclass;
@property (nonatomic) long long writerState;

- (void).cxx_destruct;
- (id)AVCaptureSession;
- (void)_checkIfRecordingSessionEverStarted:(id)arg1;
- (void)_clearSampleDataOutput;
- (void)_finalizeAssetWriting;
- (bool)_handleEncounteredFatalAssetWriterError;
- (bool)_handleNotificationAsSessionStartFailure;
- (void)_interruptionDidBegin:(id)arg1;
- (void)_prepareCaptureSessionOutputsIfNecessary;
- (void)_registerForCatpureSessionNotifications;
- (void)_scheduleMainThreadDelegateBlock:(id /* block */)arg1;
- (void)_sessionDidStartRunning:(id)arg1;
- (void)_sessionDidStopRunning:(id)arg1;
- (void)_sessionErrored:(id)arg1;
- (void)_setWriterState:(long long)arg1;
- (bool)_setupAssetWriter:(id*)arg1 sampleBufferRef:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)_unregisterForCatpureSessionNotifications;
- (long long)_writerState;
- (id)activeOutputFileURL;
- (id)assetWriter;
- (double)assetWritingCheckpointInterval;
- (void)captureOutput:(id)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2 fromConnection:(id)arg3;
- (id)captureOutputDelegate;
- (void)dealloc;
- (void)endWriting;
- (void)enforceMaxRecordingDuration;
- (double)finalizedAssetDuration;
- (bool)finalizedAssetEncounteredError;
- (id)finalizedAssetURL;
- (id)initWithAVCaptureSession:(id)arg1;
- (unsigned long long)maxRecordedFileSize;
- (void)pauseWriting;
- (id)queue;
- (id)recordingCreationDate;
- (id)recordingSessionID;
- (void)resumeWriting;
- (id)sampleBufferDataOutput;
- (id)sampleBufferQueue;
- (void)setActiveOutputFileURL:(id)arg1;
- (void)setAssetWriter:(id)arg1;
- (void)setCaptureOutputDelegate:(id)arg1;
- (void)setMaxRecordedFileSize:(unsigned long long)arg1;
- (void)setQueue:(id)arg1;
- (void)setRecordingCreationDate:(id)arg1;
- (void)setRecordingSessionID:(id)arg1;
- (void)setSampleBufferDataOutput:(id)arg1;
- (void)setSampleBufferQueue:(id)arg1;
- (void)setStoreDemoTimeLimit:(double)arg1;
- (void)setWriterState:(long long)arg1;
- (bool)startCaptureSession;
- (void)startMaximumRecordingDurationTimer;
- (bool)startWritingToOutputFileURL:(id)arg1 creationDate:(id)arg2 beginPaused:(bool)arg3 captureOutputDelegate:(id)arg4;
- (void)stopCaptureSession;
- (double)storeDemoTimeLimit;
- (long long)writerState;

@end
