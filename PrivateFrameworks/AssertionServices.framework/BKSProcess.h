/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AssertionServices.framework/AssertionServices
 */

@interface BKSProcess : BSBaseXPCClient {
    NSString * _activationReason;
    NSString * _bundlePath;
    NSObject<OS_dispatch_queue> * _clientQueue;
    bool  _connectedToExternalAccessories;
    <BKSProcessDelegate> * _delegate;
    bool  _nowPlayingWithAudio;
    int  _pid;
    bool  _recordingAudio;
    int  _taskState;
    long long  _terminationReason;
    int  _visibility;
    bool  _workspaceLocked;
}

@property (nonatomic, copy) NSString *activationReason;
@property (nonatomic, readonly) double backgroundTimeRemaining;
@property (nonatomic) bool connectedToExternalAccessories;
@property (nonatomic) <BKSProcessDelegate> *delegate;
@property (nonatomic) bool nowPlayingWithAudio;
@property (nonatomic) bool recordingAudio;
@property (nonatomic) int taskState;
@property (nonatomic) long long terminationReason;
@property (nonatomic) int visibility;
@property (nonatomic) bool workspaceLocked;

+ (double)backgroundTimeRemaining;
+ (id)busyExtensionInstances:(id)arg1;

- (void)_handleDebuggingStateChanged:(id)arg1;
- (void)_handleExpirationWarning:(id)arg1;
- (void)_handleSuspendedStateChanged:(id)arg1;
- (void)_sendMessageType:(int)arg1 withMessage:(id)arg2;
- (void)_sendMessageType:(int)arg1 withMessage:(id)arg2 withReplyHandler:(id)arg3 waitForReply:(bool)arg4;
- (id)activationReason;
- (double)backgroundTimeRemaining;
- (bool)connectedToExternalAccessories;
- (void)dealloc;
- (id)delegate;
- (id)init;
- (id)initWithPID:(int)arg1 bundlePath:(id)arg2 visibility:(int)arg3 workspaceLocked:(bool)arg4 queue:(id)arg5;
- (bool)nowPlayingWithAudio;
- (void)queue_connectionWasCreated;
- (void)queue_connectionWasInterrupted;
- (void)queue_handleMessage:(id)arg1;
- (bool)recordingAudio;
- (void)setActivationReason:(id)arg1;
- (void)setConnectedToExternalAccessories:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setNowPlayingWithAudio:(bool)arg1;
- (void)setRecordingAudio:(bool)arg1;
- (void)setTaskState:(int)arg1;
- (void)setTerminationReason:(long long)arg1;
- (void)setVisibility:(int)arg1;
- (void)setWorkspaceLocked:(bool)arg1;
- (int)taskState;
- (long long)terminationReason;
- (int)visibility;
- (bool)workspaceLocked;

@end
