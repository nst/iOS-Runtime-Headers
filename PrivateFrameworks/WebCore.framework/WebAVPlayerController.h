/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/WebCore.framework/WebCore
 */

@interface WebAVPlayerController : NSObject {
    bool  _allowsExternalPlayback;
    NSArray * _audioMediaSelectionOptions;
    bool  _canPause;
    bool  _canPlay;
    bool  _canScanBackward;
    bool  _canSeek;
    bool  _canTogglePlayback;
    struct CGSize { 
        double width; 
        double height; 
    }  _contentDimensions;
    double  _contentDuration;
    double  _contentDurationWithinEndTimes;
    WebAVMediaSelectionOption * _currentAudioMediaSelectionOption;
    WebAVMediaSelectionOption * _currentLegibleMediaSelectionOption;
    struct WebPlaybackSessionModel { int (**x1)(); } * _delegate;
    bool  _externalPlaybackActive;
    NSString * _externalPlaybackAirPlayDeviceLocalizedName;
    long long  _externalPlaybackType;
    bool  _hasEnabledAudio;
    bool  _hasEnabledVideo;
    NSArray * _legibleMediaSelectionOptions;
    NSArray * _loadedTimeRanges;
    double  _maxTime;
    double  _minTime;
    bool  _pictureInPictureInterrupted;
    bool  _pictureInPicturePossible;
    struct WebPlaybackSessionInterfaceAVKit { int (**x1)(); int (**x2)(); unsigned int x3; struct RetainPtr<WebAVPlayerController> { void *x_4_1_1; } x4; struct WebPlaybackSessionModel {} *x5; } * _playbackSessionInterface;
    AVPlayerController * _playerControllerProxy;
    bool  _playingOnSecondScreen;
    double  _rate;
    NSArray * _seekableTimeRanges;
    long long  _status;
    AVValueTiming * _timing;
}

@property bool allowsExternalPlayback;
@property (retain) NSArray *audioMediaSelectionOptions;
@property bool canPause;
@property bool canPlay;
@property bool canScanBackward;
@property (readonly) bool canScanForward;
@property bool canSeek;
@property (readonly) bool canSeekToBeginning;
@property (readonly) bool canSeekToEnd;
@property bool canTogglePlayback;
@property struct CGSize { double x1; double x2; } contentDimensions;
@property double contentDuration;
@property double contentDurationWithinEndTimes;
@property (retain) WebAVMediaSelectionOption *currentAudioMediaSelectionOption;
@property (retain) WebAVMediaSelectionOption *currentLegibleMediaSelectionOption;
@property struct WebPlaybackSessionModel { int (**x1)(); }*delegate;
@property (getter=isExternalPlaybackActive) bool externalPlaybackActive;
@property (retain) NSString *externalPlaybackAirPlayDeviceLocalizedName;
@property long long externalPlaybackType;
@property (readonly) bool hasAudioMediaSelectionOptions;
@property bool hasEnabledAudio;
@property bool hasEnabledVideo;
@property (readonly) bool hasLegibleMediaSelectionOptions;
@property (readonly) bool hasMediaSelectionOptions;
@property (retain) NSArray *legibleMediaSelectionOptions;
@property (retain) NSArray *loadedTimeRanges;
@property double maxTime;
@property double minTime;
@property (getter=isPictureInPictureInterrupted) bool pictureInPictureInterrupted;
@property (getter=isPictureInPicturePossible) bool pictureInPicturePossible;
@property struct WebPlaybackSessionInterfaceAVKit { int (**x1)(); int (**x2)(); unsigned int x3; struct RetainPtr<WebAVPlayerController> { void *x_4_1_1; } x4; struct WebPlaybackSessionModel {} *x5; }*playbackSessionInterface;
@property (retain) AVPlayerController *playerControllerProxy;
@property (getter=isPlaying) bool playing;
@property (getter=isPlayingOnExternalScreen, readonly) bool playingOnExternalScreen;
@property (getter=isPlayingOnSecondScreen, readonly) bool playingOnSecondScreen;
@property double rate;
@property (retain) NSArray *seekableTimeRanges;
@property long long status;
@property (retain) AVValueTiming *timing;

+ (id)keyPathsForValuesAffectingCanScanForward;
+ (id)keyPathsForValuesAffectingCanSeekToBeginning;
+ (id)keyPathsForValuesAffectingCanSeekToEnd;
+ (id)keyPathsForValuesAffectingCurrentTimeWithinEndTimes;
+ (id)keyPathsForValuesAffectingHasAudioMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingHasLegibleMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingHasLiveStreamingContent;
+ (id)keyPathsForValuesAffectingHasMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingPlaying;
+ (id)keyPathsForValuesAffectingPlayingOnExternalScreen;

- (bool)allowsExternalPlayback;
- (id)audioMediaSelectionOptions;
- (void)beginScanningBackward:(id)arg1;
- (void)beginScanningForward:(id)arg1;
- (void)beginScrubbing:(id)arg1;
- (bool)canPause;
- (bool)canPlay;
- (bool)canScanBackward;
- (bool)canScanForward;
- (bool)canSeek;
- (bool)canSeekToBeginning;
- (bool)canSeekToEnd;
- (bool)canTogglePlayback;
- (struct CGSize { double x1; double x2; })contentDimensions;
- (double)contentDuration;
- (double)contentDurationWithinEndTimes;
- (id)currentAudioMediaSelectionOption;
- (id)currentLegibleMediaSelectionOption;
- (double)currentTimeWithinEndTimes;
- (void)dealloc;
- (struct WebPlaybackSessionModel { int (**x1)(); }*)delegate;
- (void)endScanningBackward:(id)arg1;
- (void)endScanningForward:(id)arg1;
- (void)endScrubbing:(id)arg1;
- (id)externalPlaybackAirPlayDeviceLocalizedName;
- (long long)externalPlaybackType;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (void)gotoEndOfSeekableRanges:(id)arg1;
- (bool)hasAudioMediaSelectionOptions;
- (bool)hasEnabledAudio;
- (bool)hasEnabledVideo;
- (bool)hasLegibleMediaSelectionOptions;
- (bool)hasLiveStreamingContent;
- (bool)hasMediaSelectionOptions;
- (id)init;
- (bool)isExternalPlaybackActive;
- (bool)isPictureInPictureInterrupted;
- (bool)isPictureInPicturePossible;
- (bool)isPlaying;
- (bool)isPlayingOnExternalScreen;
- (bool)isPlayingOnSecondScreen;
- (id)legibleMediaSelectionOptions;
- (id)loadedTimeRanges;
- (double)maxTime;
- (double)minTime;
- (void)pause:(id)arg1;
- (void)play:(id)arg1;
- (struct WebPlaybackSessionInterfaceAVKit { int (**x1)(); int (**x2)(); unsigned int x3; struct RetainPtr<WebAVPlayerController> { void *x_4_1_1; } x4; struct WebPlaybackSessionModel {} *x5; }*)playbackSessionInterface;
- (id)player;
- (id)playerControllerProxy;
- (double)rate;
- (void)seekChapterBackward:(id)arg1;
- (void)seekChapterForward:(id)arg1;
- (void)seekToBeginning:(id)arg1;
- (void)seekToEnd:(id)arg1;
- (void)seekToTime:(double)arg1;
- (id)seekableTimeRanges;
- (void)setAllowsExternalPlayback:(bool)arg1;
- (void)setAudioMediaSelectionOptions:(id)arg1;
- (void)setCanPause:(bool)arg1;
- (void)setCanPlay:(bool)arg1;
- (void)setCanScanBackward:(bool)arg1;
- (void)setCanSeek:(bool)arg1;
- (void)setCanTogglePlayback:(bool)arg1;
- (void)setContentDimensions:(struct CGSize { double x1; double x2; })arg1;
- (void)setContentDuration:(double)arg1;
- (void)setContentDurationWithinEndTimes:(double)arg1;
- (void)setCurrentAudioMediaSelectionOption:(id)arg1;
- (void)setCurrentLegibleMediaSelectionOption:(id)arg1;
- (void)setCurrentTimeWithinEndTimes:(double)arg1;
- (void)setDelegate:(struct WebPlaybackSessionModel { int (**x1)(); }*)arg1;
- (void)setExternalPlaybackActive:(bool)arg1;
- (void)setExternalPlaybackAirPlayDeviceLocalizedName:(id)arg1;
- (void)setExternalPlaybackType:(long long)arg1;
- (void)setHasEnabledAudio:(bool)arg1;
- (void)setHasEnabledVideo:(bool)arg1;
- (void)setLegibleMediaSelectionOptions:(id)arg1;
- (void)setLoadedTimeRanges:(id)arg1;
- (void)setMaxTime:(double)arg1;
- (void)setMinTime:(double)arg1;
- (void)setPictureInPictureInterrupted:(bool)arg1;
- (void)setPictureInPicturePossible:(bool)arg1;
- (void)setPlaybackSessionInterface:(struct WebPlaybackSessionInterfaceAVKit { int (**x1)(); int (**x2)(); unsigned int x3; struct RetainPtr<WebAVPlayerController> { void *x_4_1_1; } x4; struct WebPlaybackSessionModel {} *x5; }*)arg1;
- (void)setPlayerControllerProxy:(id)arg1;
- (void)setPlaying:(bool)arg1;
- (void)setRate:(double)arg1;
- (void)setSeekableTimeRanges:(id)arg1;
- (void)setStatus:(long long)arg1;
- (void)setTiming:(id)arg1;
- (void)skipBackwardThirtySeconds:(id)arg1;
- (long long)status;
- (id)timing;
- (void)togglePlayback:(id)arg1;
- (void)togglePlaybackEvenWhenInBackground:(id)arg1;

@end
