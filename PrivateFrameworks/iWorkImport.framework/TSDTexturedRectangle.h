/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSDTexturedRectangle : NSObject <NSCopying> {
    TSUBezierPath * _bakedShapePath;
    bool  _isVerticalText;
    TSUBezierPath * _shapePath;
    struct CGSize { 
        double width; 
        double height; 
    }  _singleTextureSize;
    NSString * _text;
    double  _textBaseline;
    TSUColor * _textColor;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _textRange;
    double  _textXHeight;
    NSMutableDictionary * mAttributes;
    struct CGImage { } * mBakedImage;
    TSDBitmapRenderingQualityInfo * mBitmapRenderingQualityInfo;
    struct CGColorSpace { } * mColorSpace;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mContentRect;
    bool  mDidInitFromGLTexture;
    bool  mIsFlattened;
    CALayer * mLayer;
    struct CGPoint { 
        double x; 
        double y; 
    }  mOffset;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mOriginalFrame;
    struct CGPoint { 
        double x; 
        double y; 
    }  mOriginalPosition;
    TSDTextureSet * mParent;
    id  mRenderBlock;
    bool  mSingleTextureContainsMipmaps;
    unsigned int  mSingleTextureName;
    struct CGSize { 
        double width; 
        double height; 
    }  mSize;
    struct CGImage { } * mSourceImage;
    NSMutableArray * mTags;
    double  mTextureOpacity;
    long long  mTextureType;
}

@property (nonatomic, retain) TSDBitmapRenderingQualityInfo *bitmapRenderingQualityInfo;
@property (nonatomic) struct CGColorSpace { }*colorSpace;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentRect;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frameOnCanvas;
@property (nonatomic, readonly) struct CGImage { }*image;
@property (nonatomic, readonly) bool isBackgroundTexture;
@property (nonatomic) bool isFlattened;
@property (nonatomic, readonly) bool isImageSource;
@property (nonatomic, readonly) bool isRenderable;
@property (nonatomic) bool isVerticalText;
@property (nonatomic, readonly) CALayer *layer;
@property (nonatomic) struct CGPoint { double x1; double x2; } offset;
@property (nonatomic) struct CGPoint { double x1; double x2; } originalPosition;
@property (nonatomic) TSDTextureSet *parent;
@property (nonatomic, readonly) CALayer *parentLayer;
@property (nonatomic, retain) TSUBezierPath *shapePath;
@property (nonatomic, readonly) unsigned int singleTextureName;
@property (nonatomic, readonly) double singleTextureOpacity;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } singleTextureSize;
@property (nonatomic, readonly) unsigned int singleTextureTarget;
@property (nonatomic) struct CGSize { double x1; double x2; } size;
@property (nonatomic, retain) NSMutableArray *tags;
@property (nonatomic, copy) NSString *text;
@property (nonatomic) double textBaseline;
@property (nonatomic, retain) TSUColor *textColor;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } textRange;
@property (nonatomic) double textXHeight;
@property (nonatomic) double textureOpacity;
@property (nonatomic) long long textureType;

+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRectForTextures:(id)arg1;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRectOnCanvasForTextures:(id)arg1;

- (void)adjustAnchorRelativeToCenterOfRotation:(struct CGPoint { double x1; double x2; })arg1;
- (void)bakeLayerWithAngle:(double)arg1 scale:(double)arg2;
- (id)bitmapRenderingQualityInfo;
- (struct CGColorSpace { }*)colorSpace;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertToCanvasCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameOnCanvas;
- (struct CGImage { }*)image;
- (id)initWithCGImage:(struct CGImage { }*)arg1;
- (id)initWithLayer:(id)arg1;
- (id)initWithSize:(struct CGSize { double x1; double x2; })arg1 offset:(struct CGPoint { double x1; double x2; })arg2 renderBlock:(id)arg3;
- (id)initWithTextureInfo:(id)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (bool)isBackgroundTexture;
- (bool)isFlattened;
- (bool)isImageSource;
- (bool)isRenderable;
- (bool)isVerticalText;
- (id)layer;
- (struct CGPoint { double x1; double x2; })offset;
- (struct CGPoint { double x1; double x2; })originalPosition;
- (struct CGColorSpace { }*)p_colorSpace;
- (struct CGImage { }*)p_newImageAndBufferWithAngle:(double)arg1 scale:(double)arg2 offset:(struct CGPoint { double x1; double x2; })arg3 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg4;
- (void)p_updateFrame;
- (id)parent;
- (id)parentLayer;
- (void)releaseSingleTexture;
- (void)renderIntoContext:(struct CGContext { }*)arg1;
- (void)renderIntoContext:(struct CGContext { }*)arg1 shouldApplyAlpha:(bool)arg2;
- (void)renderLayerContentsIfNeeded;
- (void)resetAnchorPoint;
- (void)resetToSourceImage;
- (void)setBitmapRenderingQualityInfo:(id)arg1;
- (void)setColorSpace:(struct CGColorSpace { }*)arg1;
- (void)setContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setIsFlattened:(bool)arg1;
- (void)setIsVerticalText:(bool)arg1;
- (void)setOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setOriginalPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)setParent:(id)arg1;
- (void)setShapePath:(id)arg1;
- (void)setSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setTags:(id)arg1;
- (void)setText:(id)arg1;
- (void)setTextBaseline:(double)arg1;
- (void)setTextColor:(id)arg1;
- (void)setTextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setTextXHeight:(double)arg1;
- (void)setTextureOpacity:(double)arg1;
- (void)setTextureType:(long long)arg1;
- (void)setupSingleTexture;
- (void)setupSingleTextureAndGenerateMipMaps:(bool)arg1;
- (id)shapePath;
- (unsigned int)singleTextureName;
- (double)singleTextureOpacity;
- (struct CGSize { double x1; double x2; })singleTextureSize;
- (unsigned int)singleTextureTarget;
- (struct CGSize { double x1; double x2; })size;
- (id)tags;
- (void)teardown;
- (id)text;
- (double)textBaseline;
- (id)textColor;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })textRange;
- (double)textXHeight;
- (double)textureOpacity;
- (long long)textureType;

@end
