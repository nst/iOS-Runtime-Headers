/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference
 */

@interface AVConference : NSObject {
    NSObject<OS_dispatch_queue> * _callbackQueue;
    id  _delegate;
    bool  _isUsingFrontCamera;
    bool  _microphoneMuted;
    NSMutableDictionary * _stateCacheForCallID;
    NSObject<OS_dispatch_queue> * _stateQueue;
    AVConferenceXPCClient * connection;
    CALayer * networkQualityGraphLayer_;
    NSTimer * networkQualityUpdateTimer_;
    id  opaqueConf;
    NSDictionary * serverBag;
    bool  shouldDisplayNetworkQualityGraph_;
    bool  useServer;
}

@property (nonatomic) NSObject<AVConferenceDelegate> *delegate;
@property (getter=isSpeakerPhoneEnabled) bool enableSpeakerPhone;
@property (getter=isInputFrequencyMeteringEnabled, nonatomic) bool inputFrequencyMeteringEnabled;
@property (readonly) float inputMeterLevel;
@property (getter=isInputMeteringEnabled, nonatomic) bool inputMeteringEnabled;
@property (readonly) int localFrameHeight;
@property (readonly) int localFrameWidth;
@property (getter=isMicrophoneMuted, nonatomic) bool microphoneMuted;
@property (readonly) unsigned int natType;
@property (retain) CALayer *networkQualityGraphLayer;
@property (retain) NSTimer *networkQualityUpdateTimer;
@property (getter=isOutputFrequencyMeteringEnabled, nonatomic) bool outputFrequencyMeteringEnabled;
@property (readonly) float outputMeterLevel;
@property (getter=isOutputMeteringEnabled, nonatomic) bool outputMeteringEnabled;
@property (nonatomic) bool requiresWifi;
@property bool shouldDisplayNetworkQualityGraph;
@property (getter=isUsingViceroyBlobFormat) bool useViceroyBlobFormat;

+ (short)addressPointerFromBlob:(id)arg1;
+ (unsigned int)doBlockingConnectionCheck;
+ (unsigned int)doBlockingConnectionCheck:(bool)arg1;
+ (id)externalAddressForSelfConnectionBlob:(id)arg1;
+ (bool)hasActiveAudioSession;
+ (void)refreshLoggingParameters;
+ (void)setAudioSessionProperties:(id)arg1;
+ (void)startAudioSession;
+ (void)startAudioSessionWithCompletionHandler:(id /* block */)arg1;
+ (void)stopAudioSession;

- (void)addGKSCallEvent:(id)arg1 sessionID:(id)arg2;
- (id)callMetadataForCallID:(long long)arg1;
- (id)callStateForCallID:(id)arg1;
- (void)cancelCallID:(long long)arg1;
- (id)capabilitiesForCallID:(long long)arg1;
- (id)convertBlobtoNewBlob:(id)arg1;
- (id)convertBlobtoOldBlob:(id)arg1;
- (id)currentAudioInputDevice;
- (id)currentAudioOutputDevice;
- (void)dealloc;
- (id)delegate;
- (void)deregisterBlocksForVCNotifications;
- (unsigned int)doBlockingConnectionCheck;
- (bool)getIsAudioPaused:(bool*)arg1 callID:(long long)arg2 error:(id*)arg3;
- (bool)getIsVideoPaused:(bool*)arg1 callID:(long long)arg2 error:(id*)arg3;
- (void)handleGKSConnectivitySettingsUpdate:(id)arg1;
- (id)init;
- (id)initWithClientUUID:(id)arg1;
- (id)initWithClientUUID:(id)arg1 transportType:(unsigned int)arg2;
- (long long)initializeNewCall;
- (long long)initializeNewCallWithDeviceRole:(int)arg1;
- (float)inputMeterLevel;
- (void)inviteDictionaryForCallID:(long long)arg1 remoteInviteDictionary:(id)arg2 nonCellularCandidateTimeout:(double)arg3 block:(id /* block */)arg4 queue:(id)arg5;
- (bool)isInputFrequencyMeteringEnabled;
- (bool)isInputMeteringEnabled;
- (bool)isMicrophoneMuted;
- (bool)isOutputFrequencyMeteringEnabled;
- (bool)isOutputMeteringEnabled;
- (bool)isSpeakerPhoneEnabled;
- (bool)isUsingViceroyBlobFormat;
- (long long)lastActiveCallID;
- (void)listenForNotifications;
- (double)localBitrateForCallID:(long long)arg1;
- (int)localFrameHeight;
- (int)localFrameWidth;
- (double)localFramerateForCallID:(long long)arg1;
- (double)localPacketLossRateForCallID:(long long)arg1;
- (id)localScreenAttributesForVideoAttributes:(id)arg1;
- (unsigned int)natType;
- (float)networkQuality;
- (double)networkQualityForCallID:(long long)arg1;
- (id)networkQualityGraphLayer;
- (id)networkQualityUpdateTimer;
- (id)newRandomParticipantID;
- (float)outputMeterLevel;
- (void)processCancelRelayRequest:(long long)arg1 cancelDict:(id)arg2 didOriginateRequest:(bool)arg3;
- (void)processRelayRequestResponse:(long long)arg1 responseDict:(id)arg2 didOriginateRequest:(bool)arg3;
- (void)processRelayUpdate:(long long)arg1 updateDict:(id)arg2 didOriginateRequest:(bool)arg3;
- (void)processRemoteIPChange:(id)arg1 callID:(long long)arg2;
- (void)registerBlocksForVCNotifications;
- (double)remoteBitrateForCallID:(long long)arg1;
- (void)remoteCancelledCallID:(long long)arg1;
- (int)remoteFrameHeightForCallID:(long long)arg1;
- (int)remoteFrameWidthForCallID:(long long)arg1;
- (double)remoteFramerateForCallID:(long long)arg1;
- (double)remotePacketLossRateForCallID:(long long)arg1;
- (void*)remoteVideoBackLayer;
- (void*)remoteVideoLayer;
- (bool)requiresWifi;
- (double)roundTripTimeForCallID:(long long)arg1;
- (void)sendARPLData:(id)arg1 toCallID:(long long)arg2;
- (void)sendData:(id)arg1 forCallID:(long long)arg2 encrypted:(bool)arg3;
- (void)sendProtobuf:(id)arg1 withType:(long long)arg2 forCallID:(long long)arg3;
- (void)serverDied;
- (void)serverReconnected;
- (bool)setActive:(bool)arg1;
- (bool)setAudioInputDevice:(id)arg1;
- (bool)setAudioOutputDevice:(id)arg1;
- (void)setCallReport:(long long)arg1 withReport:(id)arg2;
- (void)setCallState:(id)arg1 forCallID:(id)arg2;
- (void)setConferenceState:(unsigned int)arg1 forCallID:(long long)arg2;
- (void)setConferenceVisualRectangle:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forCallID:(long long)arg2;
- (void)setDelegate:(id)arg1;
- (void)setEnableSpeakerPhone:(bool)arg1;
- (void)setInputFrequencyMeteringEnabled:(bool)arg1;
- (void)setInputMeteringEnabled:(bool)arg1;
- (void)setLastActiveCallID:(long long)arg1;
- (void)setLocalScreenAttributes:(id)arg1;
- (void)setMicrophoneMuted:(bool)arg1;
- (void)setNetworkQualityGraphLayer:(id)arg1;
- (void)setNetworkQualityUpdateTimer:(id)arg1;
- (void)setOutputFrequencyMeteringEnabled:(bool)arg1;
- (void)setOutputMeteringEnabled:(bool)arg1;
- (bool)setPauseAudio:(bool)arg1 callID:(long long)arg2 error:(id*)arg3;
- (bool)setPauseVideo:(bool)arg1 callID:(long long)arg2 error:(id*)arg3;
- (void)setPeerCN:(id)arg1 callID:(long long)arg2;
- (void)setPeerProtocolVersion:(unsigned int)arg1 forCallID:(long long)arg2;
- (void)setPeerReportingIdentifier:(id)arg1 sessionIdentifier:(id)arg2 forCallID:(long long)arg3;
- (void)setRemoteVideoBackLayer:(void*)arg1;
- (void)setRemoteVideoLayer:(void*)arg1;
- (void)setRequiresWifi:(bool)arg1;
- (bool)setServerInfo:(id)arg1;
- (void)setSessionID:(id)arg1 callID:(long long)arg2;
- (void)setSetSessionID:(id)arg1 forCallID:(long long)arg2;
- (void)setShouldDisplayNetworkQualityGraph:(bool)arg1;
- (void)setUseViceroyBlobFormat:(bool)arg1;
- (bool)shouldDisplayNetworkQualityGraph;
- (void)shouldSendBlackFrames:(bool)arg1 callID:(long long)arg2;
- (bool)startConnectionWithCallID:(long long)arg1 inviteData:(id)arg2 isCaller:(bool)arg3 capabilities:(id)arg4 destination:(id)arg5 error:(id*)arg6;
- (bool)startConnectionWithCallID:(long long)arg1 oldCallID:(long long)arg2 usingInviteData:(id)arg3 isCaller:(bool)arg4 relayResponseDict:(id)arg5 didOriginateRelayRequest:(bool)arg6 capabilities:(id)arg7 error:(id*)arg8;
- (bool)startConnectionWithCallID:(long long)arg1 oldCallID:(long long)arg2 usingInviteData:(id)arg3 isCaller:(bool)arg4 relayResponseDict:(id)arg5 didOriginateRelayRequest:(bool)arg6 capabilities:(id)arg7 idsSocket:(int)arg8 destination:(id)arg9 error:(id*)arg10;
- (bool)startConnectionWithCallID:(long long)arg1 oldCallID:(long long)arg2 usingInviteData:(id)arg3 isCaller:(bool)arg4 relayResponseDict:(id)arg5 didOriginateRelayRequest:(bool)arg6 capabilities:(id)arg7 idsSocket:(int)arg8 error:(id*)arg9;
- (bool)startConnectionWithCallID:(long long)arg1 usingInviteData:(id)arg2 isCaller:(bool)arg3 relayResponseDict:(id)arg4 didOriginateRelayRequest:(bool)arg5 capabilities:(id)arg6 error:(id*)arg7;
- (bool)startConnectionWithCallID:(long long)arg1 usingInviteData:(id)arg2 isCaller:(bool)arg3 relayResponseDict:(id)arg4 didOriginateRelayRequest:(bool)arg5 capabilities:(id)arg6 idsSocket:(int)arg7 error:(id*)arg8;
- (void)startNetworkQualityUpdateTimer;
- (id)statsForCallID:(long long)arg1;
- (void)stopCallID:(long long)arg1;
- (void)stopListeningForNotifications;
- (void)stopNetworkQualityUpdateTimer;
- (void)updateCapabilities:(id)arg1 forCallID:(long long)arg2;
- (void)updateGKSConnectivitySettings;
- (bool)updateNetworkQualityGraph;
- (void)videoConference:(id)arg1 cancelRelayRequest:(unsigned int)arg2 requestDict:(id)arg3;
- (void)videoConference:(id)arg1 closeConnectionForCallID:(long long)arg2;
- (void)videoConference:(id)arg1 didChangeLocalVariablesForCallID:(unsigned int)arg2;
- (void)videoConference:(id)arg1 didReceiveARPLData:(id)arg2 forCallID:(unsigned int)arg3;
- (void)videoConference:(id)arg1 didReceiveData:(id)arg2 forCallID:(unsigned int)arg3;
- (void)videoConference:(id)arg1 didReceiveFirstRemoteFrameForCallID:(unsigned int)arg2;
- (void)videoConference:(id)arg1 didRemoteScreenAttributesChange:(id)arg2 forCallID:(unsigned int)arg3;
- (void)videoConference:(id)arg1 didRemoteVideoAttributesChange:(id)arg2 forCallID:(unsigned int)arg3;
- (void)videoConference:(id)arg1 didStartSession:(bool)arg2 withCallID:(unsigned int)arg3 error:(id)arg4;
- (void)videoConference:(id)arg1 didStartSession:(bool)arg2 withCallID:(unsigned int)arg3 withUserInfo:(id)arg4 error:(id)arg5;
- (void)videoConference:(id)arg1 didStopWithCallID:(unsigned int)arg2 error:(id)arg3;
- (void)videoConference:(id)arg1 didStopWithCallID:(unsigned int)arg2 error:(id)arg3 callMetadata:(id)arg4;
- (void)videoConference:(id)arg1 inititiateRelayRequest:(unsigned int)arg2 requestDict:(id)arg3;
- (void)videoConference:(id)arg1 isRemoteAudioBelowThreshold:(bool)arg2;
- (void)videoConference:(id)arg1 localAudioEnabled:(bool)arg2 forCallID:(unsigned int)arg3 error:(id)arg4;
- (void)videoConference:(id)arg1 localIPChange:(id)arg2 withCallID:(unsigned int)arg3;
- (void)videoConference:(id)arg1 reinitializeCallForCallID:(unsigned int)arg2;
- (void)videoConference:(id)arg1 remoteAudioEnabled:(bool)arg2 forCallID:(unsigned int)arg3;
- (void)videoConference:(id)arg1 remoteAudioPaused:(bool)arg2 callID:(unsigned int)arg3;
- (void)videoConference:(id)arg1 remoteCallingModeChanged:(unsigned int)arg2 forCallID:(unsigned int)arg3;
- (void)videoConference:(id)arg1 remoteMediaStalled:(bool)arg2 callID:(unsigned int)arg3;
- (void)videoConference:(id)arg1 remoteVideoPaused:(bool)arg2 callID:(unsigned int)arg3;
- (void)videoConference:(id)arg1 sendRelayUpdate:(unsigned int)arg2 updateDict:(id)arg3;
- (void)videoConference:(id)arg1 updateInputFrequencyLevel:(id)arg2;
- (void)videoConference:(id)arg1 updateInputMeterLevel:(float)arg2;
- (void)videoConference:(id)arg1 updateOutputFrequencyLevel:(id)arg2;
- (void)videoConference:(id)arg1 updateOutputMeterLevel:(float)arg2;
- (void)videoConference:(id)arg1 videoQualityNotificationForCallID:(unsigned int)arg2 isDegraded:(bool)arg3 isRemote:(bool)arg4;
- (void)videoConference:(id)arg1 withCallID:(long long)arg2 didPauseAudio:(bool)arg3 error:(id)arg4;
- (void)videoConference:(id)arg1 withCallID:(long long)arg2 didPauseVideo:(bool)arg3 error:(id)arg4;
- (void)videoConference:(id)arg1 withCallID:(unsigned int)arg2 networkHint:(bool)arg3;
- (long long)videoStreamTokenForCallID:(long long)arg1;
- (void)warmupForCall;

@end
