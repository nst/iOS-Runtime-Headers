/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation
 */

@interface NSLayoutManager : NSObject <NSCoding> {
    NSFont * _cachedFont;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _cachedFontCharRange;
    struct CGPoint { 
        double x; 
        double y; 
    }  _cachedLocation;
    unsigned long long  _cachedLocationGlyphIndex;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _cachedLocationNominalGlyphRange;
    struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } * _cachedRectArray;
    unsigned long long  _cachedRectArrayCapacity;
    NSRunStorage * _containerRuns;
    NSStorage * _containerUsedRects;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _deferredDisplayCharRange;
    id  _delegate;
    unsigned short  _displayInvalidationDisableStack;
    id  _extraData;
    NSTextContainer * _extraLineFragmentContainer;
    id  _firstTextView;
    unsigned long long  _firstUnlaidCharIndex;
    unsigned long long  _firstUnlaidGlyphIndex;
    char * _glyphBuffer;
    unsigned long long  _glyphBufferSize;
    NSGlyphGenerator * _glyphGenerator;
    struct __lmFlags { 
        unsigned int containersAreFull : 1; 
        unsigned int glyphsMightDrawOutsideLines : 1; 
        unsigned int backgroundLayoutEnabled : 1; 
        unsigned int resizingInProgress : 1; 
        unsigned int allowScreenFonts : 1; 
        unsigned int cachedRectArrayInUse : 1; 
        unsigned int displayInvalidationInProgress : 1; 
        unsigned int insertionPointNeedsUpdate : 1; 
        unsigned int layoutManagerInDirtyList : 1; 
        unsigned int originalFontOverride : 1; 
        unsigned int showInvisibleCharacters : 1; 
        unsigned int showControlCharacters : 1; 
        unsigned int delegateRespondsToDidInvalidate : 1; 
        unsigned int delegateRespondsToDidComplete : 1; 
        unsigned int glyphFormat : 2; 
        unsigned int textStorageRespondsToIsEditing : 1; 
        unsigned int notifyEditedInProgress : 1; 
        unsigned int containersChanged : 1; 
        unsigned int isGeneratingGlyphs : 1; 
        unsigned int hasNonGeneratedGlyphData : 1; 
        unsigned int syncAlignmentToDirection : 1; 
        unsigned int defaultAttachmentScaling : 2; 
        unsigned int usesFontLeading : 1; 
        unsigned int seenRightToLeft : 1; 
        unsigned int ignoresViewTransformations : 1; 
        unsigned int needToFlushGlyph : 1; 
        unsigned int flipsIfNeeded : 1; 
        unsigned int allowNonContig : 1; 
        unsigned int useNonContig : 1; 
        unsigned int inBackgroundLayout : 1; 
    }  _lmFlags;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _newlyFilledGlyphRange;
    NSMutableArray * _textContainers;
    NSTextStorage * _textStorage;
    unsigned short  _textViewResizeDisableStack;
    NSTypesetter * _typesetter;
}

@property (nonatomic) bool allowsNonContiguousLayout;
@property bool allowsOriginalFontMetricsOverride;
@property (nonatomic) <NSLayoutManagerDelegate> *delegate;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } extraLineFragmentRect;
@property (nonatomic, readonly) NSTextContainer *extraLineFragmentTextContainer;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } extraLineFragmentUsedRect;
@property (nonatomic, readonly) bool hasNonContiguousLayout;
@property (nonatomic) double hyphenationFactor;
@property (nonatomic, readonly) unsigned long long numberOfGlyphs;
@property (retain) NSParagraphArbitrator *paragraphArbitrator;
@property (getter=isScrolling, readonly) bool scrolling;
@property (nonatomic) bool showsControlCharacters;
@property (nonatomic) bool showsInvisibleCharacters;
@property (copy) CUIStyleEffectConfiguration *styleEffectConfiguration;
@property (nonatomic, readonly) NSArray *textContainers;
@property (nonatomic) NSTextStorage *textStorage;
@property (nonatomic) bool usesFontLeading;

// Image: /System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation

+ (id)_defaultLinkAttributes;
+ (bool)_ignoresViewTransformations;
+ (bool)_showsControlCharacters;
+ (bool)_showsInvisibleCharacters;
+ (bool)_usesScreenFonts;
+ (void)initialize;

- (unsigned short)CGGlyphAtIndex:(unsigned long long)arg1;
- (unsigned short)CGGlyphAtIndex:(unsigned long long)arg1 isValidIndex:(bool*)arg2;
- (void)_adjustCharacterIndicesForRawGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 byDelta:(long long)arg2;
- (bool)_alwaysDrawsActive;
- (id)_attachmentSizesRun;
- (id)_blockDescription;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_blockRangeForCharRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_blockRangeForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_blockRowRangeForCharRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_blockRowRangeForCharRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 completeRows:(bool*)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_blockRowRangeForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_blockRowRangeForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 completeRows:(bool*)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_boundingRectForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 inTextContainer:(id)arg2 fast:(bool)arg3 fullLineRectsOnly:(bool)arg4;
- (bool)_canDoLayout;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_characterRangeCurrentlyInAndAfterContainer:(id)arg1;
- (void)_clearCurrentAttachmentSettings;
- (void)_clearTemporaryAttributes;
- (void)_clearTemporaryAttributesForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 changeInLength:(long long)arg2;
- (void)_commonInit;
- (id)_containerDescription;
- (unsigned long long)_currentAttachmentIndex;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_currentAttachmentRect;
- (void)_doLayoutWithFullContainerStartingAtGlyphIndex:(unsigned long long)arg1 nextGlyphIndex:(unsigned long long*)arg2;
- (bool)_doOptimizedLayoutStartingAtGlyphIndex:(unsigned long long)arg1 forCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inTextContainer:(id)arg3 lineLimit:(unsigned long long)arg4 nextGlyphIndex:(unsigned long long*)arg5;
- (void)_drawBackgroundForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)_drawGlyphsForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)_drawLineForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 inContext:(struct CGContext { }*)arg2 from:(double)arg3 to:(double)arg4 at:(double)arg5 thickness:(double)arg6 lineOrigin:(struct CGPoint { double x1; double x2; })arg7 breakForDescenders:(bool)arg8;
- (void)_drawLineForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 inContext:(struct CGContext { }*)arg2 from:(double)arg3 to:(double)arg4 at:(double)arg5 thickness:(double)arg6 lineOrigin:(struct CGPoint { double x1; double x2; })arg7 breakForDescenders:(bool)arg8 flipped:(bool)arg9;
- (void)_drawLineForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 type:(long long)arg2 baselineOffset:(double)arg3 lineFragmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 lineFragmentGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5 containerOrigin:(struct CGPoint { double x1; double x2; })arg6 isStrikethrough:(bool)arg7;
- (bool)_drawsDebugBaselines;
- (bool)_drawsUnderlinesLikeWebKit;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_extendedCharRangeForInvalidation:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 editedCharRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)_fillGlyphHoleAtIndex:(unsigned long long)arg1 desiredNumberOfCharacters:(unsigned long long)arg2;
- (void)_fillGlyphHoleForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 startGlyphIndex:(unsigned long long)arg2 desiredNumberOfCharacters:(unsigned long long)arg3;
- (void)_fillLayoutHoleAtIndex:(unsigned long long)arg1 desiredNumberOfLines:(unsigned long long)arg2;
- (void)_fillLayoutHoleForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 desiredNumberOfLines:(unsigned long long)arg2 isSoft:(bool)arg3;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_firstPassGlyphRangeForBoundingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inTextContainer:(id)arg2 hintGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 okToFillHoles:(bool)arg4;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_firstPassGlyphRangeForBoundingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inTextContainer:(id)arg2 okToFillHoles:(bool)arg3;
- (void)_firstTextViewChanged;
- (void)_fixSelectionAfterChangeInCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 changeInLength:(long long)arg2;
- (void)_forceDisplayToBeCorrectForViewsWithUnlaidGlyphs;
- (bool)_forcesTrackingFloor;
- (unsigned int)_glyphAtIndex:(unsigned long long)arg1 characterIndex:(unsigned long long*)arg2 glyphInscription:(unsigned long long*)arg3 isValidIndex:(bool*)arg4;
- (id)_glyphDescription;
- (id)_glyphDescriptionForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_glyphGenerator;
- (id)_glyphHoleDescription;
- (unsigned long long)_glyphIndexForCharacterIndex:(unsigned long long)arg1 startOfRange:(bool)arg2 okToFillHoles:(bool)arg3;
- (unsigned long long)_glyphIndexForCharacterIndex:(unsigned long long)arg1 startOfRange:(bool)arg2 okToFillHoles:(bool)arg3 considerNulls:(bool)arg4;
- (id)_glyphLocationDescription;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_glyphRangeForBoundingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inTextContainer:(id)arg2 fast:(bool)arg3 okToFillHoles:(bool)arg4;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_glyphRangeForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 actualCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 okToFillHoles:(bool)arg3;
- (id)_glyphTreeDescription;
- (void)_growCachedRectArrayToSize:(unsigned long long)arg1;
- (bool)_hasSeenRightToLeft;
- (unsigned long long)_indexOfFirstGlyphInTextContainer:(id)arg1 okToFillHoles:(bool)arg2;
- (void)_insertGlyphs:(unsigned int*)arg1 elasticAttributes:(bool*)arg2 count:(unsigned long long)arg3 atGlyphIndex:(unsigned long long)arg4 characterIndex:(unsigned long long)arg5;
- (id)_insertionPointHelperForGlyphAtIndex:(unsigned long long)arg1;
- (void)_invalidateDisplayIfNeeded;
- (void)_invalidateGlyphsForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 editedCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 changeInLength:(long long)arg3 actualCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg4;
- (void)_invalidateGlyphsForExtendedCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 changeInLength:(long long)arg2;
- (void)_invalidateGlyphsForExtendedCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 changeInLength:(long long)arg2 includeBlocks:(bool)arg3;
- (void)_invalidateInsertionPoint;
- (void)_invalidateLayoutForExtendedCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 isSoft:(bool)arg2;
- (void)_invalidateLayoutForExtendedCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 isSoft:(bool)arg2 invalidateUsage:(bool)arg3;
- (void)_invalidateUsageForTextContainersInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_layoutHoleDescription;
- (id)_layoutTreeDescription;
- (id)_lineFragmentDescription;
- (id)_lineFragmentDescription:(bool)arg1;
- (id)_lineFragmentDescriptionForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 includeGlyphLocations:(bool)arg2;
- (void)_lineGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 type:(long long)arg2 lineFragmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 lineFragmentGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 containerOrigin:(struct CGPoint { double x1; double x2; })arg5 isStrikethrough:(bool)arg6;
- (void)_markSelfAsDirtyForBackgroundLayout:(id)arg1;
- (void)_mergeGlyphHoles;
- (void)_mergeLayoutHoles;
- (bool)_mirrorsTextAlignment;
- (bool)_needToFlushGlyph;
- (void)_noteFirstTextViewVisibleCharacterRangeIfAfterIndex:(unsigned long long)arg1;
- (char *)_packedGlyphs:(unsigned long long)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 length:(unsigned long long*)arg3;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_primitiveCharacterRangeForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)_primitiveDeleteGlyphsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_primitiveGlyphRangeForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)_primitiveInvalidateDisplayForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)_promoteGlyphStoreToFormat:(unsigned long long)arg1;
- (void)_recalculateUsageForTextContainerAtIndex:(unsigned long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)_rectArrayForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withinSelectionRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 rangeIsCharRange:(bool)arg3 singleRectOnly:(bool)arg4 fullLineRectsOnly:(bool)arg5 inTextContainer:(id)arg6 rectCount:(unsigned long long*)arg7 rangeWithinContainer:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg8 glyphsDrawOutsideLines:(bool*)arg9;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)_rectArrayForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withinSelectionRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 rangeIsCharRange:(bool)arg3 singleRectOnly:(bool)arg4 fullLineRectsOnly:(bool)arg5 inTextContainer:(id)arg6 rectCount:(unsigned long long*)arg7 rangeWithinContainer:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg8 glyphsDrawOutsideLines:(bool*)arg9 rectArray:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg10 rectArrayCapacity:(unsigned long long)arg11;
- (void)_resizeTextViewForTextContainer:(id)arg1;
- (id)_rowArrayCache;
- (id)_selectedRanges;
- (id)_selectionRangesForInsertionPointRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)_setAlwaysDrawsActive:(bool)arg1;
- (void)_setCurrentAttachmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 index:(unsigned long long)arg2;
- (void)_setDrawsDebugBaselines:(bool)arg1;
- (void)_setDrawsUnderlinesLikeWebKit:(bool)arg1;
- (void)_setExtraLineFragmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 usedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 textContainer:(id)arg3;
- (void)_setForcesTrackingFloor:(bool)arg1;
- (void)_setGlyphGenerator:(id)arg1;
- (void)_setGlyphsPerLineEstimate:(unsigned long long)arg1 integerOffsetPerLineEstimate:(unsigned long long)arg2;
- (void)_setGlyphsPerLineEstimate:(unsigned long long)arg1 offsetPerLineEstimate:(double)arg2;
- (void)_setHasSeenRightToLeft:(bool)arg1;
- (void)_setMirrorsTextAlignment:(bool)arg1;
- (void)_setNeedToFlushGlyph:(bool)arg1;
- (void)_setRowArrayCache:(id)arg1;
- (void)_setTextContainer:(id)arg1 forGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)_showAttachmentCell:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 characterIndex:(unsigned long long)arg3;
- (void)_showCGGlyphs:(const unsigned short*)arg1 positions:(const struct CGPoint { double x1; double x2; }*)arg2 count:(unsigned long long)arg3 font:(id)arg4 matrix:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg5 attributes:(id)arg6 inContext:(struct CGContext { }*)arg7;
- (void)_simpleDeleteGlyphsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)_simpleInsertGlyph:(unsigned int)arg1 atGlyphIndex:(unsigned long long)arg2 characterIndex:(unsigned long long)arg3 elastic:(bool)arg4;
- (unsigned long long)_smallEncodingGlyphIndexForCharacterIndex:(unsigned long long)arg1 startOfRange:(bool)arg2 okToFillHoles:(bool)arg3;
- (unsigned long long)_smallEncodingGlyphIndexForCharacterIndex:(unsigned long long)arg1 startOfRange:(bool)arg2 okToFillHoles:(bool)arg3 considerNulls:(bool)arg4;
- (id)_temporaryAttribute:(id)arg1 atCharacterIndex:(unsigned long long)arg2 effectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3;
- (id)_temporaryAttribute:(id)arg1 atCharacterIndex:(unsigned long long)arg2 longestEffectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (id)_temporaryAttributesAtCharacterIndex:(unsigned long long)arg1 longestEffectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (void)_updateUsageForTextContainer:(id)arg1 addingUsedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct _NSStoredContainerUsage { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; struct { unsigned int x_3_1_1 : 1; unsigned int x_3_1_2 : 1; unsigned int x_3_1_3 : 1; unsigned int x_3_1_4 : 29; } x3; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_4_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_4_1_2; } x4; struct _NSRange { unsigned long long x_5_1_1; unsigned long long x_5_1_2; } x5; }*)_validatedStoredUsageForTextContainerAtIndex:(unsigned long long)arg1;
- (void)addTemporaryAttribute:(id)arg1 value:(id)arg2 forCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (void)addTemporaryAttributes:(id)arg1 forCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)addTextContainer:(id)arg1;
- (bool)allowsNonContiguousLayout;
- (bool)allowsOriginalFontMetricsOverride;
- (struct CGSize { double x1; double x2; })attachmentSizeForGlyphAtIndex:(unsigned long long)arg1;
- (id)attributedString;
- (bool)backgroundColorProvidesOpaqueSurface;
- (bool)backgroundLayoutEnabled;
- (double)baselineOffsetForGlyphAtIndex:(unsigned long long)arg1;
- (void)beginScrollingForView:(id)arg1 textContainer:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRectForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 inTextContainer:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsRectForTextBlock:(id)arg1 atIndex:(unsigned long long)arg2 effectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsRectForTextBlock:(id)arg1 glyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (unsigned long long)characterIndexForGlyphAtIndex:(unsigned long long)arg1;
- (unsigned long long)characterIndexForPoint:(struct CGPoint { double x1; double x2; })arg1 inTextContainer:(id)arg2 fractionOfDistanceBetweenInsertionPoints:(double*)arg3;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })characterRangeForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 actualGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (id)circleImageWithSize:(struct CGSize { double x1; double x2; })arg1 bufferWidth:(double)arg2 usingColor:(id)arg3;
- (void)coordinateAccess:(id /* block */)arg1;
- (void)dealloc;
- (double)defaultBaselineOffsetForFont:(id)arg1;
- (double)defaultLineHeightForFont:(id)arg1;
- (id)delegate;
- (void)deleteGlyphsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)description;
- (id)destinationTextContainerForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 inTextContainer:(id)arg2;
- (void)drawBackgroundForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)drawGlyphsForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)drawSpellingUnderlineForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 spellingState:(long long)arg2 inGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 lineFragmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 lineFragmentGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5 containerOrigin:(struct CGPoint { double x1; double x2; })arg6;
- (void)drawStrikethroughForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 strikethroughType:(long long)arg2 baselineOffset:(double)arg3 lineFragmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 lineFragmentGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5 containerOrigin:(struct CGPoint { double x1; double x2; })arg6;
- (void)drawUnderlineForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 underlineType:(long long)arg2 baselineOffset:(double)arg3 lineFragmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 lineFragmentGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5 containerOrigin:(struct CGPoint { double x1; double x2; })arg6;
- (bool)drawsOutsideLineFragmentForGlyphAtIndex:(unsigned long long)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)endScrollingForView:(id)arg1 textContainer:(id)arg2;
- (void)ensureGlyphsForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)ensureGlyphsForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)ensureLayoutForBoundingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inTextContainer:(id)arg2;
- (void)ensureLayoutForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)ensureLayoutForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)ensureLayoutForTextContainer:(id)arg1;
- (void)enumerateEnclosingRectsForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withinSelectedCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inTextContainer:(id)arg3 usingBlock:(id /* block */)arg4;
- (void)enumerateEnclosingRectsForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withinSelectedGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inTextContainer:(id)arg3 usingBlock:(id /* block */)arg4;
- (void)enumerateLineFragmentsForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 usingBlock:(id /* block */)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })extraLineFragmentRect;
- (id)extraLineFragmentTextContainer;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })extraLineFragmentUsedRect;
- (void)fillBackgroundRectArray:(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 count:(unsigned long long)arg2 forCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 color:(id)arg4;
- (void)finalize;
- (unsigned long long)firstUnlaidCharacterIndex;
- (unsigned long long)firstUnlaidGlyphIndex;
- (bool)flipsIfNeeded;
- (double)fractionOfDistanceThroughGlyphForPoint:(struct CGPoint { double x1; double x2; })arg1 inTextContainer:(id)arg2;
- (void)getFirstUnlaidCharacterIndex:(unsigned long long*)arg1 glyphIndex:(unsigned long long*)arg2;
- (unsigned long long)getGlyphs:(unsigned int*)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (unsigned long long)getGlyphsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 glyphs:(unsigned int*)arg2 characterIndexes:(unsigned long long*)arg3 glyphInscriptions:(unsigned long long*)arg4 elasticBits:(bool*)arg5;
- (unsigned long long)getGlyphsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 glyphs:(unsigned int*)arg2 characterIndexes:(unsigned long long*)arg3 glyphInscriptions:(unsigned long long*)arg4 elasticBits:(bool*)arg5 bidiLevels:(char *)arg6;
- (unsigned long long)getGlyphsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 glyphs:(unsigned short*)arg2 properties:(long long*)arg3 characterIndexes:(unsigned long long*)arg4 bidiLevels:(char *)arg5;
- (long long)getLineFragmentInsertionPointArraysForCharacterAtIndex:(unsigned long long)arg1 inDisplayOrder:(bool)arg2 positions:(double**)arg3 characterIndexes:(unsigned long long**)arg4 count:(unsigned long long*)arg5 alternatePositions:(double**)arg6 characterIndexes:(unsigned long long**)arg7 count:(unsigned long long*)arg8;
- (unsigned long long)getLineFragmentInsertionPointsForCharacterAtIndex:(unsigned long long)arg1 alternatePositions:(bool)arg2 inDisplayOrder:(bool)arg3 positions:(double*)arg4 characterIndexes:(unsigned long long*)arg5;
- (unsigned short)glyphAtIndex:(unsigned long long)arg1;
- (unsigned short)glyphAtIndex:(unsigned long long)arg1 isValidIndex:(bool*)arg2;
- (id)glyphGenerator;
- (unsigned long long)glyphIndexForCharacterAtIndex:(unsigned long long)arg1;
- (unsigned long long)glyphIndexForPoint:(struct CGPoint { double x1; double x2; })arg1 inTextContainer:(id)arg2;
- (unsigned long long)glyphIndexForPoint:(struct CGPoint { double x1; double x2; })arg1 inTextContainer:(id)arg2 fractionOfDistanceThroughGlyph:(double*)arg3;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })glyphRangeForBoundingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inTextContainer:(id)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })glyphRangeForBoundingRectWithoutAdditionalLayout:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inTextContainer:(id)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })glyphRangeForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 actualCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })glyphRangeForTextContainer:(id)arg1;
- (bool)hasNonContiguousLayout;
- (double)hyphenationFactor;
- (bool)ignoresAntialiasThreshold;
- (bool)ignoresViewTransformations;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (void)insertGlyph:(unsigned int)arg1 atGlyphIndex:(unsigned long long)arg2 characterIndex:(unsigned long long)arg3;
- (void)insertGlyphs:(const unsigned int*)arg1 length:(unsigned long long)arg2 forStartingGlyphAtIndex:(unsigned long long)arg3 characterIndex:(unsigned long long)arg4;
- (void)insertTextContainer:(id)arg1 atIndex:(unsigned long long)arg2;
- (long long)intAttribute:(long long)arg1 forGlyphAtIndex:(unsigned long long)arg2;
- (void)invalidateDisplayForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)invalidateDisplayForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)invalidateGlyphsForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 changeInLength:(long long)arg2 actualCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3;
- (void)invalidateGlyphsOnLayoutInvalidationForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)invalidateLayoutForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 actualCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (void)invalidateLayoutForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 isSoft:(bool)arg2 actualCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3;
- (bool)isScrolling;
- (bool)isValidGlyphIndex:(unsigned long long)arg1;
- (id)layoutFragmentsForReplacingCharactersInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withAttributedString:(id)arg2 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 textContainer:(id)arg4;
- (unsigned long long)layoutOptions;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })layoutRectForTextBlock:(id)arg1 atIndex:(unsigned long long)arg2 effectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })layoutRectForTextBlock:(id)arg1 glyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })lineFragmentRectForGlyphAtIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })lineFragmentRectForGlyphAtIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 withoutAdditionalLayout:(bool)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })lineFragmentUsedRectForGlyphAtIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })lineFragmentUsedRectForGlyphAtIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 allowLayout:(bool)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })lineFragmentUsedRectForGlyphAtIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 withoutAdditionalLayout:(bool)arg3;
- (id)linkAttributesForLink:(id)arg1 forCharacterAtIndex:(unsigned long long)arg2;
- (struct CGPoint { double x1; double x2; })locationForGlyphAtIndex:(unsigned long long)arg1;
- (bool)notShownAttributeForGlyphAtIndex:(unsigned long long)arg1;
- (unsigned long long)numberOfGlyphs;
- (id)paragraphArbitrator;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })prepareLayoutForBoundingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textContainer:(id)arg2;
- (void)processEditingForTextStorage:(id)arg1 edited:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 changeInLength:(long long)arg4 invalidatedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5;
- (long long)propertyForGlyphAtIndex:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfCharacterClusterAtIndex:(unsigned long long)arg1 type:(long long)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfNominallySpacedGlyphsContainingIndex:(unsigned long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)rectArrayForCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withinSelectedCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inTextContainer:(id)arg3 rectCount:(unsigned long long*)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)rectArrayForGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withinSelectedGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inTextContainer:(id)arg3 rectCount:(unsigned long long*)arg4;
- (void)removeTemporaryAttribute:(id)arg1 forCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)removeTextContainerAtIndex:(unsigned long long)arg1;
- (void)replaceGlyphAtIndex:(unsigned long long)arg1 withGlyph:(unsigned int)arg2;
- (void)replaceTextStorage:(id)arg1;
- (id)selectedTextAttributesForCharacterAtIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (void)setAllowsNonContiguousLayout:(bool)arg1;
- (void)setAllowsOriginalFontMetricsOverride:(bool)arg1;
- (void)setAttachmentSize:(struct CGSize { double x1; double x2; })arg1 forGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setBackgroundLayoutEnabled:(bool)arg1;
- (void)setBaselineOffset:(double)arg1 forGlyphAtIndex:(unsigned long long)arg2;
- (void)setBoundsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forTextBlock:(id)arg2 glyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (void)setCharacterIndex:(unsigned long long)arg1 forGlyphAtIndex:(unsigned long long)arg2;
- (void)setDelegate:(id)arg1;
- (void)setDrawsOutsideLineFragment:(bool)arg1 forGlyphAtIndex:(unsigned long long)arg2;
- (void)setEllipsisGlyphAttribute:(bool)arg1 forGlyphAtIndex:(unsigned long long)arg2;
- (void)setExtraLineFragmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 usedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 textContainer:(id)arg3;
- (void)setFlipsIfNeeded:(bool)arg1;
- (void)setGlyphGenerator:(id)arg1;
- (void)setGlyphs:(const unsigned short*)arg1 properties:(const long long*)arg2 characterIndexes:(const unsigned long long*)arg3 font:(id)arg4 forGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5;
- (void)setHyphenationFactor:(double)arg1;
- (void)setIgnoresAntialiasThreshold:(bool)arg1;
- (void)setIgnoresViewTransformations:(bool)arg1;
- (void)setIntAttribute:(long long)arg1 value:(long long)arg2 forGlyphAtIndex:(unsigned long long)arg3;
- (void)setLayoutRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forTextBlock:(id)arg2 glyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (void)setLineFragmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 usedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)setLineFragmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 usedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 baselineOffset:(double)arg4;
- (void)setLocation:(struct CGPoint { double x1; double x2; })arg1 forStartOfGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setLocation:(struct CGPoint { double x1; double x2; })arg1 forStartOfGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 coalesceRuns:(bool)arg3;
- (void)setLocations:(struct CGPoint { double x1; double x2; }*)arg1 startingGlyphIndexes:(unsigned long long*)arg2 count:(unsigned long long)arg3 forGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (void)setNotShownAttribute:(bool)arg1 forGlyphAtIndex:(unsigned long long)arg2;
- (void)setParagraphArbitrator:(id)arg1;
- (void)setShowsControlCharacters:(bool)arg1;
- (void)setShowsInvisibleCharacters:(bool)arg1;
- (void)setStyleEffectConfiguration:(id)arg1;
- (void)setSynchronizesAlignmentToDirection:(bool)arg1;
- (void)setTemporaryAttributes:(id)arg1 forCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setTextContainer:(id)arg1 forGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setTextStorage:(id)arg1;
- (void)setTypesetter:(id)arg1;
- (void)setTypesetterBehavior:(long long)arg1;
- (void)setUnderlineColorForSpelling:(id)arg1;
- (void)setUnderlineColorForTextAlternatives:(id)arg1;
- (void)setUsesFontLeading:(bool)arg1;
- (void)setUsesScreenFonts:(bool)arg1;
- (void)setViewProvider:(id)arg1 forTextAttachment:(id)arg2 characterIndex:(unsigned long long)arg3;
- (void)showAttachment:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 textContainer:(id)arg3 characterIndex:(unsigned long long)arg4;
- (void)showAttachmentCell:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 characterIndex:(unsigned long long)arg3;
- (void)showCGGlyphs:(const unsigned short*)arg1 positions:(const struct CGPoint { double x1; double x2; }*)arg2 count:(unsigned long long)arg3 font:(id)arg4 matrix:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg5 attributes:(id)arg6 inContext:(struct CGContext { }*)arg7;
- (bool)showsControlCharacters;
- (bool)showsInvisibleCharacters;
- (void)strikethroughGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 strikethroughType:(long long)arg2 lineFragmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 lineFragmentGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 containerOrigin:(struct CGPoint { double x1; double x2; })arg5;
- (id)styleEffectConfiguration;
- (id)substituteFontForFont:(id)arg1;
- (bool)synchronizesAlignmentToDirection;
- (id)temporaryAttribute:(id)arg1 atCharacterIndex:(unsigned long long)arg2 effectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3;
- (id)temporaryAttribute:(id)arg1 atCharacterIndex:(unsigned long long)arg2 longestEffectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (id)temporaryAttributesAtCharacterIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (id)temporaryAttributesAtCharacterIndex:(unsigned long long)arg1 longestEffectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (void)textContainerChangedGeometry:(id)arg1;
- (void)textContainerChangedTextView:(id)arg1;
- (void)textContainerChangedTextView:(id)arg1 fromTextView:(id)arg2;
- (id)textContainerForGlyphAtIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (id)textContainerForGlyphAtIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 withoutAdditionalLayout:(bool)arg3;
- (id)textContainers;
- (id)textStorage;
- (void)textStorage:(id)arg1 edited:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 changeInLength:(long long)arg4 invalidatedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })truncatedGlyphRangeInLineFragmentForGlyphAtIndex:(unsigned long long)arg1;
- (id)typesetter;
- (long long)typesetterBehavior;
- (id)underlineColorForSpelling;
- (id)underlineColorForTextAlternatives;
- (void)underlineGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 underlineType:(long long)arg2 lineFragmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 lineFragmentGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 containerOrigin:(struct CGPoint { double x1; double x2; })arg5;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })usedRectForTextContainer:(id)arg1;
- (bool)usesFontLeading;
- (bool)usesScreenFonts;
- (id)viewProviderForTextAttachment:(id)arg1 characterIndex:(unsigned long long)arg2;

// Image: /System/Library/Frameworks/UIKit.framework/UIKit

- (id)_commonTextInputController;

@end
