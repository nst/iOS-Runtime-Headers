/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSTTableRep : TSWPTextHostRep <UITextFieldDelegate> {
    bool  _settingSelection;
    <TSTTableAnimationController> * mAnimationController;
    NSMutableArray * mAnimationStack;
    TSKHighlightArrayController * mBodyHighlightArrayController;
    TSKHighlightArrayController * mBodyPulseArrayController;
    <TSTCanvasReferenceController> * mCanvasReferenceController;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mCanvasVisibleRect;
    TSTSelectionDragController * mCellDragController;
    CAShapeLayer * mCellEditingMaskLayer;
    NSMutableDictionary * mChildTextReps;
    TSTTableCellTextEditingRep * mContainedTextEditingRep;
    double  mCurrentScreenScale;
    <TSTTableRepDelegate> * mDelegate;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned short row; 
            unsigned char column; 
            unsigned char reserved; 
        } origin; 
        struct { 
            unsigned short numberOfColumns; 
            unsigned short numberOfRows; 
        } size; 
    }  mDirtyCellRange;
    bool  mDragByHandleOnly;
    struct TSUCellCoord { 
        unsigned short row; 
        unsigned char column; 
        unsigned char reserved; 
    }  mEditingHyperlinkCellID;
    CAShapeLayer * mFindSelectionHighlightLayer;
    TSKHighlightArrayController * mFrozenColumnsHighlightArrayController;
    TSKHighlightArrayController * mFrozenColumnsPulseArrayController;
    TSKHighlightArrayController * mFrozenCornerHighlightArrayController;
    TSKHighlightArrayController * mFrozenCornerPulseArrayController;
    TSKHighlightArrayController * mFrozenRowsHighlightArrayController;
    TSKHighlightArrayController * mFrozenRowsPulseArrayController;
    CAShapeLayer * mHighlightedHyperlinkLayer;
    TSWPHyperlinkField * mHyperlinkField;
    bool  mHyperlinkModified;
    TSWPStorage * mHyperlinkParentStorage;
    bool  mInspectingHyperlinkInEditingStorage;
    bool  mIsAspectOperationInProgress;
    bool  mIsZoomOperationInProgress;
    bool  mIsZoomToEditOperationInProgress;
    TSTSearchReference * mPreviousSearchReference;
    struct TSUCellCoord { 
        unsigned short row; 
        unsigned char column; 
        unsigned char reserved; 
    }  mRatingsDragCellID;
    bool  mRecursivelyDrawingInContext;
    TSTTableReferences * mReferences;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mSearchSelectionBounds;
    bool  mSelectionDragAbortedOnNewSelection;
    bool  mSelectionUsesBezierPath;
    bool  mSelectsCellOnInitialTap;
    TSTCellSelection * mSourceFillSelection;
    <TSTTableChromeProvider> * mTableChrome;
    CALayer * mTableCollaboratorCursorLayer;
    bool  mTableNameValid;
    TSTCellSelection * mTargetFillSelection;
    bool  mUsesWholeChromeResizer;
    NSSet * mVisibleFillKnobs;
    TSDKnobTracker<TSTTableKnobTrackerVisitorProtocol> * mVisitorKnobTracker;
    bool  mWPEndedTableNameEditing;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned short row; 
            unsigned char column; 
            unsigned char reserved; 
        } origin; 
        struct { 
            unsigned short numberOfColumns; 
            unsigned short numberOfRows; 
        } size; 
    }  mZoomToEditVisibleCellRange;
}

@property (nonatomic) <TSTTableAnimationController> *animationController;
@property (nonatomic, readonly) <TSTCanvasReferenceController> *canvasReferenceController;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } canvasVisibleRect;
@property (nonatomic) TSTSelectionDragController *cellDragController;
@property (nonatomic, retain) NSMutableDictionary *childTextReps;
@property (nonatomic, readonly) TSTAnimation *currentAnimation;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) <TSTTableRepDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isZoomToEditOperationInProgress;
@property (nonatomic, readonly) TSTMasterLayout *masterLayout;
@property (nonatomic) struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; } ratingsDragCellID;
@property (nonatomic, readonly) TSTCellSelection *selection;
@property (nonatomic, readonly) long long selectionType;
@property (readonly) Class superclass;
@property (nonatomic, readonly) <TSTTableChromeProvider> *tableChrome;
@property (nonatomic, readonly) TSTTableInfo *tableInfo;
@property (nonatomic, readonly) TSTLayout *tableLayout;
@property (nonatomic, readonly) TSTTableModel *tableModel;
@property (getter=isTableNameValid, nonatomic) bool tableNameValid;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformFromCanvas;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformToCanvas;

+ (double)magicMoveAttributeMatchPercentBetweenOutgoingObject:(id)arg1 incomingObject:(id)arg2 mixingTypeContext:(id)arg3;
+ (unsigned long long)p_countOfIdenticalCellsBetweenOutgoingTableModel:(id)arg1 incomingTableModel:(id)arg2;
+ (Class)tableRepDelegateClass;

- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (void)addAdditionalChildLayersToArray:(id)arg1;
- (id)animationController;
- (void)asyncPostTextChangedInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsForCellSelection:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (bool)canDrawInBackgroundDuringScroll;
- (bool)canDrawInParallel;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })canvasBoundsForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (id)canvasReferenceController;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })canvasVisibleRect;
- (id)cellDragController;
- (id)childReps;
- (id)childTextReps;
- (void)contentsRectForCellRangeAcrossSpaces:(struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1 contentsCenterInfo:(struct { bool x1; double x2; double x3; double x4; double x5; double x6; double x7; }*)arg2 canvasFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3 contentsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4;
- (id)currentAnimation;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })deviceBoundsForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (void)didDrawCellImageFill:(id)arg1 inCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg2;
- (void)drawInContext:(struct CGContext { }*)arg1;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (id)editorSelection;
- (id)hitRep:(struct CGPoint { double x1; double x2; })arg1;
- (id)hitRepChrome:(struct CGPoint { double x1; double x2; })arg1;
- (id)hyperlinkContainerRep;
- (id)hyperlinkRegions;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;
- (void)invalidateEditingCell;
- (void)invalidateFrozenHeaders;
- (bool)isDraggable;
- (bool)isFullyVisibleWithBorder:(int)arg1;
- (bool)isTableNameValid;
- (bool)isZoomToEditOperationInProgress;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })layerFrameInScaledCanvas;
- (void)layoutInRootChangedFrom:(id)arg1 to:(id)arg2 translatedOnly:(bool)arg3;
- (id)masterLayout;
- (bool)mustDrawOnMainThreadForInteractiveCanvas;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })naturalBoundsRectForHyperlinkField:(id)arg1;
- (id)overlayLayers;
- (void)p_addObservers;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_alignedLayerFrameForLayoutSpace:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })p_cellIDForHyperlinkField:(id)arg1;
- (id)p_columnForCellID:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })p_horizontalAlignmentTransformForHyperlinkWithBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inCell:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (void)p_removeObservers;
- (bool)p_shouldPerformOnChildTextReps:(SEL)arg1;
- (id)p_textImageForPath:(struct CGPath { }*)arg1 shouldPulsate:(bool)arg2;
- (void)popAnimation;
- (void)pushAnimation:(id)arg1;
- (struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })ratingsDragCellID;
- (void)recursivelyDrawInContext:(struct CGContext { }*)arg1;
- (void)recursivelyPerformSelector:(SEL)arg1;
- (void)recursivelyPerformSelector:(SEL)arg1 withObject:(id)arg2;
- (void)recursivelyPerformSelectorIfImplemented:(SEL)arg1;
- (void)recursivelyPerformSelectorIfImplemented:(SEL)arg1 withObject:(id)arg2;
- (id)repForDragging;
- (void)screenScaleDidChange;
- (id)selection;
- (long long)selectionType;
- (void)setAnimationController:(id)arg1;
- (void)setCellDragController:(id)arg1;
- (void)setChildTextReps:(id)arg1;
- (void)setRatingsDragCellID:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (void)setTableNameValid:(bool)arg1;
- (void)setTextureStage:(unsigned long long)arg1;
- (id)tableChrome;
- (id)tableInfo;
- (id)tableLayout;
- (id)tableModel;
- (id)textureForContext:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformFromCanvas;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformToCanvas;
- (void)updateChildrenFromLayout;
- (void)updateDynamicModeForEditingSpillText;
- (void)updateFromLayout;
- (void)validateFrozenHeaderColumns;
- (void)validateFrozenHeaderCorner;
- (void)validateFrozenHeaderRows;
- (void)validateFrozenHeaderTableBodyMask;
- (void)validateStrokesInEditingSpillingTextRange;
- (void)validateVisibleRect;
- (void)viewScaleDidChange;
- (bool)wantsActivityLine;
- (void)willBeRemoved;
- (void)willUpdateLayer:(id)arg1;

@end
