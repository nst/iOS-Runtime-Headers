/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHRecognizer : NSObject {
    NSCharacterSet * _activeCharacterSet;
    CHDrawing * _cachedDrawing;
    struct map<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { 
        struct __tree<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __first_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true> > { 
                unsigned long long __first_; 
            } __pair3_; 
        } __tree_; 
    }  _cachedResults;
    void * _characterLanguageModel;
    struct _LXLexicon { } * _customLexicon;
    void * _dynamicLexicon;
    struct CHNeuralNetwork { char *x1; unsigned long long x2; unsigned int *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; } * _engine;
    struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; } * _formatGrammarFST;
    struct CHNeuralNetwork { char *x1; unsigned long long x2; unsigned int *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; } * _freeformEngine;
    void ** _icuTransliterator;
    void * _languageModel;
    unsigned long long  _lastCharacterStrokeCount;
    NSMutableIndexSet * _lastCharacterStrokeIndexes;
    NSURL * _learningDictionaryURL;
    NSLocale * _locale;
    unsigned long long  _maxRecognitionResultCount;
    struct __Mecabra { } * _mecabra;
    struct CGSize { 
        double width; 
        double height; 
    }  _minimumDrawingSize;
    struct _CFBurstTrie { } * _ovsTrie;
    struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; } * _radicalClusterFST;
    int  _recognitionMode;
    NSObject<OS_dispatch_queue> * _recognitionQueue;
    int  _recognitionType;
    bool  _saveDrawingUntilNextCandidateAccepted;
    CHDrawing * _savedDrawing;
    NSString * _savedTop1CandidateString;
    void * _staticLexicon;
    struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; } * _transliterationVariantMap;
}

@property (nonatomic, retain) NSCharacterSet *activeCharacterSet;
@property (nonatomic, copy) CHDrawing *cachedDrawing;
@property (nonatomic) /* Warning: unhandled struct encoding: '{map<std::__1::set<unsigned long' */ struct  cachedResults; /* unknown property attribute:  true> >=Q}}} */
@property (nonatomic) void*characterLanguageModel;
@property (nonatomic) struct _LXLexicon { }*customLexicon;
@property (nonatomic) void*dynamicLexicon;
@property (nonatomic) struct CHNeuralNetwork { char *x1; unsigned long long x2; unsigned int *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; }*engine;
@property (nonatomic) /* Warning: unhandled struct encoding: '{Network={basic_string<char' */ struct *formatGrammarFST; /* unknown property attribute:  std::__1::less<uint128> >=Q}}}^IQ} */
@property (nonatomic) struct CHNeuralNetwork { char *x1; unsigned long long x2; unsigned int *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; }*freeformEngine;
@property (nonatomic) void**icuTransliterator;
@property (nonatomic) void*languageModel;
@property (nonatomic) unsigned long long lastCharacterStrokeCount;
@property (nonatomic, retain) NSMutableIndexSet *lastCharacterStrokeIndexes;
@property (nonatomic, retain) NSURL *learningDictionaryURL;
@property (nonatomic) NSLocale *locale;
@property (nonatomic) unsigned long long maxRecognitionResultCount;
@property (nonatomic) struct __Mecabra { }*mecabra;
@property (nonatomic) struct CGSize { double x1; double x2; } minimumDrawingSize;
@property (nonatomic) struct _CFBurstTrie { }*ovsTrie;
@property (nonatomic) /* Warning: unhandled struct encoding: '{Network={basic_string<char' */ struct *radicalClusterFST; /* unknown property attribute:  std::__1::less<uint128> >=Q}}}^IQ} */
@property (nonatomic) int recognitionMode;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *recognitionQueue;
@property (nonatomic) int recognitionType;
@property (nonatomic) bool saveDrawingUntilNextCandidateAccepted;
@property (nonatomic, copy) CHDrawing *savedDrawing;
@property (nonatomic, copy) NSString *savedTop1CandidateString;
@property (nonatomic) void*staticLexicon;
@property (nonatomic) struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*transliterationVariantMap;

+ (double)_computeEditPenalizationFromString:(id)arg1 toReferenceString:(id)arg2 withSuffix:(id)arg3 withCaseSensitivity:(bool)arg4 withFirstLetterCaseSensitivity:(bool)arg5 withDiacriticSensitivity:(bool)arg6 withDiacriticsCharSet:(id)arg7 withConsumableStrokesCharSet:(id)arg8 outputSuffix:(id*)arg9 lexiconExtraCharacters:(id*)arg10 firstLetterCaseFlipped:(bool*)arg11;
+ (unsigned long long)_decodeTempDelayedSegmentID:(unsigned long long)arg1;
+ (unsigned long long)_encodeTempDelayedSegmentID:(unsigned long long)arg1;
+ (id)wordsForCustomLexicon;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_adjustCandidatesForConfusableCharacters:(struct vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x1; struct CHCandidateResult {} *x2; struct __compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x_3_1_1; } x3; }*)arg1;
- (void)_adjustResultsForConfusableCharacters:(id)arg1;
- (id)_alternativeInterpretationsForString:(id)arg1;
- (id)_applySentenceTransliterationCandidates:(unsigned short*)arg1 codesLen:(int)arg2 codesMax:(int)arg3;
- (void)_applyTransliterationAndSyntheticCandidates:(struct vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x1; struct CHCandidateResult {} *x2; struct __compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x_3_1_1; } x3; }*)arg1;
- (void)_buildCustomLexiconFromWords:(id)arg1;
- (double)_calculateJointWordProbabilityForString:(id)arg1 withPatterns:(id)arg2;
- (id)_extractSubStrokeSegmentsFromSegments:(id)arg1 withDelayedStrokeSegments:(id*)arg2 fromDelayedSegmentIDs:(struct vector<unsigned long, std::__1::allocator<unsigned long> > { unsigned long long *x1; unsigned long long *x2; struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > { unsigned long long *x_3_1_1; } x3; })arg3;
- (void)_filterNonHumanFriendlyCandidates:(id)arg1;
- (bool)_isLocaleSupported:(id)arg1;
- (bool)_isOVSString:(id)arg1;
- (void)_loadEngineModel;
- (void)_loadMecabraIfNeeded;
- (id)_performMultipleCharacterRecognition:(id)arg1 options:(id)arg2 shouldCancel:(id /* block */)arg3;
- (void)_prepareCHCharacterLanguageModel;
- (void)_prepareLanguageModel;
- (void)_prepareOVSTrie;
- (void)_prepareStaticLexicon;
- (void)_prepareTransliterationVariantMap;
- (void)_removeOVSResults:(id)arg1 withHistory:(id)arg2;
- (void)_rescoreCandidatesWithLanguageModel:(struct vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x1; struct CHCandidateResult {} *x2; struct __compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x_3_1_1; } x3; }*)arg1 history:(id)arg2;
- (bool)_shouldCapitalizeGivenHistory:(id)arg1;
- (id)_subStrokeSegmentationPointsForDrawing:(id)arg1;
- (unsigned int)_tokenIDForUNKCharacterString:(id)arg1;
- (id)_transliterationVariantsForString:(id)arg1;
- (bool)_updateResults:(id)arg1 string:(id)arg2 score:(double)arg3 lexicalEntry:(bool)arg4 patternEntry:(bool)arg5;
- (id)_wordLMLexiconCorrectionForString:(id)arg1 withLexicon:(void*)arg2 consumableStrokesSet:(id)arg3 resultWordID:(unsigned int*)arg4;
- (id)_wordLXLexiconCorrectionForString:(id)arg1 withLexicon:(struct _LXLexicon { }*)arg2 consumableStrokesSet:(id)arg3 resultWordID:(unsigned int*)arg4;
- (id)activeCharacterSet;
- (id)bestNetworkPaths:(struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg1 from:(unsigned long long)arg2 to:(unsigned long long)arg3 count:(unsigned long long)arg4 staticLexiconCursor:(void*)arg5 customLexiconCursor:(struct _LXCursor { }*)arg6 patternCursor:(struct PatternGraph { }*)arg7 history:(id)arg8 activeHistoryRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg9 mecabraIDs:(struct vector<int, std::__1::allocator<int> > { int *x1; int *x2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_1_1; } x3; }*)arg10 numExpectedDelayedStrokes:(unsigned long long)arg11;
- (id)cachedDrawing;
- (struct map<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { struct __tree<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })cachedResults;
- (void)candidateAccepted:(void*)arg1;
- (void)candidatesCleared;
- (void*)characterLanguageModel;
- (id)characterSetForStrings:(id)arg1;
- (id)chatBubbleCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (struct vector<const void *, std::__1::allocator<const void *> > { void **x1; void **x2; struct __compressed_pair<const void **, std::__1::allocator<const void *> > { void **x_3_1_1; } x3; })completionsForCandidate:(id)arg1 candidateContext:(id)arg2 prefix:(id)arg3 option:(unsigned long long)arg4;
- (struct vector<const void *, std::__1::allocator<const void *> > { void **x1; void **x2; struct __compressed_pair<const void **, std::__1::allocator<const void *> > { void **x_3_1_1; } x3; })completionsForCandidate:(id)arg1 prefix:(id)arg2 option:(unsigned long long)arg3;
- (struct _LXLexicon { }*)customLexicon;
- (void)dealloc;
- (id)defaultPunctuationResultsForRecognitionType:(int)arg1 withStrokeCount:(unsigned long long)arg2;
- (void*)dynamicLexicon;
- (id)ellipseCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (void)endpointsForDrawing:(id)arg1 startLocation:(struct CGPoint { double x1; double x2; }*)arg2 endLocation:(struct CGPoint { double x1; double x2; }*)arg3;
- (struct CHNeuralNetwork { char *x1; unsigned long long x2; unsigned int *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; }*)engine;
- (struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)formatGrammarFST;
- (struct CHNeuralNetwork { char *x1; unsigned long long x2; unsigned int *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; }*)freeformEngine;
- (struct CGSize { double x1; double x2; })getMinimumDrawingSize;
- (void**)icuTransliterator;
- (id)initWithType:(int)arg1 mode:(int)arg2;
- (id)initWithType:(int)arg1 mode:(int)arg2 learningDictionaryURL:(id)arg3;
- (id)initWithType:(int)arg1 mode:(int)arg2 locale:(struct __CFLocale { }*)arg3;
- (id)initWithType:(int)arg1 mode:(int)arg2 locale:(struct __CFLocale { }*)arg3 learningDictionaryURL:(id)arg4;
- (bool)isMecabraRareEntry:(id)arg1;
- (bool)isOVSString:(id)arg1;
- (void*)languageModel;
- (unsigned long long)lastCharacterStrokeCount;
- (id)lastCharacterStrokeIndexes;
- (id)learningDictionaryURL;
- (id)lineCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2 rejectionResult:(id*)arg3;
- (id)locale;
- (void)logCandidateIfAppropriate:(void*)arg1;
- (id)manhattanLineCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2 rejectionResult:(id*)arg3;
- (unsigned long long)maxRecognitionResultCount;
- (struct __Mecabra { }*)mecabra;
- (struct CGSize { double x1; double x2; })minimumDrawingSize;
- (id)obfuscateString:(id)arg1;
- (id)outlineArrowCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (struct _CFBurstTrie { }*)ovsTrie;
- (id)pentagonCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (id)postProcessLatticePaths:(const struct vector<LatticePath, std::__1::allocator<LatticePath> > { struct LatticePath {} *x1; struct LatticePath {} *x2; struct __compressed_pair<LatticePath *, std::__1::allocator<LatticePath> > { struct LatticePath {} *x_3_1_1; } x3; }*)arg1 history:(id)arg2 activeHistoryRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (id)postProcessMultiWordsLatticePaths:(const struct vector<LatticePath, std::__1::allocator<LatticePath> > { struct LatticePath {} *x1; struct LatticePath {} *x2; struct __compressed_pair<LatticePath *, std::__1::allocator<LatticePath> > { struct LatticePath {} *x_3_1_1; } x3; }*)arg1 withMaximumResults:(unsigned long long)arg2;
- (struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)radicalClusterFST;
- (int)recognitionMode;
- (id)recognitionQueue;
- (id)recognitionResultsForDrawing:(id)arg1 options:(id)arg2;
- (id)recognitionResultsForDrawing:(id)arg1 options:(id)arg2 shouldCancel:(id /* block */)arg3;
- (id)recognitionResultsForMultipleCharacterDrawing:(id)arg1 sortedStrokeIndices:(struct vector<unsigned long, std::__1::allocator<unsigned long> > { unsigned long long *x1; unsigned long long *x2; struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > { unsigned long long *x_3_1_1; } x3; }*)arg2 subStrokeSegments:(id)arg3 delayedSubStrokeSegments:(id)arg4 network:(struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg5 boundsAtNode:(struct vector<CGRect, std::__1::allocator<CGRect> > { struct CGRect {} *x1; struct CGRect {} *x2; struct __compressed_pair<CGRect *, std::__1::allocator<CGRect> > { struct CGRect {} *x_3_1_1; } x3; }*)arg6 options:(id)arg7 shouldCancel:(id /* block */)arg8;
- (id)recognitionResultsForSingleCharacterDrawing:(id)arg1 options:(id)arg2;
- (id)recognitionResultsForSketchDrawing:(id)arg1 options:(id)arg2;
- (int)recognitionType;
- (id)rectangleCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (void)releaseLMResources;
- (bool)saveDrawingUntilNextCandidateAccepted;
- (id)savedDrawing;
- (id)savedTop1CandidateString;
- (void)setActiveCharacterSet:(id)arg1;
- (void)setCachedDrawing:(id)arg1;
- (void)setCachedResults:(struct map<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { struct __tree<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })arg1;
- (void)setCharacterLanguageModel:(void*)arg1;
- (void)setCustomLexicon:(struct _LXLexicon { }*)arg1;
- (void)setDynamicLexicon:(void*)arg1;
- (void)setEngine:(struct CHNeuralNetwork { char *x1; unsigned long long x2; unsigned int *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; }*)arg1;
- (void)setFormatGrammarFST:(struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg1;
- (void)setFreeformEngine:(struct CHNeuralNetwork { char *x1; unsigned long long x2; unsigned int *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; }*)arg1;
- (void)setIcuTransliterator:(void**)arg1;
- (void)setLanguageModel:(void*)arg1;
- (void)setLastCharacterStrokeCount:(unsigned long long)arg1;
- (void)setLastCharacterStrokeIndexes:(id)arg1;
- (void)setLearningDictionaryURL:(id)arg1;
- (void)setLocale:(id)arg1;
- (void)setMaxRecognitionResultCount:(unsigned long long)arg1;
- (void)setMecabra:(struct __Mecabra { }*)arg1;
- (void)setMinimumDrawingSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setOvsTrie:(struct _CFBurstTrie { }*)arg1;
- (void)setRadicalClusterFST:(struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg1;
- (void)setRecognitionMode:(int)arg1;
- (void)setRecognitionQueue:(id)arg1;
- (void)setRecognitionType:(int)arg1;
- (void)setSaveDrawingUntilNextCandidateAccepted:(bool)arg1;
- (void)setSavedDrawing:(id)arg1;
- (void)setSavedTop1CandidateString:(id)arg1;
- (void)setStaticLexicon:(void*)arg1;
- (void)setTransliterationVariantMap:(struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*)arg1;
- (id)sketchCodeForDescription:(id)arg1;
- (id)sketchDescriptionForCode:(int)arg1;
- (id)starCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (void*)staticLexicon;
- (id)strokeIndexesForLastCharacter;
- (id)supportedCharacterSet;
- (id)supportedStrings;
- (struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*)transliterationVariantMap;
- (id)transliterationVariantsForString:(id)arg1;
- (id)triangleCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (void)updateAddressBookLexicon:(id)arg1;
- (void)updateUserDictionaryLexicon:(id)arg1;

@end
