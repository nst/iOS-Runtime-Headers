/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

@interface UIMoviePlayerController : NSObject {
    MPMovieAccessLog * _accessLog;
    <MPVideoControllerProtocol> * _activeVideoController;
    UIView * _alternateTextTrackView;
    bool  _alwaysAllowHidingControlsOverlay;
    bool  _areClosedCaptionsAvailable;
    unsigned long long  _audioControlsStyle;
    NSString * _audioSessionModeOverride;
    unsigned long long  _autoRotationMask;
    UIImage * _backgroundPlaceholderImage;
    unsigned long long  _bufferingState;
    bool  _canContinuePlayingInBackground;
    bool  _canContinuePlayingWhenLocked;
    NSArray * _closedCaptionData;
    bool  _closedCaptioningEnabled;
    NSDate * _currentDate;
    double  _currentTime;
    id  _delegate;
    unsigned int  _desiredParts;
    bool  _disableAlternateTextTrackRendering;
    bool  _disallowsVideoOut;
    unsigned int  _displayableParts;
    double  _duration;
    MPMovieErrorLog * _errorLog;
    long long  _fileSize;
    bool  _fullscreen;
    UIView * _fullscreenView;
    _UIHostedWindow * _hostedWindow;
    unsigned int  _hostedWindowContextID;
    struct __CFBag { } * _ignoredChangeTypes;
    long long  _interfaceOrientation;
    long long  _interfaceOrientationFromDevice;
    bool  _isPreparedForPlayback;
    MPAVItem * _item;
    long long  _lastSetUIInterfaceOrientation;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _layoutRect;
    bool  _limitReadAhead;
    NSString * _moviePath;
    NSString * _movieSubtitle;
    NSString * _movieTitle;
    UIMovieView * _movieView;
    struct { 
        unsigned int canShowControlsOverlay : 1; 
        unsigned int wantsControlsOverlayVis : 1; 
        unsigned int wantsControlsOverlayAnim : 1; 
        unsigned int wantsControlsOverlayDisableAutohide : 1; 
        unsigned int wantsFullscreen : 1; 
        unsigned int alwaysFullscreen : 1; 
        unsigned int canAnimateControlsOverlay : 1; 
        unsigned int autoplayWhenLikelyToKeepUp : 1; 
        unsigned int disallowsVideoOut : 1; 
        unsigned int exited : 1; 
        unsigned int generatingOrientationNotifications : 1; 
        unsigned int forStreaming : 1; 
        unsigned int isExternalTransformationActive : 1; 
        unsigned int controlsVisibleBeforeExternalTransformation : 1; 
        unsigned int isActive : 1; 
        unsigned int resigningActive : 1; 
        unsigned int didResignActive : 1; 
        unsigned int uiPrepared : 1; 
        unsigned int isChangingMoviePath : 1; 
        unsigned int alwaysAllowHidingControlsOverlay : 1; 
        unsigned int schedulePortraitLoadingIndicator : 1; 
        unsigned int clientClearedMoviePath : 1; 
        unsigned int canCommitOverlayChanges : 1; 
        unsigned int usingDebugTestPath : 1; 
        unsigned int allowsWirelessPlayback : 1; 
        unsigned int useHostedWindowWhenFullscreen : 1; 
    }  _mpcBitfield;
    bool  _muted;
    struct CGSize { 
        double width; 
        double height; 
    }  _naturalSize;
    unsigned long long  _options;
    long long  _pendingInterfaceOrientation;
    MPAVItem * _pendingItem;
    MPAVItem * _pendingItemWithDifferentType;
    unsigned long long  _playableContentType;
    unsigned long long  _playableContentTypeOverride;
    double  _playableDuration;
    double  _playableEndTime;
    double  _playableStartTime;
    NSString * _playbackErrorDescription;
    float  _playbackRate;
    unsigned long long  _playbackState;
    MPAVController * _player;
    UINavigationController * _portraitNavigationController;
    UIImage * _posterImage;
    double  _seekableEndTime;
    double  _seekableStartTime;
    bool  _stopAtEnd;
    double  _timeToSnapshot;
    double  _timeWhenResignedActive;
    UIViewController * _topViewController;
    long long  _transitionCount;
    unsigned int  _unmodifiedDisplayableParts;
    bool  _useApplicationAudioSession;
    bool  _useHostedWindowWhenFullscreen;
    bool  _videoOutActive;
    MPVideoView * _videoView;
    UIView * _view;
    float  _volume;
    NSString * _youTubeVideoID;
}

@property (nonatomic, readonly) MPMovieAccessLog *accessLog;
@property (nonatomic, readonly) UIView *alternateTextTrackView;
@property (nonatomic) bool alwaysAllowHidingControlsOverlay;
@property (nonatomic, readonly) bool areClosedCaptionsAvailable;
@property (nonatomic) unsigned long long audioControlsStyle;
@property (nonatomic, retain) NSString *audioSessionModeOverride;
@property (nonatomic, retain) UIImage *backgroundPlaceholderImage;
@property (nonatomic, readonly) unsigned long long bufferingState;
@property (nonatomic, readonly) bool canContinuePlayingInBackground;
@property (nonatomic, readonly) bool canContinuePlayingWhenLocked;
@property (nonatomic) bool closedCaptioningEnabled;
@property (nonatomic, readonly) NSDate *currentDate;
@property (nonatomic) double currentTime;
@property (nonatomic) id delegate;
@property (nonatomic) bool disableAlternateTextTrackRendering;
@property (nonatomic) bool disallowsVideoOut;
@property (nonatomic, readonly) double duration;
@property (nonatomic, readonly) MPMovieErrorLog *errorLog;
@property (nonatomic, readonly) long long fileSize;
@property (getter=isFullscreen, nonatomic) bool fullscreen;
@property (nonatomic, readonly) UIView *fullscreenView;
@property (nonatomic, readonly) _UIHostedWindow *hostedWindow;
@property (nonatomic, readonly) unsigned int hostedWindowContextID;
@property (nonatomic, readonly) bool isPreparedForPlayback;
@property (nonatomic, readonly) MPAVItem *item;
@property (nonatomic) bool limitReadAhead;
@property (nonatomic, copy) NSString *moviePath;
@property (nonatomic, copy) NSString *movieSubtitle;
@property (nonatomic, copy) NSString *movieTitle;
@property (nonatomic, readonly) UIMovieView *movieView;
@property (nonatomic, readonly) bool muted;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } naturalSize;
@property (nonatomic) unsigned long long options;
@property (nonatomic) unsigned long long playableContentType;
@property (nonatomic, readonly) double playableDuration;
@property (nonatomic, readonly) double playableEndTime;
@property (nonatomic, readonly) double playableStartTime;
@property (nonatomic, copy) NSString *playbackErrorDescription;
@property (nonatomic) float playbackRate;
@property (nonatomic, readonly) unsigned long long playbackState;
@property (nonatomic, retain) UIImage *posterImage;
@property (nonatomic, readonly) double seekableEndTime;
@property (nonatomic, readonly) double seekableStartTime;
@property (nonatomic) bool stopAtEnd;
@property (nonatomic) bool useApplicationAudioSession;
@property (nonatomic) bool useHostedWindowWhenFullscreen;
@property (nonatomic, readonly) bool videoOutActive;
@property (nonatomic, readonly) UIView *view;
@property (nonatomic, readonly) float volume;
@property (nonatomic, copy) NSString *youTubeVideoID;

- (void).cxx_destruct;
- (id)accessLog;
- (id)alternateTextTrackView;
- (bool)alwaysAllowHidingControlsOverlay;
- (bool)areClosedCaptionsAvailable;
- (unsigned long long)audioControlsStyle;
- (id)audioSessionModeOverride;
- (id)backgroundPlaceholderImage;
- (unsigned long long)bufferingState;
- (bool)canContinuePlayingInBackground;
- (bool)canContinuePlayingWhenLocked;
- (bool)closedCaptioningEnabled;
- (id)currentDate;
- (double)currentTime;
- (id)delegate;
- (bool)disableAlternateTextTrackRendering;
- (bool)disallowsVideoOut;
- (double)duration;
- (id)errorLog;
- (long long)fileSize;
- (id)fullscreenView;
- (id)hostedWindow;
- (unsigned int)hostedWindowContextID;
- (bool)isFullscreen;
- (bool)isPreparedForPlayback;
- (id)item;
- (bool)limitReadAhead;
- (id)moviePath;
- (id)movieSubtitle;
- (id)movieTitle;
- (id)movieView;
- (bool)muted;
- (struct CGSize { double x1; double x2; })naturalSize;
- (unsigned long long)options;
- (unsigned long long)playableContentType;
- (double)playableDuration;
- (double)playableEndTime;
- (double)playableStartTime;
- (id)playbackErrorDescription;
- (float)playbackRate;
- (unsigned long long)playbackState;
- (id)posterImage;
- (double)seekableEndTime;
- (double)seekableStartTime;
- (void)setAlwaysAllowHidingControlsOverlay:(bool)arg1;
- (void)setAudioControlsStyle:(unsigned long long)arg1;
- (void)setAudioSessionModeOverride:(id)arg1;
- (void)setBackgroundPlaceholderImage:(id)arg1;
- (void)setClosedCaptioningEnabled:(bool)arg1;
- (void)setCurrentTime:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisableAlternateTextTrackRendering:(bool)arg1;
- (void)setDisallowsVideoOut:(bool)arg1;
- (void)setFullscreen:(bool)arg1;
- (void)setLimitReadAhead:(bool)arg1;
- (void)setMoviePath:(id)arg1;
- (void)setMovieSubtitle:(id)arg1;
- (void)setMovieTitle:(id)arg1;
- (void)setOptions:(unsigned long long)arg1;
- (void)setPlayableContentType:(unsigned long long)arg1;
- (void)setPlaybackErrorDescription:(id)arg1;
- (void)setPlaybackRate:(float)arg1;
- (void)setPosterImage:(id)arg1;
- (void)setStopAtEnd:(bool)arg1;
- (void)setUseApplicationAudioSession:(bool)arg1;
- (void)setUseHostedWindowWhenFullscreen:(bool)arg1;
- (void)setYouTubeVideoID:(id)arg1;
- (bool)stopAtEnd;
- (bool)useApplicationAudioSession;
- (bool)useHostedWindowWhenFullscreen;
- (bool)videoOutActive;
- (id)view;
- (float)volume;
- (id)youTubeVideoID;

@end
