/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreSuggestionsInternals.framework/CoreSuggestionsInternals
 */

@interface SGSqliteDatabase : NSObject {
    bool  _currentExclusivity;
    struct sqlite3 { } * _db;
    NSString * _filename;
    struct atomic_flag { 
        bool _Value; 
    }  _isClosed;
    bool  _isInMemory;
    unsigned long long  _lastBusyWaitEnded;
    NSOperationQueue * _operationQueue;
    NSCache * _queryCache;
    NSObject<OS_dispatch_queue> * _queue;
    NSMutableDictionary * _sqlarrays;
    struct _opaque_pthread_t { long long x1; struct __darwin_pthread_handler_rec {} *x2; BOOL x3[8176]; } * _threadInQueue;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _threadInQueueLock;
    int  _transactionDepth;
    bool  _transactionRolledback;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (nonatomic, readonly) NSString *filename;
@property (nonatomic, readonly) struct sqlite3 { }*handle;
@property (nonatomic, readonly) bool isInMemory;

+ (int)bindParam:(struct sqlite3_stmt { }*)arg1 name:(const char *)arg2 double:(double)arg3;
+ (int)bindParam:(struct sqlite3_stmt { }*)arg1 name:(const char *)arg2 int64:(long long)arg3;
+ (int)bindParam:(struct sqlite3_stmt { }*)arg1 name:(const char *)arg2 int:(int)arg3;
+ (int)bindParam:(struct sqlite3_stmt { }*)arg1 name:(const char *)arg2 nscoding:(id)arg3;
+ (int)bindParam:(struct sqlite3_stmt { }*)arg1 name:(const char *)arg2 nsdata:(id)arg3;
+ (int)bindParam:(struct sqlite3_stmt { }*)arg1 name:(const char *)arg2 nsstring:(id)arg3;
+ (int)bindParamToNull:(struct sqlite3_stmt { }*)arg1 name:(const char *)arg2;
+ (id)corruptionMarkerFilename;
+ (id)corruptionMarkerPathForPath:(id)arg1;
+ (id)inMemoryPath;
+ (bool)isInMemoryPath:(id)arg1;
+ (id)protectedDatabaseWithFilename:(id)arg1 error:(id*)arg2;
+ (id)protectedDatabaseWithFilename:(id)arg1 flags:(int)arg2 error:(id*)arg3;
+ (id)randomlyNamedInMemoryPathWithBaseName:(id)arg1;
+ (bool)shouldCacheSql:(const char *)arg1;
+ (id)sqliteDatabaseInMemoryWithError:(id*)arg1;
+ (id)sqliteDatabaseWithFilename:(id)arg1 error:(id*)arg2;
+ (id)sqliteDatabaseWithFilename:(id)arg1 flags:(int)arg2 error:(id*)arg3;
+ (void)truncateDatabaseAtPath:(id)arg1;

- (void).cxx_destruct;
- (bool)_abortDueToSqliteError:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_ABORT:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_ABORT_ROLLBACK:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_AUTH:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_AUTH_USER:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_BUSY:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_BUSY_RECOVERY:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_BUSY_SNAPSHOT:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CANTOPEN:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CANTOPEN_CONVPATH:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CANTOPEN_FULLPATH:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CANTOPEN_ISDIR:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CANTOPEN_NOTEMPDIR:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CONSTRAINT:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CONSTRAINT_CHECK:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CONSTRAINT_COMMITHOOK:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CONSTRAINT_FOREIGNKEY:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CONSTRAINT_FUNCTION:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CONSTRAINT_NOTNULL:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CONSTRAINT_PRIMARYKEY:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CONSTRAINT_ROWID:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CONSTRAINT_TRIGGER:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CONSTRAINT_UNIQUE:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CONSTRAINT_VTAB:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CORRUPT:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_CORRUPT_VTAB:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_EMPTY:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_ERROR:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_FORMAT:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_FULL:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_INTERNAL:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_INTERRUPT:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_ACCESS:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_AUTH:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_BLOCKED:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_CHECKRESERVEDLOCK:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_CLOSE:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_CONVPATH:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_DELETE:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_DELETE_NOENT:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_DIR_CLOSE:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_DIR_FSYNC:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_FSTAT:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_FSYNC:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_GETTEMPPATH:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_LOCK:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_MMAP:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_NOMEM:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_RDLOCK:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_READ:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_SEEK:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_SHMLOCK:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_SHMMAP:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_SHMOPEN:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_SHMSIZE:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_SHORT_READ:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_TRUNCATE:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_UNLOCK:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_VNODE:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_IOERR_WRITE:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_LOCKED:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_LOCKED_SHAREDCACHE:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_MISMATCH:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_MISUSE:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_NOLFS:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_NOMEM:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_NOTADB:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_NOTFOUND:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_NOTICE:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_NOTICE_RECOVER_ROLLBACK:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_NOTICE_RECOVER_WAL:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_PERM:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_PROTOCOL:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_RANGE:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_READONLY:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_READONLY_CANTLOCK:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_READONLY_DBMOVED:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_READONLY_RECOVERY:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_READONLY_ROLLBACK:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_SCHEMA:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_TOOBIG:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_WARNING:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_SQLITE_WARNING_AUTOINDEX:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_UNKNOWN_ERROR:(id)arg1 onError:(id /* block */)arg2;
- (bool)_handle_sqlite_error_code:(int)arg1 error:(id)arg2 onError:(id /* block */)arg3;
- (void)_prepAndRunQuery:(id)arg1 columns:(id)arg2 dictionary:(id)arg3 onError:(id /* block */)arg4;
- (bool)_transactionWithExclusivity:(bool)arg1 transaction:(id /* block */)arg2;
- (void)_txnBegin;
- (void)_txnBeginExclusive;
- (void)_txnEnd;
- (void)_txnRollback;
- (void)clearCaches;
- (void)closePermanently;
- (id)corruptionMarkerPath;
- (bool)createSnapshot:(id)arg1;
- (id)dbErrorWithCode:(unsigned long long)arg1 sqliteReturnValue:(int)arg2 lastErrno:(int)arg3 query:(id)arg4;
- (void)dealloc;
- (id)description;
- (id)filename;
- (bool)frailReadTransaction:(id /* block */)arg1;
- (bool)frailWriteTransaction:(id /* block */)arg1;
- (id)freeSpace;
- (struct sqlite3 { }*)handle;
- (bool)handleError:(long long)arg1 sqliteError:(int)arg2 forQuery:(id)arg3 onError:(id /* block */)arg4;
- (bool)hasColumnOnTable:(id)arg1 named:(id)arg2;
- (bool)hasIndexNamed:(id)arg1;
- (bool)hasTableNamed:(id)arg1;
- (id)initWithFilename:(id)arg1 flags:(int)arg2 error:(id*)arg3;
- (void)insertOrReplaceIntoTable:(id)arg1 dictionary:(id)arg2 onError:(id /* block */)arg3;
- (bool)isInMemory;
- (id)languageForFTSTable:(id)arg1;
- (long long)lastInsertRowId;
- (long long)maxIdForTable:(id)arg1;
- (unsigned long long)numberOfRowsInTable:(id)arg1;
- (void)performIntegrityCheck;
- (void)placeCorruptionMarker;
- (bool)prepAndRunNonDataQueries:(id)arg1 onError:(id /* block */)arg2;
- (bool)prepAndRunQuery:(id)arg1 arrays:(id)arg2 onPrep:(id /* block */)arg3 onRow:(id /* block */)arg4 onError:(id /* block */)arg5;
- (bool)prepAndRunQuery:(id)arg1 onPrep:(id /* block */)arg2 onRow:(id /* block */)arg3 onError:(id /* block */)arg4;
- (void)prepQuery:(id)arg1 onPrep:(id /* block */)arg2 onError:(id /* block */)arg3;
- (void)readTransaction:(id /* block */)arg1;
- (bool)runQuery:(struct sqlite3_stmt { }*)arg1 onRow:(id /* block */)arg2;
- (bool)runQuery:(struct sqlite3_stmt { }*)arg1 onRow:(id /* block */)arg2 onError:(id /* block */)arg3;
- (id)selectColumns:(id)arg1 fromTable:(id)arg2 whereClause:(id)arg3 onPrep:(id /* block */)arg4 onError:(id /* block */)arg5;
- (bool)setUserVersion:(unsigned long long)arg1;
- (void)simulateOnDiskDatabase;
- (id)tablesWithColumnNamed:(id)arg1;
- (void)updateTable:(id)arg1 dictionary:(id)arg2 whereClause:(id)arg3 onError:(id /* block */)arg4;
- (unsigned long long)userVersion;
- (void)withDbLockNonblocking:(id /* block */)arg1;
- (void)writeTransaction:(id /* block */)arg1;

@end
