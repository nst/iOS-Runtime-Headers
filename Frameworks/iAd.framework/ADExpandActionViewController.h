/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/iAd.framework/iAd
 */

@interface ADExpandActionViewController : ADActionViewController <WKNavigationDelegate> {
    NSURL * _URL;
    bool  _adIsDismissing;
    bool  _browserContextControllerDidLoad;
    NSString * _creativeIdentifier;
    ADCountdownButton * _dismissButton;
    ADWebViewGestureRecognizer * _gestureRecognizer;
    ADHomeButtonHandler * _homeButtonHandler;
    struct CGSize { 
        double width; 
        double height; 
    }  _maximumExpandedSize;
    id  _notificationObserver;
    _WKRemoteObjectInterface * _remoteObjectInterface;
    bool  _shouldBlockNavigation;
    bool  _tapWasRecognized;
    bool  _visible;
    <ADWebProcessProxy> * _webProcessProxy;
    ADWebView * _webView;
}

@property (nonatomic, copy) NSURL *URL;
@property (nonatomic) bool adIsDismissing;
@property (nonatomic) bool browserContextControllerDidLoad;
@property (nonatomic, copy) NSString *creativeIdentifier;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) ADCountdownButton *dismissButton;
@property (nonatomic, retain) ADWebViewGestureRecognizer *gestureRecognizer;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) ADHomeButtonHandler *homeButtonHandler;
@property (nonatomic) struct CGSize { double x1; double x2; } maximumExpandedSize;
@property (nonatomic, retain) id notificationObserver;
@property (nonatomic, retain) _WKRemoteObjectInterface *remoteObjectInterface;
@property (nonatomic) bool shouldBlockNavigation;
@property (readonly) Class superclass;
@property (nonatomic) bool tapWasRecognized;
@property (getter=isVisible, nonatomic) bool visible;
@property (nonatomic, retain) ADWebView *webView;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } webViewFrame;

- (id)URL;
- (void)_dismissButtonTapped;
- (void)_dismissKeyboard;
- (void)_dismissWithSystemEvent:(int)arg1;
- (id)_incrementCreativeIdentifier;
- (bool)_navigationIsBlocked;
- (void)_registerExportedObjectInterface;
- (void)_requestOpenURL:(id)arg1;
- (void)_resetGestureFlags;
- (void)_tapRecognized:(id)arg1;
- (void)_unregisterExportedObjectInterface;
- (void)_updateJSOExpandedSize;
- (void)_updateWebViewFrame;
- (bool)adIsDismissing;
- (bool)browserContextControllerDidLoad;
- (void)clientApplicationDidEnterBackground;
- (id)creativeIdentifier;
- (void)dealloc;
- (void)didSetAdSpace;
- (void)dismiss;
- (id)dismissButton;
- (id)gestureRecognizer;
- (id)homeButtonHandler;
- (bool)isVisible;
- (struct CGSize { double x1; double x2; })maximumExpandedSize;
- (id)notificationObserver;
- (id)remoteObjectInterface;
- (void)setAdIsDismissing:(bool)arg1;
- (void)setBrowserContextControllerDidLoad:(bool)arg1;
- (void)setCreativeIdentifier:(id)arg1;
- (void)setDismissButton:(id)arg1;
- (void)setGestureRecognizer:(id)arg1;
- (void)setHomeButtonHandler:(id)arg1;
- (void)setMaximumExpandedSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setNotificationObserver:(id)arg1;
- (void)setRemoteObjectInterface:(id)arg1;
- (void)setShouldBlockNavigation:(bool)arg1;
- (void)setTapWasRecognized:(bool)arg1;
- (void)setURL:(id)arg1;
- (void)setVisible:(bool)arg1;
- (void)setWebView:(id)arg1;
- (bool)shouldBlockNavigation;
- (bool)tapWasRecognized;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillLayoutSubviews;
- (void)webProcessMRAIDJSODidCallClose;
- (void)webProcessMRAIDJSODidCallExpand:(id)arg1 withMaximumSize:(id)arg2;
- (void)webProcessMRAIDJSODidCallOpen:(id)arg1;
- (void)webProcessPlugInBrowserContextControllerGlobalObjectIsAvailableForFrame;
- (void)webProcessPlugInDidCreateBrowserContextController;
- (void)webProcessPlugInWillDestroyBrowserContextController;
- (id)webView;
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 decisionHandler:(id /* block */)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })webViewFrame;

@end
