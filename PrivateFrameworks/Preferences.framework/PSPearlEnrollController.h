/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Preferences.framework/Preferences
 */

@interface PSPearlEnrollController : PSViewController <BKEnrollOperationDelegate, BKEnrollPearlOperationDelegate, LAUIDelegate, PSPearlEnrollViewDelegate> {
    UILabel * _animatingDetailLabel;
    UILabel * _animatingInstructionLabel;
    bool  _animatingState;
    AVAudioEngine * _audioEngine;
    AVAudioPlayerNode * _audioNode;
    LAContext * _authContext;
    bool  _bioCaptureComplete;
    double  _bioKitCompletion;
    UIView * _buttonTray;
    AVAudioPCMBuffer * _completeSoundBuffer;
    NSString * _credential;
    NSMutableDictionary * _customDetailStrings;
    NSMutableDictionary * _customInstructionStrings;
    bool  _darkBackground;
    _UIBackdropView * _darkTrayBackdrop;
    UILabel * _debugLabel;
    <PSPearlEnrollControllerDelegate> * _delegate;
    UILabel * _detailLabel;
    BKDevicePearl * _device;
    AVAudioPCMBuffer * _endSoundBuffer;
    BKEnrollPearlOperation * _enrollOperation;
    PSPearlEnrollView * _enrollView;
    UIButton * _escapeHatchButton;
    AVAudioPCMBuffer * _failSoundBuffer;
    AVHapticPlayer * _hapticPlayer;
    bool  _inBuddy;
    bool  _inDemo;
    UILabel * _instructionLabel;
    NSDate * _lastFaceFoundDate;
    _UIBackdropView * _lightTrayBackdrop;
    AVAudioPCMBuffer * _lockSoundBuffer;
    UIButton * _nextStateButton;
    int  _pendingSubstate;
    NSMutableArray * _poseStatus;
    int  _previousState;
    NSString * _progressString;
    AVAudioPCMBuffer * _scanSoundBuffer;
    UIScrollView * _scrollView;
    SFClient * _sharingclient;
    int  _state;
    NSTimer * _stateDelayTimer;
    NSObject<OS_dispatch_queue> * _stateQueue;
    NSObject<OS_dispatch_semaphore> * _stateSema;
    NSDate * _stateStart;
    NSTimer * _statusPollTimer;
    NSString * _statusString;
    int  _substate;
    NSTimer * _substateDelayTimer;
    bool  _substatePending;
    bool  _suspended;
}

@property (nonatomic, copy) NSString *credential;
@property (nonatomic) bool darkBackground;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PSPearlEnrollControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool inBuddy;
@property (nonatomic) bool inDemo;
@property (nonatomic, readonly) int state;
@property (readonly) Class superclass;
@property (nonatomic) bool useNextButton;

+ (bool)_shouldShowAccessibilityOptionForState:(int)arg1 poseStatus:(id)arg2;
+ (bool)_shouldShowEscapeHatchForState:(int)arg1 inBuddy:(bool)arg2;
+ (bool)isPearlAvailable;
+ (bool)isPearlInterlocked;
+ (void)preloadAnimations;

- (void).cxx_destruct;
- (void)_animateLabels;
- (void)_checkForCompletion;
- (void)_cleanUpHaptics;
- (void)_cleanupEnroll;
- (void)_cleanupSound;
- (id)_createDetailLabel;
- (id)_createInstructionLabel;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_detailFrameForState:(int)arg1 label:(id)arg2 instructionLabel:(id)arg3;
- (id)_detailTextForState:(int)arg1 substate:(int)arg2;
- (void)_endEnrollFlowWithError:(id)arg1;
- (id)_escapeHatchTitleForState:(int)arg1;
- (void)_finishAnimatingLabels;
- (int)_firstVisibleState;
- (id)_instructionTextForState:(int)arg1 substate:(int)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_instructionsFrameForState:(int)arg1 label:(id)arg2;
- (id)_loadSound:(id)arg1;
- (id)_locStateNameForState:(int)arg1;
- (id)_nextStateButtonTitleForState:(int)arg1;
- (void)_prepareForLabelsAnimationToState:(int)arg1 fromState:(int)arg2;
- (double)_scrollViewOffsetForState:(int)arg1;
- (void)_setState:(int)arg1 animated:(bool)arg2 completion:(id /* block */)arg3;
- (void)_setSubstate:(int)arg1 animated:(bool)arg2;
- (void)_setSuspended:(bool)arg1;
- (void)_setUpHaptics;
- (void)_setupSound;
- (void)_triggerSoundHapticForTransitionToState:(int)arg1 fromState:(int)arg2;
- (void)_triggerSoundHapticForTransitionToSubstate:(int)arg1 fromSubstate:(int)arg2;
- (void)_updateDebugLabel;
- (void)_updateLeftBarButtonItem;
- (bool)_validateEnrolledPoses:(id)arg1;
- (bool)canBeShownFromSuspendedState;
- (void)cancelEnroll;
- (id)credential;
- (bool)darkBackground;
- (void)dealloc;
- (id)delegate;
- (void)didBecomeActive:(id)arg1;
- (void)didEnterBackground:(id)arg1;
- (void)didReachLargeNudgePeakForEnrollView:(id)arg1;
- (void)didReachSmallNudgePeakForEnrollView:(id)arg1;
- (void)endEnrollFlowWithError:(id)arg1;
- (void)enrollOperation:(id)arg1 failedWithReason:(long long)arg2;
- (void)enrollOperation:(id)arg1 finishedWithIdentity:(id)arg2;
- (void)enrollOperation:(id)arg1 percentCompleted:(long long)arg2;
- (void)enrollOperation:(id)arg1 progressedWithInfo:(id)arg2;
- (void)enrollView:(id)arg1 didNudgeInDirection:(unsigned long long)arg2 nudgeCount:(unsigned long long)arg3;
- (void)enrollView:(id)arg1 willNudgeInDirection:(unsigned long long)arg2 nudgeCount:(unsigned long long)arg3;
- (void)escapeHatchButtonPressed;
- (void)event:(long long)arg1 params:(id)arg2 reply:(id /* block */)arg3;
- (void)fadeCurrentSound:(double)arg1 completion:(id /* block */)arg2;
- (id)getAuthContextForCredentialError:(id*)arg1;
- (bool)inBuddy;
- (bool)inDemo;
- (id)init;
- (void)loadView;
- (void)nextStateButtonPressed:(id)arg1;
- (void)operation:(id)arg1 faceDetectStateChanged:(id)arg2;
- (void)playHaptic:(unsigned long long)arg1 withDelay:(double)arg2 gain:(double)arg3;
- (long long)preferredStatusBarStyle;
- (void)primeWithPasscode:(id)arg1;
- (void)returnToEnroll;
- (void)setCredential:(id)arg1;
- (void)setCustomDetailString:(id)arg1 forState:(int)arg2;
- (void)setCustomInstructionString:(id)arg1 forState:(int)arg2;
- (void)setDarkBackground:(bool)arg1;
- (void)setDarkBackground:(bool)arg1 animated:(bool)arg2;
- (void)setDelegate:(id)arg1;
- (void)setInBuddy:(bool)arg1;
- (void)setInDemo:(bool)arg1;
- (void)setSplashImageView:(id)arg1;
- (void)setState:(int)arg1 animated:(bool)arg2;
- (void)setState:(int)arg1 animated:(bool)arg2 afterDelay:(double)arg3;
- (void)setStatus:(id)arg1;
- (void)setSubstate:(int)arg1 animated:(bool)arg2 afterDelay:(double)arg3;
- (void)setUseNextButton:(bool)arg1;
- (void)startEnroll;
- (int)state;
- (void)toggleDebug;
- (void)toggleDebugAndSave;
- (bool)useNextButton;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (void)willResignActive:(id)arg1;

@end
