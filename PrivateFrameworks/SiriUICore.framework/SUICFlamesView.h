/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SiriUICore.framework/SiriUICore
 */

@interface SUICFlamesView : UIView {
    bool  _accelerateTransitions;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _activeFrame;
    float  _auraMaxSubdivisionLevel;
    float  _auraMinSubdivisionLevel;
    int  _auraProgramHandle;
    unsigned int  _auraVertexCircles;
    long long  _currentContextCount;
    FlameGroup * _currentFlameGroup;
    <SUICFlamesViewDelegate> * _delegate;
    double  _dictationBlueColor;
    UIColor * _dictationColor;
    double  _dictationGreenColor;
    double  _dictationRedColor;
    float  _dictationUnitSize;
    CADisplayLink * _displayLink;
    EAGLContext * _eaglContext;
    unsigned int  _elementArrayHandle;
    int  _fShadID;
    int  _fidelity;
    NSMutableArray * _flameGroups;
    int  _flameProgramHandle;
    unsigned int  _framebufferHandle;
    bool  _hasCustomActiveFrame;
    double  _horizontalScaleFactor;
    bool  _isInitialized;
    SUICAudioLevelSmoother * _levelSmoother;
    float  _maxSubdivisionLevel;
    unsigned int  _maxVertexCircles;
    int  _mode;
    unsigned int  _numAuraIndices;
    unsigned int  _numAuraIndicesCulled;
    unsigned int  _numVertices;
    unsigned int  _numWaveIndices;
    UIImage * _overlayImage;
    UIImageView * _overlayImageView;
    bool  _paused;
    EAGLContext * _previousContext;
    bool  _reduceFrameRate;
    bool  _reduceMotionEnabled;
    bool  _renderInBackground;
    unsigned int  _renderbufferHandle;
    NSMutableSet * _renderingDisabledReasons;
    UIScreen * _screen;
    bool  _shadersAreCompiled;
    bool  _showAura;
    double  _startTime;
    int  _state;
    int  _vShadID;
    unsigned int  _vertexArrayObjectHandle;
    unsigned int  _vertexBufferHandle;
    int  _viewHeight;
    int  _viewWidth;
}

@property (nonatomic) bool accelerateTransitions;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } activeFrame;
@property (nonatomic) <SUICFlamesViewDelegate> *delegate;
@property (nonatomic, retain) UIColor *dictationColor;
@property (nonatomic) double horizontalScaleFactor;
@property (nonatomic, readonly) bool isRenderingEnabled;
@property (nonatomic) int mode;
@property (nonatomic, retain) UIImage *overlayImage;
@property (nonatomic) bool paused;
@property (nonatomic) bool reduceFrameRate;
@property (nonatomic) bool renderInBackground;
@property (nonatomic) bool showAura;
@property (nonatomic) int state;

+ (Class)layerClass;
+ (void)prewarmShadersForScreen:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2;
+ (void)prewarmShadersForScreen:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 fidelity:(int)arg3;
+ (void)prewarmShadersForScreen:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 fidelity:(int)arg3 prewarmInBackground:(bool)arg4;

- (void).cxx_destruct;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_cleanupGL;
- (double)_currentDisplayScale;
- (float)_currentMicPowerLevel;
- (int)_generateIndicesForNumCircleShapes:(int)arg1 withMaxSubdivisionLevel:(float)arg2 startingWithNumSubdivisionLevel:(float)arg3 forIndices:(unsigned int**)arg4 atStartIndex:(int)arg5 withFill:(bool)arg6 withCullingForAura:(bool)arg7 forVertices:(struct { }*)arg8;
- (bool)_initGLAndSetupDisplayLink:(bool)arg1;
- (bool)_isOriginatingProcessInBackground;
- (unsigned int)_numVerticesPerCircle;
- (void)_predeterminedVertexPositionForAuraWithPolarVertex;
- (void)_prewarmShaders;
- (void)_reduceMotionStatusChanged:(id)arg1;
- (bool)_resizeFromLayer:(id)arg1;
- (void)_restoreCurrentContext;
- (bool)_setCurrentContext;
- (void)_setPreferredFramesPerSecond;
- (void)_setValuesForFidelity:(int)arg1;
- (void)_setupDisplayLink;
- (bool)_setupFramebuffer;
- (bool)_setupShaders;
- (bool)_setupVertexBuffer;
- (void)_tearDownDisplayLink;
- (void)_updateCurveLayer:(id)arg1;
- (void)_updateDisplayLinkPausedState;
- (void)_updateDisplayLinkPausedStateFromSuccess:(bool)arg1;
- (void)_updateOrthoProjection;
- (bool)accelerateTransitions;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })activeFrame;
- (void)dealloc;
- (id)delegate;
- (id)dictationColor;
- (void)didMoveToSuperview;
- (void)fadeOutCurrentAura;
- (double)horizontalScaleFactor;
- (bool)inDictationMode;
- (bool)inSiriMode;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 screen:(id)arg2 fidelity:(int)arg3;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 screenScale:(double)arg2 fidelity:(int)arg3;
- (bool)isRenderingEnabled;
- (void)layoutSubviews;
- (int)mode;
- (id)overlayImage;
- (bool)paused;
- (void)prewarmShadersForCurrentMode;
- (bool)reduceFrameRate;
- (bool)renderInBackground;
- (void)resetAndReinitializeGL:(bool)arg1;
- (void)setAccelerateTransitions:(bool)arg1;
- (void)setActiveFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setDictationColor:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHidden:(bool)arg1;
- (void)setHorizontalScaleFactor:(double)arg1;
- (void)setMode:(int)arg1;
- (void)setOverlayImage:(id)arg1;
- (void)setPaused:(bool)arg1;
- (void)setReduceFrameRate:(bool)arg1;
- (void)setRenderInBackground:(bool)arg1;
- (void)setRenderingEnabled:(bool)arg1 forReason:(id)arg2;
- (void)setShowAura:(bool)arg1;
- (void)setState:(int)arg1;
- (bool)showAura;
- (int)state;
- (void)stopRenderingAndCleanupGL;
- (void)traitCollectionDidChange:(id)arg1;

@end
