/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
 */

@interface HDWorkoutManager : NSObject <HDDatabaseProtectedDataObserver, HDDiagnosticObject, HDForegroundClientProcessObserver, HDHealthDaemonReadyObserver, HDWorkoutEventCollectorDelegate> {
    CMWorkoutManager * _cmWorkoutManager;
    NSMutableSet * _currentObservedTypes;
    _HDWorkoutData * _currentWorkout;
    NSMutableSet * _eventCollectors;
    bool  _isFirstLaunchAndNotYetSmoothed;
    CLLocationManager * _locationManager;
    HDWorkoutLocationSmoother * _locationSmoother;
    bool  _needToCheckForLocationSeriesOnUnlock;
    _HDWorkoutData * _nextWorkout;
    NSHashTable * _observerTable;
    HDPrimaryProfile * _primaryProfile;
    NSObject<OS_dispatch_queue> * _queue;
    bool  _stopEventAfterPause;
    NSObject<OS_dispatch_source> * _suppressActivityKeepaliveTimer;
    bool  _waitingForStopEvent;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (id)_distanceTypeForActivityType:(unsigned long long)arg1 isIndoor:(bool)arg2;
+ (id)observedTypesForActivityType:(unsigned long long)arg1 isIndoor:(bool)arg2;

- (void).cxx_destruct;
- (void)_associationsSyncedForWorkout:(id)arg1;
- (long long)_cmSwimLocationForHKSwimmingLocation:(long long)arg1;
- (id)_coreMotionWorkoutManager;
- (id)_mainQueue_locationManager;
- (void)_queue_didUpdateCurrentWorkoutSession;
- (void)_queue_doSuppressActivityAlertsForWorkout:(id)arg1;
- (id)_queue_eventCollectors;
- (void)_queue_finishedLaunchingWorkoutApp:(id)arg1 error:(id)arg2 completion:(id)arg3;
- (void)_queue_immediateUpdateWithCompletion:(id)arg1;
- (id)_queue_locationSmoother;
- (void)_queue_pauseCurrentSession;
- (void)_queue_resetActivityTypeForWorkoutSession:(id)arg1;
- (void)_queue_resumeCurrentSession;
- (void)_queue_sessionEnded;
- (void)_queue_setActivityType:(unsigned long long)arg1 forSessionUUID:(id)arg2 isIndoor:(bool)arg3;
- (void)_queue_setActivityTypeForWorkoutSession:(id)arg1;
- (void)_queue_setCurrentSessionState:(long long)arg1;
- (void)_queue_setSuppressActivityAlerts:(bool)arg1 forWorkout:(id)arg2;
- (void)_queue_setViewOnWake:(bool)arg1 forWorkout:(id)arg2;
- (void)_queue_smoothAllUnsmoothedLocationSeries;
- (void)_queue_startBackgroundExecutionForWorkout:(id)arg1;
- (void)_queue_startDataAndEventCollection;
- (void)_queue_startWatchAppWithWorkoutConfiguration:(id)arg1 client:(id)arg2 completion:(id)arg3;
- (void)_queue_startWorkout:(id)arg1;
- (void)_queue_stopBackgroundExecution;
- (void)_queue_stopCurrentSessionWaitingForStopEvent:(bool)arg1;
- (void)_queue_stopDataAndEventCollection;
- (void)_sendStartWorkoutAppResponse:(id)arg1 error:(id)arg2;
- (void)_setupLocationObserversIfNeeded;
- (id)_workoutSessionNotCurrentError:(id)arg1;
- (void)addWorkoutEventObserver:(id)arg1;
- (void)clientInvalidated:(id)arg1;
- (unsigned long long)currentWorkoutActivityType;
- (id)currentWorkoutClient;
- (void)daemonReady:(id)arg1;
- (void)database:(id)arg1 protectedDataDidBecomeAvailable:(bool)arg2;
- (void)dealloc;
- (id)diagnosticDescription;
- (void)foregroundClientProcessesDidChange:(id)arg1;
- (void)generateMarkerEventWithDate:(id)arg1 completion:(id)arg2;
- (bool)hasAnyActiveWorkouts;
- (void)hk_fakeLapEventWithDate:(id)arg1 strokeStyle:(long long)arg2;
- (void)hk_fakeStopEventWithDate:(id)arg1;
- (id)initWithPrimaryProfile:(id)arg1;
- (void)pauseCurrentWorkoutWithCompletion:(id)arg1;
- (void)pauseWorkoutSessionWithUUID:(id)arg1 completion:(id)arg2;
- (bool)pluginHasBackgroundRunMode:(id)arg1 errorOut:(id*)arg2;
- (void)receivedStartWorkoutAppRequest:(id)arg1 completion:(id)arg2;
- (void)receivedWorkoutEvent:(id)arg1;
- (void)removeWorkoutEventObserver:(id)arg1;
- (void)resumeCurrentWorkoutWithCompletion:(id)arg1;
- (void)resumeWorkoutSessionWithUUID:(id)arg1 completion:(id)arg2;
- (void)startWatchAppWithWorkoutConfiguration:(id)arg1 client:(id)arg2 completion:(id)arg3;
- (void)startWorkoutSession:(id)arg1 client:(id)arg2 server:(id)arg3 isFirstParty:(bool)arg4 completion:(id)arg5;
- (void)stopWorkoutSessionWithUUID:(id)arg1 completion:(id)arg2;

@end
