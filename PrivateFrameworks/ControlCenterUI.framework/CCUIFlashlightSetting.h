/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ControlCenterUI.framework/ControlCenterUI
 */

@interface CCUIFlashlightSetting : CCUISettingModule {
    AVFlashlight * _flashlight;
    float  _flashlightLevel;
    bool  _flashlightOn;
    NSObject<OS_dispatch_queue> * _flashlightQueue;
    bool  _stayWarm;
}

@property (getter=isFlashlightOn, nonatomic) bool flashlightOn;

+ (id)displayName;
+ (id)identifier;
+ (bool)isSupported:(int)arg1;

- (void).cxx_destruct;
- (void)_deviceBlockStateDidChangeNotification:(id)arg1;
- (bool)_enableTorch:(bool)arg1;
- (void)_featureLockStateDidChangeNotification:(id)arg1;
- (id)_imageNameForState:(int)arg1 section:(int)arg2;
- (void)_setTorchLevel:(float)arg1;
- (id)_settingImageNameForState:(int)arg1;
- (id)_shortcutImageNameForState:(int)arg1;
- (void)_tearDown;
- (bool)_toggleState;
- (void)_updateFlashlightPowerState;
- (void)_updateState;
- (void)activate;
- (id)aggdKey;
- (id)buttonActions;
- (void)cooldown;
- (void)deactivate;
- (void)dealloc;
- (id)displayName;
- (id)glyphImageForState:(int)arg1 section:(int)arg2;
- (bool)isFlashlightOn;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (int)orbBehavior;
- (void)setFlashlightOn:(bool)arg1;
- (id)statusUpdate;
- (id)unavailableText;
- (void)warmup;

@end
