/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit
 */

@interface IKViewElementStyle : NSObject {
    NSString * _classDescriptorString;
    IKCSSRule * _cssRule;
    bool  _filterBlockedStyles;
    NSArray * _mediaQueryList;
    NSMutableDictionary * _styleDict;
}

@property (nonatomic, readonly) UIColor *backgroundColor;
@property (nonatomic, readonly) NSString *badgeTreatment;
@property (nonatomic, readonly) UIColor *borderColor;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } borderMargins;
@property (nonatomic, readonly) IKFourTuple *borderRadius;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } borderWidths;
@property (nonatomic, readonly) NSString *cardType;
@property (nonatomic, readonly) NSString *classDescriptorString;
@property (nonatomic, readonly) UIColor *color;
@property (nonatomic, readonly) long long columnCount;
@property (nonatomic, readonly) NSString *columnItemType;
@property (nonatomic, readonly) NSString *columnType;
@property (nonatomic, readonly, copy) IKCSSRule *cssRule;
@property (nonatomic, readonly) NSString *dividerType;
@property (nonatomic, readonly) unsigned long long elementAlignment;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } elementMargin;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } elementPadding;
@property (nonatomic, readonly) unsigned long long elementPosition;
@property (nonatomic, readonly) long long fillImage;
@property (nonatomic, readonly) double fontSize;
@property (nonatomic, readonly) NSString *fontWeight;
@property (nonatomic, readonly) bool hidden;
@property (nonatomic, readonly) IKColor *ikBackgroundColor;
@property (nonatomic, readonly) IKColor *ikBorderColor;
@property (nonatomic, readonly) IKColor *ikColor;
@property (nonatomic, readonly) IKColor *ikHighlightColor;
@property (nonatomic, readonly) IKColor *imageMaskColor;
@property (nonatomic, readonly) IKColor *imagePlaceholderBackgroundColor;
@property (nonatomic, readonly) NSURL *imagePlaceholderURL;
@property (nonatomic, readonly) unsigned long long imagePosition;
@property (nonatomic, readonly) NSString *imageTreatment;
@property (nonatomic, readonly) NSString *itemHeight;
@property (nonatomic, readonly) NSString *itemWidth;
@property (nonatomic, readonly) NSString *labelsState;
@property (nonatomic, readonly) NSNumber *letterSpacing;
@property (nonatomic, readonly) NSString *lockupType;
@property (nonatomic, readonly) NSString *maxHeight;
@property (nonatomic, readonly) long long maxTextLines;
@property (nonatomic, readonly) NSString *maxWidth;
@property (nonatomic, retain) NSArray *mediaQueryList;
@property (nonatomic, readonly) unsigned long long ordinalMaxLength;
@property (nonatomic, readonly) long long reflectImage;
@property (nonatomic, readonly) NSString *rowHeight;
@property (nonatomic, retain) NSMutableDictionary *styleDict;
@property (nonatomic, readonly) unsigned long long textAlignment;
@property (nonatomic, readonly) NSString *textScale;
@property (nonatomic, readonly) NSShadow *textShadow;
@property (nonatomic, readonly) NSString *textStyle;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transform;
@property (nonatomic, readonly) NSString *transition;
@property (nonatomic, readonly) NSNumber *transitionInterval;
@property (nonatomic, readonly) NSString *visibility;

// Image: /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit

+ (id)_clonedCSSDeclarationEdgeInsetsFromDeclaration:(id)arg1;
+ (id)_updatedEdgeInsetsDeclaration:(id)arg1 withValue:(double)arg2 forIndex:(unsigned long long)arg3;
+ (void)addBlockedStyle:(id)arg1;
+ (unsigned long long)alignmentFromString:(id)arg1;
+ (void)clearBlockedStyles;
+ (id)elementStyleWithParentStyle:(id)arg1 elementStyle:(id)arg2 elementStyleOverrides:(id)arg3;
+ (id)elementStyleWithSelector:(id)arg1 aggregatingStyles:(id)arg2;
+ (id)elementStyleWithSelector:(id)arg1 cssRule:(id)arg2 filterBlockedStyles:(bool)arg3;
+ (id)elementStyleWithSelector:(id)arg1 inlineStyleString:(id)arg2 filterBlockedStyles:(bool)arg3;
+ (id)elementStyleWithSelector:(id)arg1 inlineStyleString:(id)arg2 filterBlockedStyles:(bool)arg3 inlineStyleRangeCorrect:(bool)arg4;
+ (unsigned long long)imageTreatmentFromString:(id)arg1;
+ (void)initialize;
+ (bool)isHiddenStyleRegistered;
+ (id)normalizeClassSelectorString:(id)arg1;
+ (unsigned long long)positionFromString:(id)arg1;
+ (void)registerEdgeInsetStyle:(id)arg1 aliasName:(id)arg2 withPositionStyleNames:(id)arg3 inherited:(bool)arg4;
+ (void)registerHiddenStyle:(id)arg1;
+ (void)registerStyle:(id)arg1 aliasName:(id)arg2 withType:(unsigned long long)arg3 inherited:(bool)arg4;
+ (void)registerStyle:(id)arg1 withType:(unsigned long long)arg2 inherited:(bool)arg3;
+ (id)registeredAliases;
+ (id)registeredStyles;
+ (unsigned long long)transitionFromString:(id)arg1;
+ (void)unregisterStyles;

- (void).cxx_destruct;
- (void)_addDeclaration:(id)arg1;
- (void)_addElementStyle:(id)arg1;
- (void)_addParentStyle:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_edgeInsetsForStyleKey:(id)arg1;
- (id)_gradientFromString:(id)arg1;
- (id)_newColorFromString:(id)arg1;
- (id)_styleNameForAlias:(id)arg1;
- (id)backgroundColor;
- (id)badgeTreatment;
- (id)borderColor;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })borderMargins;
- (id)borderRadius;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })borderWidths;
- (id)cardType;
- (id)classDescriptorString;
- (id)color;
- (long long)columnCount;
- (id)columnItemType;
- (id)columnType;
- (id)cssRule;
- (id)debugDescription;
- (id)description;
- (id)dividerType;
- (unsigned long long)elementAlignment;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })elementMargin;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })elementPadding;
- (unsigned long long)elementPosition;
- (long long)fillImage;
- (double)fontSize;
- (id)fontWeight;
- (bool)hidden;
- (id)ikBackgroundColor;
- (id)ikBorderColor;
- (id)ikColor;
- (id)ikHighlightColor;
- (id)imageMaskColor;
- (id)imagePlaceholderBackgroundColor;
- (id)imagePlaceholderURL;
- (unsigned long long)imagePosition;
- (id)imageTreatment;
- (id)initWithCSSRule:(id)arg1 filterBlockedStyles:(bool)arg2 selStr:(id)arg3;
- (id)initWithClassSelector:(id)arg1;
- (id)initWithStyle:(id)arg1 classSelector:(id)arg2;
- (id)itemHeight;
- (id)itemWidth;
- (id)labelsState;
- (id)letterSpacing;
- (id)lockupType;
- (id)maxHeight;
- (long long)maxTextLines;
- (id)maxWidth;
- (id)mediaQueryList;
- (unsigned long long)ordinalMaxLength;
- (long long)reflectImage;
- (bool)requiresDynamicEvaluation;
- (id)rowHeight;
- (void)setMediaQueryList:(id)arg1;
- (void)setStyleDict:(id)arg1;
- (id)styleDict;
- (unsigned long long)textAlignment;
- (id)textScale;
- (id)textShadow;
- (id)textStyle;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transform;
- (id)transition;
- (id)transitionInterval;
- (unsigned long long)typeForStyle:(id)arg1;
- (id)valueForStyle:(id)arg1;
- (id)visibility;

// Image: /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit

- (bool)tv_acceptsFocus;
- (bool)tv_adjustsFontSizeToFitWidth;
- (long long)tv_alignment;
- (id)tv_associatedViewElementStyle;
- (id)tv_backgroundColor;
- (id)tv_borderColor;
- (bool)tv_borderContinuous;
- (id)tv_borderRadius;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })tv_borderWidths;
- (id)tv_color;
- (id)tv_columnColor;
- (unsigned long long)tv_columnCount;
- (double)tv_columnPadding;
- (long long)tv_contentAlignment;
- (id)tv_focusAlign;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })tv_focusMargin;
- (unsigned long long)tv_focusSizeIncrease;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })tv_focusTransform;
- (id)tv_fontFamily;
- (double)tv_fontSize;
- (unsigned int)tv_fontStretch;
- (id)tv_fontWeight;
- (id)tv_group;
- (bool)tv_hasFocusMargin;
- (double)tv_height;
- (id)tv_highlightColor;
- (id)tv_imageTreatment;
- (double)tv_imageUpscaleFactor;
- (double)tv_interitemSpacing;
- (double)tv_lineSpacing;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })tv_margin;
- (double)tv_maxHeight;
- (unsigned long long)tv_maxLines;
- (unsigned long long)tv_maxTextLines;
- (double)tv_maxWidth;
- (double)tv_minHeight;
- (double)tv_minWidth;
- (double)tv_minimumScaleFactor;
- (id)tv_overflow;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })tv_padding;
- (long long)tv_position;
- (id)tv_progressStyle;
- (id)tv_ratingStyle;
- (unsigned long long)tv_rowCount;
- (id)tv_searchStyle;
- (id)tv_shadow;
- (long long)tv_textAlignment;
- (id)tv_textHighlightStyle;
- (double)tv_textHyphenationFactor;
- (id)tv_textShadow;
- (id)tv_textStyle;
- (id)tv_textTransform;
- (id)tv_tintColor;
- (id)tv_tintColor2;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })tv_transform;
- (id)tv_transition;
- (double)tv_transitionInterval;
- (id)tv_visualEffect;
- (double)tv_width;

// Image: /System/Library/PrivateFrameworks/VideosExtras.framework/VideosExtras

+ (id)positionConstraintsForView:(id)arg1 insets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2 position:(unsigned long long)arg3;

@end
