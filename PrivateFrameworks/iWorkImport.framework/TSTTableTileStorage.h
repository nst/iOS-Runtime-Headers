/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSTTableTileStorage : TSPContainedObject {
    TSTTableTileGroup * _tileGroups;
    NSMutableIndexSet * _tileIDSet;
    bool  _upgradeRepairedTiles;
}

@property (nonatomic, readonly) unsigned int lastPopulatedRowIndex;
@property (nonatomic, readonly) bool needToUpgradeCellStorage;
@property (nonatomic, readonly) unsigned long long nextTileID;
@property (nonatomic, readonly) NSIndexSet *populatedRows;
@property (nonatomic, readonly) NSIndexSet *populatedTiles;
@property (nonatomic, readonly) bool upgradeRepairedTiles;

+ (id)_sharedQueue;
+ (unsigned int)tileSize;

- (void).cxx_destruct;
- (void)_clearContentAtIndex:(unsigned int)arg1 count:(unsigned int)arg2;
- (id)_createTileWithID:(unsigned long long)arg1;
- (void)_enumerateGroups:(id /* block */)arg1;
- (void)_enumerateTiles:(id /* block */)arg1;
- (id)_groupForTileID:(unsigned long long)arg1;
- (void)_insertRowsAtIndex:(unsigned int)arg1 count:(unsigned int)arg2;
- (void)_removeRowsAtIndex:(unsigned int)arg1 count:(unsigned int)arg2;
- (void)_removeTileForID:(unsigned long long)arg1;
- (void)_setTile:(id)arg1 forID:(unsigned long long)arg2;
- (void)_shiftRowsDownAtIndex:(unsigned int)arg1 count:(unsigned int)arg2;
- (void)_shiftRowsUpAtIndex:(unsigned int)arg1 count:(unsigned int)arg2;
- (void)_spliceRows:(id)arg1 atIndex:(unsigned int)arg2;
- (void)_swapRowsAtIndex:(unsigned int)arg1 andIndex:(unsigned int)arg2;
- (id)_tileForID:(unsigned long long)arg1 createIfMissing:(bool)arg2;
- (void)_upgradeFromTileIDMap:(struct vector<std::__1::pair<unsigned int, unsigned long>, std::__1::allocator<std::__1::pair<unsigned int, unsigned long> > > { struct pair<unsigned int, unsigned long> {} *x1; struct pair<unsigned int, unsigned long> {} *x2; struct __compressed_pair<std::__1::pair<unsigned int, unsigned long> *, std::__1::allocator<std::__1::pair<unsigned int, unsigned long> > > { struct pair<unsigned int, unsigned long> {} *x_3_1_1; } x3; }*)arg1 referenceMap:(struct unordered_map<unsigned long, TSPLazyReference *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, TSPLazyReference *> > > { struct __hash_table<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, TSPLazyReference *> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; } x1; }*)arg2;
- (id)_yankRowAtIndex:(unsigned int)arg1;
- (id)_yankRowRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)_yankRowsFromIndex:(unsigned int)arg1 toIndex:(unsigned int)arg2 count:(unsigned int)arg3;
- (bool)auditRowInfoCellCountsReturningResult:(id*)arg1;
- (bool)auditTilesForRowOverlapAndExtensionPastTableBounds:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1 withDataStore:(id)arg2 result:(id*)arg3;
- (id)columnCellCountsOfRowsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)enumerateRowByRowInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withBlock:(id /* block */)arg2;
- (void)enumerateRowsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withBlock:(id /* block */)arg2;
- (void)enumerateRowsWithBlock:(id /* block */)arg1;
- (void)enumerateTilesConcurrentlyUsingBlock:(id /* block */)arg1;
- (id)initWithOwner:(id)arg1;
- (id)initWithStorageArchive:(const struct TileStorage { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { int x_1_2_1; } x_4_1_1; } x4; struct RepeatedPtrField<TST::TileStorage_Tile> { struct Arena {} *x_5_1_1; int x_5_1_2; int x_5_1_3; struct Rep {} *x_5_1_4; } x5; unsigned int x6; }*)arg1 treeArchive:(const struct TableRBTree { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { int x_1_2_1; } x_4_1_1; } x4; struct RepeatedPtrField<TST::TableRBTree_Node> { struct Arena {} *x_5_1_1; int x_5_1_2; int x_5_1_3; struct Rep {} *x_5_1_4; } x5; }*)arg2 nextTileID:(unsigned long long)arg3 unarchiver:(id)arg4 owner:(id)arg5;
- (void)insertColumnsAtIndex:(unsigned short)arg1 count:(unsigned int)arg2;
- (void)insertRowsAtIndex:(unsigned int)arg1 count:(unsigned int)arg2;
- (unsigned int)lastPopulatedRowIndex;
- (struct multimap<TSUCellCoord, std::__1::tuple<unsigned int, unsigned long, TSTCellStorage *>, std::__1::less<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, std::__1::tuple<unsigned int, unsigned long, TSTCellStorage *> > > > { struct __tree<std::__1::__value_type<TSUCellCoord, std::__1::tuple<unsigned int, unsigned long, TSTCellStorage *> >, std::__1::__map_value_compare<TSUCellCoord, std::__1::__value_type<TSUCellCoord, std::__1::tuple<unsigned int, unsigned long, TSTCellStorage *> >, std::__1::less<TSUCellCoord>, true>, std::__1::allocator<std::__1::__value_type<TSUCellCoord, std::__1::tuple<unsigned int, unsigned long, TSTCellStorage *> > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSUCellCoord, std::__1::tuple<unsigned int, unsigned long, TSTCellStorage *> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<TSUCellCoord, std::__1::__value_type<TSUCellCoord, std::__1::tuple<unsigned int, unsigned long, TSTCellStorage *> >, std::__1::less<TSUCellCoord>, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })makeStorageMap;
- (void)moveColumnIndexRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 toIndex:(unsigned short)arg2;
- (void)moveRowIndexRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 toIndex:(unsigned int)arg2;
- (bool)needToUpgradeCellStorage;
- (unsigned long long)nextTileID;
- (id)populatedRows;
- (id)populatedTiles;
- (void)removeColumnsAtIndex:(unsigned short)arg1 count:(unsigned int)arg2;
- (void)removeRowsAtIndex:(unsigned int)arg1 count:(unsigned int)arg2;
- (void)reset;
- (id)rowInfoAtIndex:(unsigned int)arg1;
- (void)saveToStorageArchive:(struct TileStorage { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { int x_1_2_1; } x_4_1_1; } x4; struct RepeatedPtrField<TST::TileStorage_Tile> { struct Arena {} *x_5_1_1; int x_5_1_2; int x_5_1_3; struct Rep {} *x_5_1_4; } x5; unsigned int x6; }*)arg1 treeArchive:(struct TableRBTree { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { int x_1_2_1; } x_4_1_1; } x4; struct RepeatedPtrField<TST::TableRBTree_Node> { struct Arena {} *x_5_1_1; int x_5_1_2; int x_5_1_3; struct Rep {} *x_5_1_4; } x5; }*)arg2 archiver:(id)arg3;
- (void)swapRowAtIndex:(unsigned int)arg1 withRowAtIndex:(unsigned int)arg2;
- (id)tileForWritingAtRowIndex:(unsigned int)arg1 outTileRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (id)tileStartingAtOrAfterRowIndex:(unsigned int)arg1 outTileRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (id)tileStartingAtOrBeforeRowIndex:(unsigned int)arg1 outTileRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (bool)upgradeRepairedTiles;

@end
