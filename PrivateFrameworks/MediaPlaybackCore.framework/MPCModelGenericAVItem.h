/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore
 */

@interface MPCModelGenericAVItem : MPAVItem <AVAssetResourceLoaderDelegate, AVPlayerItemMetadataOutputPushDelegate, ICEnvironmentMonitorObserver, MPMusicSubscriptionLeasePlaybackParticipating, MPRTCReportingItemSessionCreating> {
    NSObject<OS_dispatch_queue> * _accessQueue;
    bool  _allowsAirPlayFromCloud;
    <MPCModelPlaybackAssetCacheProviding> * _assetCacheProvider;
    NSString * _assetSourceStoreFrontID;
    NSNumber * _bookmarkTime;
    NSArray * _currentGlobalTimedMetadataGroups;
    bool  _didDeferPreventionStatusUpdate;
    long long  _equivalencySourceAdamID;
    id /* block */  _firstBecomeActivePlayerItemBlock;
    MPModelGenericObject * _flattenedGenericObject;
    MPModelGenericObject * _flattenedMetadataGenericObject;
    MPModelGenericObject * _genericObject;
    bool  _hasLoadedSubscriptionLeaseSession;
    bool  _hasLoadedSubscriptionPlaybackInformation;
    <MPCReportingIdentityPropertiesLoading> * _identityPropertiesLoader;
    bool  _isAssetSubscriptionProtectionType;
    bool  _isAutomaticallyRefreshingSuzeLeaseSession;
    bool  _isHLSAsset;
    bool  _isMusicCellularStreamingAllowed;
    bool  _isSubscriptionPolicyContent;
    bool  _isiTunesStoreStream;
    MPPropertySet * _itemProperties;
    NSData * _jingleTimedMetadata;
    bool  _lastPreparedForNonZeroRate;
    long long  _leasePlaybackPreventionState;
    ICMusicSubscriptionLeaseStatus * _leaseStatus;
    NSNumber * _maximumSizeAllowedForCellularAccess;
    MPMediaLibrary * _mediaLibrary;
    MPModelGenericObject * _metadataGenericObject;
    MPCPlaybackRequestEnvironment * _playbackRequestEnvironment;
    bool  _radioPlayback;
    bool  _radioStreamPlayback;
    id  _rtcReportingParentHierarchyToken;
    NSString * _rtcReportingServiceIdentifier;
    bool  _shouldAutomaticallyRefreshSubscriptionLease;
    NSNumber * _siriInitiated;
    long long  _stationItemLikedState;
    ICStoreRequestContext * _storeRequestContext;
    NSURL * _streamingKeyCertificateURL;
    NSURL * _streamingKeyServerURL;
    long long  _subscriptionLeaseRequestCount;
    ICMusicSubscriptionLeaseSession * _subscriptionLeaseSession;
    NSObject<OS_dispatch_queue> * _subscriptionLeaseSessionLoadQueue;
    MPSubscriptionStatusPlaybackInformation * _subscriptionPlaybackInformation;
    NSObject<OS_dispatch_queue> * _subscriptionPlaybackInformationLoadQueue;
    MPCSuzeLeaseSession * _suzeLeaseSession;
    NSOperationQueue * _timedMetadataOperationQueue;
    MPCModelGenericAVItemTimedMetadataRequest * _timedMetadataRequest;
    MPCModelGenericAVItemTimedMetadataResponse * _timedMetadataResponse;
    NSDictionary * _trackInfo;
    bool  supportsRadioTrackActions;
}

@property (nonatomic, retain) <MPCModelPlaybackAssetCacheProviding> *assetCacheProvider;
@property (nonatomic, copy) NSString *assetSourceStoreFrontID;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) long long equivalencySourceAdamID;
@property (nonatomic, retain) MPModelGenericObject *genericObject;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly, copy) NSData *jingleTimedMetadata;
@property (nonatomic, readonly) long long leasePlaybackPreventionState;
@property (nonatomic, readonly, copy) ICMusicSubscriptionLeaseStatus *leaseStatus;
@property (nonatomic, retain) MPMediaLibrary *mediaLibrary;
@property (nonatomic, readonly, copy) MPCPlaybackRequestEnvironment *playbackRequestEnvironment;
@property (getter=isRadioPlayback, nonatomic) bool radioPlayback;
@property (getter=isRadioStreamPlayback, nonatomic) bool radioStreamPlayback;
@property (nonatomic, readonly) long long rtcReportingAssetType;
@property (nonatomic, readonly) id rtcReportingParentHierarchyToken;
@property (nonatomic, readonly, copy) NSString *rtcReportingServiceIdentifier;
@property (nonatomic, readonly) bool shouldReportPlayEventsToStore;
@property (getter=isSiriInitiated, nonatomic, copy) NSNumber *siriInitiated;
@property (nonatomic) long long stationItemLikedState;
@property (readonly) Class superclass;
@property (nonatomic) bool supportsRadioTrackActions;
@property (nonatomic, retain) NSDictionary *trackInfo;

+ (bool)_prefersHighQualityAudioContentForNetworkType:(long long)arg1;
+ (bool)_prefersHighQualityVideoContentForNetworkType:(long long)arg1;
+ (id)_utilitySerialQueue;

- (void).cxx_destruct;
- (bool)_allowsAssetCaching;
- (void)_allowsHighQualityMusicStreamingOnCellularDidChangeNotification:(id)arg1;
- (bool)_allowsStreamingPlayback;
- (void)_applyLoudnessInfo;
- (void)_applyPreferredPeakBitRateToPlayerItem:(id)arg1 withItemType:(long long)arg2;
- (id)_bookmarkTime;
- (void)_contentTasteControllerDidChangeNotification:(id)arg1;
- (void)_currentPlaybackRateDidChange:(float)arg1;
- (void)_getSubscriptionLeasePropertiesWithCompletion:(id /* block */)arg1;
- (void)_getUnverifiedSubscriptionLeaseSessionWithCompletion:(id /* block */)arg1;
- (void)_handlePlaybackFinishedTime:(double)arg1 didFinishByHittingEnd:(bool)arg2;
- (void)_handleUpdatedLikedState:(long long)arg1 completion:(id /* block */)arg2;
- (void)_invalidateContentItem;
- (id)_isPrivateListeningEnabled;
- (id)_modelPlaybackPosition;
- (long long)_persistedLikedState;
- (void)_postInvalidationNotifications;
- (id)_radioStation;
- (void)_reloadTimedMetadataRequest;
- (id)_rtcReportingServiceIdentifierWithAssetURL:(id)arg1;
- (bool)_shouldRememberBookmarkTime;
- (double)_startTime;
- (id)_stopTime;
- (id)_storeRequestContext;
- (id)_storeUbiquitousIdentifier;
- (void)_subscriptionLeaseStatusDidChangeNotification:(id)arg1;
- (void)_suzeLeaseSessionRenewDidFailNotification:(id)arg1;
- (void)_timedMetadataResponseDidInvalidateNotification:(id)arg1;
- (void)_updateAutomaticSubscriptionLeaseRefresh;
- (void)_updateBookmarkTime:(double)arg1 isCheckpoint:(bool)arg2;
- (void)_updateHasBeenPlayedWithElapsedTime:(double)arg1 completion:(id /* block */)arg2;
- (void)_updateJingleTimedMetadata;
- (void)_updatePreventionStatusWithLeaseSession:(id)arg1;
- (void)_willBecomeActivePlayerItem;
- (void)_willResignActivePlayerItem;
- (id)album;
- (id)albumArtist;
- (unsigned long long)albumArtistPersistentID;
- (unsigned long long)albumPersistentID;
- (long long)albumStoreID;
- (unsigned long long)albumTrackCount;
- (unsigned long long)albumTrackNumber;
- (bool)allowsAirPlayFromCloud;
- (bool)allowsEQ;
- (bool)allowsExternalPlayback;
- (void)applyVolumeNormalizationWithSoundCheckEnabled:(bool)arg1;
- (id)artist;
- (unsigned long long)artistPersistentID;
- (long long)artistStoreID;
- (id /* block */)artworkCatalogBlock;
- (id)artworkTimeMarkers;
- (id)assetCacheProvider;
- (id)assetSourceStoreFrontID;
- (id)bookmarkTime;
- (bool)canUseLoadedAsset;
- (id)chapterTimeMarkers;
- (id)cloudAlbumID;
- (unsigned long long)cloudID;
- (id)cloudUniversalLibraryID;
- (id)composer;
- (unsigned long long)composerPersistentID;
- (id)copyrightText;
- (void)dealloc;
- (id)description;
- (double)durationFromExternalMetadata;
- (void)environmentMonitorDidChangeNetworkType:(id)arg1;
- (long long)equivalencySourceAdamID;
- (id)externalContentIdentifier;
- (id)genericObject;
- (id)genre;
- (unsigned long long)genrePersistentID;
- (bool)hasStoreLyrics;
- (id)initWithGenericObject:(id)arg1 itemProperties:(id)arg2 playbackRequestEnvironment:(id)arg3;
- (bool)isAlwaysLive;
- (bool)isAssetURLValid;
- (bool)isExplicitTrack;
- (bool)isLikedStateEnabled;
- (bool)isRadioItem;
- (bool)isRadioPlayback;
- (bool)isRadioStreamPlayback;
- (id)isSiriInitiated;
- (bool)isStreamable;
- (bool)isValidPlayerSubstituteForItem:(id)arg1;
- (id)jingleTimedMetadata;
- (long long)leasePlaybackPreventionState;
- (id)leaseStatus;
- (id)libraryLyrics;
- (void)loadAssetAndPlayerItem;
- (id)mainTitle;
- (id)mediaItem;
- (id)mediaLibrary;
- (unsigned long long)mediaType;
- (void)metadataOutput:(id)arg1 didOutputTimedMetadataGroups:(id)arg2 fromPlayerItemTrack:(id)arg3;
- (id)modelGenericObject;
- (long long)mpcReporting_equivalencySourceAdamID;
- (id)mpcReporting_identityPropertiesLoader;
- (unsigned long long)mpcReporting_itemType;
- (id)mpcReporting_jingleTimedMetadata;
- (id)mpcReporting_privateListeningEnabled;
- (id)mpcReporting_requestingBundleIdentifier;
- (id)mpcReporting_requestingBundleVersion;
- (bool)mpcReporting_shouldReportPlayEventsToStore;
- (bool)mpcReporting_shouldUseRelativeTimePositions;
- (id)mpcReporting_siriInitiated;
- (id)mpcReporting_trackInfo;
- (void)notePlaybackFinishedByHittingEnd;
- (void)nowPlayingInfoCenter:(id)arg1 lyricsForContentItem:(id)arg2 completion:(id /* block */)arg3;
- (unsigned long long)persistentID;
- (id)playbackError;
- (id)playbackInfo;
- (id)playbackRequestEnvironment;
- (bool)prefersSeekOverSkip;
- (void)prepareForRate:(float)arg1 completionHandler:(id /* block */)arg2;
- (void)reevaluateType;
- (bool)requiresLoadedAssetForAirPlayProperties;
- (void)resolvePlaybackError:(id)arg1 withCompletion:(id /* block */)arg2;
- (bool)resourceLoader:(id)arg1 shouldWaitForLoadingOfRequestedResource:(id)arg2;
- (bool)resourceLoader:(id)arg1 shouldWaitForRenewalOfRequestedResource:(id)arg2;
- (long long)rtcReportingAssetType;
- (id)rtcReportingParentHierarchyToken;
- (id)rtcReportingServiceIdentifier;
- (void)setAssetCacheProvider:(id)arg1;
- (void)setAssetSourceStoreFrontID:(id)arg1;
- (void)setEquivalencySourceAdamID:(long long)arg1;
- (void)setGenericObject:(id)arg1;
- (void)setLoudnessInfoVolumeNormalization:(float)arg1;
- (void)setMediaLibrary:(id)arg1;
- (void)setPlaybackCheckpointCurrentTime:(double)arg1;
- (void)setPlaybackFinishedTime:(double)arg1;
- (void)setPlaybackStoppedTime:(double)arg1;
- (void)setRadioPlayback:(bool)arg1;
- (void)setRadioStreamPlayback:(bool)arg1;
- (void)setRating:(float)arg1;
- (void)setSiriInitiated:(id)arg1;
- (void)setStationItemLikedState:(long long)arg1;
- (void)setSupportsRadioTrackActions:(bool)arg1;
- (void)setTrackInfo:(id)arg1;
- (bool)shouldPreventPlayback;
- (bool)shouldReportPlayEventsToStore;
- (bool)shouldShowComposer;
- (id)stationHash;
- (long long)stationID;
- (long long)stationItemLikedState;
- (id)stationName;
- (id)stationStringID;
- (id)storeFrontIdentifier;
- (long long)storeItemInt64ID;
- (long long)storeSubscriptionAdamID;
- (bool)supportsLikedState;
- (bool)supportsRadioTrackActions;
- (id)trackInfo;
- (long long)type;
- (id)urlTimeMarkers;
- (bool)useEmbeddedChapterData;
- (float)userRating;

@end
