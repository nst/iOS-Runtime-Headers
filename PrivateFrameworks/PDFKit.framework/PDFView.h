/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PDFKit.framework/PDFKit
 */

@interface PDFView : UIView <UIGestureRecognizerDelegate> {
    PDFViewPrivate * _private;
}

@property (nonatomic) bool allowsDragging;
@property (nonatomic) bool autoScales;
@property (nonatomic, retain) UIColor *backgroundColor;
@property (nonatomic, readonly) PDFDestination *currentDestination;
@property (nonatomic, readonly) PDFPage *currentPage;
@property (nonatomic, retain) PDFSelection *currentSelection;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PDFViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) long long displayBox;
@property (nonatomic) long long displayMode;
@property (nonatomic) bool displaysAsBook;
@property (nonatomic) bool displaysPageBreaks;
@property (nonatomic, retain) PDFDocument *document;
@property (nonatomic, readonly) UIView *documentView;
@property (nonatomic) bool enableDataDetectors;
@property (nonatomic) double greekingThreshold;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSArray *highlightedSelections;
@property (nonatomic) long long interpolationQuality;
@property (nonatomic) double scaleFactor;
@property (nonatomic) bool shouldAntiAlias;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)PDFLayout;
- (double)PDFViewWillChangeScaleFactor:(id)arg1 toScale:(double)arg2;
- (void)PDFViewWillClickOnLink:(id)arg1 withURL:(id)arg2;
- (void)_commonInit;
- (void)_doNotQueryScaleFactor;
- (void)_releaseDocument;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_transformFromPageToPageView:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_transformFromPageViewToPage:(id)arg1;
- (bool)allowsDragging;
- (void)animateTransitionFromPage:(id)arg1 toPage:(id)arg2;
- (void)annotationsChangedOnPage:(id)arg1;
- (void)appendPasswordUI;
- (long long)areaOfInterestForMouse:(id)arg1;
- (long long)areaOfInterestForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)autoScaleFactor;
- (double)autoScaleFactorForPage:(id)arg1;
- (bool)autoScales;
- (bool)automaticallyHandleGutter;
- (id)backgroundColor;
- (void)buildDebugDotFile;
- (bool)canBecomeFirstResponder;
- (bool)canGoBack;
- (bool)canGoForward;
- (bool)canGoToFirstPage;
- (bool)canGoToLastPage;
- (bool)canGoToNextPage;
- (bool)canGoToPreviousPage;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (bool)canZoomIn;
- (bool)canZoomOut;
- (void)clearSelection;
- (void)constrainedScrollToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromPage:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toPage:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromPage:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toPage:(id)arg2;
- (void)copy:(id)arg1;
- (id)currentDestination;
- (long long)currentHistoryIndex;
- (id)currentPage;
- (id)currentSelection;
- (void)dealloc;
- (double)defaultGutterWidth;
- (id)delegate;
- (id)determineCurrentPage;
- (bool)disableInterpageSpacing;
- (long long)displayBox;
- (long long)displayMode;
- (bool)displaysAsBook;
- (bool)displaysMarkupAnnotations;
- (bool)displaysPageBreaks;
- (bool)displaysRTL;
- (bool)displaysSoloPagesCentered;
- (bool)doPeriodicFlush;
- (id)document;
- (id)documentScrollView;
- (id)documentView;
- (void)documentWasUnlocked;
- (void)drawPage:(id)arg1;
- (void)drawPage:(id)arg1 toContext:(struct CGContext { }*)arg2;
- (void)drawPagePost:(id)arg1;
- (void)drawPagePost:(id)arg1 toContext:(struct CGContext { }*)arg2;
- (bool)enableDataDetectors;
- (void)encodeWithCoder:(id)arg1;
- (void)endEditingAnnotation;
- (void)findVisiblePages;
- (void)forceWebKitMainThread:(bool)arg1;
- (void)gestureInit;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)goBack:(id)arg1;
- (void)goForward:(id)arg1;
- (void)goToDestination:(id)arg1;
- (void)goToDestinationNoPush:(id)arg1;
- (void)goToFirstPage:(id)arg1;
- (void)goToLastPage:(id)arg1;
- (void)goToNextPage:(id)arg1;
- (void)goToPage:(id)arg1;
- (void)goToPageNoPush:(id)arg1;
- (void)goToPreviousPage:(id)arg1;
- (void)goToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 onPage:(id)arg2;
- (void)goToSelection:(id)arg1;
- (double)greekingThreshold;
- (double)gutterWidth;
- (void)handleLongPress:(id)arg1;
- (id)highlightedSelections;
- (id)history;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)installTileStats:(bool)arg1;
- (void)internalSetScaleFactor:(double)arg1;
- (long long)interpolationQuality;
- (bool)isForcingWebKitMainThread;
- (bool)isOverLinkAnnotation:(struct CGPoint { double x1; double x2; })arg1;
- (bool)isRectVisible:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 onPage:(id)arg2;
- (unsigned long long)lastPageIndex;
- (void)layoutDocumentView;
- (double)lineWidthThreshold;
- (id)longPressGestureRecognizer;
- (double)maxScaleFactor;
- (double)minScaleFactor;
- (id)nextPage;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })normalizedPageBounds:(id)arg1;
- (id)pageColor;
- (id)pageForPoint:(struct CGPoint { double x1; double x2; })arg1 nearest:(bool)arg2;
- (id)pageViewForPageAtIndex:(unsigned long long)arg1;
- (double)pageViewHeight:(id)arg1;
- (struct CGSize { double x1; double x2; })pageViewSizeForPage:(id)arg1;
- (id)panGestureRecognizer;
- (struct _PDFMargins { double x1; double x2; double x3; double x4; })pdfMargins;
- (void)performAction:(id)arg1;
- (void)performBeep;
- (id)popupManager;
- (void)positionInternalViews:(id)arg1;
- (id)previousPage;
- (void)pushDestination:(id)arg1;
- (void)reflectNewPageOn;
- (void)removeFromSuperview;
- (void)resizeDisplayView:(id)arg1;
- (struct CGSize { double x1; double x2; })rowSizeForPage:(id)arg1;
- (double)scaleFactor;
- (void)scrollByPage:(bool)arg1;
- (void)scrollHorizontalBy:(double)arg1;
- (struct CGPoint { double x1; double x2; })scrollOriginForPageTopLeft:(id)arg1;
- (void)scrollSelectionToVisible:(id)arg1;
- (void)scrollVerticalBy:(double)arg1;
- (void)scrollViewSaysPageMayHaveChanged:(id)arg1;
- (bool)scrollingChangesPages;
- (void)selectAll:(id)arg1;
- (void)selfDidResize:(id)arg1;
- (void)setAllowsDragging:(bool)arg1;
- (void)setAutoScales:(bool)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCurrentSelection:(id)arg1;
- (void)setCurrentSelection:(id)arg1 animate:(bool)arg2;
- (void)setCursorForAreaOfInterest:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisableInterpageSpacing:(bool)arg1;
- (void)setDisplayBox:(long long)arg1;
- (void)setDisplayMode:(long long)arg1;
- (void)setDisplaysAsBook:(bool)arg1;
- (void)setDisplaysPageBreaks:(bool)arg1;
- (void)setDisplaysSoloPagesCentered:(bool)arg1;
- (void)setDoPeriodicFlush:(bool)arg1;
- (void)setDocument:(id)arg1;
- (void)setDocument:(id)arg1 waitDuration:(double)arg2;
- (void)setEnableDataDetectors:(bool)arg1;
- (void)setEnablePageShadows:(bool)arg1;
- (void)setForcesTopAlignment:(bool)arg1;
- (void)setGreekingThreshold:(double)arg1;
- (void)setGutterWidth:(double)arg1;
- (void)setHighlightedSelections:(id)arg1;
- (void)setInterpolationQuality:(long long)arg1;
- (void)setLineWidthThreshold:(double)arg1;
- (void)setMaxScaleFactor:(double)arg1;
- (void)setMinScaleFactor:(double)arg1;
- (void)setPageColor:(id)arg1;
- (void)setPopupManager:(id)arg1;
- (void)setScaleFactor:(double)arg1;
- (void)setScaleFactor:(double)arg1 anchorPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)setScrollingChangesPages:(bool)arg1;
- (void)setShouldAntiAlias:(bool)arg1;
- (void)setUsesPageLabels:(bool)arg1;
- (bool)shouldAntiAlias;
- (id)swipeGestureRecognizer;
- (void)syncPageIndexToScrollView;
- (void)takeBackgroundColorFrom:(id)arg1;
- (void)takePasswordFrom:(id)arg1;
- (id)tapGestureRecognizer;
- (void)tapPress:(id)arg1;
- (void)touchPan:(id)arg1;
- (void)touchSwipe:(id)arg1;
- (void)updateCurrentPageUsingViewCenter;
- (void)updateTileStats;
- (bool)usesPageLabels;
- (id)viewForPage:(id)arg1;
- (id)visiblePages;
- (void)zoomIn:(id)arg1;
- (void)zoomOut:(id)arg1;

@end
