/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/BiometricKitUI.framework/BiometricKitUI
 */

@interface BKUIRotationArrowAnimationLayer : CALayer {
    double  _arrowAngle;
    CALayer * _arrowContainer;
    CAShapeLayer * _arrowLayerLeft;
    CAShapeLayer * _arrowLayerRight;
    double  _arrowlength;
    CAShapeLayer * _circleLayer;
    UIColor * _color;
    struct CGSize { 
        double width; 
        double height; 
    }  _containerSize;
    id /* block */  _getOrientation;
    struct CGPoint { 
        double x; 
        double y; 
    }  _hostCenter;
    long long  _orientation;
    double  _radius;
    CAShapeLayer * _rotationLayer;
}

@property (nonatomic) double arrowAngle;
@property (nonatomic, retain) CALayer *arrowContainer;
@property (nonatomic, retain) CAShapeLayer *arrowLayerLeft;
@property (nonatomic, retain) CAShapeLayer *arrowLayerRight;
@property (nonatomic) double arrowlength;
@property (nonatomic, retain) CAShapeLayer *circleLayer;
@property (nonatomic, retain) UIColor *color;
@property (nonatomic) struct CGSize { double x1; double x2; } containerSize;
@property (nonatomic, copy) id /* block */ getOrientation;
@property (nonatomic) struct CGPoint { double x1; double x2; } hostCenter;
@property (nonatomic) long long orientation;
@property (nonatomic) double radius;
@property (nonatomic, retain) CAShapeLayer *rotationLayer;

+ (id)animatorByEmbedding:(id)arg1 color:(id)arg2 radiusForOrientation:(id /* block */)arg3;
+ (id)animatorWith:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 color:(id)arg2 radiusForOrientation:(id /* block */)arg3;

- (void).cxx_destruct;
- (void)_animateArrowClockwise:(double)arg1 duration:(double)arg2 animationDelay:(double)arg3;
- (void)_animateArrowCounterClockwise:(double)arg1 duration:(double)arg2 animationDelay:(double)arg3;
- (void)_animateArrowPaths:(double)arg1 delay:(double)arg2 duration:(double)arg3;
- (void)_animateArrowUpsideDown:(double)arg1 duration:(double)arg2 animationDelay:(double)arg3;
- (id)_extendedInit:(struct CGPoint { double x1; double x2; })arg1;
- (void)_landscapeAnimationImpl:(double)arg1 duration:(double)arg2 animationDelay:(double)arg3;
- (void)_layoutArrowContainer:(long long)arg1;
- (void)_layoutArrowSubLayers;
- (void)_recreateArrow;
- (void)_resetHideCircleLayerStrokeTo:(double)arg1;
- (void)_rotateRotationLayerBy:(double)arg1 startTime:(double)arg2 fromDegree:(unsigned long long)arg3 toDegree:(unsigned long long)arg4;
- (void)_updateCircleLayerLayout:(long long)arg1;
- (void)_zeroOutArrowStroke;
- (void)animateDirectionPath:(double)arg1 orientation:(long long)arg2 duration:(double)arg3 animationDelay:(double)arg4;
- (double)arrowAngle;
- (id)arrowContainer;
- (id)arrowLayerLeft;
- (id)arrowLayerRight;
- (double)arrowlength;
- (id)circleLayer;
- (id)color;
- (struct CGSize { double x1; double x2; })containerSize;
- (void)enableDebug:(bool)arg1;
- (id /* block */)getOrientation;
- (struct CGPoint { double x1; double x2; })hostCenter;
- (id)init;
- (id)initWith:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 radiusForOrientation:(id /* block */)arg2 arrowAngle:(double)arg3 arrowLength:(double)arg4 color:(id)arg5;
- (void)layoutSublayers;
- (long long)orientation;
- (double)radius;
- (void)resetLayout;
- (id)rotationLayer;
- (void)setArrowAngle:(double)arg1;
- (void)setArrowContainer:(id)arg1;
- (void)setArrowLayerLeft:(id)arg1;
- (void)setArrowLayerRight:(id)arg1;
- (void)setArrowlength:(double)arg1;
- (void)setCircleLayer:(id)arg1;
- (void)setColor:(id)arg1;
- (void)setContainerSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setGetOrientation:(id /* block */)arg1;
- (void)setHostCenter:(struct CGPoint { double x1; double x2; })arg1;
- (void)setOrientation:(long long)arg1;
- (void)setRadius:(double)arg1;
- (void)setRotationLayer:(id)arg1;
- (void)stopAnimationRemoveStroke;

@end
