/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension
 */

@interface NEConfiguration : NSObject <NEConfigurationValidating, NEProfilePayloadHandlerDelegate, NSCopying, NSSecureCoding> {
    NEVPN * _VPN;
    NEAOVPN * _alwaysOnVPN;
    NEVPNApp * _appVPN;
    NSString * _application;
    NSString * _applicationIdentifier;
    NSString * _applicationName;
    NEContentFilter * _contentFilter;
    NSString * _externalIdentifier;
    long long  _grade;
    NSUUID * _identifier;
    NSString * _name;
    NEPathController * _pathController;
    NEProfileIngestionPayloadInfo * _payloadInfo;
}

@property (copy) NEVPN *VPN;
@property (copy) NEAOVPN *alwaysOnVPN;
@property (copy) NEVPNApp *appVPN;
@property (copy) NSString *application;
@property (copy) NSString *applicationIdentifier;
@property (copy) NSString *applicationName;
@property (copy) NEContentFilter *contentFilter;
@property (copy) NSString *externalIdentifier;
@property (readonly) long long grade;
@property (readonly) NSUUID *identifier;
@property (copy) NSString *name;
@property (copy) NEPathController *pathController;
@property (copy) NEProfileIngestionPayloadInfo *payloadInfo;
@property (readonly) NSString *pluginType;

+ (bool)SCServiceWithIdentifier:(id)arg1 existsInPreferences:(struct __SCPreferences { }*)arg2;
+ (void)addError:(id)arg1 toList:(id)arg2;
+ (id)configurationWithProfilePayload:(id)arg1;
+ (id)configurationWithProfilePayload:(id)arg1 grade:(long long)arg2;
+ (struct __CFDictionary { }*)copyConfigurationForProtocol:(struct __CFString { }*)arg1 inService:(struct __SCNetworkService { }*)arg2;
+ (bool)removeSCServiceWithIdentifier:(id)arg1 fromPreferences:(struct __SCPreferences { }*)arg2;
+ (bool)setConfiguration:(struct __CFDictionary { }*)arg1 forProtocol:(struct __CFString { }*)arg2 inService:(struct __SCNetworkService { }*)arg3;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)VPN;
- (id)alwaysOnVPN;
- (id)appVPN;
- (id)application;
- (id)applicationIdentifier;
- (id)applicationName;
- (bool)applyChangesToSCServiceInPreferences:(struct __SCPreferences { }*)arg1;
- (bool)checkValidityAndCollectErrors:(id)arg1;
- (void)clearKeychainInDomain:(long long)arg1;
- (void)clearSystemKeychain;
- (void)clearUserKeychain;
- (id)configureAOVPNTunnelFromTunnelDict:(id)arg1 tunnelDict:(id)arg2 payloadBase:(id)arg3 interfaceType:(id)arg4;
- (bool)configureIKE:(id)arg1 vpnType:(id)arg2 payloadBase:(id)arg3 vpn:(id)arg4;
- (bool)configureL2TPWithPPPOptions:(id)arg1;
- (bool)configurePPPCommon:(id)arg1;
- (bool)configurePPPWithVPNOptions:(id)arg1 payloadBase:(id)arg2;
- (bool)configurePluginWithPayload:(id)arg1 pluginType:(id)arg2 payloadType:(id)arg3;
- (bool)configureVpnOnDemand:(id)arg1 vpnType:(id)arg2;
- (bool)configureVpnOnDemandRules:(id)arg1;
- (id)contentFilter;
- (void)copyPasswordsFromSystemKeychain;
- (id)copyProfileDictionary;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)descriptionWithOptions:(unsigned long long)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)externalIdentifier;
- (id)generateSignature;
- (id)getCertificates;
- (id)getConfigurationIdentifier;
- (id)getConfigurationProtocol;
- (id)getPendingCertificateInfo:(id)arg1;
- (id)getPendingCertificateUUIDs:(id)arg1;
- (id)getPendingCertificateUUIDsAOVpn:(id)arg1;
- (id)getPendingCertificateUUIDsAppVPN:(id)arg1;
- (id)getPendingCertificateUUIDsContentFilter:(id)arg1;
- (id)getPendingCertificateUUIDsInternal:(id)arg1;
- (id)getPendingCertificateUUIDsVPN:(id)arg1;
- (long long)grade;
- (unsigned long long)hash;
- (id)identifier;
- (bool)ingestDNSOptions:(id)arg1;
- (bool)ingestDisconnectOptions:(id)arg1;
- (bool)ingestIPSecDict:(id)arg1 vpnType:(id)arg2 vpn:(id)arg3;
- (bool)ingestPPPData:(id)arg1 vnpType:(id)arg2;
- (bool)ingestPPPDict:(id)arg1;
- (bool)ingestProxyOptions:(id)arg1;
- (id)initFromSCService:(struct __SCNetworkService { }*)arg1;
- (id)initWithAlwaysOnVPNPayload:(id)arg1 configurationName:(id)arg2 grade:(long long)arg3;
- (id)initWithAppLayerVPNPayload:(id)arg1 configurationName:(id)arg2 grade:(long long)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithConfiguration:(id)arg1;
- (id)initWithContentFilterPayload:(id)arg1 configurationName:(id)arg2 grade:(long long)arg3;
- (id)initWithIdentifier:(id)arg1;
- (id)initWithName:(id)arg1 grade:(long long)arg2;
- (id)initWithPathControllerPayload:(id)arg1 configurationName:(id)arg2 grade:(long long)arg3;
- (id)initWithVPNPayload:(id)arg1 configurationName:(id)arg2 grade:(long long)arg3;
- (bool)isEqual:(id)arg1;
- (bool)isSupportedBySC;
- (id)name;
- (bool)needToUpdateKeychain;
- (id)pathController;
- (id)payloadInfo;
- (id)pluginType;
- (void)setAlwaysOnVPN:(id)arg1;
- (bool)setAppLayerVPNRuleSettings:(id)arg1 withAppIdentifier:(id)arg2;
- (bool)setAppLayerVPNUUID:(id)arg1 andSafariDomains:(id)arg2;
- (void)setAppVPN:(id)arg1;
- (void)setApplication:(id)arg1;
- (void)setApplicationIdentifier:(id)arg1;
- (void)setApplicationName:(id)arg1;
- (bool)setCertificateContentFilter:(id)arg1;
- (bool)setCertificates:(id)arg1;
- (bool)setCertificatesAOVpn:(id)arg1;
- (bool)setCertificatesAppVPN:(id)arg1;
- (bool)setCertificatesVPN:(id)arg1;
- (bool)setConfigurationSharedSecret:(id)arg1;
- (bool)setConfigurationVPNPassword:(id)arg1;
- (void)setContentFilter:(id)arg1;
- (void)setExternalIdentifier:(id)arg1;
- (void)setName:(id)arg1;
- (void)setPathController:(id)arg1;
- (void)setPayloadInfo:(id)arg1;
- (bool)setPayloadInfoCommon:(id)arg1 payloadOrganization:(id)arg2;
- (bool)setPayloadInfoIdentity:(id)arg1;
- (bool)setPayloadInfoIdentityIPSecSharedSecret:(id)arg1;
- (bool)setPayloadInfoIdentityPIN:(id)arg1;
- (bool)setPayloadInfoIdentityProxy:(id)arg1;
- (bool)setPayloadInfoIdentityUserNameAndPassword:(id)arg1;
- (bool)setProfileInfo:(id)arg1;
- (void)setVPN:(id)arg1;
- (void)syncWithKeychainInDomain:(long long)arg1;
- (void)syncWithSystemKeychain;
- (void)syncWithUserKeychain;
- (bool)updateFromSCService:(struct __SCNetworkService { }*)arg1;
- (void)updateWithConfiguration:(id)arg1;

@end
