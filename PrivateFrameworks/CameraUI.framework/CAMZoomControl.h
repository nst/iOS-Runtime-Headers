/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI
 */

@interface CAMZoomControl : UIControl <CAMZoomButtonDelegate> {
    CAMZoomControlButtonMaskView * __buttonMaskView;
    UIView * __dialClippingView;
    bool  __eligibleForTapInEmptySpace;
    struct CGPoint { 
        double x; 
        double y; 
    }  __previousTouchLocation;
    double  __previousTouchTime;
    bool  __shouldShowZoomDial;
    NSDate * __startTimeForHideAnimationInProgress;
    struct CGPoint { 
        double x; 
        double y; 
    }  __startTouchLocation;
    CAMZoomButton * __zoomButton;
    CAMZoomDial * __zoomDial;
    NSTimer * __zoomDialVisibilityTimer;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _contentInsets;
    <CAMZoomControlDelegate> * _delegate;
    long long  _layoutStyle;
    long long  _orientation;
    bool  _zoomDialEnabled;
}

@property (nonatomic, readonly) CAMZoomControlButtonMaskView *_buttonMaskView;
@property (nonatomic, readonly) UIView *_dialClippingView;
@property (getter=_isEligibleForTapInEmptySpace, setter=_setEligibleForTapInEmptySpace:, nonatomic) bool _eligibleForTapInEmptySpace;
@property (setter=_setPreviousTouchLocation:, nonatomic) struct CGPoint { double x1; double x2; } _previousTouchLocation;
@property (setter=_setPreviousTouchTime:, nonatomic) double _previousTouchTime;
@property (setter=_setShouldShowZoomDial:, nonatomic) bool _shouldShowZoomDial;
@property (setter=_setStartTimeForHideAnimationInProgress:, nonatomic, retain) NSDate *_startTimeForHideAnimationInProgress;
@property (setter=_setStartTouchLocation:, nonatomic) struct CGPoint { double x1; double x2; } _startTouchLocation;
@property (nonatomic, readonly) CAMZoomButton *_zoomButton;
@property (nonatomic, readonly) CAMZoomDial *_zoomDial;
@property (setter=_setZoomDialVisibilityTimer:, nonatomic, retain) NSTimer *_zoomDialVisibilityTimer;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentInsets;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CAMZoomControlDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long layoutStyle;
@property (nonatomic) double maximumZoomFactor;
@property (nonatomic) double minimumZoomFactor;
@property (nonatomic) long long orientation;
@property (nonatomic) bool shouldDisableValuesBelow2x;
@property (nonatomic) bool shouldShowLabelAt2x;
@property (readonly) Class superclass;
@property (getter=isZoomDialEnabled, nonatomic) bool zoomDialEnabled;
@property (nonatomic) double zoomFactor;

- (void).cxx_destruct;
- (double)_accelerationForMovementFromPointFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2 elapsedTime:(double)arg3;
- (double)_additionalAccelerationForMovementFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2 deltaX:(double)arg3;
- (id)_buttonMaskView;
- (void)_cancelDelayedZoomDialVisibilityChange;
- (double)_dampingFactorForDistanceFromDialForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)_dampingFactorForMovementFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2;
- (double)_dampingFactorForPerpendicularityFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2;
- (id)_dialClippingView;
- (double)_distanceFromDialClippingViewToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_handleZoomDialVisibilityTimerFiredWithUserInfo:(id)arg1;
- (bool)_isEligibleForTapInEmptySpace;
- (bool)_isWithinZoomButtonBoundsWithTouch:(id)arg1;
- (double)_normalizeValue:(double)arg1 betweenMinimumValue:(double)arg2 maximumValue:(double)arg3;
- (struct CGPoint { double x1; double x2; })_previousTouchLocation;
- (double)_previousTouchTime;
- (void)_setEligibleForTapInEmptySpace:(bool)arg1;
- (void)_setPreviousTouchLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setPreviousTouchTime:(double)arg1;
- (void)_setShouldShowZoomDial:(bool)arg1;
- (void)_setShouldShowZoomDial:(bool)arg1 animationSpeed:(double)arg2;
- (void)_setShouldShowZoomDial:(bool)arg1 animationSpeed:(double)arg2 afterDelay:(double)arg3;
- (void)_setStartTimeForHideAnimationInProgress:(id)arg1;
- (void)_setStartTouchLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setZoomDialVisibilityTimer:(id)arg1;
- (void)_setZoomFactor:(double)arg1 shouldNotifyDelegate:(bool)arg2;
- (bool)_shouldInterceptTouchesForHidingZoomDial;
- (bool)_shouldShowZoomDial;
- (id)_startTimeForHideAnimationInProgress;
- (struct CGPoint { double x1; double x2; })_startTouchLocation;
- (void)_updateMaskViewForZoomButtonHighlightingTransform;
- (id)_zoomButton;
- (id)_zoomDial;
- (id)_zoomDialVisibilityTimer;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (void)cancelTrackingWithEvent:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentInsets;
- (bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (id)delegate;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)initWithLayoutStyle:(long long)arg1;
- (bool)isZoomDialEnabled;
- (long long)layoutStyle;
- (void)layoutSubviews;
- (double)maximumZoomFactor;
- (double)minimumZoomFactor;
- (long long)orientation;
- (void)setContentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setLayoutStyle:(long long)arg1;
- (void)setMaximumZoomFactor:(double)arg1;
- (void)setMinimumZoomFactor:(double)arg1;
- (void)setOrientation:(long long)arg1;
- (void)setOrientation:(long long)arg1 animated:(bool)arg2;
- (void)setShouldDisableValuesBelow2x:(bool)arg1;
- (void)setShouldShowLabelAt2x:(bool)arg1;
- (void)setShouldShowZoomDial:(bool)arg1 animationSpeed:(double)arg2 afterDelay:(double)arg3;
- (void)setZoomDialEnabled:(bool)arg1;
- (void)setZoomDialEnabled:(bool)arg1 animated:(bool)arg2;
- (void)setZoomFactor:(double)arg1;
- (bool)shouldDisableValuesBelow2x;
- (bool)shouldShowLabelAt2x;
- (void)zoomButtonDidLayout;
- (double)zoomFactor;

@end
