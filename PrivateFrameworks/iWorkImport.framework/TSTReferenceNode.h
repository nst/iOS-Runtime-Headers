/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSTReferenceNode : TSTExpressionNode <TSKChangeSourceObserver> {
    bool  mBlankForKeyboardInsertion;
    NSString * mFormulaPlainText;
    struct __CFUUID { } * mHostTableID;
    unsigned char  mRangeContext;
    bool  mRangeWithFunction;
    NSString * mRefString;
    TSTReferenceColorHelper * mReferenceColorHelper;
    bool  mSuppressAutomaticNamedReferenceInvalidation;
    TSTUidRangeRef * mUidRangeRef;
}

@property (getter=isBlankForKeyboardInsertion, nonatomic) bool blankForKeyboardInsertion;
@property (nonatomic, readonly) TSCECalculationEngine *calculationEngine;
@property (nonatomic, readonly) TSKChangeNotifier *changeNotifier;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) TSKDocumentRoot *documentRoot;
@property (readonly) unsigned long long hash;
@property (setter=setHostTableID:, nonatomic) struct __CFUUID { }*hostTableID;
@property (getter=isLocalReference, nonatomic, readonly) bool localReference;
@property (getter=isNonSpanningRange, nonatomic, readonly) bool nonSpanningRange;
@property (getter=isRange, nonatomic, readonly) bool range;
@property (nonatomic) unsigned char rangeContext;
@property (nonatomic) struct TSCERangeCoordinate { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct TSUCellCoord { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; } rangeCoordinate;
@property (nonatomic) struct { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct TSUCellCoord { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; } rangeReference;
@property (getter=isRangeWithFunction, nonatomic) bool rangeWithFunction;
@property (nonatomic, retain) TSTReferenceColorHelper *referenceColorHelper;
@property (getter=isResizable, nonatomic, readonly) bool resizable;
@property (getter=isSimpleRowOrColumnReference, nonatomic, readonly) bool simpleRowOrColumnReference;
@property (getter=isSingleASTNode, nonatomic, readonly) bool singleASTNode;
@property (nonatomic) unsigned char stickyBits;
@property (readonly) Class superclass;
@property (nonatomic, readonly) struct __CFUUID { }*tableID;

- (void)asyncProcessChanges:(id)arg1 forChangeSource:(id)arg2;
- (void)buildASTNodeArray:(/* Warning: unhandled struct encoding: '{TSCEASTNodeArray=*QQ@}' */ struct TSCEASTNodeArray { char *x1; unsigned long long x2; unsigned long long x3; id x4; }*)arg1 hostCell:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg2 symbolTable:(struct TSCESymbolTable { id x1; struct unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > { struct __hash_table<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true>, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true>, std::__1::allocator<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; }*)arg3;
- (id)calculationEngine;
- (id)changeNotifier;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)documentRoot;
- (id)exportString;
- (id)formulaPlainText;
- (unsigned long long)hash;
- (struct __CFUUID { }*)hostTableID;
- (id)initAsCopyOf:(id)arg1 intoContext:(id)arg2 children:(id)arg3;
- (id)initFromArchive:(const struct ReferenceNodeArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; unsigned int x3[1]; int x4; struct ExpressionNodeArchive {} *x5; struct RangeReferenceArchive {} *x6; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x7; struct UUID {} *x8; struct CellUIDArchive {} *x9; struct CellUIDArchive {} *x10; unsigned int x11; }*)arg1 unarchiver:(id)arg2;
- (id)initFromUnarchiver:(id)arg1;
- (id)initWithContext:(id)arg1 calculationEngine:(id)arg2 cellRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct TSUCellCoord { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg3 stickyBits:(unsigned char)arg4 hostTableID:(struct __CFUUID { }*)arg5 tableID:(struct __CFUUID { }*)arg6 referenceColorHelper:(id)arg7 firstIndex:(unsigned long long)arg8 lastIndex:(unsigned long long)arg9;
- (id)initWithContext:(id)arg1 calculationEngine:(id)arg2 cellRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct TSUCellCoord { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg3 stickyBits:(unsigned char)arg4 hostTableID:(struct __CFUUID { }*)arg5 tableID:(struct __CFUUID { }*)arg6 referenceColorHelper:(id)arg7 firstIndex:(unsigned long long)arg8 lastIndex:(unsigned long long)arg9 suppressAutomaticNamedReferenceInvalidation:(bool)arg10;
- (id)initWithContext:(id)arg1 children:(id)arg2 firstIndex:(unsigned long long)arg3 lastIndex:(unsigned long long)arg4;
- (id)initWithReferenceStart:(id)arg1 referenceEnd:(id)arg2 firstIndex:(unsigned long long)arg3 lastIndex:(unsigned long long)arg4;
- (id)initWithReferenceStart:(id)arg1 referenceEnd:(id)arg2 firstIndex:(unsigned long long)arg3 lastIndex:(unsigned long long)arg4 suppressAutomaticNamedReferenceInvalidation:(bool)arg5;
- (void)insertFormulaText:(id)arg1 includeWhitespace:(bool)arg2;
- (void)invalidate;
- (bool)isBlankForKeyboardInsertion;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToExpressionNode:(id)arg1;
- (bool)isLocalReference;
- (bool)isNonSpanningRange;
- (bool)isRange;
- (bool)isRangeWithFunction;
- (bool)isResizable;
- (bool)isSimpleRowOrColumnReference;
- (bool)isSingleASTNode;
- (bool)isValidReference;
- (void)p_buildASTNodeArray:(/* Warning: unhandled struct encoding: '{TSCEASTNodeArray=*QQ@}' */ struct TSCEASTNodeArray { char *x1; unsigned long long x2; unsigned long long x3; id x4; }*)arg1 forTopLeft:(bool)arg2 stickyBits:(unsigned char)arg3 hostCell:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg4;
- (void)p_resetMenu;
- (unsigned char)rangeContext;
- (struct TSCERangeCoordinate { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct TSUCellCoord { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })rangeCoordinate;
- (struct { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct TSUCellCoord { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })rangeReference;
- (struct TSTCSENodeData { unsigned long long x1; unsigned long long x2; })recordHashesForSubexpressions:(id)arg1;
- (id)referenceColorHelper;
- (void)saveToArchive:(struct ReferenceNodeArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; unsigned int x3[1]; int x4; struct ExpressionNodeArchive {} *x5; struct RangeReferenceArchive {} *x6; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x7; struct UUID {} *x8; struct CellUIDArchive {} *x9; struct CellUIDArchive {} *x10; unsigned int x11; }*)arg1 archiver:(id)arg2;
- (void)saveToArchiver:(id)arg1;
- (void)setBlankForKeyboardInsertion:(bool)arg1;
- (void)setHostTableID:(struct __CFUUID { }*)arg1;
- (void)setRangeContext:(unsigned char)arg1;
- (void)setRangeCoordinate:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct TSUCellCoord { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg1;
- (void)setRangeReference:(struct { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct TSUCellCoord { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })arg1;
- (void)setRangeReference:(struct { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct TSUCellCoord { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })arg1 stickyBits:(unsigned char)arg2;
- (void)setRangeWithFunction:(bool)arg1;
- (void)setReferenceColorHelper:(id)arg1;
- (void)setStickyBits:(unsigned char)arg1;
- (unsigned char)stickyBits;
- (id)string;
- (struct __CFUUID { }*)tableID;
- (int)tokenType;

@end
