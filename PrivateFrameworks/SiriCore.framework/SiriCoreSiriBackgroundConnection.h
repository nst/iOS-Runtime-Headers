/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SiriCore.framework/SiriCore
 */

@interface SiriCoreSiriBackgroundConnection : NSObject <SiriCoreConnectionProviderDelegate> {
    unsigned long long  _aceHeaderTimerFireCount;
    NSObject<OS_dispatch_source> * _aceHeaderTimerSource;
    NSObject<OS_dispatch_data> * _bufferedGeneralOutputData;
    NSObject<OS_dispatch_data> * _bufferedInputData;
    NSObject<OS_dispatch_data> * _bufferedProviderHeaderOutputData;
    NSObject<OS_dispatch_data> * _bufferedUncompressedData;
    SiriCoreSiriConnectionInfo * _connectionInfo;
    long long  _connectionMethod;
    <SiriCoreConnectionProvider> * _connectionProvider;
    unsigned int  _currentBarrierIndex;
    double  _currentOpenTime;
    unsigned int  _currentPingIndex;
    double  _currentStartTime;
    <SiriCoreSiriBackgroundConnectionDelegate> * _delegate;
    bool  _deviceIsInWalkaboutExperimentGroup;
    NSMutableDictionary * _errorsForConnectionMethods;
    double  _firstByteReadTime;
    double  _firstStartTime;
    bool  _hasReportedError;
    struct __CFHTTPMessage { } * _httpResponseHeader;
    SiriCoreDataDecompressor * _inputDecompressor;
    unsigned long long  _inputLengthUnchangedCounter;
    bool  _isCanceled;
    bool  _isOpened;
    void * _lastInputDataPointer;
    unsigned long long  _lastInputLength;
    void * _lastOutputDataPointer;
    unsigned long long  _lastOutputLength;
    unsigned long long  _metricsCount;
    NSObject<OS_dispatch_queue> * _metricsQueue;
    NSMutableArray * _outgoingCommandsWithSendCompletions;
    SiriCoreDataCompressor * _outputCompressor;
    unsigned long long  _outputLengthUnchangedCounter;
    NSMutableDictionary * _outstandingBarriers;
    Class  _peerProviderClass;
    NSString * _peerType;
    NSString * _peerVersion;
    SiriCorePingInfo * _pingInfo;
    NSObject<OS_dispatch_source> * _pingTimerSource;
    NSString * _productTypePrefix;
    NSObject<OS_dispatch_queue> * _queue;
    NSObject<OS_dispatch_data> * _safetyNetBuffer;
    bool  _siriConnectionUsesPeerManagedSync;
    unsigned long long  _startCount;
    bool  _usesProxyConnection;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <SiriCoreSiriBackgroundConnectionDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool deviceIsInWalkaboutExperimentGroup;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) Class peerProviderClass;
@property (nonatomic, copy) NSString *peerType;
@property (nonatomic, copy) NSString *peerVersion;
@property (nonatomic, copy) NSString *productTypePrefix;
@property (nonatomic) bool siriConnectionUsesPeerManagedSync;
@property (readonly) Class superclass;
@property (nonatomic) bool usesProxyConnection;

- (void).cxx_destruct;
- (id)_aceHeaderData;
- (void)_aceHeaderTimeoutFired:(id)arg1 afterTimeout:(double)arg2;
- (id)_bestErrorBetweenError:(id)arg1 peerError:(id)arg2;
- (void)_bufferGeneralData:(id)arg1;
- (bool)_canFallBackFromError:(id)arg1;
- (void)_cancelForExtendedValidationFailureWithTrustInfo:(id)arg1;
- (void)_cancelOutstandingBarriers;
- (long long)_checkForProgressOnReadingData;
- (long long)_checkPings;
- (void)_closeConnection;
- (void)_closeConnectionAndPrepareForReconnect:(bool)arg1;
- (void)_connectionHasBytesAvailable:(id)arg1;
- (id)_connectionMethodDescription;
- (id)_connectionType;
- (bool)_consumeAceDataWithData:(id)arg1 bytesRead:(unsigned long long*)arg2 error:(id*)arg3;
- (bool)_consumeAceHeaderWithData:(id)arg1 bytesRead:(unsigned long long*)arg2 error:(id*)arg3;
- (bool)_consumeHTTPHeaderWithData:(id)arg1 bytesRead:(unsigned long long*)arg2 error:(id*)arg3;
- (void)_didEncounterError:(id)arg1;
- (void)_fallBackToNextConnectionMethod:(long long)arg1 fromError:(id)arg2 afterDelay:(double)arg3;
- (void)_fallBackToNextConnectionMethodWithError:(id)arg1 orElse:(id /* block */)arg2;
- (void)_getCellularMetrics:(id)arg1;
- (id)_getInitialPayloadWithBufferedLength:(unsigned long long*)arg1;
- (void)_getWifiMetrics:(id)arg1;
- (void)_handleAceEnd;
- (void)_handleAceNop;
- (void)_handleAceObject:(id)arg1;
- (void)_handleAcePing:(unsigned int)arg1;
- (void)_handleAcePong:(unsigned int)arg1;
- (void)_handleBarrierReply:(unsigned int)arg1;
- (void)_handlePacket:(struct { unsigned char x1; unsigned int x2; }*)arg1;
- (bool)_hasBufferedDataOrOutstandingPings;
- (bool)_hasReadACEHeader;
- (bool)_hasReadHTTPHeader;
- (id)_headerDataForURL:(id)arg1 aceHost:(id)arg2 languageCode:(id)arg3 syncAssistantId:(id)arg4;
- (id)_httpHeaderData;
- (void)_initializeBufferedGeneralOutputDataWithInitialPayload:(bool)arg1;
- (void)_networkProviderDidOpen;
- (long long)_nextConnectionMethod;
- (long long)_normalizeSNR:(int)arg1;
- (void)_pingTimerFired;
- (void)_prepareProviderHeader;
- (Class)_providerClass;
- (void)_resumePingTimer;
- (void)_scheduleAceHeaderTimeoutTimerWithInterval:(double)arg1;
- (bool)_sendAcePingWithId:(unsigned int)arg1 error:(id*)arg2;
- (bool)_sendAcePongWithId:(unsigned int)arg1 error:(id*)arg2;
- (void)_sendGeneralData:(id)arg1;
- (void)_setupReadHandlerOnProvider;
- (bool)_shouldTrySameConnectionMethodForMethod:(long long)arg1 error:(id)arg2;
- (void)_startNetworkProviderWithInfo:(id)arg1;
- (void)_startWithConnectionInfo:(id)arg1 proposedFallbackMethod:(long long)arg2 allowFallbackToNewMethod:(bool)arg3;
- (bool)_tcpInfoIndicatesPoorLinkQuality;
- (bool)_tryParsingHTTPHeaderData:(id)arg1 partialMessage:(struct __CFHTTPMessage { }*)arg2 statusCode:(long long*)arg3 bytesRead:(unsigned long long*)arg4 error:(id*)arg5;
- (id)_tryReadingAceHeaderFromData:(id)arg1 bytesParsed:(unsigned long long*)arg2 error:(id*)arg3;
- (bool)_tryReadingHTTPHeaderData:(id)arg1 withMessage:(struct __CFHTTPMessage { }*)arg2 bytesRead:(unsigned long long*)arg3 error:(id*)arg4;
- (bool)_tryReadingParsedDataFromBytes:(const void*)arg1 length:(unsigned long long)arg2 packet:(struct { unsigned char x1; unsigned int x2; }*)arg3 object:(id*)arg4 bytesParsed:(unsigned long long*)arg5 error:(id*)arg6;
- (void)_tryToWriteBufferedOutputData;
- (void)_updateBuffersForInitialPayload:(id)arg1 bufferedLength:(unsigned long long)arg2;
- (bool)_usingFlorence;
- (bool)_usingNetwork;
- (bool)_usingPOP;
- (bool)_usingPOPOnPeer;
- (bool)_usingPeer;
- (bool)_wifiOrCellularMayBeBetterThanCurrentStream;
- (id)analysisInfo;
- (void)barrier:(id /* block */)arg1;
- (void)cancel;
- (void)connectionProvider:(id)arg1 receivedError:(id)arg2;
- (void)dealloc;
- (id)delegate;
- (bool)deviceIsInWalkaboutExperimentGroup;
- (id)getConnectionMethodUsed;
- (void)getConnectionMetrics:(id)arg1 withCompletion:(id /* block */)arg2;
- (id)init;
- (id)initWithQueue:(id)arg1;
- (Class)peerProviderClass;
- (id)peerType;
- (id)peerVersion;
- (void)probeConnection;
- (id)productTypePrefix;
- (void)sendCommand:(id)arg1 moreComing:(bool)arg2 errorHandler:(id /* block */)arg3;
- (void)sendCommands:(id)arg1 errorHandler:(id /* block */)arg2;
- (void)setDelegate:(id)arg1;
- (void)setDeviceIsInWalkaboutExperimentGroup:(bool)arg1;
- (void)setPeerProviderClass:(Class)arg1;
- (void)setPeerType:(id)arg1;
- (void)setPeerVersion:(id)arg1;
- (void)setProductTypePrefix:(id)arg1;
- (void)setSendPings:(bool)arg1;
- (void)setSiriConnectionUsesPeerManagedSync:(bool)arg1;
- (void)setUsesProxyConnection:(bool)arg1;
- (bool)siriConnectionUsesPeerManagedSync;
- (void)startHeartBeat;
- (void)startWithConnectionInfo:(id)arg1;
- (void)stopHeartBeat;
- (bool)usesProxyConnection;

@end
