/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotoLibrary.framework/PhotoLibrary
 */

@interface PLVideoView : UIView <PLMoviePlayerControllerDelegate, PLSlalomRegionEditorDelegate, UIMovieScrubberDataSource, UIMovieScrubberDelegate> {
    PFVideoAdjustments * __adjustmentsToCommit;
    bool  __attemptFetchingVideoDerivative;
    bool  __canAttemptFetchingVideoDerivative;
    bool  __didEditSlalom;
    bool  __didInsertMoviePlayerView;
    long long  __expectedNotificationsCount;
    bool  __isFetchingVideo;
    bool  __localVideoUnavailable;
    bool  __slalomRegionEditorCreatedForScrubber;
    PFVideoAVObjectBuilder * __videoAVObjectBuilder;
    AVAssetExportSession * _airplayExportSession;
    bool  _allowSlalomEditor;
    PLPhotoBakedThumbnails * _bakedLandscapeThumbnails;
    PLPhotoBakedThumbnails * _bakedPortraitThumbnails;
    double  _cachedCurrentPlaybackTime;
    NSMutableDictionary * _cachedThumbnails;
    unsigned int  _canCreateMetadata;
    unsigned int  _canEdit;
    unsigned int  _createPreviewPosterFrame;
    <PLVideoViewDelegate> * _delegate;
    unsigned int  _deleteOriginalFile;
    NSMutableArray * _detailThumbnailRequestTimestamps;
    unsigned int  _didLayout;
    unsigned int  _disableEditAfterTrim;
    double  _duration;
    unsigned int  _editing;
    AVAssetExportSession * _exportSession;
    NSArray * _imageGenerators;
    PLPhotoTileViewController * _imageTile;
    bool  _isAirPlay;
    unsigned int  _isMoviePlayerActive;
    unsigned int  _isTrimming;
    NSArray * _landscapeSummaryThumbnailTimestamps;
    double  _lastActualValue;
    double  _lastScrubbedValue;
    unsigned int  _loadMediaImmediately;
    unsigned int  _loadScrubberThumbnails;
    double  _maximumTrimLength;
    PLMoviePlayerController * _moviePlayer;
    unsigned int  _moviePlayerDidBuffer;
    unsigned int  _moviePlayerIsReady;
    unsigned int  _moviePlayerIsReadyForDisplay;
    unsigned int  _needsReloadScrubberThumbnails;
    unsigned int  _passthroughTrimming;
    NSString * _pathToOriginalVideo;
    unsigned int  _playFromBeginning;
    unsigned int  _playbackDidBegin;
    unsigned int  _playing;
    NSArray * _portraitSummaryThumbnailTimestamps;
    UIImage * _posterFrameImage;
    PLVideoPosterFrameView * _posterFrameView;
    bool  _prepareMoviePlayerForScrubberAutomatically;
    unsigned int  _preparedMoviePlayer;
    unsigned int  _preparingMoviePlayer;
    float  _progress;
    double  _remakerEndTime;
    double  _remakerStartTime;
    unsigned int  _remakingFailed;
    long long  _scaleMode;
    UIMovieScrubber * _scrubber;
    UIView * _scrubberBackgroundView;
    unsigned int  _scrubberIsSubview;
    UIView * _scrubberTitleView;
    NSTimer * _scrubberUpdateTimer;
    double  _scrubberWidth;
    unsigned int  _scrubbing;
    unsigned int  _scrubbingToRight;
    UIActivityIndicatorView * _shadowSpinner;
    bool  _shouldPlayVideoWhenViewAppears;
    unsigned int  _showScrubberWhenMovieIsReady;
    unsigned int  _showingOverlay;
    unsigned int  _showingScrubber;
    unsigned int  _showsPlayButton;
    unsigned int  _showsScrubber;
    PLSlalomRegionEditor * _slalomRegionEditor;
    UIImage * _snapshotImage;
    UIActivityIndicatorView * _spinner;
    NSMutableArray * _summaryThumbnailRequestTimestamps;
    NSDictionary * _thumbnailOptionsDict;
    NSObject<OS_dispatch_queue> * _thumbnailReqQueue;
    NSLock * _thumbnailReqlock;
    struct CGSize { 
        double width; 
        double height; 
    }  _thumbnailSize;
    PLVideoEditingOverlayView * _trimMessageView;
    PLProgressStack * _trimProgressStack;
    NSTimer * _trimProgressTimer;
    NSString * _trimmedPath;
    PLManagedAsset * _trimmedVideoClip;
    bool  _useLandscapeCache;
    PLManagedAsset * _videoCameraImage;
    unsigned int  _videoIsLandscape;
    UIView * _videoOverlayBackgroundView;
    UIView<PLVideoOverlayButton> * _videoOverlayPlayButton;
    NSString * _videoPathAfterTrim;
    double  _videoStreamingStartTime;
    NSURL * _videoURL;
    unsigned int  _viewWillAppear;
    unsigned int  _wasPlayingBeforeScrub;
    unsigned int  _wasTrimmedInPlace;
}

@property (nonatomic, readonly) PFVideoAdjustments *_adjustmentsToCommit;
@property (setter=_setAttemptFetchingVideoDerivative:, nonatomic) bool _attemptFetchingVideoDerivative;
@property (setter=_setCanAttemptFetchingVideoDerivative:, nonatomic) bool _canAttemptFetchingVideoDerivative;
@property (setter=_setDidEditSlalom:, nonatomic) bool _didEditSlalom;
@property (nonatomic) bool _didInsertMoviePlayerView;
@property (nonatomic, readonly) bool _didSetPhotoData;
@property (nonatomic, readonly) long long _expectedNotificationsCount;
@property (nonatomic, readonly) bool _isFetchingVideo;
@property (setter=_setLocalVideoUnavailable:, nonatomic) bool _localVideoUnavailable;
@property (nonatomic, readonly) bool _mediaIsPlayable;
@property (nonatomic, readonly, retain) NSString *_pathForPrebakedLandscapeScrubberThumbnails;
@property (nonatomic, readonly, retain) NSString *_pathForPrebakedPortraitScrubberThumbnails;
@property (nonatomic, readonly, retain) NSString *_pathForVideoPreviewFile;
@property (nonatomic, readonly) bool _slalomRegionEditorCreatedForScrubber;
@property (nonatomic, readonly) PFVideoAVObjectBuilder *_videoAVObjectBuilder;
@property (nonatomic) bool allowSlalomEditor;
@property (nonatomic) bool canEdit;
@property (nonatomic) double currentTime;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PLVideoViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double duration;
@property (getter=isEditing, nonatomic) bool editing;
@property (nonatomic, readonly) double endTime;
@property (readonly) unsigned long long hash;
@property (nonatomic) PLPhotoTileViewController *imageTile;
@property (nonatomic) bool loadMediaImmediately;
@property (nonatomic, readonly, retain) NSString *pathForVideoFile;
@property (nonatomic, readonly) UIImage *posterFrameImage;
@property (nonatomic, readonly, retain) PLVideoPosterFrameView *posterFrameView;
@property (nonatomic) bool prepareMoviePlayerForScrubberAutomatically;
@property (nonatomic, readonly) UIImageView *previewImageView;
@property (nonatomic, readonly) UIView *scrubberBackgroundView;
@property (nonatomic) bool scrubberIsSubview;
@property (nonatomic) double scrubberWidth;
@property (nonatomic) bool shouldPlayVideoWhenViewAppears;
@property (nonatomic) bool showsPlayOverlay;
@property (nonatomic) bool showsScrubber;
@property (nonatomic, readonly) double startTime;
@property (readonly) Class superclass;
@property (nonatomic, retain) PLProgressStack *trimProgressStack;
@property (nonatomic, retain) PLManagedAsset *trimmedVideoClip;
@property (nonatomic, readonly) PLManagedAsset *videoCameraImage;
@property (nonatomic, readonly) NSString *videoPathAfterTrim;

+ (id)_dequeueOverlayPlayButton;
+ (void)_enqueueOverlayPlayButton:(id)arg1;
+ (id)videoViewForVideoFileAtURL:(id)arg1;

- (void)_addThumbnailRequestForTimestamp:(id)arg1 isSummaryThumbnail:(bool)arg2;
- (id)_adjustmentsToCommit;
- (id)_assetForVideoPath:(id)arg1;
- (id)_assetForVideoURL:(id)arg1;
- (bool)_attemptFetchingVideoDerivative;
- (bool)_canAccessVideo;
- (bool)_canAirPlayCurrentVideo;
- (bool)_canAttemptFetchingVideoDerivative;
- (bool)_canCreateMetadata;
- (bool)_canEditDuration:(double)arg1;
- (bool)_canHandleAdjustmentData:(id)arg1;
- (bool)_canPlayCloudSharedStreamedVideoWithLocalVideo;
- (void)_cancelAirplayExportSession;
- (void)_cancelDelayedCommitPendingAdjustmentsUpdate;
- (void)_cancelRemaking:(id)arg1;
- (void)_clearImageGenerators;
- (void)_commitPendingAdjustmentsUpdate;
- (void)_commitPendingAdjustmentsUpdateAndWait:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)_configureImageGenerator:(id)arg1 thumbnailSize:(struct CGSize { double x1; double x2; })arg2 forSummaryThumbnails:(bool)arg3;
- (void)_configurePlayerForStreamedVideoIfNecessary;
- (void)_createScrubberIfNeeded;
- (void)_deleteFileAtPath:(id)arg1;
- (void)_didBeginPlayback;
- (bool)_didEditSlalom;
- (bool)_didInsertMoviePlayerView;
- (void)_didScrubToValue:(double)arg1 withHandle:(int)arg2;
- (bool)_didSetPhotoData;
- (void)_displayPlaySpinner;
- (void)_enqueueAdjustmentsForCommit;
- (long long)_expectedNotificationsCount;
- (void)_exportCompletedWithSuccess:(bool)arg1;
- (void)_fetchLocalContentEditingInput;
- (void)_fetchNonlocalVideo;
- (id)_filePathForFlattenedVideo;
- (id)_filePathForFlattenedVideoMetadata;
- (void)_flattenVideoWithCompletionHandler:(id /* block */)arg1;
- (void)_handleScreenConnectionChange:(bool)arg1;
- (void)_hideTrimMessageView:(bool)arg1;
- (void)_hideVideoOverlay:(bool)arg1;
- (void)_informDelegateAboutProgressChange:(float)arg1;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 videoCameraImage:(id)arg2 orientation:(long long)arg3;
- (void)_insertMoviePlayerViewIfNecessary;
- (void)_invalidateSnapshotImage;
- (bool)_isFetchingVideo;
- (bool)_isFlattenedVideoUpToDate;
- (id)_loadThumbnailsIntoDictionary:(id)arg1 isLandscape:(bool)arg2 aspectRatio:(float)arg3;
- (bool)_localVideoUnavailable;
- (bool)_mediaIsCloudSharedStreamedVideo;
- (bool)_mediaIsPlayable;
- (bool)_mediaIsVideo;
- (id)_metadataForFlattenedVideo;
- (id)_moviePlayer;
- (double)_movieScrubberDuration;
- (double)_movieTimeFromScrubberTime:(double)arg1;
- (void)_networkReachabilityDidChange:(id)arg1;
- (id)_optionsForAVURLAsset;
- (id)_pathForOriginalFile;
- (id)_pathForPrebakedLandscapeScrubberThumbnails;
- (id)_pathForPrebakedPortraitScrubberThumbnails;
- (id)_pathForVideoPreviewFile;
- (void)_playbackFinished;
- (bool)_playerIsAirplay;
- (void)_prepareAndResumePlayback;
- (bool)_prepareMoviePlayerIfNeeded;
- (id)_readMetadataFromPath:(id)arg1;
- (void)_reloadScrubberThumbnailsIfNeeded;
- (void)_removePlaySpinner;
- (void)_removeScrubber;
- (void)_removeScrubberUpdateTimer;
- (void)_removeTrimProgressTimer;
- (void)_requestPreviewPosterFrameForVideoSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_reset;
- (void)_resetScrubberUpdateTimer;
- (void)_resetTrimProgressTimer;
- (void)_saveCachedThumbnailsIfNecessary;
- (void)_savePreviewPosterFrameImage:(struct CGImage { }*)arg1;
- (void)_screenDidConnect:(id)arg1;
- (void)_screenDidDisconnect:(id)arg1;
- (void)_scrubToMovieTime:(double)arg1;
- (void)_scrubToSlalomRegionEditorStartHandle:(bool)arg1;
- (void)_scrubberAnimationFinished;
- (double)_scrubberBackgroundHeight;
- (double)_scrubberStartTime;
- (double)_scrubberTimeFromMovieTime:(double)arg1;
- (bool)_scrubberTimeNeedsMapping;
- (void)_serviceImageGenerationRequests;
- (void)_setAttemptFetchingVideoDerivative:(bool)arg1;
- (void)_setCanAttemptFetchingVideoDerivative:(bool)arg1;
- (void)_setDidEditSlalom:(bool)arg1;
- (void)_setDuration:(double)arg1;
- (void)_setLocalVideoUnavailable:(bool)arg1;
- (void)_setMoviePlayerActive:(bool)arg1;
- (void)_setNeedsReloadScrubberThumbnails:(bool)arg1;
- (void)_setPlaybackDidBegin:(bool)arg1;
- (void)_setPlaying:(bool)arg1;
- (void)_setupMoviePlayerIfNecessary;
- (bool)_shouldPlayFlattenedVideo;
- (bool)_shouldShowSlalomEditor;
- (bool)_shouldStreamCloudPhotoLibraryVideo;
- (bool)_shouldStreamVideo;
- (void)_showVideoOverlay;
- (bool)_slalomRegionEditorCreatedForScrubber;
- (void)_tearDownMoviePlayer;
- (id)_thumbnailSourceAsset;
- (double)_thumbnailTimeFromScrubberTime:(double)arg1;
- (void)_thumbnailsWereRegenerated:(id)arg1 error:(id)arg2 contextInfo:(void*)arg3;
- (void)_updateForEditing;
- (void)_updatePosterFrameVisibility;
- (void)_updatePosterImageView;
- (void)_updateScaleModeForSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_updateScrubberForSlowMotion;
- (void)_updateScrubberFrame;
- (void)_updateScrubberValue;
- (void)_updateScrubberVisibilityWithDuration:(double)arg1;
- (void)_updateSlalomRegionEditorRange;
- (void)_updateSlalomRegionEditorState;
- (void)_updateSnapshotImage;
- (void)_updateTrimProgress;
- (void)_updateVideoAVObjectBuilderFromContentEditingInput:(id)arg1;
- (void)_verifyOrRestartPlayback;
- (id)_videoAVObjectBuilder;
- (void)_videoOverlayFadeOutDidFinish;
- (id)_videoSnapshot;
- (void)_writeMetadata:(id)arg1 toPath:(id)arg2;
- (bool)allowSlalomEditor;
- (void)applicationDidEnterBackground;
- (void)applicationWillResignActive;
- (bool)canEdit;
- (void)cancelTrim;
- (void)commitPendingUpdatesWithCompletionHandler:(id /* block */)arg1;
- (double)currentTime;
- (void)dealloc;
- (id)delegate;
- (bool)deleteOriginalFileAfterTrim;
- (id)description;
- (void)didMoveToSuperview;
- (double)duration;
- (double)endTime;
- (void)forceStop;
- (void)handleDoubleTap;
- (void)hideTrimMessage;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)imageTile;
- (void)importerFinishedProcessingTrimmedVideo:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 videoCameraImage:(id)arg2 orientation:(long long)arg3;
- (bool)isEditing;
- (bool)isPlaying;
- (bool)isTrimming;
- (void)layoutSubviews;
- (bool)loadMediaImmediately;
- (void)moviePlayerBufferingStateDidChange:(id)arg1;
- (void)moviePlayerControllerDidBecomeActiveController:(id)arg1;
- (bool)moviePlayerControllerShouldAllowExternalPlayback:(id)arg1;
- (void)moviePlayerControllerWillResignAsActiveController:(id)arg1;
- (void)moviePlayerDidChangeExternalPlaybackType:(id)arg1;
- (void)moviePlayerDurationAvailable:(id)arg1;
- (void)moviePlayerEncounteredAuthenticationError:(id)arg1;
- (bool)moviePlayerExitRequest:(id)arg1 exitReason:(int)arg2;
- (void)moviePlayerHeadsetNextTrackPressed:(id)arg1;
- (void)moviePlayerHeadsetPlayPausePressed:(id)arg1;
- (void)moviePlayerHeadsetPreviousTrackPressed:(id)arg1;
- (void)moviePlayerPlaybackDidEnd:(id)arg1;
- (void)moviePlayerPlaybackRateDidChange:(id)arg1;
- (void)moviePlayerPlaybackStateDidChange:(id)arg1 fromPlaybackState:(unsigned long long)arg2;
- (void)moviePlayerReadyToDisplay:(id)arg1;
- (void)moviePlayerReadyToPlay:(id)arg1;
- (id)moviePlayerRequestsPickedAirplayRoute:(id)arg1;
- (bool)moviePlayerShouldNotifyOnPreparationError:(id)arg1;
- (void)moviePlayerUpdatedDestinationPlaceholder:(id)arg1;
- (void)moviePlayerWasSuspendedDuringPlayback:(id)arg1;
- (void)movieScrubber:(id)arg1 editingEndValueDidChange:(double)arg2;
- (void)movieScrubber:(id)arg1 editingStartValueDidChange:(double)arg2;
- (id)movieScrubber:(id)arg1 evenlySpacedTimestamps:(int)arg2 startingAt:(id)arg3 endingAt:(id)arg4;
- (void)movieScrubber:(id)arg1 requestThumbnailImageForTimestamp:(id)arg2;
- (void)movieScrubber:(id)arg1 requestThumbnailImageForTimestamp:(id)arg2 isSummaryThumbnail:(bool)arg3;
- (id)movieScrubber:(id)arg1 timestampsStartingAt:(id)arg2 endingAt:(id)arg3 maxCount:(int)arg4;
- (void)movieScrubber:(id)arg1 valueDidChange:(double)arg2;
- (void)movieScrubber:(id)arg1 widthDelta:(float)arg2 originXDelta:(float)arg3;
- (void)movieScrubber:(id)arg1 willZoomToMinimumValue:(double)arg2 maximumValue:(double)arg3;
- (void)movieScrubberDidBeginAnimatingZoom:(id)arg1;
- (void)movieScrubberDidBeginEditing:(id)arg1;
- (void)movieScrubberDidBeginScrubbing:(id)arg1 withHandle:(int)arg2;
- (void)movieScrubberDidCancelEditing:(id)arg1;
- (void)movieScrubberDidEndAnimatingZoom:(id)arg1;
- (void)movieScrubberDidEndScrubbing:(id)arg1 withHandle:(int)arg2;
- (void)movieScrubberDidFinishRequestingThumbnails:(id)arg1;
- (double)movieScrubberDuration:(id)arg1;
- (void)movieScrubberEditingAnimationFinished:(id)arg1;
- (double)movieScrubberThumbnailAspectRatio:(id)arg1;
- (void)movieScrubberWillBeginEditing:(id)arg1;
- (void)movieScrubberWillBeginRequestingThumbnails:(id)arg1;
- (id)newPreviewImageData:(id*)arg1;
- (void)notifyOfChange:(id)arg1 shouldReloadBlock:(id /* block */)arg2;
- (void)notifyRequiredResourcesDownloaded;
- (id)pathForVideoFile;
- (void)pause;
- (void)play;
- (void)playButtonClicked:(id)arg1;
- (bool)playingToAirTunes;
- (bool)playingToVideoOut;
- (id)posterFrameImage;
- (id)posterFrameView;
- (void)prepareMoviePlayer;
- (bool)prepareMoviePlayerForScrubberAutomatically;
- (id)previewImageView;
- (void)removeVideoOverlay;
- (id)scrubberBackgroundView;
- (bool)scrubberIsSubview;
- (double)scrubberWidth;
- (void)setAllowSlalomEditor:(bool)arg1;
- (void)setCanEdit:(bool)arg1;
- (void)setCurrentTime:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEditing:(bool)arg1;
- (void)setEditing:(bool)arg1 animated:(bool)arg2;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setImageTile:(id)arg1;
- (void)setLoadMediaImmediately:(bool)arg1;
- (void)setMaximumTrimLength:(double)arg1;
- (void)setPosterFrameImage:(id)arg1;
- (void)setPrepareMoviePlayerForScrubberAutomatically:(bool)arg1;
- (void)setProgress:(id)arg1;
- (void)setScrubberIsSubview:(bool)arg1;
- (void)setScrubberWidth:(double)arg1;
- (void)setShouldPlayVideoWhenViewAppears:(bool)arg1;
- (void)setShowsPlayOverlay:(bool)arg1;
- (void)setShowsScrubber:(bool)arg1;
- (void)setShowsScrubber:(bool)arg1 duration:(double)arg2;
- (void)setTrimProgressStack:(id)arg1;
- (void)setTrimmedVideoClip:(id)arg1;
- (void)set_didInsertMoviePlayerView:(bool)arg1;
- (bool)shouldPlayVideoWhenViewAppears;
- (bool)shouldShowCopyCalloutAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)showTrimMessage:(id)arg1 withBottomY:(float)arg2;
- (bool)showsPlayOverlay;
- (bool)showsScrubber;
- (id)slalomRegionEditor;
- (void)slalomRegionEditorDidBeginEditing:(id)arg1 withStartHandle:(bool)arg2;
- (void)slalomRegionEditorDidEndEditing:(id)arg1;
- (void)slalomRegionEditorEndValueChanged:(id)arg1;
- (void)slalomRegionEditorRequestForceUnzoom:(id)arg1;
- (bool)slalomRegionEditorRequestForceZoom:(id)arg1;
- (void)slalomRegionEditorStartValueChanged:(id)arg1;
- (double)startTime;
- (void)stop;
- (void)toggleScaleMode:(float)arg1;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (id)trimProgressStack;
- (void)trimUsingMode:(int)arg1 saveACopy:(bool)arg2;
- (id)trimmedVideoClip;
- (void)updateForRotationWithDuration:(double)arg1 isLandscape:(bool)arg2;
- (void)updateScaleMode;
- (id)videoCameraImage;
- (id)videoOverlayPlayButton;
- (id)videoPathAfterTrim;
- (id)videoScrubber;
- (void)viewDidAppear;
- (void)viewDidDisappear;
- (void)viewWillAppear:(bool)arg1;
- (bool)wasTrimmedInPlace;
- (void)willMoveToSuperview:(id)arg1;

@end
