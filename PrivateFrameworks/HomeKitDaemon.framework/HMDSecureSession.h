/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon
 */

@interface HMDSecureSession : HMFMessageTransport {
    bool  _clientMode;
    HMDDevice * _currentDevice;
    HAPRemoteSession * _hapRemoteSession;
    HMDRemoteIdentityRegistry * _identityRegistry;
    HMDAWDRemoteSessionMetric * _metric;
    HMDUser * _peer;
    HMDDevice * _peerDevice;
    NSUUID * _sessionID;
    id  _stoppedNotificationHandler;
    bool  _supportsSharedIdentities;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (nonatomic) bool clientMode;
@property (nonatomic, readonly) HMDDevice *currentDevice;
@property (nonatomic, retain) HAPRemoteSession *hapRemoteSession;
@property (nonatomic, retain) HMDRemoteIdentityRegistry *identityRegistry;
@property (nonatomic, readonly) HMDAWDRemoteSessionMetric *metric;
@property (nonatomic, retain) HMDUser *peer;
@property (nonatomic, readonly) HMDDevice *peerDevice;
@property (nonatomic, readonly, copy) NSUUID *sessionID;
@property (nonatomic, copy) id sessionStoppedNotificationHandler;
@property (nonatomic, copy) id stoppedNotificationHandler;
@property (nonatomic) bool supportsSharedIdentities;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *workQueue;

- (void).cxx_destruct;
- (void)_configureAsClient:(bool)arg1 queue:(id)arg2 completionHandler:(id)arg3;
- (bool)clientMode;
- (void)closedWithError:(id)arg1;
- (id)currentDevice;
- (void)dealloc;
- (void)handleSecureMessage:(id)arg1 fromTransport:(id)arg2;
- (id)hapRemoteSession;
- (id)identityRegistry;
- (id)initWithCurrentDevice:(id)arg1 peerDevice:(id)arg2 identityRegistry:(id)arg3 clientMode:(bool)arg4 sessionID:(id)arg5;
- (id)logIdentifier;
- (id)metric;
- (id)peer;
- (id)peerDevice;
- (void)sendMessage:(id)arg1 completionHandler:(id)arg2;
- (id)sessionID;
- (id)sessionStoppedNotificationHandler;
- (void)setClientMode:(bool)arg1;
- (void)setHapRemoteSession:(id)arg1;
- (void)setIdentityRegistry:(id)arg1;
- (void)setPeer:(id)arg1;
- (void)setSessionStoppedNotificationHandler:(id)arg1;
- (void)setStoppedNotificationHandler:(id)arg1;
- (void)setSupportsSharedIdentities:(bool)arg1;
- (void)setWorkQueue:(id)arg1;
- (void)startAndInvokeOnQueue:(id)arg1 completionHandler:(id)arg2;
- (void)stop;
- (id)stoppedNotificationHandler;
- (bool)supportsSharedIdentities;
- (id)workQueue;

@end
