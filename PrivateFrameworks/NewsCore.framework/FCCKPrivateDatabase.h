/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NewsCore.framework/NewsCore
 */

@interface FCCKPrivateDatabase : NSObject {
    bool  _activelyStartingUp;
    bool  _beganInitialStartUp;
    NSArray * _containers;
    unsigned long long  _countOfFailedStartUpAttempts;
    CKDatabase * _database;
    CKDatabase * _databaseWithZoneWidePCS;
    NSDate * _dateOfLastFailedStartUpAttempt;
    <FCCKDatabaseEncryptionDelegate> * _encryptionDelegate;
    bool  _encryptionEnabled;
    NSData * _encryptionKey;
    bool  _finishedInitialStartUp;
    NSObject<OS_dispatch_group> * _initialStartUpGroup;
    NSArray * _middleware;
    FCNetworkBehaviorMonitor * _networkBehaviorMonitor;
    NSOperationQueue * _noPreflightOperationQueue;
    NSArray * _operationMiddleware;
    NSObject<OS_dispatch_queue> * _queue;
    NSArray * _recordMiddleware;
    NSArray * _remainingStartUpMiddleware;
    FCCKPrivateDatabaseSchema * _schema;
    CKDatabase * _secureDatabase;
    NSData * _secureEncryptionKey;
    NSOperationQueue * _serialOperationQueue;
    long long  _startUpResult;
    NSArray * _zonePruningAssistants;
    NSArray * _zoneRestorationSources;
}

@property (nonatomic) bool activelyStartingUp;
@property (nonatomic) bool beganInitialStartUp;
@property (nonatomic, retain) NSArray *containers;
@property (nonatomic) unsigned long long countOfFailedStartUpAttempts;
@property (nonatomic, readonly) CKDatabase *database;
@property (nonatomic, readonly) CKDatabase *databaseWithZoneWidePCS;
@property (nonatomic, retain) NSDate *dateOfLastFailedStartUpAttempt;
@property (nonatomic, readonly) <FCCKDatabaseEncryptionDelegate> *encryptionDelegate;
@property (getter=isEncryptionEnabled) bool encryptionEnabled;
@property (retain) NSData *encryptionKey;
@property (nonatomic) bool finishedInitialStartUp;
@property (nonatomic, retain) NSObject<OS_dispatch_group> *initialStartUpGroup;
@property (nonatomic, retain) NSArray *middleware;
@property (nonatomic, readonly) FCNetworkBehaviorMonitor *networkBehaviorMonitor;
@property (nonatomic, retain) NSOperationQueue *noPreflightOperationQueue;
@property (getter=isOnline, nonatomic, readonly) bool online;
@property (nonatomic, retain) NSArray *operationMiddleware;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, retain) NSArray *recordMiddleware;
@property (nonatomic, retain) NSArray *remainingStartUpMiddleware;
@property (nonatomic, retain) FCCKPrivateDatabaseSchema *schema;
@property (nonatomic, readonly) CKDatabase *secureDatabase;
@property (retain) NSData *secureEncryptionKey;
@property (nonatomic, retain) NSOperationQueue *serialOperationQueue;
@property (nonatomic) long long startUpResult;
@property (getter=isStartingUp, nonatomic, readonly) bool startingUp;
@property (getter=isTemporarilySuspended, nonatomic, readonly) bool suspend;
@property (nonatomic, readonly) NSArray *zoneIDsUsingSecureContainer;
@property (nonatomic, readonly) NSArray *zonePruningAssistants;
@property (nonatomic, readonly) NSArray *zoneRestorationSources;

+ (id /* block */)_privateDatabaseDeprecatedRecordTestBlock;
+ (id)privateDatabaseSchema;
+ (id)testingDatabase;
+ (id)testingDatabaseWithCKDatabase:(id)arg1 middleware:(id)arg2;
+ (id)testingDatabaseWithCKDatabase:(id)arg1 middleware:(id)arg2 encryptionDelegate:(id)arg3;

- (void).cxx_destruct;
- (void)_addCKOperation:(id)arg1 destination:(long long)arg2;
- (void)_beginInitialStartUpIfNeeded;
- (void)_cancelOperation:(id)arg1;
- (id)_clientError:(id)arg1;
- (id)_clientRecord:(id)arg1;
- (id)_clientRecordID:(id)arg1;
- (id)_clientRecordType:(id)arg1 withRecordID:(id)arg2;
- (id)_clientRecordZoneID:(id)arg1;
- (id)_clientZone:(id)arg1;
- (void)_continueStartUp;
- (bool)_doesOperationRequireSecureContainer:(id)arg1;
- (bool)_doesOperationRequireZoneWidePCS:(id)arg1;
- (void)_finishStartUpWithError:(id)arg1;
- (id)_mapObjects:(id)arg1 withRecordMiddlewareBlock:(id /* block */)arg2;
- (id)_mapRecordIDs:(id)arg1 client:(bool)arg2;
- (id)_mapRecordZoneIDs:(id)arg1 client:(bool)arg2;
- (id)_mapRecords:(id)arg1 client:(bool)arg2;
- (id)_mapZones:(id)arg1 client:(bool)arg2;
- (void)_possiblyRetryStartUp;
- (void)_possiblySimulateCrashForError:(id)arg1 message:(id)arg2;
- (void)_preflightOperation:(id)arg1;
- (void)_preflightRecordsInDatabaseChangesOperation:(id)arg1;
- (void)_preflightRecordsInFetchOperation:(id)arg1;
- (void)_preflightRecordsInModifyOperation:(id)arg1;
- (void)_preflightRecordsInRecordZoneChangesOperation:(id)arg1;
- (void)_preflightZoneIDsInModifyZonesOperation:(id)arg1;
- (void)_preflightZonesIDsInFetchZonesOperation:(id)arg1;
- (id)_queueForOperation:(id)arg1;
- (id)_recordZoneIDsFromOperation:(id)arg1;
- (id)_serverRecord:(id)arg1;
- (id)_serverRecordID:(id)arg1;
- (id)_serverRecordType:(id)arg1 withRecordID:(id)arg2;
- (id)_serverRecordZoneID:(id)arg1;
- (id)_serverZone:(id)arg1;
- (bool)activelyStartingUp;
- (void)addCKOperation:(id)arg1 destination:(long long)arg2;
- (void)addCKOperationNoPreflight:(id)arg1 destination:(long long)arg2;
- (void)addOperation:(id)arg1;
- (bool)beganInitialStartUp;
- (id)containers;
- (unsigned long long)countOfFailedStartUpAttempts;
- (id)database;
- (id)databaseWithZoneWidePCS;
- (id)dateOfLastFailedStartUpAttempt;
- (id)encryptionDelegate;
- (id)encryptionKey;
- (void)enumerateActiveDestinationsWithOptions:(long long)arg1 handler:(id /* block */)arg2;
- (void)enumeratePayloadsWithRecordIDs:(id)arg1 records:(id)arg2 zoneIDs:(id)arg3 zones:(id)arg4 options:(long long)arg5 payloadHandler:(id /* block */)arg6;
- (void)fetchAllDatabaseChangesWithServerChangeToken:(id)arg1 qualityOfService:(long long)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)fetchChangesForRecordZoneID:(id)arg1 changeToken:(id)arg2 desiredKeys:(id)arg3 fetchAllChanges:(bool)arg4 qualityOfService:(long long)arg5 completionHandler:(id /* block */)arg6;
- (void)fetchSecureDatabaseSupportedWithCompletionHandler:(id /* block */)arg1;
- (bool)finishedInitialStartUp;
- (id)initWithContainerIdentifier:(id)arg1 secureContainerIdentifier:(id)arg2 productionEnvironment:(bool)arg3 encryptionDelegate:(id)arg4 networkBehaviorMonitor:(id)arg5 privateDataSyncingEnabled:(bool)arg6;
- (id)initWithContainers:(id)arg1 database:(id)arg2 databaseWithZoneWidePCS:(id)arg3 secureDatabase:(id)arg4 schema:(id)arg5 middleware:(id)arg6 encryptionDelegate:(id)arg7 networkBehaviorMonitor:(id)arg8;
- (id)initialStartUpGroup;
- (bool)isEncryptionEnabled;
- (bool)isOnline;
- (bool)isStartingUp;
- (bool)isTemporarilySuspended;
- (id)middleware;
- (id)networkBehaviorMonitor;
- (id)noPreflightOperationQueue;
- (id)operationMiddleware;
- (id)queue;
- (id)recordMiddleware;
- (void)registerZonePruningAssistants:(id)arg1;
- (void)registerZoneRestorationSources:(id)arg1;
- (id)remainingStartUpMiddleware;
- (void)reportEncryptionMigrationError:(id)arg1;
- (void)reportFatalStartUpError:(id)arg1;
- (void)reportRecoverableStartUpError:(id)arg1;
- (id)schema;
- (id)secureDatabase;
- (id)secureEncryptionKey;
- (id)serialOperationQueue;
- (void)setActivelyStartingUp:(bool)arg1;
- (void)setBeganInitialStartUp:(bool)arg1;
- (void)setContainers:(id)arg1;
- (void)setCountOfFailedStartUpAttempts:(unsigned long long)arg1;
- (void)setDateOfLastFailedStartUpAttempt:(id)arg1;
- (void)setEncryptionEnabled:(bool)arg1;
- (void)setEncryptionKey:(id)arg1;
- (void)setFinishedInitialStartUp:(bool)arg1;
- (void)setInitialStartUpGroup:(id)arg1;
- (void)setMiddleware:(id)arg1;
- (void)setNoPreflightOperationQueue:(id)arg1;
- (void)setOperationMiddleware:(id)arg1;
- (void)setQueue:(id)arg1;
- (void)setRecordMiddleware:(id)arg1;
- (void)setRemainingStartUpMiddleware:(id)arg1;
- (void)setSchema:(id)arg1;
- (void)setSecureEncryptionKey:(id)arg1;
- (void)setSerialOperationQueue:(id)arg1;
- (void)setStartUpResult:(long long)arg1;
- (long long)startUpResult;
- (void)t_performStartUpWithCompletion:(id /* block */)arg1;
- (void)takeDatabaseOfflineDueToError:(id)arg1;
- (id)zoneIDsUsingSecureContainer;
- (id)zonePruningAssistants;
- (id)zoneRestorationSources;

@end
