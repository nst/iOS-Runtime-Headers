/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

@interface MIPPlaylist : PBCodable <NSCopying> {
    NSString * _artworkId;
    NSString * _authorDisplayName;
    NSString * _authorHandle;
    long long  _authorStoreId;
    NSString * _authorStoreURL;
    NSMutableArray * _childIdentifiers;
    NSString * _cloudGlobalId;
    bool  _cloudIsCuratorPlaylist;
    bool  _cloudIsSharingDisabled;
    bool  _cloudIsSubscribed;
    long long  _cloudLastUpdateTime;
    NSString * _cloudUniversalLibraryId;
    NSString * _cloudVersionHash;
    long long  _creationDateTime;
    int  _distinguishedKind;
    bool  _editable;
    NSString * _externalVendorDisplayName;
    NSString * _externalVendorIdentifier;
    bool  _externalVendorPlaylist;
    NSString * _externalVendorTag;
    MIPMultiverseIdentifier * _geniusSeedTrackIdentifier;
    struct { 
        unsigned int authorStoreId : 1; 
        unsigned int cloudLastUpdateTime : 1; 
        unsigned int creationDateTime : 1; 
        unsigned int lastPlayedDateTime : 1; 
        unsigned int minRefreshInterval : 1; 
        unsigned int modificationDateTime : 1; 
        unsigned int storeId : 1; 
        unsigned int distinguishedKind : 1; 
        unsigned int likedState : 1; 
        unsigned int playCount : 1; 
        unsigned int remoteSourceType : 1; 
        unsigned int secondaryArtworkSourceType : 1; 
        unsigned int sortType : 1; 
        unsigned int subscriberCount : 1; 
        unsigned int subscriberLikedCount : 1; 
        unsigned int subscriberPlayCount : 1; 
        unsigned int type : 1; 
        unsigned int cloudIsCuratorPlaylist : 1; 
        unsigned int cloudIsSharingDisabled : 1; 
        unsigned int cloudIsSubscribed : 1; 
        unsigned int editable : 1; 
        unsigned int externalVendorPlaylist : 1; 
        unsigned int hidden : 1; 
        unsigned int owner : 1; 
        unsigned int reversedSorting : 1; 
        unsigned int shared : 1; 
        unsigned int visible : 1; 
    }  _has;
    bool  _hidden;
    NSMutableArray * _items;
    long long  _lastPlayedDateTime;
    int  _likedState;
    long long  _minRefreshInterval;
    long long  _modificationDateTime;
    NSString * _name;
    bool  _owner;
    MIPMultiverseIdentifier * _parentIdentifier;
    int  _playCount;
    NSString * _playlistDescription;
    int  _remoteSourceType;
    bool  _reversedSorting;
    NSString * _secondaryArtworkId;
    int  _secondaryArtworkSourceType;
    bool  _shared;
    MIPSmartPlaylistInfo * _smartPlaylistInfo;
    int  _sortType;
    long long  _storeId;
    int  _subscriberCount;
    int  _subscriberLikedCount;
    int  _subscriberPlayCount;
    NSString * _subscriberURL;
    int  _type;
    bool  _visible;
}

@property (nonatomic, retain) NSString *artworkId;
@property (nonatomic, retain) NSString *authorDisplayName;
@property (nonatomic, retain) NSString *authorHandle;
@property (nonatomic) long long authorStoreId;
@property (nonatomic, retain) NSString *authorStoreURL;
@property (nonatomic, retain) NSMutableArray *childIdentifiers;
@property (nonatomic, retain) NSString *cloudGlobalId;
@property (nonatomic) bool cloudIsCuratorPlaylist;
@property (nonatomic) bool cloudIsSharingDisabled;
@property (nonatomic) bool cloudIsSubscribed;
@property (nonatomic) long long cloudLastUpdateTime;
@property (nonatomic, retain) NSString *cloudUniversalLibraryId;
@property (nonatomic, retain) NSString *cloudVersionHash;
@property (nonatomic) long long creationDateTime;
@property (nonatomic) int distinguishedKind;
@property (nonatomic) bool editable;
@property (nonatomic, retain) NSString *externalVendorDisplayName;
@property (nonatomic, retain) NSString *externalVendorIdentifier;
@property (nonatomic) bool externalVendorPlaylist;
@property (nonatomic, retain) NSString *externalVendorTag;
@property (nonatomic, retain) MIPMultiverseIdentifier *geniusSeedTrackIdentifier;
@property (nonatomic, readonly) bool hasArtworkId;
@property (nonatomic, readonly) bool hasAuthorDisplayName;
@property (nonatomic, readonly) bool hasAuthorHandle;
@property (nonatomic) bool hasAuthorStoreId;
@property (nonatomic, readonly) bool hasAuthorStoreURL;
@property (nonatomic, readonly) bool hasCloudGlobalId;
@property (nonatomic) bool hasCloudIsCuratorPlaylist;
@property (nonatomic) bool hasCloudIsSharingDisabled;
@property (nonatomic) bool hasCloudIsSubscribed;
@property (nonatomic) bool hasCloudLastUpdateTime;
@property (nonatomic, readonly) bool hasCloudUniversalLibraryId;
@property (nonatomic, readonly) bool hasCloudVersionHash;
@property (nonatomic) bool hasCreationDateTime;
@property (nonatomic) bool hasDistinguishedKind;
@property (nonatomic) bool hasEditable;
@property (nonatomic, readonly) bool hasExternalVendorDisplayName;
@property (nonatomic, readonly) bool hasExternalVendorIdentifier;
@property (nonatomic) bool hasExternalVendorPlaylist;
@property (nonatomic, readonly) bool hasExternalVendorTag;
@property (nonatomic, readonly) bool hasGeniusSeedTrackIdentifier;
@property (nonatomic) bool hasHidden;
@property (nonatomic) bool hasLastPlayedDateTime;
@property (nonatomic) bool hasLikedState;
@property (nonatomic) bool hasMinRefreshInterval;
@property (nonatomic) bool hasModificationDateTime;
@property (nonatomic, readonly) bool hasName;
@property (nonatomic) bool hasOwner;
@property (nonatomic, readonly) bool hasParentIdentifier;
@property (nonatomic) bool hasPlayCount;
@property (nonatomic, readonly) bool hasPlaylistDescription;
@property (nonatomic) bool hasRemoteSourceType;
@property (nonatomic) bool hasReversedSorting;
@property (nonatomic, readonly) bool hasSecondaryArtworkId;
@property (nonatomic) bool hasSecondaryArtworkSourceType;
@property (nonatomic) bool hasShared;
@property (nonatomic, readonly) bool hasSmartPlaylistInfo;
@property (nonatomic) bool hasSortType;
@property (nonatomic) bool hasStoreId;
@property (nonatomic) bool hasSubscriberCount;
@property (nonatomic) bool hasSubscriberLikedCount;
@property (nonatomic) bool hasSubscriberPlayCount;
@property (nonatomic, readonly) bool hasSubscriberURL;
@property (nonatomic) bool hasType;
@property (nonatomic) bool hasVisible;
@property (nonatomic) bool hidden;
@property (nonatomic, retain) NSMutableArray *items;
@property (nonatomic) long long lastPlayedDateTime;
@property (nonatomic) int likedState;
@property (nonatomic) long long minRefreshInterval;
@property (nonatomic) long long modificationDateTime;
@property (nonatomic, retain) NSString *name;
@property (nonatomic) bool owner;
@property (nonatomic, retain) MIPMultiverseIdentifier *parentIdentifier;
@property (nonatomic) int playCount;
@property (nonatomic, retain) NSString *playlistDescription;
@property (nonatomic) int remoteSourceType;
@property (nonatomic) bool reversedSorting;
@property (nonatomic, retain) NSString *secondaryArtworkId;
@property (nonatomic) int secondaryArtworkSourceType;
@property (nonatomic) bool shared;
@property (nonatomic, retain) MIPSmartPlaylistInfo *smartPlaylistInfo;
@property (nonatomic) int sortType;
@property (nonatomic) long long storeId;
@property (nonatomic) int subscriberCount;
@property (nonatomic) int subscriberLikedCount;
@property (nonatomic) int subscriberPlayCount;
@property (nonatomic, retain) NSString *subscriberURL;
@property (nonatomic) int type;
@property (nonatomic) bool visible;

+ (Class)childIdentifiersType;
+ (Class)itemsType;

- (void).cxx_destruct;
- (int)StringAsSortType:(id)arg1;
- (int)StringAsType:(id)arg1;
- (void)addChildIdentifiers:(id)arg1;
- (void)addItems:(id)arg1;
- (id)artworkId;
- (id)authorDisplayName;
- (id)authorHandle;
- (long long)authorStoreId;
- (id)authorStoreURL;
- (id)childIdentifiers;
- (id)childIdentifiersAtIndex:(unsigned long long)arg1;
- (unsigned long long)childIdentifiersCount;
- (void)clearChildIdentifiers;
- (void)clearItems;
- (id)cloudGlobalId;
- (bool)cloudIsCuratorPlaylist;
- (bool)cloudIsSharingDisabled;
- (bool)cloudIsSubscribed;
- (long long)cloudLastUpdateTime;
- (id)cloudUniversalLibraryId;
- (id)cloudVersionHash;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (long long)creationDateTime;
- (id)description;
- (id)dictionaryRepresentation;
- (int)distinguishedKind;
- (bool)editable;
- (id)externalVendorDisplayName;
- (id)externalVendorIdentifier;
- (bool)externalVendorPlaylist;
- (id)externalVendorTag;
- (id)geniusSeedTrackIdentifier;
- (bool)hasArtworkId;
- (bool)hasAuthorDisplayName;
- (bool)hasAuthorHandle;
- (bool)hasAuthorStoreId;
- (bool)hasAuthorStoreURL;
- (bool)hasCloudGlobalId;
- (bool)hasCloudIsCuratorPlaylist;
- (bool)hasCloudIsSharingDisabled;
- (bool)hasCloudIsSubscribed;
- (bool)hasCloudLastUpdateTime;
- (bool)hasCloudUniversalLibraryId;
- (bool)hasCloudVersionHash;
- (bool)hasCreationDateTime;
- (bool)hasDistinguishedKind;
- (bool)hasEditable;
- (bool)hasExternalVendorDisplayName;
- (bool)hasExternalVendorIdentifier;
- (bool)hasExternalVendorPlaylist;
- (bool)hasExternalVendorTag;
- (bool)hasGeniusSeedTrackIdentifier;
- (bool)hasHidden;
- (bool)hasLastPlayedDateTime;
- (bool)hasLikedState;
- (bool)hasMinRefreshInterval;
- (bool)hasModificationDateTime;
- (bool)hasName;
- (bool)hasOwner;
- (bool)hasParentIdentifier;
- (bool)hasPlayCount;
- (bool)hasPlaylistDescription;
- (bool)hasRemoteSourceType;
- (bool)hasReversedSorting;
- (bool)hasSecondaryArtworkId;
- (bool)hasSecondaryArtworkSourceType;
- (bool)hasShared;
- (bool)hasSmartPlaylistInfo;
- (bool)hasSortType;
- (bool)hasStoreId;
- (bool)hasSubscriberCount;
- (bool)hasSubscriberLikedCount;
- (bool)hasSubscriberPlayCount;
- (bool)hasSubscriberURL;
- (bool)hasType;
- (bool)hasVisible;
- (unsigned long long)hash;
- (bool)hidden;
- (bool)isEqual:(id)arg1;
- (id)items;
- (id)itemsAtIndex:(unsigned long long)arg1;
- (unsigned long long)itemsCount;
- (long long)lastPlayedDateTime;
- (int)likedState;
- (void)mergeFrom:(id)arg1;
- (long long)minRefreshInterval;
- (long long)modificationDateTime;
- (id)name;
- (bool)owner;
- (id)parentIdentifier;
- (int)playCount;
- (id)playlistDescription;
- (bool)readFrom:(id)arg1;
- (int)remoteSourceType;
- (bool)reversedSorting;
- (id)secondaryArtworkId;
- (int)secondaryArtworkSourceType;
- (void)setArtworkId:(id)arg1;
- (void)setAuthorDisplayName:(id)arg1;
- (void)setAuthorHandle:(id)arg1;
- (void)setAuthorStoreId:(long long)arg1;
- (void)setAuthorStoreURL:(id)arg1;
- (void)setChildIdentifiers:(id)arg1;
- (void)setCloudGlobalId:(id)arg1;
- (void)setCloudIsCuratorPlaylist:(bool)arg1;
- (void)setCloudIsSharingDisabled:(bool)arg1;
- (void)setCloudIsSubscribed:(bool)arg1;
- (void)setCloudLastUpdateTime:(long long)arg1;
- (void)setCloudUniversalLibraryId:(id)arg1;
- (void)setCloudVersionHash:(id)arg1;
- (void)setCreationDateTime:(long long)arg1;
- (void)setDistinguishedKind:(int)arg1;
- (void)setEditable:(bool)arg1;
- (void)setExternalVendorDisplayName:(id)arg1;
- (void)setExternalVendorIdentifier:(id)arg1;
- (void)setExternalVendorPlaylist:(bool)arg1;
- (void)setExternalVendorTag:(id)arg1;
- (void)setGeniusSeedTrackIdentifier:(id)arg1;
- (void)setHasAuthorStoreId:(bool)arg1;
- (void)setHasCloudIsCuratorPlaylist:(bool)arg1;
- (void)setHasCloudIsSharingDisabled:(bool)arg1;
- (void)setHasCloudIsSubscribed:(bool)arg1;
- (void)setHasCloudLastUpdateTime:(bool)arg1;
- (void)setHasCreationDateTime:(bool)arg1;
- (void)setHasDistinguishedKind:(bool)arg1;
- (void)setHasEditable:(bool)arg1;
- (void)setHasExternalVendorPlaylist:(bool)arg1;
- (void)setHasHidden:(bool)arg1;
- (void)setHasLastPlayedDateTime:(bool)arg1;
- (void)setHasLikedState:(bool)arg1;
- (void)setHasMinRefreshInterval:(bool)arg1;
- (void)setHasModificationDateTime:(bool)arg1;
- (void)setHasOwner:(bool)arg1;
- (void)setHasPlayCount:(bool)arg1;
- (void)setHasRemoteSourceType:(bool)arg1;
- (void)setHasReversedSorting:(bool)arg1;
- (void)setHasSecondaryArtworkSourceType:(bool)arg1;
- (void)setHasShared:(bool)arg1;
- (void)setHasSortType:(bool)arg1;
- (void)setHasStoreId:(bool)arg1;
- (void)setHasSubscriberCount:(bool)arg1;
- (void)setHasSubscriberLikedCount:(bool)arg1;
- (void)setHasSubscriberPlayCount:(bool)arg1;
- (void)setHasType:(bool)arg1;
- (void)setHasVisible:(bool)arg1;
- (void)setHidden:(bool)arg1;
- (void)setItems:(id)arg1;
- (void)setLastPlayedDateTime:(long long)arg1;
- (void)setLikedState:(int)arg1;
- (void)setMinRefreshInterval:(long long)arg1;
- (void)setModificationDateTime:(long long)arg1;
- (void)setName:(id)arg1;
- (void)setOwner:(bool)arg1;
- (void)setParentIdentifier:(id)arg1;
- (void)setPlayCount:(int)arg1;
- (void)setPlaylistDescription:(id)arg1;
- (void)setRemoteSourceType:(int)arg1;
- (void)setReversedSorting:(bool)arg1;
- (void)setSecondaryArtworkId:(id)arg1;
- (void)setSecondaryArtworkSourceType:(int)arg1;
- (void)setShared:(bool)arg1;
- (void)setSmartPlaylistInfo:(id)arg1;
- (void)setSortType:(int)arg1;
- (void)setStoreId:(long long)arg1;
- (void)setSubscriberCount:(int)arg1;
- (void)setSubscriberLikedCount:(int)arg1;
- (void)setSubscriberPlayCount:(int)arg1;
- (void)setSubscriberURL:(id)arg1;
- (void)setType:(int)arg1;
- (void)setVisible:(bool)arg1;
- (bool)shared;
- (id)smartPlaylistInfo;
- (int)sortType;
- (id)sortTypeAsString:(int)arg1;
- (long long)storeId;
- (int)subscriberCount;
- (int)subscriberLikedCount;
- (int)subscriberPlayCount;
- (id)subscriberURL;
- (int)type;
- (id)typeAsString:(int)arg1;
- (bool)visible;
- (void)writeTo:(id)arg1;

@end
