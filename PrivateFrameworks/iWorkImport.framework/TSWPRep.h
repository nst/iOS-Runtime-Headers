/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSWPRep : TSDContainerRep {
    TSWPSearchReference * _activeSearchReference;
    bool  _caretAnimationDisabled;
    bool  _caretCancelled;
    CALayer * _caretLayer;
    NSTimer * _caretTimer;
    CALayer * _dragAndDropCaretLayer;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _dragRange;
    TSWPSelection * _dropSelection;
    bool  _findIsShowing;
    CALayer * _floatingCaretLayer;
    bool  _hudStateDirty;
    CALayer * _indentAnimationLayer;
    bool  _indentAnimationRunning;
    long long  _indentDelta;
    SEL  _indentSelector;
    id  _indentTarget;
    bool  _invalidateHUDState;
    bool  _isShowingCommentKnobs;
    TSWPSelection * _lastSelection;
    bool  _markChanged;
    CAShapeLayer * _markHighlightLayer;
    unsigned long long  _newSelectionFlags;
    bool  _repFieldsAreActive;
    NSArray * _searchReferences;
    CAShapeLayer * _secondaryHighlightLayer;
    int  _secondaryHighlightPathStyle;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _secondaryHighlightRange;
    bool  _selectionChanged;
    CAShapeLayer * _selectionHighlightLayer;
    CAShapeLayer * _selectionLineLayers;
    CAShapeLayer * _selectionParagraphBorderLayer;
    CAShapeLayer * _smartFieldHighlightLayer;
    bool  _suppressCaret;
    bool  _suppressSelectionHighlight;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _suppressedMisspellingRange;
    TSWPTextEditor * _textEditor;
    CALayer * _textLayers;
    bool  _tornDown;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _transformToConvertNaturalToScaledRoot;
    bool  _updatingHighlights;
    bool  _useKeyboardWhenEditing;
}

@property (nonatomic, retain) TSWPSearchReference *activeSearchReference;
@property (nonatomic, readonly) NSArray *columns;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } dragRange;
@property (nonatomic) TSWPSelection *dropSelection;
@property (nonatomic) bool findIsShowing;
@property (nonatomic, retain) CALayer *floatingCaretLayer;
@property (nonatomic, readonly) bool isBeingEdited;
@property (nonatomic, copy) TSWPSelection *lastSelection;
@property (nonatomic, readonly) TSDLayout<TSWPLayoutTarget> *layout;
@property (nonatomic, retain) NSArray *searchReferences;
@property (nonatomic, readonly) TSWPSelection *selection;
@property (nonatomic, readonly) TSWPStorage *storage;
@property (getter=isSelectionHighlightSuppressed, nonatomic) bool suppressSelectionHighlight;
@property (nonatomic, readonly) TSWPTextEditor *textEditor;
@property (nonatomic, readonly) bool textIsVertical;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformToConvertNaturalToScaledRoot;
@property (nonatomic) bool useKeyboardWhenEditing;

- (id)activeSearchReference;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForCharIndex:(unsigned long long)arg1 caretAffinity:(int)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForCharIndex:(unsigned long long)arg1 leadingEdge:(bool)arg2 caretAffinity:(int)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForSelection:(id)arg1;
- (unsigned long long)charCountOfGlyphStartingAtCharIndex:(unsigned long long)arg1;
- (unsigned long long)charIndexForPointWithPinning:(struct CGPoint { double x1; double x2; })arg1;
- (unsigned long long)charIndexForPointWithPinning:(struct CGPoint { double x1; double x2; })arg1 isTail:(bool)arg2 selectionType:(int)arg3;
- (unsigned long long)charIndexFromPoint:(struct CGPoint { double x1; double x2; })arg1 allowPastBreak:(bool)arg2 allowNotFound:(bool)arg3 isAtEndOfLine:(bool*)arg4 leadingEdge:(bool*)arg5;
- (unsigned long long)charIndexFromPoint:(struct CGPoint { double x1; double x2; })arg1 allowPastBreak:(bool)arg2 allowNotFound:(bool)arg3 pastCenterGoesToNextChar:(bool)arg4 isAtEndOfLine:(bool*)arg5 leadingEdge:(bool*)arg6;
- (unsigned long long)charIndexFromPoint:(struct CGPoint { double x1; double x2; })arg1 allowPastBreak:(bool)arg2 isAtEndOfLine:(bool*)arg3;
- (id)closestColumnForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)columnForCharIndex:(unsigned long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })columnRectForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)columns;
- (void)dealloc;
- (bool)directlyManagesLayerContent;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })dragRange;
- (void)drawInContext:(struct CGContext { }*)arg1;
- (void)drawInContext:(struct CGContext { }*)arg1 limitSelection:(id)arg2 suppressInvisibles:(bool)arg3;
- (void)drawInLayerContext:(struct CGContext { }*)arg1;
- (void)drawRubyInContext:(struct CGContext { }*)arg1 rubyFieldStart:(unsigned long long)arg2 rubyGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (id)dropSelection;
- (bool)findIsShowing;
- (id)floatingCaretLayer;
- (unsigned int)fontTraitsForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 includingLabel:(bool)arg2;
- (id)footnoteMarkAttachmentAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)footnoteReferenceAttachmentAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (unsigned long long)glyphCountForRubyFieldAtCharIndex:(unsigned long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })glyphRectForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 includingLabel:(bool)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })glyphRectForRubyFieldAtCharIndex:(unsigned long long)arg1 glyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (id)hyperlinkContainerRep;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;
- (bool)isBeingEdited;
- (bool)isOverflowing;
- (bool)isPointInSelectedArea:(struct CGPoint { double x1; double x2; })arg1;
- (bool)isSelectionHighlightSuppressed;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })labelRectForCharIndex:(unsigned long long)arg1;
- (id)lastSelection;
- (Class)layerClass;
- (id)layout;
- (struct { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; })lineMetricsAtCharIndex:(unsigned long long)arg1;
- (struct { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; })lineMetricsAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })naturalBoundsRectForHyperlinkField:(id)arg1;
- (struct CGPath { }*)newPathForSelection:(id)arg1;
- (bool)p_allowCaretForSelection:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_caretRectForSelection:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_closestCaretRectForPoint:(struct CGPoint { double x1; double x2; })arg1 inSelection:(bool)arg2 allowPastBreak:(bool)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_convertNaturalRectToRotated:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 repAngle:(double)arg2;
- (void)p_drawTextInLayer:(id)arg1 context:(struct CGContext { }*)arg2 limitSelection:(id)arg3 rubyGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 renderMode:(int)arg5 suppressInvisibles:(bool)arg6;
- (bool)p_hasEmptyList;
- (bool)p_hasVisibleContents;
- (id)p_hyperlinkAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_paragraphModeRectangleForColumn:(id)arg1 selection:(id)arg2;
- (struct CGPoint { double x1; double x2; })p_pinPoint:(struct CGPoint { double x1; double x2; })arg1 toRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (bool)p_shouldShowCommentsIncludingHighlights:(bool)arg1;
- (bool)p_singleAnchoredDrawableAttachmentSelection:(id)arg1;
- (void)p_teardown;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_topicDragRectForSelection:(id)arg1;
- (void)p_updateLayersForInsertionPointSelection:(id)arg1;
- (void)performBlockOnTextLayers:(id)arg1;
- (struct CGPoint { double x1; double x2; })pinToClosestColumn:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })pinToNaturalBounds:(struct CGPoint { double x1; double x2; })arg1 andLastLineFragment:(bool)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })range;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForSelection:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForSelection:(id)arg1 includeRuby:(bool)arg2;
- (id)repForCharIndex:(unsigned long long)arg1 isStart:(bool)arg2;
- (id)repForDragging;
- (id)rubyFieldAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)searchReferences;
- (id)selection;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })selectionRect;
- (void)setActiveSearchReference:(id)arg1;
- (void)setDragRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setDropSelection:(id)arg1;
- (void)setFindIsShowing:(bool)arg1;
- (void)setFloatingCaretLayer:(id)arg1;
- (void)setLastSelection:(id)arg1;
- (void)setSearchReferences:(id)arg1;
- (void)setSuppressSelectionHighlight:(bool)arg1;
- (void)setUseKeyboardWhenEditing:(bool)arg1;
- (bool)shouldLayoutTilingLayer:(id)arg1;
- (id)siblings;
- (id)smartFieldAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)storage;
- (id)textBackgroundLayer;
- (id)textEditor;
- (bool)textIsVertical;
- (id)textLayer;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformToConvertNaturalToScaledRoot;
- (bool)useKeyboardWhenEditing;
- (void)willBeRemoved;
- (struct { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; double x3; double x4; double x5; bool x6; })wordMetricsAtCharIndex:(unsigned long long)arg1;

@end
