/* Generated by RuntimeBrowser.
 */

@protocol LabelManagerDelegate <NSObject>

@required

- (void)labelManager:(void *)arg1 labelMarkerDidChangeState:(void *)arg2; // needs 2 arg types, found 147: struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*, struct shared_ptr<md::TaskContext> { struct TaskContext {} *x1; struct __shared_weak_count {} *x2; }, id, unsigned long long, unsigned char, long long, unsigned char, unsigned char, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct atomic<bool> { bool x1; }, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_1_1[2]; } x1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_1_1[2]; } x2; }, struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_1_1[2]; } x1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_1_1[2]; } x2; }, bool, bool, struct LabelLayoutContext {}*, struct LabelLayoutContext { bool x1; bool x2; bool x3; bool x4; bool x5; unsigned char x6; float x7; struct Matrix<double, 3, 1> { double x_8_1_1[3]; } x8; struct Matrix<double, 3, 1> { double x_9_1_1[3]; } x9; struct Matrix<double, 3, 1> { double x_10_1_1[3]; } x10; struct Matrix<double, 3, 1> { double x_11_1_1[3]; } x11; struct Matrix<double, 3, 1> { double x_12_1_1[3]; } x12; double x13; double x14; double x15; double x16; double x17; double x18; double x19; struct { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_20_1_1; struct Matrix<double, 3, 1> { double x_2_2_1[3]; } x_20_1_2; float x_20_1_3; float x_20_1_4; float x_20_1_5; } x20; float x21; float x22; float x23; float x24; struct Matrix<float, 2, 1> { float x_25_1_1[2]; } x25; struct Matrix<float, 2, 1> { float x_26_1_1[2]; } x26; struct LabelAngle { unsigned char x_27_1_1; } x27; float x28; struct Matrix<double, 4, 4> { double x_29_1_1[16]; } x29; struct Matrix<double, 4, 4> { double x_30_1_1[16]; } x30; struct Matrix<float, 2, 1> { float x_31_1_1[2]; } x31; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_32_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_32_1_2; } x32; }, struct LabelLayoutContext { bool x1; bool x2; bool x3; bool x4; bool x5; unsigned char x6; float x7; struct Matrix<double, 3, 1> { double x_8_1_1[3]; } x8; struct Matrix<double, 3, 1> { double x_9_1_1[3]; } x9; struct Matrix<double, 3, 1> { double x_10_1_1[3]; } x10; struct Matrix<double, 3, 1> { double x_11_1_1[3]; } x11; struct Matrix<double, 3, 1> { double x_12_1_1[3]; } x12; double x13; double x14; double x15; double x16; double x17; double x18; double x19; struct { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_20_1_1; struct Matrix<double, 3, 1> { double x_2_2_1[3]; } x_20_1_2; float x_20_1_3; float x_20_1_4; float x_20_1_5; } x20; float x21; float x22; float x23; float x24; struct Matrix<float, 2, 1> { float x_25_1_1[2]; } x25; struct Matrix<float, 2, 1> { float x_26_1_1[2]; } x26; struct LabelAngle { unsigned char x_27_1_1; } x27; float x28; struct Matrix<double, 4, 4> { double x_29_1_1[16]; } x29; struct Matrix<double, 4, 4> { double x_30_1_1[16]; } x30; struct Matrix<float, 2, 1> { float x_31_1_1[2]; } x31; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_32_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_32_1_2; } x32; }, struct LabelNavLayoutContext { struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_2_1[2]; } x_1_1_1; struct Matrix<double, 2, 1> { double x_2_2_1[2]; } x_1_1_2; } x1; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_2_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_2_1_2; } x2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_3_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_3_1_2; } x3; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_4_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_4_1_2; } x4; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_5_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_5_1_2; } x5; struct Matrix<double, 3, 1> { double x_6_1_1[3]; } x6; struct Matrix<float, 2, 1> { float x_7_1_1[2]; } x7; double x8; }, double, double, int, struct unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct __compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct LabelExternalObjectsModerator {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelTransitSupport, std::__1::default_delete<md::LabelTransitSupport> > { struct __compressed_pair<md::LabelTransitSupport *, std::__1::default_delete<md::LabelTransitSupport> > { struct LabelTransitSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelCustomFeatureSupport, std::__1::default_delete<md::LabelCustomFeatureSupport> > { struct __compressed_pair<md::LabelCustomFeatureSupport *, std::__1::default_delete<md::LabelCustomFeatureSupport> > { struct LabelCustomFeatureSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelNavSupport, std::__1::default_delete<md::LabelNavSupport> > { struct __compressed_pair<md::LabelNavSupport *, std::__1::default_delete<md::LabelNavSupport> > { struct LabelNavSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelNavTrafficSupport, std::__1::default_delete<md::LabelNavTrafficSupport> > { struct __compressed_pair<md::LabelNavTrafficSupport *, std::__1::default_delete<md::LabelNavTrafficSupport> > { struct LabelNavTrafficSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelImageLoader, std::__1::default_delete<md::LabelImageLoader> > { struct __compressed_pair<md::LabelImageLoader *, std::__1::default_delete<md::LabelImageLoader> > { struct LabelImageLoader {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelTextDataLoader, std::__1::default_delete<md::LabelTextDataLoader> > { struct __compressed_pair<md::LabelTextDataLoader *, std::__1::default_delete<md::LabelTextDataLoader> > { struct LabelTextDataLoader {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelGlyphImageLoader, std::__1::default_delete<md::LabelGlyphImageLoader> > { struct __compressed_pair<md::LabelGlyphImageLoader *, std::__1::default_delete<md::LabelGlyphImageLoader> > { struct LabelGlyphImageLoader {} *x_1_1_1; } x1; }, struct vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x1; struct shared_ptr<md::LabelMapTile> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x_3_1_1; } x3; }, struct set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct unique_ptr<md::LabelFeaturePool, std::__1::default_delete<md::LabelFeaturePool> > { struct __compressed_pair<md::LabelFeaturePool *, std::__1::default_delete<md::LabelFeaturePool> > { struct LabelFeaturePool {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelFeatureStyler, std::__1::default_delete<md::LabelFeatureStyler> > { struct __compressed_pair<md::LabelFeatureStyler *, std::__1::default_delete<md::LabelFeatureStyler> > { struct LabelFeatureStyler {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelPool, std::__1::default_delete<md::LabelPool> > { struct __compressed_pair<md::LabelPool *, std::__1::default_delete<md::LabelPool> > { struct LabelPool {} *x_1_1_1; } x1; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<md::Label *, std::__1::allocator<md::Label *> > { struct Label {} **x1; struct Label {} **x2; struct __compressed_pair<md::Label **, std::__1::allocator<md::Label *> > { struct Label {} **x_3_1_1; } x3; }, struct unique_ptr<md::FontAtlas, std::__1::default_delete<md::FontAtlas> > { struct __compressed_pair<md::FontAtlas *, std::__1::default_delete<md::FontAtlas> > { struct FontAtlas {} *x_1_1_1; } x1; }, struct { struct unique_ptr<md::FontGlyphCache, std::__1::default_delete<md::FontGlyphCache> > { struct __compressed_pair<md::FontGlyphCache *, std::__1::default_delete<md::FontGlyphCache> > { struct FontGlyphCache {} *x_1_2_1; } x_1_1_1; } x1; }, struct unique_ptr<md::LabelMesh, std::__1::default_delete<md::LabelMesh> > { struct __compressed_pair<md::LabelMesh *, std::__1::default_delete<md::LabelMesh> > { struct LabelMesh {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelStyleCache, std::__1::default_delete<md::LabelStyleCache> > { struct __compressed_pair<md::LabelStyleCache *, std::__1::default_delete<md::LabelStyleCache> > { struct LabelStyleCache {} *x_1_1_1; } x1; }, struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x1; struct __shared_weak_count {} *x2; }, struct unique_ptr<md::LabelCollider, std::__1::default_delete<md::LabelCollider> > { struct __compressed_pair<md::LabelCollider *, std::__1::default_delete<md::LabelCollider> > { struct LabelCollider {} *x_1_1_1; } x1; }, struct unique_ptr<md::OcclusionManager, std::__1::default_delete<md::OcclusionManager> > { struct __compressed_pair<md::OcclusionManager *, std::__1::default_delete<md::OcclusionManager> > { struct OcclusionManager {} *x_1_1_1; } x1; }, unsigned long long, unsigned long long, struct shared_ptr<md::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x1; struct __shared_weak_count {} *x2; }, struct mutex { struct _opaque_pthread_mutex_t { long long x_1_1_1; BOOL x_1_1_2[56]; } x1; }, struct vector<std::__1::shared_ptr<md::LabelManagerCommand>, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > > { struct shared_ptr<md::LabelManagerCommand> {} *x1; struct shared_ptr<md::LabelManagerCommand> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelManagerCommand> *, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > > { struct shared_ptr<md::LabelManagerCommand> {} *x_3_1_1; } x3; }, unsigned int, unsigned int, unsigned int, double, double, unsigned long long, bool, unsigned int, unsigned int, unsigned int, float, unsigned int, struct array<bool, 12> { bool x1[12]; }, float, bool, bool, struct shared_ptr<md::Label> { struct Label {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelFeature> { struct LabelFeature {} *x1; struct __shared_weak_count {} *x2; }, struct LabelIdentifier { unsigned int x1; }, bool, long long, long long, float, long long, unsigned char, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, int, int, struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }, struct SelectedLabelState { struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_1_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_1_1_2; } x1; bool x2; unsigned char x3; }, struct _retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKClientLocalizedStrings *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct { struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; bool x3; bool x4; bool x5; }, bool, float, struct vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x1; struct shared_ptr<md::NavLabel> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x_3_1_1; } x3; }, void*, const struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }*
- (void)labelManager:(void *)arg1 pendingArtworkIsReady:(void *)arg2; // needs 2 arg types, found 147: struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*, struct shared_ptr<md::TaskContext> { struct TaskContext {} *x1; struct __shared_weak_count {} *x2; }, id, unsigned long long, unsigned char, long long, unsigned char, unsigned char, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct atomic<bool> { bool x1; }, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_1_1[2]; } x1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_1_1[2]; } x2; }, struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_1_1[2]; } x1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_1_1[2]; } x2; }, bool, bool, struct LabelLayoutContext {}*, struct LabelLayoutContext { bool x1; bool x2; bool x3; bool x4; bool x5; unsigned char x6; float x7; struct Matrix<double, 3, 1> { double x_8_1_1[3]; } x8; struct Matrix<double, 3, 1> { double x_9_1_1[3]; } x9; struct Matrix<double, 3, 1> { double x_10_1_1[3]; } x10; struct Matrix<double, 3, 1> { double x_11_1_1[3]; } x11; struct Matrix<double, 3, 1> { double x_12_1_1[3]; } x12; double x13; double x14; double x15; double x16; double x17; double x18; double x19; struct { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_20_1_1; struct Matrix<double, 3, 1> { double x_2_2_1[3]; } x_20_1_2; float x_20_1_3; float x_20_1_4; float x_20_1_5; } x20; float x21; float x22; float x23; float x24; struct Matrix<float, 2, 1> { float x_25_1_1[2]; } x25; struct Matrix<float, 2, 1> { float x_26_1_1[2]; } x26; struct LabelAngle { unsigned char x_27_1_1; } x27; float x28; struct Matrix<double, 4, 4> { double x_29_1_1[16]; } x29; struct Matrix<double, 4, 4> { double x_30_1_1[16]; } x30; struct Matrix<float, 2, 1> { float x_31_1_1[2]; } x31; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_32_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_32_1_2; } x32; }, struct LabelLayoutContext { bool x1; bool x2; bool x3; bool x4; bool x5; unsigned char x6; float x7; struct Matrix<double, 3, 1> { double x_8_1_1[3]; } x8; struct Matrix<double, 3, 1> { double x_9_1_1[3]; } x9; struct Matrix<double, 3, 1> { double x_10_1_1[3]; } x10; struct Matrix<double, 3, 1> { double x_11_1_1[3]; } x11; struct Matrix<double, 3, 1> { double x_12_1_1[3]; } x12; double x13; double x14; double x15; double x16; double x17; double x18; double x19; struct { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_20_1_1; struct Matrix<double, 3, 1> { double x_2_2_1[3]; } x_20_1_2; float x_20_1_3; float x_20_1_4; float x_20_1_5; } x20; float x21; float x22; float x23; float x24; struct Matrix<float, 2, 1> { float x_25_1_1[2]; } x25; struct Matrix<float, 2, 1> { float x_26_1_1[2]; } x26; struct LabelAngle { unsigned char x_27_1_1; } x27; float x28; struct Matrix<double, 4, 4> { double x_29_1_1[16]; } x29; struct Matrix<double, 4, 4> { double x_30_1_1[16]; } x30; struct Matrix<float, 2, 1> { float x_31_1_1[2]; } x31; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_32_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_32_1_2; } x32; }, struct LabelNavLayoutContext { struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_2_1[2]; } x_1_1_1; struct Matrix<double, 2, 1> { double x_2_2_1[2]; } x_1_1_2; } x1; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_2_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_2_1_2; } x2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_3_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_3_1_2; } x3; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_4_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_4_1_2; } x4; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_5_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_5_1_2; } x5; struct Matrix<double, 3, 1> { double x_6_1_1[3]; } x6; struct Matrix<float, 2, 1> { float x_7_1_1[2]; } x7; double x8; }, double, double, int, struct unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct __compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct LabelExternalObjectsModerator {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelTransitSupport, std::__1::default_delete<md::LabelTransitSupport> > { struct __compressed_pair<md::LabelTransitSupport *, std::__1::default_delete<md::LabelTransitSupport> > { struct LabelTransitSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelCustomFeatureSupport, std::__1::default_delete<md::LabelCustomFeatureSupport> > { struct __compressed_pair<md::LabelCustomFeatureSupport *, std::__1::default_delete<md::LabelCustomFeatureSupport> > { struct LabelCustomFeatureSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelNavSupport, std::__1::default_delete<md::LabelNavSupport> > { struct __compressed_pair<md::LabelNavSupport *, std::__1::default_delete<md::LabelNavSupport> > { struct LabelNavSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelNavTrafficSupport, std::__1::default_delete<md::LabelNavTrafficSupport> > { struct __compressed_pair<md::LabelNavTrafficSupport *, std::__1::default_delete<md::LabelNavTrafficSupport> > { struct LabelNavTrafficSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelImageLoader, std::__1::default_delete<md::LabelImageLoader> > { struct __compressed_pair<md::LabelImageLoader *, std::__1::default_delete<md::LabelImageLoader> > { struct LabelImageLoader {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelTextDataLoader, std::__1::default_delete<md::LabelTextDataLoader> > { struct __compressed_pair<md::LabelTextDataLoader *, std::__1::default_delete<md::LabelTextDataLoader> > { struct LabelTextDataLoader {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelGlyphImageLoader, std::__1::default_delete<md::LabelGlyphImageLoader> > { struct __compressed_pair<md::LabelGlyphImageLoader *, std::__1::default_delete<md::LabelGlyphImageLoader> > { struct LabelGlyphImageLoader {} *x_1_1_1; } x1; }, struct vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x1; struct shared_ptr<md::LabelMapTile> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x_3_1_1; } x3; }, struct set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct unique_ptr<md::LabelFeaturePool, std::__1::default_delete<md::LabelFeaturePool> > { struct __compressed_pair<md::LabelFeaturePool *, std::__1::default_delete<md::LabelFeaturePool> > { struct LabelFeaturePool {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelFeatureStyler, std::__1::default_delete<md::LabelFeatureStyler> > { struct __compressed_pair<md::LabelFeatureStyler *, std::__1::default_delete<md::LabelFeatureStyler> > { struct LabelFeatureStyler {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelPool, std::__1::default_delete<md::LabelPool> > { struct __compressed_pair<md::LabelPool *, std::__1::default_delete<md::LabelPool> > { struct LabelPool {} *x_1_1_1; } x1; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<md::Label *, std::__1::allocator<md::Label *> > { struct Label {} **x1; struct Label {} **x2; struct __compressed_pair<md::Label **, std::__1::allocator<md::Label *> > { struct Label {} **x_3_1_1; } x3; }, struct unique_ptr<md::FontAtlas, std::__1::default_delete<md::FontAtlas> > { struct __compressed_pair<md::FontAtlas *, std::__1::default_delete<md::FontAtlas> > { struct FontAtlas {} *x_1_1_1; } x1; }, struct { struct unique_ptr<md::FontGlyphCache, std::__1::default_delete<md::FontGlyphCache> > { struct __compressed_pair<md::FontGlyphCache *, std::__1::default_delete<md::FontGlyphCache> > { struct FontGlyphCache {} *x_1_2_1; } x_1_1_1; } x1; }, struct unique_ptr<md::LabelMesh, std::__1::default_delete<md::LabelMesh> > { struct __compressed_pair<md::LabelMesh *, std::__1::default_delete<md::LabelMesh> > { struct LabelMesh {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelStyleCache, std::__1::default_delete<md::LabelStyleCache> > { struct __compressed_pair<md::LabelStyleCache *, std::__1::default_delete<md::LabelStyleCache> > { struct LabelStyleCache {} *x_1_1_1; } x1; }, struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x1; struct __shared_weak_count {} *x2; }, struct unique_ptr<md::LabelCollider, std::__1::default_delete<md::LabelCollider> > { struct __compressed_pair<md::LabelCollider *, std::__1::default_delete<md::LabelCollider> > { struct LabelCollider {} *x_1_1_1; } x1; }, struct unique_ptr<md::OcclusionManager, std::__1::default_delete<md::OcclusionManager> > { struct __compressed_pair<md::OcclusionManager *, std::__1::default_delete<md::OcclusionManager> > { struct OcclusionManager {} *x_1_1_1; } x1; }, unsigned long long, unsigned long long, struct shared_ptr<md::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x1; struct __shared_weak_count {} *x2; }, struct mutex { struct _opaque_pthread_mutex_t { long long x_1_1_1; BOOL x_1_1_2[56]; } x1; }, struct vector<std::__1::shared_ptr<md::LabelManagerCommand>, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > > { struct shared_ptr<md::LabelManagerCommand> {} *x1; struct shared_ptr<md::LabelManagerCommand> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelManagerCommand> *, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > > { struct shared_ptr<md::LabelManagerCommand> {} *x_3_1_1; } x3; }, unsigned int, unsigned int, unsigned int, double, double, unsigned long long, bool, unsigned int, unsigned int, unsigned int, float, unsigned int, struct array<bool, 12> { bool x1[12]; }, float, bool, bool, struct shared_ptr<md::Label> { struct Label {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelFeature> { struct LabelFeature {} *x1; struct __shared_weak_count {} *x2; }, struct LabelIdentifier { unsigned int x1; }, bool, long long, long long, float, long long, unsigned char, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, int, int, struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }, struct SelectedLabelState { struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_1_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_1_1_2; } x1; bool x2; unsigned char x3; }, struct _retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKClientLocalizedStrings *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct { struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; bool x3; bool x4; bool x5; }, bool, float, struct vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x1; struct shared_ptr<md::NavLabel> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x_3_1_1; } x3; }, void*, bool
- (void)labelManager:(void *)arg1 selectedLabelMarkerWillDisappear:(void *)arg2; // needs 2 arg types, found 147: struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*, struct shared_ptr<md::TaskContext> { struct TaskContext {} *x1; struct __shared_weak_count {} *x2; }, id, unsigned long long, unsigned char, long long, unsigned char, unsigned char, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct atomic<bool> { bool x1; }, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_1_1[2]; } x1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_1_1[2]; } x2; }, struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_1_1[2]; } x1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_1_1[2]; } x2; }, bool, bool, struct LabelLayoutContext {}*, struct LabelLayoutContext { bool x1; bool x2; bool x3; bool x4; bool x5; unsigned char x6; float x7; struct Matrix<double, 3, 1> { double x_8_1_1[3]; } x8; struct Matrix<double, 3, 1> { double x_9_1_1[3]; } x9; struct Matrix<double, 3, 1> { double x_10_1_1[3]; } x10; struct Matrix<double, 3, 1> { double x_11_1_1[3]; } x11; struct Matrix<double, 3, 1> { double x_12_1_1[3]; } x12; double x13; double x14; double x15; double x16; double x17; double x18; double x19; struct { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_20_1_1; struct Matrix<double, 3, 1> { double x_2_2_1[3]; } x_20_1_2; float x_20_1_3; float x_20_1_4; float x_20_1_5; } x20; float x21; float x22; float x23; float x24; struct Matrix<float, 2, 1> { float x_25_1_1[2]; } x25; struct Matrix<float, 2, 1> { float x_26_1_1[2]; } x26; struct LabelAngle { unsigned char x_27_1_1; } x27; float x28; struct Matrix<double, 4, 4> { double x_29_1_1[16]; } x29; struct Matrix<double, 4, 4> { double x_30_1_1[16]; } x30; struct Matrix<float, 2, 1> { float x_31_1_1[2]; } x31; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_32_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_32_1_2; } x32; }, struct LabelLayoutContext { bool x1; bool x2; bool x3; bool x4; bool x5; unsigned char x6; float x7; struct Matrix<double, 3, 1> { double x_8_1_1[3]; } x8; struct Matrix<double, 3, 1> { double x_9_1_1[3]; } x9; struct Matrix<double, 3, 1> { double x_10_1_1[3]; } x10; struct Matrix<double, 3, 1> { double x_11_1_1[3]; } x11; struct Matrix<double, 3, 1> { double x_12_1_1[3]; } x12; double x13; double x14; double x15; double x16; double x17; double x18; double x19; struct { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_20_1_1; struct Matrix<double, 3, 1> { double x_2_2_1[3]; } x_20_1_2; float x_20_1_3; float x_20_1_4; float x_20_1_5; } x20; float x21; float x22; float x23; float x24; struct Matrix<float, 2, 1> { float x_25_1_1[2]; } x25; struct Matrix<float, 2, 1> { float x_26_1_1[2]; } x26; struct LabelAngle { unsigned char x_27_1_1; } x27; float x28; struct Matrix<double, 4, 4> { double x_29_1_1[16]; } x29; struct Matrix<double, 4, 4> { double x_30_1_1[16]; } x30; struct Matrix<float, 2, 1> { float x_31_1_1[2]; } x31; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_32_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_32_1_2; } x32; }, struct LabelNavLayoutContext { struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_2_1[2]; } x_1_1_1; struct Matrix<double, 2, 1> { double x_2_2_1[2]; } x_1_1_2; } x1; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_2_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_2_1_2; } x2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_3_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_3_1_2; } x3; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_4_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_4_1_2; } x4; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_5_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_5_1_2; } x5; struct Matrix<double, 3, 1> { double x_6_1_1[3]; } x6; struct Matrix<float, 2, 1> { float x_7_1_1[2]; } x7; double x8; }, double, double, int, struct unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct __compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct LabelExternalObjectsModerator {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelTransitSupport, std::__1::default_delete<md::LabelTransitSupport> > { struct __compressed_pair<md::LabelTransitSupport *, std::__1::default_delete<md::LabelTransitSupport> > { struct LabelTransitSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelCustomFeatureSupport, std::__1::default_delete<md::LabelCustomFeatureSupport> > { struct __compressed_pair<md::LabelCustomFeatureSupport *, std::__1::default_delete<md::LabelCustomFeatureSupport> > { struct LabelCustomFeatureSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelNavSupport, std::__1::default_delete<md::LabelNavSupport> > { struct __compressed_pair<md::LabelNavSupport *, std::__1::default_delete<md::LabelNavSupport> > { struct LabelNavSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelNavTrafficSupport, std::__1::default_delete<md::LabelNavTrafficSupport> > { struct __compressed_pair<md::LabelNavTrafficSupport *, std::__1::default_delete<md::LabelNavTrafficSupport> > { struct LabelNavTrafficSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelImageLoader, std::__1::default_delete<md::LabelImageLoader> > { struct __compressed_pair<md::LabelImageLoader *, std::__1::default_delete<md::LabelImageLoader> > { struct LabelImageLoader {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelTextDataLoader, std::__1::default_delete<md::LabelTextDataLoader> > { struct __compressed_pair<md::LabelTextDataLoader *, std::__1::default_delete<md::LabelTextDataLoader> > { struct LabelTextDataLoader {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelGlyphImageLoader, std::__1::default_delete<md::LabelGlyphImageLoader> > { struct __compressed_pair<md::LabelGlyphImageLoader *, std::__1::default_delete<md::LabelGlyphImageLoader> > { struct LabelGlyphImageLoader {} *x_1_1_1; } x1; }, struct vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x1; struct shared_ptr<md::LabelMapTile> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x_3_1_1; } x3; }, struct set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct unique_ptr<md::LabelFeaturePool, std::__1::default_delete<md::LabelFeaturePool> > { struct __compressed_pair<md::LabelFeaturePool *, std::__1::default_delete<md::LabelFeaturePool> > { struct LabelFeaturePool {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelFeatureStyler, std::__1::default_delete<md::LabelFeatureStyler> > { struct __compressed_pair<md::LabelFeatureStyler *, std::__1::default_delete<md::LabelFeatureStyler> > { struct LabelFeatureStyler {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelPool, std::__1::default_delete<md::LabelPool> > { struct __compressed_pair<md::LabelPool *, std::__1::default_delete<md::LabelPool> > { struct LabelPool {} *x_1_1_1; } x1; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<md::Label *, std::__1::allocator<md::Label *> > { struct Label {} **x1; struct Label {} **x2; struct __compressed_pair<md::Label **, std::__1::allocator<md::Label *> > { struct Label {} **x_3_1_1; } x3; }, struct unique_ptr<md::FontAtlas, std::__1::default_delete<md::FontAtlas> > { struct __compressed_pair<md::FontAtlas *, std::__1::default_delete<md::FontAtlas> > { struct FontAtlas {} *x_1_1_1; } x1; }, struct { struct unique_ptr<md::FontGlyphCache, std::__1::default_delete<md::FontGlyphCache> > { struct __compressed_pair<md::FontGlyphCache *, std::__1::default_delete<md::FontGlyphCache> > { struct FontGlyphCache {} *x_1_2_1; } x_1_1_1; } x1; }, struct unique_ptr<md::LabelMesh, std::__1::default_delete<md::LabelMesh> > { struct __compressed_pair<md::LabelMesh *, std::__1::default_delete<md::LabelMesh> > { struct LabelMesh {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelStyleCache, std::__1::default_delete<md::LabelStyleCache> > { struct __compressed_pair<md::LabelStyleCache *, std::__1::default_delete<md::LabelStyleCache> > { struct LabelStyleCache {} *x_1_1_1; } x1; }, struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x1; struct __shared_weak_count {} *x2; }, struct unique_ptr<md::LabelCollider, std::__1::default_delete<md::LabelCollider> > { struct __compressed_pair<md::LabelCollider *, std::__1::default_delete<md::LabelCollider> > { struct LabelCollider {} *x_1_1_1; } x1; }, struct unique_ptr<md::OcclusionManager, std::__1::default_delete<md::OcclusionManager> > { struct __compressed_pair<md::OcclusionManager *, std::__1::default_delete<md::OcclusionManager> > { struct OcclusionManager {} *x_1_1_1; } x1; }, unsigned long long, unsigned long long, struct shared_ptr<md::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x1; struct __shared_weak_count {} *x2; }, struct mutex { struct _opaque_pthread_mutex_t { long long x_1_1_1; BOOL x_1_1_2[56]; } x1; }, struct vector<std::__1::shared_ptr<md::LabelManagerCommand>, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > > { struct shared_ptr<md::LabelManagerCommand> {} *x1; struct shared_ptr<md::LabelManagerCommand> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelManagerCommand> *, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > > { struct shared_ptr<md::LabelManagerCommand> {} *x_3_1_1; } x3; }, unsigned int, unsigned int, unsigned int, double, double, unsigned long long, bool, unsigned int, unsigned int, unsigned int, float, unsigned int, struct array<bool, 12> { bool x1[12]; }, float, bool, bool, struct shared_ptr<md::Label> { struct Label {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelFeature> { struct LabelFeature {} *x1; struct __shared_weak_count {} *x2; }, struct LabelIdentifier { unsigned int x1; }, bool, long long, long long, float, long long, unsigned char, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, int, int, struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }, struct SelectedLabelState { struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_1_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_1_1_2; } x1; bool x2; unsigned char x3; }, struct _retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKClientLocalizedStrings *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct { struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; bool x3; bool x4; bool x5; }, bool, float, struct vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x1; struct shared_ptr<md::NavLabel> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x_3_1_1; } x3; }, void*, const struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }*
- (void)labelManager:(void *)arg1 setNeedsDisplay:(void *)arg2; // needs 2 arg types, found 147: struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*, struct shared_ptr<md::TaskContext> { struct TaskContext {} *x1; struct __shared_weak_count {} *x2; }, id, unsigned long long, unsigned char, long long, unsigned char, unsigned char, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct atomic<bool> { bool x1; }, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_1_1[2]; } x1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_1_1[2]; } x2; }, struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_1_1[2]; } x1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_1_1[2]; } x2; }, bool, bool, struct LabelLayoutContext {}*, struct LabelLayoutContext { bool x1; bool x2; bool x3; bool x4; bool x5; unsigned char x6; float x7; struct Matrix<double, 3, 1> { double x_8_1_1[3]; } x8; struct Matrix<double, 3, 1> { double x_9_1_1[3]; } x9; struct Matrix<double, 3, 1> { double x_10_1_1[3]; } x10; struct Matrix<double, 3, 1> { double x_11_1_1[3]; } x11; struct Matrix<double, 3, 1> { double x_12_1_1[3]; } x12; double x13; double x14; double x15; double x16; double x17; double x18; double x19; struct { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_20_1_1; struct Matrix<double, 3, 1> { double x_2_2_1[3]; } x_20_1_2; float x_20_1_3; float x_20_1_4; float x_20_1_5; } x20; float x21; float x22; float x23; float x24; struct Matrix<float, 2, 1> { float x_25_1_1[2]; } x25; struct Matrix<float, 2, 1> { float x_26_1_1[2]; } x26; struct LabelAngle { unsigned char x_27_1_1; } x27; float x28; struct Matrix<double, 4, 4> { double x_29_1_1[16]; } x29; struct Matrix<double, 4, 4> { double x_30_1_1[16]; } x30; struct Matrix<float, 2, 1> { float x_31_1_1[2]; } x31; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_32_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_32_1_2; } x32; }, struct LabelLayoutContext { bool x1; bool x2; bool x3; bool x4; bool x5; unsigned char x6; float x7; struct Matrix<double, 3, 1> { double x_8_1_1[3]; } x8; struct Matrix<double, 3, 1> { double x_9_1_1[3]; } x9; struct Matrix<double, 3, 1> { double x_10_1_1[3]; } x10; struct Matrix<double, 3, 1> { double x_11_1_1[3]; } x11; struct Matrix<double, 3, 1> { double x_12_1_1[3]; } x12; double x13; double x14; double x15; double x16; double x17; double x18; double x19; struct { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_20_1_1; struct Matrix<double, 3, 1> { double x_2_2_1[3]; } x_20_1_2; float x_20_1_3; float x_20_1_4; float x_20_1_5; } x20; float x21; float x22; float x23; float x24; struct Matrix<float, 2, 1> { float x_25_1_1[2]; } x25; struct Matrix<float, 2, 1> { float x_26_1_1[2]; } x26; struct LabelAngle { unsigned char x_27_1_1; } x27; float x28; struct Matrix<double, 4, 4> { double x_29_1_1[16]; } x29; struct Matrix<double, 4, 4> { double x_30_1_1[16]; } x30; struct Matrix<float, 2, 1> { float x_31_1_1[2]; } x31; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_32_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_32_1_2; } x32; }, struct LabelNavLayoutContext { struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_2_1[2]; } x_1_1_1; struct Matrix<double, 2, 1> { double x_2_2_1[2]; } x_1_1_2; } x1; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_2_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_2_1_2; } x2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_3_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_3_1_2; } x3; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_4_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_4_1_2; } x4; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_5_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_5_1_2; } x5; struct Matrix<double, 3, 1> { double x_6_1_1[3]; } x6; struct Matrix<float, 2, 1> { float x_7_1_1[2]; } x7; double x8; }, double, double, int, struct unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct __compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct LabelExternalObjectsModerator {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelTransitSupport, std::__1::default_delete<md::LabelTransitSupport> > { struct __compressed_pair<md::LabelTransitSupport *, std::__1::default_delete<md::LabelTransitSupport> > { struct LabelTransitSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelCustomFeatureSupport, std::__1::default_delete<md::LabelCustomFeatureSupport> > { struct __compressed_pair<md::LabelCustomFeatureSupport *, std::__1::default_delete<md::LabelCustomFeatureSupport> > { struct LabelCustomFeatureSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelNavSupport, std::__1::default_delete<md::LabelNavSupport> > { struct __compressed_pair<md::LabelNavSupport *, std::__1::default_delete<md::LabelNavSupport> > { struct LabelNavSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelNavTrafficSupport, std::__1::default_delete<md::LabelNavTrafficSupport> > { struct __compressed_pair<md::LabelNavTrafficSupport *, std::__1::default_delete<md::LabelNavTrafficSupport> > { struct LabelNavTrafficSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelImageLoader, std::__1::default_delete<md::LabelImageLoader> > { struct __compressed_pair<md::LabelImageLoader *, std::__1::default_delete<md::LabelImageLoader> > { struct LabelImageLoader {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelTextDataLoader, std::__1::default_delete<md::LabelTextDataLoader> > { struct __compressed_pair<md::LabelTextDataLoader *, std::__1::default_delete<md::LabelTextDataLoader> > { struct LabelTextDataLoader {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelGlyphImageLoader, std::__1::default_delete<md::LabelGlyphImageLoader> > { struct __compressed_pair<md::LabelGlyphImageLoader *, std::__1::default_delete<md::LabelGlyphImageLoader> > { struct LabelGlyphImageLoader {} *x_1_1_1; } x1; }, struct vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x1; struct shared_ptr<md::LabelMapTile> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x_3_1_1; } x3; }, struct set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct unique_ptr<md::LabelFeaturePool, std::__1::default_delete<md::LabelFeaturePool> > { struct __compressed_pair<md::LabelFeaturePool *, std::__1::default_delete<md::LabelFeaturePool> > { struct LabelFeaturePool {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelFeatureStyler, std::__1::default_delete<md::LabelFeatureStyler> > { struct __compressed_pair<md::LabelFeatureStyler *, std::__1::default_delete<md::LabelFeatureStyler> > { struct LabelFeatureStyler {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelPool, std::__1::default_delete<md::LabelPool> > { struct __compressed_pair<md::LabelPool *, std::__1::default_delete<md::LabelPool> > { struct LabelPool {} *x_1_1_1; } x1; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<md::Label *, std::__1::allocator<md::Label *> > { struct Label {} **x1; struct Label {} **x2; struct __compressed_pair<md::Label **, std::__1::allocator<md::Label *> > { struct Label {} **x_3_1_1; } x3; }, struct unique_ptr<md::FontAtlas, std::__1::default_delete<md::FontAtlas> > { struct __compressed_pair<md::FontAtlas *, std::__1::default_delete<md::FontAtlas> > { struct FontAtlas {} *x_1_1_1; } x1; }, struct { struct unique_ptr<md::FontGlyphCache, std::__1::default_delete<md::FontGlyphCache> > { struct __compressed_pair<md::FontGlyphCache *, std::__1::default_delete<md::FontGlyphCache> > { struct FontGlyphCache {} *x_1_2_1; } x_1_1_1; } x1; }, struct unique_ptr<md::LabelMesh, std::__1::default_delete<md::LabelMesh> > { struct __compressed_pair<md::LabelMesh *, std::__1::default_delete<md::LabelMesh> > { struct LabelMesh {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelStyleCache, std::__1::default_delete<md::LabelStyleCache> > { struct __compressed_pair<md::LabelStyleCache *, std::__1::default_delete<md::LabelStyleCache> > { struct LabelStyleCache {} *x_1_1_1; } x1; }, struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x1; struct __shared_weak_count {} *x2; }, struct unique_ptr<md::LabelCollider, std::__1::default_delete<md::LabelCollider> > { struct __compressed_pair<md::LabelCollider *, std::__1::default_delete<md::LabelCollider> > { struct LabelCollider {} *x_1_1_1; } x1; }, struct unique_ptr<md::OcclusionManager, std::__1::default_delete<md::OcclusionManager> > { struct __compressed_pair<md::OcclusionManager *, std::__1::default_delete<md::OcclusionManager> > { struct OcclusionManager {} *x_1_1_1; } x1; }, unsigned long long, unsigned long long, struct shared_ptr<md::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x1; struct __shared_weak_count {} *x2; }, struct mutex { struct _opaque_pthread_mutex_t { long long x_1_1_1; BOOL x_1_1_2[56]; } x1; }, struct vector<std::__1::shared_ptr<md::LabelManagerCommand>, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > > { struct shared_ptr<md::LabelManagerCommand> {} *x1; struct shared_ptr<md::LabelManagerCommand> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelManagerCommand> *, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > > { struct shared_ptr<md::LabelManagerCommand> {} *x_3_1_1; } x3; }, unsigned int, unsigned int, unsigned int, double, double, unsigned long long, bool, unsigned int, unsigned int, unsigned int, float, unsigned int, struct array<bool, 12> { bool x1[12]; }, float, bool, bool, struct shared_ptr<md::Label> { struct Label {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelFeature> { struct LabelFeature {} *x1; struct __shared_weak_count {} *x2; }, struct LabelIdentifier { unsigned int x1; }, bool, long long, long long, float, long long, unsigned char, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, int, int, struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }, struct SelectedLabelState { struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_1_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_1_1_2; } x1; bool x2; unsigned char x3; }, struct _retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKClientLocalizedStrings *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct { struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; bool x3; bool x4; bool x5; }, bool, float, struct vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x1; struct shared_ptr<md::NavLabel> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x_3_1_1; } x3; }, void*, bool
- (void)labelManager:(void *)arg1 setNeedsLayout:(void *)arg2; // needs 2 arg types, found 147: struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*, struct shared_ptr<md::TaskContext> { struct TaskContext {} *x1; struct __shared_weak_count {} *x2; }, id, unsigned long long, unsigned char, long long, unsigned char, unsigned char, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct atomic<bool> { bool x1; }, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_1_1[2]; } x1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_1_1[2]; } x2; }, struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_1_1[2]; } x1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_1_1[2]; } x2; }, bool, bool, struct LabelLayoutContext {}*, struct LabelLayoutContext { bool x1; bool x2; bool x3; bool x4; bool x5; unsigned char x6; float x7; struct Matrix<double, 3, 1> { double x_8_1_1[3]; } x8; struct Matrix<double, 3, 1> { double x_9_1_1[3]; } x9; struct Matrix<double, 3, 1> { double x_10_1_1[3]; } x10; struct Matrix<double, 3, 1> { double x_11_1_1[3]; } x11; struct Matrix<double, 3, 1> { double x_12_1_1[3]; } x12; double x13; double x14; double x15; double x16; double x17; double x18; double x19; struct { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_20_1_1; struct Matrix<double, 3, 1> { double x_2_2_1[3]; } x_20_1_2; float x_20_1_3; float x_20_1_4; float x_20_1_5; } x20; float x21; float x22; float x23; float x24; struct Matrix<float, 2, 1> { float x_25_1_1[2]; } x25; struct Matrix<float, 2, 1> { float x_26_1_1[2]; } x26; struct LabelAngle { unsigned char x_27_1_1; } x27; float x28; struct Matrix<double, 4, 4> { double x_29_1_1[16]; } x29; struct Matrix<double, 4, 4> { double x_30_1_1[16]; } x30; struct Matrix<float, 2, 1> { float x_31_1_1[2]; } x31; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_32_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_32_1_2; } x32; }, struct LabelLayoutContext { bool x1; bool x2; bool x3; bool x4; bool x5; unsigned char x6; float x7; struct Matrix<double, 3, 1> { double x_8_1_1[3]; } x8; struct Matrix<double, 3, 1> { double x_9_1_1[3]; } x9; struct Matrix<double, 3, 1> { double x_10_1_1[3]; } x10; struct Matrix<double, 3, 1> { double x_11_1_1[3]; } x11; struct Matrix<double, 3, 1> { double x_12_1_1[3]; } x12; double x13; double x14; double x15; double x16; double x17; double x18; double x19; struct { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_20_1_1; struct Matrix<double, 3, 1> { double x_2_2_1[3]; } x_20_1_2; float x_20_1_3; float x_20_1_4; float x_20_1_5; } x20; float x21; float x22; float x23; float x24; struct Matrix<float, 2, 1> { float x_25_1_1[2]; } x25; struct Matrix<float, 2, 1> { float x_26_1_1[2]; } x26; struct LabelAngle { unsigned char x_27_1_1; } x27; float x28; struct Matrix<double, 4, 4> { double x_29_1_1[16]; } x29; struct Matrix<double, 4, 4> { double x_30_1_1[16]; } x30; struct Matrix<float, 2, 1> { float x_31_1_1[2]; } x31; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_32_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_32_1_2; } x32; }, struct LabelNavLayoutContext { struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_2_1[2]; } x_1_1_1; struct Matrix<double, 2, 1> { double x_2_2_1[2]; } x_1_1_2; } x1; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_2_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_2_1_2; } x2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_3_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_3_1_2; } x3; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_4_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_4_1_2; } x4; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_5_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_5_1_2; } x5; struct Matrix<double, 3, 1> { double x_6_1_1[3]; } x6; struct Matrix<float, 2, 1> { float x_7_1_1[2]; } x7; double x8; }, double, double, int, struct unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct __compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct LabelExternalObjectsModerator {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelTransitSupport, std::__1::default_delete<md::LabelTransitSupport> > { struct __compressed_pair<md::LabelTransitSupport *, std::__1::default_delete<md::LabelTransitSupport> > { struct LabelTransitSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelCustomFeatureSupport, std::__1::default_delete<md::LabelCustomFeatureSupport> > { struct __compressed_pair<md::LabelCustomFeatureSupport *, std::__1::default_delete<md::LabelCustomFeatureSupport> > { struct LabelCustomFeatureSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelNavSupport, std::__1::default_delete<md::LabelNavSupport> > { struct __compressed_pair<md::LabelNavSupport *, std::__1::default_delete<md::LabelNavSupport> > { struct LabelNavSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelNavTrafficSupport, std::__1::default_delete<md::LabelNavTrafficSupport> > { struct __compressed_pair<md::LabelNavTrafficSupport *, std::__1::default_delete<md::LabelNavTrafficSupport> > { struct LabelNavTrafficSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelImageLoader, std::__1::default_delete<md::LabelImageLoader> > { struct __compressed_pair<md::LabelImageLoader *, std::__1::default_delete<md::LabelImageLoader> > { struct LabelImageLoader {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelTextDataLoader, std::__1::default_delete<md::LabelTextDataLoader> > { struct __compressed_pair<md::LabelTextDataLoader *, std::__1::default_delete<md::LabelTextDataLoader> > { struct LabelTextDataLoader {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelGlyphImageLoader, std::__1::default_delete<md::LabelGlyphImageLoader> > { struct __compressed_pair<md::LabelGlyphImageLoader *, std::__1::default_delete<md::LabelGlyphImageLoader> > { struct LabelGlyphImageLoader {} *x_1_1_1; } x1; }, struct vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x1; struct shared_ptr<md::LabelMapTile> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x_3_1_1; } x3; }, struct set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct unique_ptr<md::LabelFeaturePool, std::__1::default_delete<md::LabelFeaturePool> > { struct __compressed_pair<md::LabelFeaturePool *, std::__1::default_delete<md::LabelFeaturePool> > { struct LabelFeaturePool {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelFeatureStyler, std::__1::default_delete<md::LabelFeatureStyler> > { struct __compressed_pair<md::LabelFeatureStyler *, std::__1::default_delete<md::LabelFeatureStyler> > { struct LabelFeatureStyler {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelPool, std::__1::default_delete<md::LabelPool> > { struct __compressed_pair<md::LabelPool *, std::__1::default_delete<md::LabelPool> > { struct LabelPool {} *x_1_1_1; } x1; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<md::Label *, std::__1::allocator<md::Label *> > { struct Label {} **x1; struct Label {} **x2; struct __compressed_pair<md::Label **, std::__1::allocator<md::Label *> > { struct Label {} **x_3_1_1; } x3; }, struct unique_ptr<md::FontAtlas, std::__1::default_delete<md::FontAtlas> > { struct __compressed_pair<md::FontAtlas *, std::__1::default_delete<md::FontAtlas> > { struct FontAtlas {} *x_1_1_1; } x1; }, struct { struct unique_ptr<md::FontGlyphCache, std::__1::default_delete<md::FontGlyphCache> > { struct __compressed_pair<md::FontGlyphCache *, std::__1::default_delete<md::FontGlyphCache> > { struct FontGlyphCache {} *x_1_2_1; } x_1_1_1; } x1; }, struct unique_ptr<md::LabelMesh, std::__1::default_delete<md::LabelMesh> > { struct __compressed_pair<md::LabelMesh *, std::__1::default_delete<md::LabelMesh> > { struct LabelMesh {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelStyleCache, std::__1::default_delete<md::LabelStyleCache> > { struct __compressed_pair<md::LabelStyleCache *, std::__1::default_delete<md::LabelStyleCache> > { struct LabelStyleCache {} *x_1_1_1; } x1; }, struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x1; struct __shared_weak_count {} *x2; }, struct unique_ptr<md::LabelCollider, std::__1::default_delete<md::LabelCollider> > { struct __compressed_pair<md::LabelCollider *, std::__1::default_delete<md::LabelCollider> > { struct LabelCollider {} *x_1_1_1; } x1; }, struct unique_ptr<md::OcclusionManager, std::__1::default_delete<md::OcclusionManager> > { struct __compressed_pair<md::OcclusionManager *, std::__1::default_delete<md::OcclusionManager> > { struct OcclusionManager {} *x_1_1_1; } x1; }, unsigned long long, unsigned long long, struct shared_ptr<md::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x1; struct __shared_weak_count {} *x2; }, struct mutex { struct _opaque_pthread_mutex_t { long long x_1_1_1; BOOL x_1_1_2[56]; } x1; }, struct vector<std::__1::shared_ptr<md::LabelManagerCommand>, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > > { struct shared_ptr<md::LabelManagerCommand> {} *x1; struct shared_ptr<md::LabelManagerCommand> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelManagerCommand> *, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > > { struct shared_ptr<md::LabelManagerCommand> {} *x_3_1_1; } x3; }, unsigned int, unsigned int, unsigned int, double, double, unsigned long long, bool, unsigned int, unsigned int, unsigned int, float, unsigned int, struct array<bool, 12> { bool x1[12]; }, float, bool, bool, struct shared_ptr<md::Label> { struct Label {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelFeature> { struct LabelFeature {} *x1; struct __shared_weak_count {} *x2; }, struct LabelIdentifier { unsigned int x1; }, bool, long long, long long, float, long long, unsigned char, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, int, int, struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }, struct SelectedLabelState { struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_1_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_1_1_2; } x1; bool x2; unsigned char x3; }, struct _retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKClientLocalizedStrings *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct { struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; bool x3; bool x4; bool x5; }, bool, float, struct vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x1; struct shared_ptr<md::NavLabel> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x_3_1_1; } x3; }, void*, bool
- (void)labelManagerDidLayout:(void *)arg1; // needs 1 arg types, found 146: struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*, struct shared_ptr<md::TaskContext> { struct TaskContext {} *x1; struct __shared_weak_count {} *x2; }, id, unsigned long long, unsigned char, long long, unsigned char, unsigned char, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct atomic<bool> { bool x1; }, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_1_1[2]; } x1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_1_1[2]; } x2; }, struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_1_1[2]; } x1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_1_1[2]; } x2; }, bool, bool, struct LabelLayoutContext {}*, struct LabelLayoutContext { bool x1; bool x2; bool x3; bool x4; bool x5; unsigned char x6; float x7; struct Matrix<double, 3, 1> { double x_8_1_1[3]; } x8; struct Matrix<double, 3, 1> { double x_9_1_1[3]; } x9; struct Matrix<double, 3, 1> { double x_10_1_1[3]; } x10; struct Matrix<double, 3, 1> { double x_11_1_1[3]; } x11; struct Matrix<double, 3, 1> { double x_12_1_1[3]; } x12; double x13; double x14; double x15; double x16; double x17; double x18; double x19; struct { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_20_1_1; struct Matrix<double, 3, 1> { double x_2_2_1[3]; } x_20_1_2; float x_20_1_3; float x_20_1_4; float x_20_1_5; } x20; float x21; float x22; float x23; float x24; struct Matrix<float, 2, 1> { float x_25_1_1[2]; } x25; struct Matrix<float, 2, 1> { float x_26_1_1[2]; } x26; struct LabelAngle { unsigned char x_27_1_1; } x27; float x28; struct Matrix<double, 4, 4> { double x_29_1_1[16]; } x29; struct Matrix<double, 4, 4> { double x_30_1_1[16]; } x30; struct Matrix<float, 2, 1> { float x_31_1_1[2]; } x31; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_32_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_32_1_2; } x32; }, struct LabelLayoutContext { bool x1; bool x2; bool x3; bool x4; bool x5; unsigned char x6; float x7; struct Matrix<double, 3, 1> { double x_8_1_1[3]; } x8; struct Matrix<double, 3, 1> { double x_9_1_1[3]; } x9; struct Matrix<double, 3, 1> { double x_10_1_1[3]; } x10; struct Matrix<double, 3, 1> { double x_11_1_1[3]; } x11; struct Matrix<double, 3, 1> { double x_12_1_1[3]; } x12; double x13; double x14; double x15; double x16; double x17; double x18; double x19; struct { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_20_1_1; struct Matrix<double, 3, 1> { double x_2_2_1[3]; } x_20_1_2; float x_20_1_3; float x_20_1_4; float x_20_1_5; } x20; float x21; float x22; float x23; float x24; struct Matrix<float, 2, 1> { float x_25_1_1[2]; } x25; struct Matrix<float, 2, 1> { float x_26_1_1[2]; } x26; struct LabelAngle { unsigned char x_27_1_1; } x27; float x28; struct Matrix<double, 4, 4> { double x_29_1_1[16]; } x29; struct Matrix<double, 4, 4> { double x_30_1_1[16]; } x30; struct Matrix<float, 2, 1> { float x_31_1_1[2]; } x31; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_32_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_32_1_2; } x32; }, struct LabelNavLayoutContext { struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_2_1[2]; } x_1_1_1; struct Matrix<double, 2, 1> { double x_2_2_1[2]; } x_1_1_2; } x1; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_2_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_2_1_2; } x2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_3_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_3_1_2; } x3; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_4_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_4_1_2; } x4; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_5_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_5_1_2; } x5; struct Matrix<double, 3, 1> { double x_6_1_1[3]; } x6; struct Matrix<float, 2, 1> { float x_7_1_1[2]; } x7; double x8; }, double, double, int, struct unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct __compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> > { struct LabelExternalObjectsModerator {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelTransitSupport, std::__1::default_delete<md::LabelTransitSupport> > { struct __compressed_pair<md::LabelTransitSupport *, std::__1::default_delete<md::LabelTransitSupport> > { struct LabelTransitSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelCustomFeatureSupport, std::__1::default_delete<md::LabelCustomFeatureSupport> > { struct __compressed_pair<md::LabelCustomFeatureSupport *, std::__1::default_delete<md::LabelCustomFeatureSupport> > { struct LabelCustomFeatureSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelNavSupport, std::__1::default_delete<md::LabelNavSupport> > { struct __compressed_pair<md::LabelNavSupport *, std::__1::default_delete<md::LabelNavSupport> > { struct LabelNavSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelNavTrafficSupport, std::__1::default_delete<md::LabelNavTrafficSupport> > { struct __compressed_pair<md::LabelNavTrafficSupport *, std::__1::default_delete<md::LabelNavTrafficSupport> > { struct LabelNavTrafficSupport {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelImageLoader, std::__1::default_delete<md::LabelImageLoader> > { struct __compressed_pair<md::LabelImageLoader *, std::__1::default_delete<md::LabelImageLoader> > { struct LabelImageLoader {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelTextDataLoader, std::__1::default_delete<md::LabelTextDataLoader> > { struct __compressed_pair<md::LabelTextDataLoader *, std::__1::default_delete<md::LabelTextDataLoader> > { struct LabelTextDataLoader {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelGlyphImageLoader, std::__1::default_delete<md::LabelGlyphImageLoader> > { struct __compressed_pair<md::LabelGlyphImageLoader *, std::__1::default_delete<md::LabelGlyphImageLoader> > { struct LabelGlyphImageLoader {} *x_1_1_1; } x1; }, struct vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x1; struct shared_ptr<md::LabelMapTile> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x_3_1_1; } x3; }, struct set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }, struct unique_ptr<md::LabelFeaturePool, std::__1::default_delete<md::LabelFeaturePool> > { struct __compressed_pair<md::LabelFeaturePool *, std::__1::default_delete<md::LabelFeaturePool> > { struct LabelFeaturePool {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelFeatureStyler, std::__1::default_delete<md::LabelFeatureStyler> > { struct __compressed_pair<md::LabelFeatureStyler *, std::__1::default_delete<md::LabelFeatureStyler> > { struct LabelFeatureStyler {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelPool, std::__1::default_delete<md::LabelPool> > { struct __compressed_pair<md::LabelPool *, std::__1::default_delete<md::LabelPool> > { struct LabelPool {} *x_1_1_1; } x1; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x1; struct shared_ptr<md::Label> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > > { struct shared_ptr<md::Label> {} *x_3_1_1; } x3; }, struct vector<md::Label *, std::__1::allocator<md::Label *> > { struct Label {} **x1; struct Label {} **x2; struct __compressed_pair<md::Label **, std::__1::allocator<md::Label *> > { struct Label {} **x_3_1_1; } x3; }, struct unique_ptr<md::FontAtlas, std::__1::default_delete<md::FontAtlas> > { struct __compressed_pair<md::FontAtlas *, std::__1::default_delete<md::FontAtlas> > { struct FontAtlas {} *x_1_1_1; } x1; }, struct { struct unique_ptr<md::FontGlyphCache, std::__1::default_delete<md::FontGlyphCache> > { struct __compressed_pair<md::FontGlyphCache *, std::__1::default_delete<md::FontGlyphCache> > { struct FontGlyphCache {} *x_1_2_1; } x_1_1_1; } x1; }, struct unique_ptr<md::LabelMesh, std::__1::default_delete<md::LabelMesh> > { struct __compressed_pair<md::LabelMesh *, std::__1::default_delete<md::LabelMesh> > { struct LabelMesh {} *x_1_1_1; } x1; }, struct unique_ptr<md::LabelStyleCache, std::__1::default_delete<md::LabelStyleCache> > { struct __compressed_pair<md::LabelStyleCache *, std::__1::default_delete<md::LabelStyleCache> > { struct LabelStyleCache {} *x_1_1_1; } x1; }, struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x1; struct __shared_weak_count {} *x2; }, struct unique_ptr<md::LabelCollider, std::__1::default_delete<md::LabelCollider> > { struct __compressed_pair<md::LabelCollider *, std::__1::default_delete<md::LabelCollider> > { struct LabelCollider {} *x_1_1_1; } x1; }, struct unique_ptr<md::OcclusionManager, std::__1::default_delete<md::OcclusionManager> > { struct __compressed_pair<md::OcclusionManager *, std::__1::default_delete<md::OcclusionManager> > { struct OcclusionManager {} *x_1_1_1; } x1; }, unsigned long long, unsigned long long, struct shared_ptr<md::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x1; struct __shared_weak_count {} *x2; }, struct mutex { struct _opaque_pthread_mutex_t { long long x_1_1_1; BOOL x_1_1_2[56]; } x1; }, struct vector<std::__1::shared_ptr<md::LabelManagerCommand>, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > > { struct shared_ptr<md::LabelManagerCommand> {} *x1; struct shared_ptr<md::LabelManagerCommand> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelManagerCommand> *, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > > { struct shared_ptr<md::LabelManagerCommand> {} *x_3_1_1; } x3; }, unsigned int, unsigned int, unsigned int, double, double, unsigned long long, bool, unsigned int, unsigned int, unsigned int, float, unsigned int, struct array<bool, 12> { bool x1[12]; }, float, bool, bool, struct shared_ptr<md::Label> { struct Label {} *x1; struct __shared_weak_count {} *x2; }, struct shared_ptr<md::LabelFeature> { struct LabelFeature {} *x1; struct __shared_weak_count {} *x2; }, struct LabelIdentifier { unsigned int x1; }, bool, long long, long long, float, long long, unsigned char, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, struct atomic<bool> { bool x1; }, int, int, struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }, struct SelectedLabelState { struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_1_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_1_1_2; } x1; bool x2; unsigned char x3; }, struct _retain_ptr<VKLabelManagerCollisionTimer *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct _retain_ptr<VKClientLocalizedStrings *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x1)(); id x2; void*x3; const void*x4; void*x5; void*x6; int x7; in void*x8; out unsigned int x9/* : ? */; void*x10; BOOL x11; void*x12; }, struct _release_objc { }, void*, struct { struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; bool x3; bool x4; bool x5; }, bool, float, struct vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x1; struct shared_ptr<md::NavLabel> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > > { struct shared_ptr<md::NavLabel> {} *x_3_1_1; } x3; }, void*

@end
