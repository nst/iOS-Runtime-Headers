/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSKAccessController : NSObject {
    NSCondition * _cond;
    TSUWeakReference * _delegate;
    struct __CFRunLoopSource { } * _mainThreadPingSource;
    /* Warning: unhandled struct encoding: '{?="useCount"I"ticket"@}' */ struct { 
        unsigned int useCount; 
        id ticket; 
    }  _mainThreadTicketInfo;
    unsigned long long  _mainThreadWriteCount;
    unsigned int  _outstandingTicketCount;
    NSObject<OS_dispatch_semaphore> * _outstandingTicketReadLock;
    NSMutableArray * _pendingMainThreadInvocations;
    unsigned int  _readerCount;
    /* Warning: unhandled struct encoding: '{?="threadId"^{_opaque_pthread_t}"count"I"ticketInfo"{?="useCount"I"ticket"@}}]' */ struct { 
        struct _opaque_pthread_t {} *threadId; 
        unsigned int count; 
        struct { 
            unsigned int useCount; 
            id ticket; 
        } ticketInfo; 
    }  _readerInfo;
    struct _opaque_pthread_rwlock_t { 
        long long __sig; 
        BOOL __opaque[192]; 
    }  _rwLock;
    bool  _secondaryThreadWriting;
    NSMutableDictionary * _signalIdentifiers;
    bool  _thenReadingOnMainThread;
    NSMutableDictionary * _waitIdentifiers;
    unsigned long long  _writeBlockedMainThreadCount;
    bool  _writeLockHeld;
    NSMutableArray * _writerQueue;
}

- (bool)currentThreadHasWriteLock;
- (void)dealloc;
- (bool)hasRead;
- (bool)hasWrite;
- (void)i_finishReadForTicket:(id)arg1;
- (void)i_startReadForTicket:(id)arg1;
- (id)init;
- (id)initWithDelegate:(id)arg1;
- (void)p_asyncPerformSelectorOnMainThread:(SEL)arg1 withTarget:(id)arg2 argument:(void*)arg3;
- (void)p_blockMainThread;
- (void)p_blockMainThreadForWrite;
- (void)p_dequeueWrite;
- (void)p_didAcquireReadLock;
- (void)p_didAcquireWriteLock;
- (void)p_enqueueWriteAndBlock;
- (void)p_finishReadForTicketInfo:(/* Warning: unhandled struct encoding: '{?=I@}' */ struct { unsigned int x1; id x2; }*)arg1;
- (void)p_flushPendingMainThreadBlocksQueueAcquiringLock:(bool)arg1;
- (bool)p_hasRead;
- (bool)p_hasWrite;
- (bool)p_isMainThread;
- (void)p_performRead:(SEL)arg1 eagerlyBlockingMainThread:(bool)arg2 thenWrite:(SEL)arg3 thenReadOnMainThread:(SEL)arg4 withTarget:(id)arg5 argument:(void*)arg6 passReadResultToMainThreadRead:(bool)arg7;
- (void)p_performReadOnMainThread:(id)arg1;
- (void)p_readLock;
- (void)p_readLockTakingRealLock:(bool)arg1;
- (void)p_readUnlock;
- (void)p_readUnlockReleasingRealLock:(bool)arg1;
- (void)p_scheduleMainThreadRead:(id)arg1;
- (void)p_signalMainThreadWriteComplete;
- (void)p_signalThread:(id)arg1;
- (id)p_threadIdentifier;
- (/* Warning: unhandled struct encoding: '{?=I@}' */ struct { unsigned int x1; id x2; }*)p_ticketInfoForCurrentThread;
- (/* Warning: unhandled struct encoding: '{?=I@}' */ struct { unsigned int x1; id x2; }*)p_ticketInfoForTicket:(id)arg1;
- (void)p_unblockMainThread;
- (bool)p_waitWithCondition:(id)arg1 untilDate:(id)arg2;
- (void)p_willAcquireReadLock;
- (void)p_willAcquireWriteLock;
- (void)p_willRelinquishReadLock;
- (void)p_willRelinquishWriteLock;
- (void)p_writeLockAndBlockMainThread:(bool)arg1;
- (void)p_writeUnlock;
- (void)performRead:(id)arg1;
- (void)performRead:(SEL)arg1 thenReadOnMainThread:(SEL)arg2 withTarget:(id)arg3 argument:(void*)arg4;
- (void)performRead:(SEL)arg1 thenWrite:(SEL)arg2 thenReadOnMainThread:(SEL)arg3 withTarget:(id)arg4 argument:(void*)arg5;
- (void)performRead:(SEL)arg1 thenWrite:(SEL)arg2 thenReadOnMainThread:(SEL)arg3 withTarget:(id)arg4 argument:(void*)arg5 passReadResultToMainThreadRead:(bool)arg6;
- (void)performRead:(SEL)arg1 withTarget:(id)arg2 argument:(void*)arg3;
- (void)performRead:(SEL)arg1 withTarget:(id)arg2 argument:(void*)arg3 argument2:(void*)arg4;
- (void)performReadAllowingOverlappingImplicitRead:(SEL)arg1 thenWrite:(SEL)arg2 thenReadOnMainThread:(SEL)arg3 withTarget:(id)arg4 argument:(void*)arg5 passReadResultToMainThreadRead:(bool)arg6;
- (void)performReadGrantingTicket:(id)arg1;
- (void)performReadWithTicket:(id)arg1 block:(id)arg2;
- (void)performWrite:(id)arg1;
- (void)performWrite:(id)arg1 blockMainThread:(bool)arg2;
- (void)performWrite:(SEL)arg1 withTarget:(id)arg2 argument:(void*)arg3;
- (void)signalIdentifier:(id)arg1;
- (void)spinMainThreadRunLoopUntil:(SEL)arg1 onTarget:(id)arg2;
- (void)waitOnIdentifier:(id)arg1;
- (bool)waitOnIdentifier:(id)arg1 untilDate:(id)arg2 releaseReadWhileWaiting:(bool)arg3;

@end
