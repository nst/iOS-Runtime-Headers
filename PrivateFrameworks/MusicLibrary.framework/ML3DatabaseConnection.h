/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

@interface ML3DatabaseConnection : NSObject {
    bool  _alreadyAttemptedCorruptionRecovery;
    bool  _automaticCheckpointingEnabled;
    unsigned long long  _checkpointStatementThreshold;
    <ML3DatabaseConnectionDelegate> * _connectionDelegate;
    NSUUID * _currentTransactionID;
    NSString * _databasePath;
    NSMutableArray * _enqueuedTransactionCommitBlocks;
    const void * _iTunesExtensions;
    bool  _isHandlingIOError;
    bool  _isOpen;
    bool  _isReadOnly;
    unsigned long long  _journalingMode;
    NSString * _lastTracedStatement;
    bool  _logQueryPlans;
    bool  _nestedTransactionWantsToRollback;
    ML3DatabaseConnectionPool * _owningPool;
    int  _profilingLevel;
    unsigned long long  _protectionLevel;
    NSMutableArray * _registeredFunctions;
    NSMutableArray * _registeredModules;
    struct sqlite3 { } * _sqlitedb;
    ML3DatabaseStatementCache * _statementCache;
    unsigned long long  _statementsSinceLastCheckpoint;
    unsigned int  _transactionLevel;
    NSUUID * _uniqueIdentifier;
    int  _willDeleteDatabaseNotifyToken;
}

@property (nonatomic) bool automaticCheckpointingEnabled;
@property (nonatomic) unsigned long long checkpointStatementThreshold;
@property (nonatomic) <ML3DatabaseConnectionDelegate> *connectionDelegate;
@property (nonatomic, readonly) NSUUID *currentTransactionID;
@property (nonatomic, readonly) NSString *databasePath;
@property (nonatomic, readonly) bool isInTransaction;
@property (nonatomic, readonly) bool isOpen;
@property (setter=setReadOnly:, nonatomic) bool isReadOnly;
@property (nonatomic) unsigned long long journalingMode;
@property (nonatomic) bool logQueryPlans;
@property (nonatomic) int profilingLevel;
@property (nonatomic) unsigned long long protectionLevel;
@property (nonatomic, readonly) bool transactionMarkedForRollBack;
@property (nonatomic, readonly) NSUUID *uniqueIdentifier;

- (void).cxx_destruct;
- (bool)_alreadyAttemptedCorruptionRecovery;
- (bool)_alterTableNamed:(id)arg1 withNewColumnDefinitions:(id)arg2 newColumnNames:(id)arg3 oldColumnNames:(id)arg4;
- (bool)_closeAndFlushTransactionState:(bool)arg1;
- (void)_createDatabaseDirectoryIfNonexistent;
- (void)_createDatabaseFileIfNonexistent;
- (bool)_databaseFileExists;
- (id)_databaseFilePaths;
- (bool)_databaseFilesAreWritable;
- (int)_distrustQueriesDuringBlock:(id /* block */)arg1;
- (void)_ensureConnectionIsOpen;
- (void)_enumerateTableColumnNamesAndDefinitionsFromTable:(id)arg1 usingBlock:(id /* block */)arg2;
- (bool)_executeStatement:(id)arg1 withError:(id*)arg2;
- (void)_executeTransactionCommitBlocks:(bool)arg1;
- (void)_finalizeAllStatements;
- (bool)_handleBusyLockWithNumberOfRetries:(int)arg1;
- (bool)_handleConnectionErrorWhileOpening:(int)arg1;
- (void)_handleDatabaseCorruption;
- (void)_handleDatabaseProfileStatement:(const char *)arg1 executionTimeNS:(unsigned long long)arg2;
- (void)_handleDatabaseTraceStatement:(const char *)arg1;
- (bool)_handleDiskIOError;
- (bool)_handleZombieSQLiteConnection:(struct sqlite3 { }*)arg1;
- (bool)_internalBeginTransactionWithBehaviorType:(unsigned long long)arg1;
- (bool)_internalEndTransactionAndCommit:(bool)arg1;
- (id)_internalExecuteQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;
- (bool)_internalExecuteUpdate:(id)arg1 withParameters:(id)arg2 error:(id*)arg3;
- (void)_internalLogQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;
- (bool)_isSharedMediaLibraryDatabase;
- (void)_logCurrentError;
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)arg1 statement:(id)arg2;
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)arg1 statementSQL:(id)arg2;
- (void)_logDatabaseFileDebugInformation;
- (bool)_openWithFlags:(int)arg1;
- (id)_owningPool;
- (id)_prepareStatement:(id)arg1 error:(id*)arg2;
- (id)_registeredModuleNamed:(id)arg1;
- (void)_resetUnfinalizedStatements;
- (void)_setAlreadyAttemptedCorruptionRecovery:(bool)arg1;
- (void)_setOwningPool:(id)arg1;
- (void)_setTransactionLevel:(unsigned long long)arg1;
- (id)_shortDescription;
- (struct sqlite3 { }*)_sqliteHandle;
- (unsigned long long)_transactionLevel;
- (void)_updateProfilingLevel;
- (bool)_validatePreparedStatement:(id)arg1 error:(id*)arg2;
- (bool)automaticCheckpointingEnabled;
- (int)checkpointDatabase;
- (unsigned long long)checkpointStatementThreshold;
- (bool)close;
- (id)connectionDelegate;
- (id)currentTransactionID;
- (id)databasePath;
- (bool)databasePathExists;
- (void)dealloc;
- (bool)deleteDatabase;
- (id)description;
- (void)enqueueBlockForTransactionCommit:(id /* block */)arg1;
- (id)executeQuery:(id)arg1;
- (id)executeQuery:(id)arg1 withParameters:(id)arg2;
- (id)executeQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;
- (bool)executeUpdate:(id)arg1;
- (bool)executeUpdate:(id)arg1 withParameters:(id)arg2 error:(id*)arg3;
- (void)flush;
- (id)init;
- (id)initWithDatabasePath:(id)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isInTransaction;
- (bool)isOpen;
- (bool)isReadOnly;
- (unsigned long long)journalingMode;
- (long long)lastInsertionRowID;
- (bool)logQueryPlans;
- (bool)open;
- (id)openBlobInTable:(id)arg1 column:(id)arg2 row:(long long)arg3 readOnly:(bool)arg4;
- (bool)performTransactionWithBlock:(id /* block */)arg1;
- (bool)performTransactionWithBlock:(id /* block */)arg1 usingBehaviorType:(unsigned long long)arg2;
- (bool)popToRootTransactionAndCommit:(bool)arg1;
- (bool)popTransactionAndCommit:(bool)arg1;
- (int)profilingLevel;
- (unsigned long long)protectionLevel;
- (bool)pushTransaction;
- (bool)pushTransactionUsingBehaviorType:(unsigned long long)arg1;
- (bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 block:(id /* block */)arg3;
- (bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(int (*)arg3;
- (bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(int (*)arg3 userData:(void*)arg4;
- (bool)registerModule:(id)arg1;
- (bool)registerModuleName:(id)arg1 moduleMethods:(struct sqlite3_module { int x1; int (*x2)(); int (*x3)(); int (*x4)(); int (*x5)(); int (*x6)(); int (*x7)(); int (*x8)(); int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); int (*x13)(); int (*x14)(); int (*x15)(); int (*x16)(); int (*x17)(); int (*x18)(); int (*x19)(); int (*x20)(); int (*x21)(); int (*x22)(); int (*x23)(); }*)arg2;
- (bool)removeModuleNamed:(id)arg1;
- (bool)schemaAddColumnDefinition:(id)arg1 toTable:(id)arg2;
- (bool)schemaDeleteColumn:(id)arg1 inTable:(id)arg2;
- (bool)schemaDeleteColumns:(id)arg1 inTable:(id)arg2;
- (bool)schemaInsertColumnDefinition:(id)arg1 intoTable:(id)arg2 atIndex:(unsigned long long)arg3;
- (bool)schemaInsertColumnDefinitions:(id)arg1 intoTable:(id)arg2 atIndex:(unsigned long long)arg3;
- (bool)schemaRenameColumn:(id)arg1 inTable:(id)arg2 toNewColumnName:(id)arg3;
- (void)setAutomaticCheckpointingEnabled:(bool)arg1;
- (void)setCheckpointStatementThreshold:(unsigned long long)arg1;
- (void)setConnectionDelegate:(id)arg1;
- (void)setCurrentTransactionID:(id)arg1;
- (void)setJournalingMode:(unsigned long long)arg1;
- (void)setLogQueryPlans:(bool)arg1;
- (void)setProfilingLevel:(int)arg1;
- (void)setProtectionLevel:(unsigned long long)arg1;
- (void)setReadOnly:(bool)arg1;
- (id)sqliteError;
- (bool)tableExists:(id)arg1;
- (bool)transactionMarkedForRollBack;
- (id)uniqueIdentifier;

@end
