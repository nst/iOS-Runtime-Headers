/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices
 */

@interface PLPhotoEditModel : NSObject <NSCopying> {
    bool  _autoCropped;
    bool  _autoLoopEnabled;
    NSString * _autoLoopFlavor;
    NSDictionary * _autoLoopRecipe;
    NSArray * _autoRedEyeCorrections;
    NSString * _autoSmartColorIdentifier;
    double  _autoSmartColorLevel;
    NSString * _autoSmartToneIdentifier;
    double  _autoSmartToneLevel;
    NSString * _autoWhiteBalanceIdentifier;
    NSDictionary * _autoWhiteBalanceSettings;
    double  _blackPointLevelOffset;
    double  _brightnessLevelOffset;
    double  _bwGrainLevelOffset;
    double  _bwHueLevelOffset;
    double  _bwNeutralGammaLevelOffset;
    double  _bwStrengthLevelOffset;
    double  _bwToneLevelOffset;
    bool  _canRenderPortraitEffect;
    double  _colorCastLevelOffset;
    double  _colorContrastLevelOffset;
    double  _colorVibrancyLevelOffset;
    double  _contrastLevelOffset;
    long long  _cropConstraintHeight;
    long long  _cropConstraintWidth;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _cropRect;
    bool  _depthEffectEnabled;
    NSDictionary * _depthEffectSettings;
    NSString * _effectFilterName;
    long long  _effectFilterVersion;
    double  _exposureLevelOffset;
    bool  _fusionEnabled;
    NSDictionary * _fusionParameters;
    double  _highlightsLevelOffset;
    long long  _inputOrientation;
    struct CGSize { 
        double width; 
        double height; 
    }  _inputSize;
    NSArray * _legacyAutoEnhanceFilters;
    bool  _legacyAutoEnhanceIsOn;
    double  _localLightLevelOffset;
    NSNumber * _muted;
    bool  _portraitEffectEnabled;
    NSString * _portraitEffectFilterName;
    long long  _portraitEffectFilterVersion;
    NSDictionary * _portraitEffectSettings;
    NSArray * _redEyeCorrections;
    double  _shadowsLevelOffset;
    bool  _smartBWEnabled;
    double  _smartBWLevel;
    NSDictionary * _smartBWStatistics;
    bool  _smartColorEnabled;
    double  _smartColorLevel;
    NSDictionary * _smartColorStatistics;
    bool  _smartToneEnabled;
    double  _smartToneLevel;
    NSDictionary * _smartToneStatistics;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _stillPhotoTime;
    double  _straightenAngleRadiansCW;
    bool  _trimEnabled;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _trimEndTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _trimStartTime;
    long long  _userOrientation;
    bool  _whiteBalanceEnabled;
    double  _whiteBalanceFaceI;
    double  _whiteBalanceFaceQ;
    double  _whiteBalanceFaceStrength;
    double  _whiteBalanceFaceWarmth;
}

@property (getter=isAutoCropped, nonatomic, readonly) bool autoCropped;
@property (getter=isAutoLoopEnabled, nonatomic, readonly) bool autoLoopEnabled;
@property (nonatomic, readonly) NSString *autoLoopFlavor;
@property (nonatomic, readonly) NSDictionary *autoLoopRecipe;
@property (nonatomic, readonly, copy) NSArray *autoRedEyeCorrections;
@property (nonatomic, readonly, copy) NSString *autoSmartColorIdentifier;
@property (nonatomic, readonly) double autoSmartColorLevel;
@property (nonatomic, readonly, copy) NSString *autoSmartToneIdentifier;
@property (nonatomic, readonly) double autoSmartToneLevel;
@property (nonatomic, readonly, copy) NSString *autoWhiteBalanceIdentifier;
@property (nonatomic, readonly, copy) NSDictionary *autoWhiteBalanceSettings;
@property (nonatomic, readonly) double blackPointLevelOffset;
@property (nonatomic, readonly) double brightnessLevelOffset;
@property (nonatomic, readonly) double bwGrainLevelOffset;
@property (nonatomic, readonly) double bwHueLevelOffset;
@property (nonatomic, readonly) double bwNeutralGammaLevelOffset;
@property (nonatomic, readonly) double bwStrengthLevelOffset;
@property (nonatomic, readonly) double bwToneLevelOffset;
@property (getter=canRenderDepth, nonatomic, readonly) bool canRenderDepth;
@property (nonatomic, readonly) bool canRenderPortraitEffect;
@property (nonatomic, readonly) double colorCastLevelOffset;
@property (nonatomic, readonly) double colorContrastLevelOffset;
@property (nonatomic, readonly) double colorVibrancyLevelOffset;
@property (nonatomic, readonly) double contrastLevelOffset;
@property (getter=isCropConstrained, nonatomic, readonly) bool cropConstrained;
@property (nonatomic, readonly) long long cropConstraintHeight;
@property (nonatomic, readonly) long long cropConstraintWidth;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } cropRect;
@property (getter=isDepthEffectEnabled, nonatomic, readonly) bool depthEffectEnabled;
@property (nonatomic, readonly) NSDictionary *depthEffectSettings;
@property (nonatomic, readonly) NSDictionary *dictionaryRepresentation;
@property (nonatomic, readonly, copy) NSString *effectFilterName;
@property (nonatomic, readonly) long long effectFilterVersion;
@property (nonatomic, readonly) double exposureLevelOffset;
@property (getter=isFusionEnabled, nonatomic, readonly) bool fusionEnabled;
@property (nonatomic, readonly) NSDictionary *fusionParameters;
@property (nonatomic, readonly) bool hasAnyAutoEnhancement;
@property (nonatomic, readonly) bool hasIdentityCrop;
@property (nonatomic, readonly) bool hasRedEyeCorrections;
@property (nonatomic, readonly) bool hasStillPhotoTime;
@property (nonatomic, readonly) double highlightsLevelOffset;
@property (nonatomic, readonly) long long inputOrientation;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } inputSize;
@property (nonatomic, readonly, copy) NSArray *legacyAutoEnhanceFilters;
@property (nonatomic, readonly) bool legacyAutoEnhanceIsOn;
@property (nonatomic, readonly) double localLightLevelOffset;
@property (nonatomic, readonly) NSNumber *muted;
@property (getter=isPortraitEffectEnabled, nonatomic, readonly) bool portraitEffectEnabled;
@property (nonatomic, readonly) NSString *portraitEffectFilterName;
@property (nonatomic, readonly) long long portraitEffectFilterVersion;
@property (nonatomic, readonly) NSDictionary *portraitEffectSettings;
@property (nonatomic, readonly) unsigned int px_assetVariation;
@property (nonatomic, readonly, copy) NSArray *redEyeCorrections;
@property (nonatomic, readonly) double shadowsLevelOffset;
@property (getter=isSmartBWEnabled, nonatomic, readonly) bool smartBWEnabled;
@property (nonatomic, readonly) double smartBWLevel;
@property (nonatomic, readonly, copy) NSDictionary *smartBWStatistics;
@property (getter=isSmartColorEnabled, nonatomic, readonly) bool smartColorEnabled;
@property (nonatomic, readonly) double smartColorLevel;
@property (nonatomic, readonly, copy) NSDictionary *smartColorStatistics;
@property (getter=isSmartToneEnabled, nonatomic, readonly) bool smartToneEnabled;
@property (nonatomic, readonly) double smartToneLevel;
@property (nonatomic, readonly, copy) NSDictionary *smartToneStatistics;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } stillPhotoTime;
@property (nonatomic, readonly) double straightenAngleRadiansCW;
@property (getter=isTrimEnabled, nonatomic, readonly) bool trimEnabled;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } trimEndTime;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } trimStartTime;
@property (nonatomic, readonly) long long userOrientation;
@property (getter=isWhiteBalanceEnabled, nonatomic, readonly) bool whiteBalanceEnabled;
@property (nonatomic, readonly) double whiteBalanceFaceI;
@property (nonatomic, readonly) double whiteBalanceFaceQ;
@property (nonatomic, readonly) double whiteBalanceFaceStrength;
@property (nonatomic, readonly) double whiteBalanceFaceWarmth;

// Image: /System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices

+ (void)_loadReferenceLevelsFromCIFilterWithName:(id)arg1 attributeKeys:(id)arg2 intoLevelStructs:(struct { /* ? */ }**)arg3;
+ (void)_loadSubfilterReferenceLevelsIfNeeded;
+ (double)_referenceValueOfType:(long long)arg1 fromLevels:(struct { double x1; double x2; double x3; })arg2;
+ (long long)identityCropConstraint;
+ (id)identityModel;
+ (long long)identityOrientation;
+ (double)referenceBWGrainLevelOfType:(long long)arg1;
+ (double)referenceBWHueLevelOfType:(long long)arg1;
+ (double)referenceBWNeutralGammaLevelOfType:(long long)arg1;
+ (double)referenceBWStrengthLevelOfType:(long long)arg1;
+ (double)referenceBWToneLevelOfType:(long long)arg1;
+ (double)referenceBlackPointLevelOfType:(long long)arg1;
+ (double)referenceBrightnessLevelOfType:(long long)arg1;
+ (double)referenceColorCastLevelOfType:(long long)arg1;
+ (double)referenceColorContrastLevelOfType:(long long)arg1;
+ (double)referenceColorVibrancyLevelOfType:(long long)arg1;
+ (double)referenceContrastLevelOfType:(long long)arg1;
+ (double)referenceExposureLevelOfType:(long long)arg1;
+ (double)referenceHighlightsLevelOfType:(long long)arg1;
+ (double)referenceLocalLightLevelOfType:(long long)arg1;
+ (double)referenceShadowsLevelOfType:(long long)arg1;
+ (double)referenceSmartBWLevelOfType:(long long)arg1;
+ (double)referenceSmartColorLevelOfType:(long long)arg1;
+ (double)referenceSmartToneLevelOfType:(long long)arg1;
+ (double)referenceStraightenAngleOfType:(long long)arg1;
+ (double)referenceWhiteBalanceFaceILevelOfType:(long long)arg1;
+ (double)referenceWhiteBalanceFaceQLevelOfType:(long long)arg1;
+ (double)referenceWhiteBalanceFaceStrengthLevelOfType:(long long)arg1;
+ (double)referenceWhiteBalanceFaceWarmthLevelOfType:(long long)arg1;

- (void).cxx_destruct;
- (void)_copyValuesFromModel:(id)arg1 interpolationStartModel:(id)arg2 progress:(double)arg3;
- (bool)_shouldEarlyExitComparisonToModel:(id)arg1 returnValue:(bool*)arg2;
- (id)autoLoopFlavor;
- (id)autoLoopRecipe;
- (id)autoRedEyeCorrections;
- (id)autoSmartColorIdentifier;
- (double)autoSmartColorLevel;
- (id)autoSmartToneIdentifier;
- (double)autoSmartToneLevel;
- (id)autoWhiteBalanceIdentifier;
- (id)autoWhiteBalanceSettings;
- (double)blackPointLevelOffset;
- (double)brightnessLevelOffset;
- (double)bwGrainLevelOffset;
- (double)bwHueLevelOffset;
- (double)bwNeutralGammaLevelOffset;
- (double)bwStrengthLevelOffset;
- (double)bwToneLevelOffset;
- (bool)canRenderDepth;
- (bool)canRenderPortraitEffect;
- (double)colorCastLevelOffset;
- (double)colorContrastLevelOffset;
- (double)colorVibrancyLevelOffset;
- (double)contrastLevelOffset;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (long long)cropConstraintHeight;
- (long long)cropConstraintWidth;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cropRect;
- (id)depthEffectSettings;
- (id)description;
- (id)dictionaryRepresentation;
- (id)effectFilterName;
- (long long)effectFilterVersion;
- (double)exposureLevelOffset;
- (id)fusionParameters;
- (bool)hasAnyAutoEnhancement;
- (bool)hasIdentityCrop;
- (bool)hasRedEyeCorrections;
- (bool)hasStillPhotoTime;
- (double)highlightsLevelOffset;
- (id)init;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })inputImageExtent;
- (long long)inputOrientation;
- (struct CGSize { double x1; double x2; })inputSize;
- (bool)isAutoCropped;
- (bool)isAutoLoopEnabled;
- (bool)isCropConstrained;
- (bool)isCropConstraintEqualToPhotoEditModel:(id)arg1;
- (bool)isDepthEffectEnabled;
- (bool)isDepthEffectEqualToPhotoEditModel:(id)arg1;
- (bool)isDictionary:(id)arg1 equalToOtherDictionary:(id)arg2;
- (bool)isEffectFilterEqualToPhotoEditModel:(id)arg1;
- (bool)isEqualToPhotoEditModel:(id)arg1;
- (bool)isFilterName:(id)arg1 equalToOtherFilterName:(id)arg2;
- (bool)isFusionEnabled;
- (bool)isGeometryEqualToPhotoEditModel:(id)arg1;
- (bool)isGeometryIdentity;
- (bool)isIdentityModel;
- (bool)isPortraitEffectEnabled;
- (bool)isPortraitEffectEqualToPhotoEditModel:(id)arg1;
- (bool)isRedEyeCorrectionEqualToPhotoEditModel:(id)arg1;
- (bool)isSmartBWEnabled;
- (bool)isSmartBWPrecisionEqualToPhotoEditModel:(id)arg1;
- (bool)isSmartColorEnabled;
- (bool)isSmartColorPrecisionEqualToPhotoEditModel:(id)arg1;
- (bool)isSmartToneEnabled;
- (bool)isSmartTonePrecisionEqualToPhotoEditModel:(id)arg1;
- (bool)isTrimEnabled;
- (bool)isTrimEqualToPhotoEditModel:(id)arg1;
- (bool)isVisuallyEqualToPhotoEditModel:(id)arg1;
- (bool)isVisuallyEqualToPhotoEditModel:(id)arg1 excludingTimesAndMute:(bool)arg2;
- (bool)isVisuallyEqualToPhotoEditModelExcludingVariations:(id)arg1;
- (bool)isWhiteBalanceEnabled;
- (id)legacyAutoEnhanceFilters;
- (bool)legacyAutoEnhanceIsOn;
- (double)localLightLevelOffset;
- (id)loggableDictionaryRepresentation;
- (id)mutableCopy;
- (id)muted;
- (id)pl_aggregateKeysForPreviousPhotoEditModel:(id)arg1;
- (id)pl_aggregateNameForEffectFilter;
- (id)portraitEffectFilterName;
- (long long)portraitEffectFilterVersion;
- (id)portraitEffectSettings;
- (id)redEyeCorrections;
- (double)shadowsLevelOffset;
- (double)smartBWLevel;
- (id)smartBWStatistics;
- (double)smartColorLevel;
- (id)smartColorStatistics;
- (double)smartToneLevel;
- (id)smartToneStatistics;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })stillPhotoTime;
- (double)straightenAngleRadiansCW;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })trimEndTime;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })trimStartTime;
- (long long)userOrientation;
- (double)whiteBalanceFaceI;
- (double)whiteBalanceFaceQ;
- (double)whiteBalanceFaceStrength;
- (double)whiteBalanceFaceWarmth;

// Image: /System/Library/PrivateFrameworks/PhotosEditUI.framework/PhotosEditUI

- (bool)_pu_hasLegacyIrisConflicts;

// Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore

- (unsigned int)px_assetVariation;
- (id)px_clearedDepthCopy;
- (id)px_clearedDepthCopyIncludingGeometry:(bool)arg1;
- (bool)px_hasDepthEdits;
- (bool)px_isAdjustedBeyondDepthAndStatistics;
- (id)px_photoEditModelByApplyingAssetVariation:(unsigned int)arg1 withRecipe:(id)arg2;

@end
