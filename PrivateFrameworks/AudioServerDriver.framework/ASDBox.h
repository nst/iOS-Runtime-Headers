/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AudioServerDriver.framework/AudioServerDriver
 */

@interface ASDBox : ASDObject {
    NSObject<OS_dispatch_queue> * _acquireQueue;
    bool  _acquireable;
    bool  _acquired;
    int  _acquisitionFailure;
    NSString * _boxName;
    NSString * _boxUID;
    bool  _canChangeBoxName;
    bool  _canSetIdentify;
    NSObject<OS_dispatch_queue> * _deviceQueue;
    NSMutableArray * _devices;
    NSString * _firmwareVersion;
    bool  _hasAudio;
    bool  _hasMIDI;
    bool  _hasVideo;
    bool  _identify;
    NSString * _manufacturerName;
    NSString * _modelName;
    NSString * _modelUID;
    bool  _requiresAuthentication;
    NSString * _serialNumber;
    bool  _supportsIdentify;
}

@property (nonatomic, readonly, retain) NSObject<OS_dispatch_queue> *acquireQueue;
@property (getter=isAcquireable, nonatomic) bool acquireable;
@property (nonatomic) bool acquired;
@property (nonatomic) int acquisitionFailure;
@property (nonatomic, retain) NSString *boxName;
@property (nonatomic, retain) NSString *boxUID;
@property (nonatomic) bool canChangeBoxName;
@property (nonatomic) bool canSetIdentify;
@property (nonatomic, readonly, retain) NSArray *devices;
@property (nonatomic, retain) NSString *firmwareVersion;
@property (nonatomic) bool hasAudio;
@property (nonatomic) bool hasMIDI;
@property (nonatomic) bool hasVideo;
@property (nonatomic) bool identify;
@property (nonatomic, retain) NSString *manufacturerName;
@property (nonatomic, retain) NSString *modelName;
@property (nonatomic, retain) NSString *modelUID;
@property (nonatomic) bool requiresAuthentication;
@property (nonatomic, retain) NSString *serialNumber;
@property (nonatomic) bool supportsIdentify;
@property (nonatomic, readonly) unsigned int transportType;

- (void).cxx_destruct;
- (void)acquireBox:(bool)arg1 fromHAL:(bool)arg2;
- (id)acquireQueue;
- (bool)acquired;
- (int)acquisitionFailure;
- (void)addDevice:(id)arg1;
- (void)addDevicesToPlugin;
- (id)boxName;
- (id)boxUID;
- (bool)canChangeBoxName;
- (bool)canSetIdentify;
- (void)changeBoxName:(id)arg1;
- (unsigned int)dataSizeForProperty:(const struct AudioObjectPropertyAddress { unsigned int x1; unsigned int x2; unsigned int x3; }*)arg1 withQualifierSize:(unsigned int)arg2 andQualifierData:(const void*)arg3;
- (id)devices;
- (id)firmwareVersion;
- (bool)getProperty:(const struct AudioObjectPropertyAddress { unsigned int x1; unsigned int x2; unsigned int x3; }*)arg1 withQualifierSize:(unsigned int)arg2 qualifierData:(const void*)arg3 dataSize:(unsigned int*)arg4 andData:(const void*)arg5 forClient:(int)arg6;
- (bool)hasAudio;
- (bool)hasMIDI;
- (bool)hasProperty:(const struct AudioObjectPropertyAddress { unsigned int x1; unsigned int x2; unsigned int x3; }*)arg1;
- (bool)hasVideo;
- (bool)identify;
- (void)identifyBox:(bool)arg1;
- (id)initWithBoxUID:(id)arg1 withPlugin:(id)arg2;
- (id)initWithPlugin:(id)arg1;
- (bool)isAcquireable;
- (bool)isPropertySettable:(const struct AudioObjectPropertyAddress { unsigned int x1; unsigned int x2; unsigned int x3; }*)arg1;
- (id)manufacturerName;
- (id)modelName;
- (id)modelUID;
- (unsigned int)objectClass;
- (void)removeAllDevices;
- (void)removeDevice:(id)arg1;
- (void)removeDevicesFromPlugin;
- (bool)requiresAuthentication;
- (id)serialNumber;
- (void)setAcquireable:(bool)arg1;
- (void)setAcquired:(bool)arg1;
- (void)setAcquisitionFailure:(int)arg1;
- (void)setBoxName:(id)arg1;
- (void)setBoxUID:(id)arg1;
- (void)setCanChangeBoxName:(bool)arg1;
- (void)setCanSetIdentify:(bool)arg1;
- (void)setFirmwareVersion:(id)arg1;
- (void)setHasAudio:(bool)arg1;
- (void)setHasMIDI:(bool)arg1;
- (void)setHasVideo:(bool)arg1;
- (void)setIdentify:(bool)arg1;
- (void)setManufacturerName:(id)arg1;
- (void)setModelName:(id)arg1;
- (void)setModelUID:(id)arg1;
- (bool)setProperty:(const struct AudioObjectPropertyAddress { unsigned int x1; unsigned int x2; unsigned int x3; }*)arg1 withQualifierSize:(unsigned int)arg2 qualifierData:(const void*)arg3 dataSize:(unsigned int)arg4 andData:(const void*)arg5 forClient:(int)arg6;
- (void)setRequiresAuthentication:(bool)arg1;
- (void)setSerialNumber:(id)arg1;
- (void)setSupportsIdentify:(bool)arg1;
- (bool)supportsIdentify;
- (unsigned int)transportType;

@end
