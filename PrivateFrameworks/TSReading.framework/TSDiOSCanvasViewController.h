/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TSReading.framework/TSReading
 */

@interface TSDiOSCanvasViewController : UIViewController <TSDCanvasLayerHosting, TSDCanvasZoomTrackerDelegate, UIGestureRecognizerDelegate> {
    bool  _isRotating;
    TSDAllTouchesDoneGestureRecognizer * mAllTouchesDoneGestureRecognizer;
    TSDCanvasZoomTracker * mCanvasZoomTracker;
    bool  mContextMenuMightBeDisplayed;
    bool  mCurrentlyScrolling;
    <TSDiOSCanvasViewControllerDelegate> * mDelegate;
    UITapGestureRecognizer * mDoubleTapGestureRecognizer;
    TSDEditMenuTapGestureRecognizer * mEditMenuTapGestureRecognizer;
    TSDGuidedPanController * mGuidedPanController;
    UIPanGestureRecognizer * mGuidedPanGestureRecognizer;
    bool  mHasBeenTornDown;
    TSDInteractiveCanvasController * mICC;
    NSMutableArray * mInspectorGestureRecognizersToReenable;
    bool  mInspectorModeEnabled;
    id /* block */  mInspectorSingleTapBlock;
    bool  mIsPopoverGestureInFlight;
    TSDKnobDragGestureRecognizer * mKnobDragGestureRecognizer;
    struct CGPoint { 
        double x; 
        double y; 
    }  mLastZoomHUDLocation;
    TSDMultiSelectGestureRecognizer * mMultiSelectGestureRecognizer;
    TSDNudgeGestureRecognizer * mNudgeGestureRecognizer;
    TSDPreventScrollGestureRecognizer * mPreventScrollGestureRecognizer;
    TSDRepDragGestureRecognizer * mRepDragGestureRecognizer;
    TSDRepRotateGestureRecognizer * mRepRotateGestureRecognizer;
    bool  mRotating;
    UITapGestureRecognizer * mSingleTapGestureRecognizer;
    TSDCanvasSubviewsController * mSubviewsController;
    TSDCanvasZoomPinchGestureRecognizer * mZoomGestureRecognizer;
}

@property (nonatomic, retain) TSDAllTouchesDoneGestureRecognizer *allTouchesDoneGestureRecognizer;
@property (nonatomic, readonly) TSDCanvasLayer *canvasLayer;
@property (nonatomic, readonly) TSDCanvasView *canvasView;
@property (nonatomic, readonly) struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; } centerPlusMovementContentPlacement;
@property (nonatomic, readonly) CALayer *clippingLayer;
@property (nonatomic, readonly) NSArray *commonGestureRecognizers;
@property (nonatomic, readonly, retain) CALayer *containerLayer;
@property (nonatomic, readonly, retain) UIView *containerView;
@property (nonatomic, readonly, retain) UIViewController *containerViewController;
@property (nonatomic) bool contextMenuMightBeDisplayed;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <TSDiOSCanvasViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UITapGestureRecognizer *doubleTapGestureRecognizer;
@property (nonatomic, retain) TSDEditMenuTapGestureRecognizer *editMenuTapGestureRecognizer;
@property (nonatomic, readonly, retain) UIPanGestureRecognizer *guidedPanGestureRecognizer;
@property (readonly) unsigned long long hash;
@property (nonatomic) TSDInteractiveCanvasController *interactiveCanvasController;
@property (nonatomic, readonly) bool isDraggingViaGuidedPan;
@property (nonatomic, readonly) bool isPopoverGestureInFlight;
@property (nonatomic, readonly) bool isRotating;
@property (nonatomic, retain) TSDKnobDragGestureRecognizer *knobDragGestureRecognizer;
@property (nonatomic, readonly) CALayer *layer;
@property (nonatomic, retain) TSDMultiSelectGestureRecognizer *multiSelectGestureRecognizer;
@property (nonatomic, retain) TSDNudgeGestureRecognizer *nudgeGestureRecognizer;
@property (nonatomic, readonly) NSSet *panGestureRecognizers;
@property (nonatomic, readonly, retain) TSDPreventScrollGestureRecognizer *preventScrollGestureRecognizer;
@property (nonatomic, retain) TSDRepDragGestureRecognizer *repDragGestureRecognizer;
@property (nonatomic, retain) TSDRepRotateGestureRecognizer *repRotateGestureRecognizer;
@property (nonatomic, retain) UITapGestureRecognizer *singleTapGestureRecognizer;
@property (nonatomic, readonly, retain) TSDCanvasSubviewsController *subviewsController;
@property (readonly) Class superclass;
@property (nonatomic, readonly, retain) CALayer *topLevelTilingLayer;
@property (nonatomic, readonly) struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; } touchContentPlacement;
@property (nonatomic, retain) UIPinchGestureRecognizer *zoomGestureRecognizer;

- (void)addInspectorPanZoomModeGRsToArray:(id)arg1;
- (id)allTouchesDoneGestureRecognizer;
- (bool)allowTouchOutsideCanvasView:(id)arg1 forGesture:(id)arg2;
- (id)asiOSCVC;
- (Class)audioInspectorPaneClass;
- (bool)becomeFirstResponder;
- (void)beginInspectorPanZoomModeWithSingleTapBlock:(id /* block */)arg1;
- (void)beginModalOperationWithLocalizedMessage:(id)arg1 progress:(id)arg2 cancelHandler:(id /* block */)arg3;
- (bool)canBecomeFirstResponder;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (void)canvasDidUpdateRepsFromLayouts;
- (id)canvasLayer;
- (id)canvasView;
- (void)canvasZoomTracker:(id)arg1 willBeginViewScaleFeedbackWithFastPinch:(bool)arg2;
- (void)canvasZoomTracker:(id)arg1 willUpdateViewScaleFeedbackWithScale:(double)arg2;
- (void)canvasZoomTrackerDidEndFinalZoomAnimation:(id)arg1;
- (void)canvasZoomTrackerDidEndViewScaleFeedback:(id)arg1;
- (void)canvasZoomTrackerDidFinish:(id)arg1;
- (void)canvasZoomTrackerWillBeginFinalZoomAnimation:(id)arg1;
- (struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; })centerPlusMovementContentPlacement;
- (id)clippingLayer;
- (id)commonGestureRecognizers;
- (id)containerLayer;
- (id)containerView;
- (id)containerViewController;
- (bool)contextMenuMightBeDisplayed;
- (void)cut:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (id)doubleTapGestureRecognizer;
- (id)editMenuTapGestureRecognizer;
- (void)endInspectorPanZoomMode;
- (void)endModalOperation;
- (id)extraMenuItems;
- (void)forceStopScrolling;
- (void)forwardInvocation:(id)arg1;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)guidedPanGestureRecognizer;
- (void)handleDoubleTap:(id)arg1;
- (bool)handleDoubleTapAtPoint:(struct CGPoint { double x1; double x2; })arg1 withRecognizer:(id)arg2;
- (bool)handleSingleTapAtPoint:(struct CGPoint { double x1; double x2; })arg1 withRecognizer:(id)arg2;
- (void)hideEditMenu;
- (void)hideMoviePlaybackHUD;
- (id)hitKnobWithTouch:(id)arg1 returningRep:(id*)arg2;
- (id)hitRepWithTouch:(id)arg1;
- (void)i_updateZoomGestureRecognizer;
- (id)interactiveCanvasController;
- (bool)isDraggingViaGuidedPan;
- (bool)isInFocusedContainer;
- (bool)isPopoverGestureInFlight;
- (bool)isRotating;
- (id)itemsToAddToEditMenuForRep:(id)arg1;
- (id)knobDragGestureRecognizer;
- (id)layer;
- (void)loadView;
- (id)methodSignatureForSelector:(SEL)arg1;
- (Class)movieInspectorPaneClass;
- (id)multiSelectGestureRecognizer;
- (id)newAudioPlaybackHUDWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 audioRep:(id)arg2 delegate:(id)arg3;
- (id)newMoviePlaybackHUDWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 playerController:(id)arg2 movieRep:(id)arg3;
- (id)nudgeGestureRecognizer;
- (void)p_allTouchesDone:(id)arg1;
- (void)p_buildMenuItems:(id)arg1 forSelection:(id)arg2;
- (void)p_didPresentErrorWithRecovery:(bool)arg1 completionHandler:(void*)arg2;
- (void)p_editMenuDidHide:(id)arg1;
- (void)p_guidedPanWithGesture:(id)arg1;
- (void)p_handleSingleTapGesture:(id)arg1;
- (void)p_handleTapForEditMenu:(id)arg1;
- (bool)p_shouldUseWideGamut;
- (void)p_updateWideGamut;
- (id)p_willPresentError:(id)arg1;
- (void)p_zoomWithGesture:(id)arg1;
- (id)panGestureRecognizers;
- (void)presentError:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)presentErrors:(id)arg1 withLocalizedDescription:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)presentMovieCompatibilityAlertForUnplayableMoviePasteboardDrawableProviders:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)presentMovieCompatibilityAlertForUnplayableMovieURLs:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)preventScrollGestureRecognizer;
- (id)repDragGestureRecognizer;
- (bool)repDragGestureRecognizer:(id)arg1 shouldBeginTapHoldTrackingAtScaledPoint:(struct CGPoint { double x1; double x2; })arg2;
- (id)repRotateGestureRecognizer;
- (void)resetGesturesForContextSwitch;
- (bool)respondsToSelector:(SEL)arg1;
- (void)setAllTouchesDoneGestureRecognizer:(id)arg1;
- (void)setContextMenuMightBeDisplayed:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDoubleTapGestureRecognizer:(id)arg1;
- (void)setEditMenuTapGestureRecognizer:(id)arg1;
- (void)setInteractiveCanvasController:(id)arg1;
- (void)setKnobDragGestureRecognizer:(id)arg1;
- (void)setMultiSelectGestureRecognizer:(id)arg1;
- (void)setNudgeGestureRecognizer:(id)arg1;
- (void)setRepDragGestureRecognizer:(id)arg1;
- (void)setRepRotateGestureRecognizer:(id)arg1;
- (void)setSingleTapGestureRecognizer:(id)arg1;
- (void)setUpGestureRecognizers;
- (void)setZoomGestureRecognizer:(id)arg1;
- (bool)shouldIgnoreTextGestures;
- (bool)shouldSelectAndShowEditMenuOnFirstTapForRep:(id)arg1;
- (void)showEditMenu:(id)arg1;
- (void)showEditMenuForSelection:(id)arg1;
- (void)showMoviePlaybackHUD:(id)arg1 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)singleTapGestureRecognizer;
- (void)stopScrolling;
- (id)subviewsController;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })targetRectForEditMenu:(id)arg1;
- (void)teardown;
- (void)toggleEditMenuForCurrentSelection;
- (id)topLevelReps;
- (id)topLevelTilingLayer;
- (struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; })touchContentPlacement;
- (void)unlock:(id)arg1;
- (id)viewController;
- (void)viewDidLoad;
- (id)viewForGestureRecognizer:(id)arg1;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (id)zoomGestureRecognizer;

@end
