/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

@interface GEOLocation : PBCodable <NSCopying> {
    int  _altitude;
    double  _course;
    double  _courseAccuracy;
    int  _formOfWay;
    struct { 
        unsigned int course : 1; 
        unsigned int courseAccuracy : 1; 
        unsigned int heading : 1; 
        unsigned int horizontalAccuracy : 1; 
        unsigned int rawCourse : 1; 
        unsigned int speed : 1; 
        unsigned int speedAccuracy : 1; 
        unsigned int timestamp : 1; 
        unsigned int transitID : 1; 
        unsigned int verticalAccuracy : 1; 
        unsigned int altitude : 1; 
        unsigned int formOfWay : 1; 
        unsigned int levelOrdinal : 1; 
        unsigned int matchQuality : 1; 
        unsigned int referenceFrame : 1; 
        unsigned int roadClass : 1; 
        unsigned int transportType : 1; 
        unsigned int type : 1; 
        unsigned int isMatchedLocation : 1; 
        unsigned int isShifted : 1; 
    }  _has;
    double  _heading;
    double  _horizontalAccuracy;
    bool  _isMatchedLocation;
    bool  _isShifted;
    GEOLatLng * _latLng;
    int  _levelOrdinal;
    int  _matchQuality;
    GEOLatLng * _rawCoordinate;
    double  _rawCourse;
    int  _referenceFrame;
    int  _roadClass;
    double  _speed;
    double  _speedAccuracy;
    double  _timestamp;
    unsigned long long  _transitID;
    int  _transportType;
    int  _type;
    PBUnknownFields * _unknownFields;
    double  _verticalAccuracy;
}

@property (nonatomic) int altitude;
@property (nonatomic, readonly) struct { double x1; double x2; } coordinate;
@property (nonatomic) double course;
@property (nonatomic) double courseAccuracy;
@property (nonatomic) int formOfWay;
@property (nonatomic, readonly) bool hasAccurateCourse;
@property (nonatomic) bool hasAltitude;
@property (nonatomic) bool hasCourse;
@property (nonatomic) bool hasCourseAccuracy;
@property (nonatomic) bool hasFormOfWay;
@property (nonatomic) bool hasHeading;
@property (nonatomic) bool hasHorizontalAccuracy;
@property (nonatomic) bool hasIsMatchedLocation;
@property (nonatomic) bool hasIsShifted;
@property (nonatomic) bool hasLevelOrdinal;
@property (nonatomic) bool hasMatchQuality;
@property (nonatomic, readonly) bool hasRawCoordinate;
@property (nonatomic) bool hasRawCourse;
@property (nonatomic) bool hasReferenceFrame;
@property (nonatomic) bool hasRoadClass;
@property (nonatomic) bool hasSpeed;
@property (nonatomic) bool hasSpeedAccuracy;
@property (nonatomic) bool hasTimestamp;
@property (nonatomic) bool hasTransitID;
@property (nonatomic) bool hasTransportType;
@property (nonatomic) bool hasType;
@property (nonatomic) bool hasVerticalAccuracy;
@property (nonatomic) double heading;
@property (nonatomic) double horizontalAccuracy;
@property (nonatomic) bool isMatchedLocation;
@property (nonatomic) bool isShifted;
@property (nonatomic, retain) GEOLatLng *latLng;
@property (nonatomic) int levelOrdinal;
@property (nonatomic) int matchQuality;
@property (nonatomic, retain) GEOLatLng *rawCoordinate;
@property (nonatomic) double rawCourse;
@property (nonatomic) int referenceFrame;
@property (nonatomic) int roadClass;
@property (nonatomic) double speed;
@property (nonatomic) double speedAccuracy;
@property (nonatomic) double timestamp;
@property (nonatomic) unsigned long long transitID;
@property (nonatomic) int transportType;
@property (nonatomic) int type;
@property (nonatomic, readonly) PBUnknownFields *unknownFields;
@property (nonatomic) double verticalAccuracy;

// Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices

- (void).cxx_destruct;
- (int)StringAsFormOfWay:(id)arg1;
- (int)StringAsMatchQuality:(id)arg1;
- (int)StringAsReferenceFrame:(id)arg1;
- (int)StringAsRoadClass:(id)arg1;
- (int)StringAsTransportType:(id)arg1;
- (int)StringAsType:(id)arg1;
- (int)altitude;
- (struct { double x1; double x2; })coordinate;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (double)course;
- (double)courseAccuracy;
- (id)description;
- (id)dictionaryRepresentation;
- (int)formOfWay;
- (id)formOfWayAsString:(int)arg1;
- (bool)hasAccurateCourse;
- (bool)hasAltitude;
- (bool)hasCourse;
- (bool)hasCourseAccuracy;
- (bool)hasFormOfWay;
- (bool)hasHeading;
- (bool)hasHorizontalAccuracy;
- (bool)hasIsMatchedLocation;
- (bool)hasIsShifted;
- (bool)hasLevelOrdinal;
- (bool)hasMatchQuality;
- (bool)hasRawCoordinate;
- (bool)hasRawCourse;
- (bool)hasReferenceFrame;
- (bool)hasRoadClass;
- (bool)hasSpeed;
- (bool)hasSpeedAccuracy;
- (bool)hasTimestamp;
- (bool)hasTransitID;
- (bool)hasTransportType;
- (bool)hasType;
- (bool)hasVerticalAccuracy;
- (unsigned long long)hash;
- (double)heading;
- (double)horizontalAccuracy;
- (id)initWithGEOCoordinate:(struct { double x1; double x2; })arg1;
- (id)initWithGEOCoordinate:(struct { double x1; double x2; })arg1 floorOrdinal:(int)arg2;
- (id)initWithGEOCoordinate:(struct { double x1; double x2; })arg1 isUserLocation:(bool)arg2;
- (id)initWithGEOCoordinate:(struct { double x1; double x2; })arg1 isUserLocation:(bool)arg2 floorOrdinal:(int)arg3;
- (id)initWithLatitude:(double)arg1 longitude:(double)arg2;
- (id)initWithLatitude:(double)arg1 longitude:(double)arg2 floorOrdinal:(int)arg3;
- (id)initWithLatitude:(double)arg1 longitude:(double)arg2 isUserLocation:(bool)arg3 floorOrdinal:(int)arg4;
- (id)initWithLocation:(id)arg1;
- (id)initWithLocation:(id)arg1 floorOrdinal:(int)arg2;
- (id)initWithLocation:(id)arg1 isUserLocation:(bool)arg2 floorOrdinal:(int)arg3;
- (bool)isEqual:(id)arg1;
- (bool)isMatchedLocation;
- (bool)isShifted;
- (id)latLng;
- (int)levelOrdinal;
- (int)matchQuality;
- (id)matchQualityAsString:(int)arg1;
- (void)mergeFrom:(id)arg1;
- (id)rawCoordinate;
- (double)rawCourse;
- (bool)readFrom:(id)arg1;
- (int)referenceFrame;
- (id)referenceFrameAsString:(int)arg1;
- (int)roadClass;
- (id)roadClassAsString:(int)arg1;
- (void)setAltitude:(int)arg1;
- (void)setCourse:(double)arg1;
- (void)setCourseAccuracy:(double)arg1;
- (void)setFormOfWay:(int)arg1;
- (void)setHasAltitude:(bool)arg1;
- (void)setHasCourse:(bool)arg1;
- (void)setHasCourseAccuracy:(bool)arg1;
- (void)setHasFormOfWay:(bool)arg1;
- (void)setHasHeading:(bool)arg1;
- (void)setHasHorizontalAccuracy:(bool)arg1;
- (void)setHasIsMatchedLocation:(bool)arg1;
- (void)setHasIsShifted:(bool)arg1;
- (void)setHasLevelOrdinal:(bool)arg1;
- (void)setHasMatchQuality:(bool)arg1;
- (void)setHasRawCourse:(bool)arg1;
- (void)setHasReferenceFrame:(bool)arg1;
- (void)setHasRoadClass:(bool)arg1;
- (void)setHasSpeed:(bool)arg1;
- (void)setHasSpeedAccuracy:(bool)arg1;
- (void)setHasTimestamp:(bool)arg1;
- (void)setHasTransitID:(bool)arg1;
- (void)setHasTransportType:(bool)arg1;
- (void)setHasType:(bool)arg1;
- (void)setHasVerticalAccuracy:(bool)arg1;
- (void)setHeading:(double)arg1;
- (void)setHorizontalAccuracy:(double)arg1;
- (void)setIsMatchedLocation:(bool)arg1;
- (void)setIsShifted:(bool)arg1;
- (void)setLatLng:(id)arg1;
- (void)setLevelOrdinal:(int)arg1;
- (void)setMatchQuality:(int)arg1;
- (void)setRawCoordinate:(id)arg1;
- (void)setRawCourse:(double)arg1;
- (void)setReferenceFrame:(int)arg1;
- (void)setRoadClass:(int)arg1;
- (void)setSpeed:(double)arg1;
- (void)setSpeedAccuracy:(double)arg1;
- (void)setTimestamp:(double)arg1;
- (void)setTransitID:(unsigned long long)arg1;
- (void)setTransportType:(int)arg1;
- (void)setType:(int)arg1;
- (void)setVerticalAccuracy:(double)arg1;
- (double)speed;
- (double)speedAccuracy;
- (double)timestamp;
- (unsigned long long)transitID;
- (int)transportType;
- (id)transportTypeAsString:(int)arg1;
- (int)type;
- (id)typeAsString:(int)arg1;
- (id)unknownFields;
- (double)verticalAccuracy;
- (void)writeTo:(id)arg1;

// Image: /System/Library/Frameworks/CoreLocation.framework/CoreLocation

- (id)_initWithCLClientLocation:(const struct { int x1; struct { double x_2_1_1; double x_2_1_2; } x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; int x11; double x12; int x13; struct { double x_14_1_1; double x_14_1_2; } x14; double x15; int x16; unsigned int x17; int x18; int x19; }*)arg1;

// Image: /System/Library/PrivateFrameworks/Navigation.framework/Navigation

+ (id)locationWithCLLocation:(id)arg1 course:(double)arg2;

- (struct { int x1; struct { double x_2_1_1; double x_2_1_2; } x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; int x11; double x12; int x13; struct { double x_14_1_1; double x_14_1_2; } x14; double x15; int x16; unsigned int x17; int x18; int x19; })clientLocation;
- (id)initWithCLLocation:(id)arg1;
- (id)initWithCLLocation:(id)arg1 course:(double)arg2;
- (id)initWithCLLocation:(id)arg1 useMatchInfo:(bool)arg2;

@end
