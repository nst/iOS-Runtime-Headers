/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TSReading.framework/TSReading
 */

@interface TSDDrawableInfo : TSPObject <TSDChangeableInfo, TSKDocumentObject, TSKSearchable, TSKTransformableObject, TSSPropertySource> {
    NSString * mAccessibilityDescription;
    NSMutableDictionary * mAccessibilityDescriptions;
    bool  mAspectRatioLocked;
    TSSPropertySetChangeDetails * mChanges;
    <TSDAnnotationHosting> * mComment;
    TSDDefaultPartitioner * mDefaultPartitioner;
    TSDExteriorTextWrap * mExteriorTextWrap;
    TSDInfoGeometry * mGeometry;
    NSURL * mHyperlinkURL;
    bool  mLocked;
    TSPObject<TSDOwningAttachment> * mOwningAttachment;
    NSObject<TSDContainerInfo> * mParentInfo;
    TSPLazyReference * mParentInfoReference;
}

@property (nonatomic, copy) NSString *accessibilityDescription;
@property (nonatomic, retain) NSMutableDictionary *accessibilityDescriptions;
@property (getter=isAnchoredToText, nonatomic, readonly) bool anchoredToText;
@property (nonatomic) bool aspectRatioLocked;
@property (getter=isAttachedToBodyText, nonatomic, readonly) bool attachedToBodyText;
@property (nonatomic, readonly) bool canSizeBeChangedIncrementally;
@property (nonatomic, copy) <TSDAnnotationHosting> *comment;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) Class editorClass;
@property (nonatomic, copy) TSDExteriorTextWrap *exteriorTextWrap;
@property (getter=isFloatingAboveText, nonatomic, readonly) bool floatingAboveText;
@property (nonatomic, copy) TSDInfoGeometry *geometry;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) NSURL *hyperlinkURL;
@property (getter=isInlineWithText, nonatomic, readonly) bool inlineWithText;
@property (nonatomic, readonly) bool isUserModifiable;
@property (getter=isLockable, nonatomic, readonly) bool lockable;
@property (getter=isLocked, nonatomic) bool locked;
@property (nonatomic) bool matchesObjectPlaceholderGeometry;
@property (nonatomic) TSPObject<TSDOwningAttachment> *owningAttachment;
@property (nonatomic, readonly) TSPObject<TSDOwningAttachment> *owningAttachmentNoRecurse;
@property (nonatomic) NSObject<TSDContainerInfo> *parentInfo;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsAttachedComments;
@property (nonatomic, readonly) bool supportsHyperlinks;

+ (bool)canPartition;
+ (void)setShouldPartitionByDefault:(bool)arg1;

- (double)CGFloatValueForProperty:(int)arg1;
- (id)accessibilityDescription;
- (id)accessibilityDescriptions;
- (void)adoptStylesheet:(id)arg1 withMapper:(id)arg2;
- (id)animationFilters;
- (bool)aspectRatioLocked;
- (void)beginCollectingChanges;
- (id)boxedObjectForProperty:(int)arg1;
- (bool)canAnchor;
- (bool)canChangeWrapType;
- (bool)canSizeBeChangedIncrementally;
- (unsigned long long)chunkCountForTextureDeliveryStyle:(unsigned long long)arg1 animationFilter:(id)arg2;
- (unsigned long long)chunkCountForTextureDeliveryStyle:(unsigned long long)arg1 byGlyphStyle:(int)arg2 animationFilter:(id)arg3;
- (void)clearBackPointerToParentInfoIfNeeded:(id)arg1;
- (void)coalesceChanges:(id)arg1;
- (id)comment;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })computeFullTransform;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })computeLayoutFullTransform;
- (id)containingGroup;
- (bool)containsProperty:(int)arg1;
- (id)copyWithContext:(id)arg1;
- (void)dealloc;
- (id)descriptionForPasteboard;
- (id)descriptionForPasteboardWithSource:(id)arg1;
- (void)didCopy;
- (double)doubleValueForProperty:(int)arg1;
- (Class)editorClass;
- (int)elementKind;
- (id)endCollectingChanges;
- (id)exteriorTextWrap;
- (float)floatValueForProperty:(int)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })fullTransformInRoot;
- (id)geometry;
- (id)hyperlinkURL;
- (id)initWithContext:(id)arg1 geometry:(id)arg2;
- (int)intValueForProperty:(int)arg1;
- (bool)isAnchoredToText;
- (bool)isAttachedToBodyText;
- (bool)isFloatingAboveText;
- (bool)isInlineWithText;
- (bool)isLockable;
- (bool)isLocked;
- (bool)isThemeContent;
- (bool)isUserModifiable;
- (Class)layoutClass;
- (bool)matchesObjectPlaceholderGeometry;
- (id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2;
- (long long)mixingTypeWithObject:(id)arg1;
- (id)objectForProperty:(int)arg1;
- (id)owningAttachment;
- (id)owningAttachmentNoRecurse;
- (id)parentInfo;
- (id)partitioner;
- (void)performBlockWithTemporaryLayout:(id /* block */)arg1;
- (id)presetKind;
- (Class)repClass;
- (bool)reverseChunkingIsSupported;
- (id)searchForAnnotationsWithHitBlock:(id /* block */)arg1;
- (void)setAccessibilityDescription:(id)arg1;
- (void)setAccessibilityDescriptions:(id)arg1;
- (void)setAspectRatioLocked:(bool)arg1;
- (void)setComment:(id)arg1;
- (void)setExteriorTextWrap:(id)arg1;
- (void)setGeometry:(id)arg1;
- (void)setHyperlinkURL:(id)arg1;
- (void)setInsertionCenterPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)setLocked:(bool)arg1;
- (void)setMatchesObjectPlaceholderGeometry:(bool)arg1;
- (void)setOwningAttachment:(id)arg1;
- (void)setParentInfo:(id)arg1;
- (bool)supportsAttachedComments;
- (bool)supportsHyperlinks;
- (unsigned long long)textureDeliveryStyleFromDeliveryString:(id)arg1;
- (id)textureDeliveryStylesLocalized:(bool)arg1 animationFilter:(id)arg2;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformInRoot;
- (struct CGPoint { double x1; double x2; })transformableObjectAnchorPoint;
- (id)transformedGeometryWithTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 inBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)wasAddedToDocumentRoot:(id)arg1 context:(id)arg2;
- (void)wasRemovedFromDocumentRoot:(id)arg1;
- (void)willBeAddedToDocumentRoot:(id)arg1 context:(id)arg2;
- (void)willBeRemovedFromDocumentRoot:(id)arg1;
- (void)willChangeProperties:(id)arg1;
- (void)willChangeProperty:(int)arg1;
- (void)willCopyWithOtherDrawables:(id)arg1;

@end
