/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PencilKit.framework/PencilKit
 */

@interface PKVersionedDocument : NSObject {
    struct Document { int (**x1)(); struct PtrVector<versioned_document::Version> { struct vector<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> >, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_1_2_1; struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_1_2_2; struct __compressed_pair<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; unsigned int x3; struct { unsigned int x_4_1_1 : 1; } x4; } * _documentArchive;
}

@property (nonatomic) /* Warning: unhandled struct encoding: '{Document=^^?{PtrVector<versioned_document::Version>={vector<std::__1::unique_ptr<versioned_document::Version' */ struct *documentArchive; /* unknown property attribute:  std::__1::default_delete<versioned_document::Version> >}}}}I{?=b1}} */
@property (nonatomic, readonly) unsigned long long futureVersionCount;

+ (unsigned int)minimumSupportedVersion;
+ (unsigned int)serializationVersion;
+ (unsigned int)versionedDocumentSerializationVersion;

- (void)dealloc;
- (struct Document { int (**x1)(); struct PtrVector<versioned_document::Version> { struct vector<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> >, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_1_2_1; struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_1_2_2; struct __compressed_pair<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; unsigned int x3; struct { unsigned int x_4_1_1 : 1; } x4; }*)documentArchive;
- (unsigned long long)futureVersionCount;
- (id)init;
- (id)initWithArchive:(const struct Document { int (**x1)(); struct PtrVector<versioned_document::Version> { struct vector<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> >, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_1_2_1; struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_1_2_2; struct __compressed_pair<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; unsigned int x3; struct { unsigned int x_4_1_1 : 1; } x4; }*)arg1;
- (id)initWithData:(id)arg1;
- (void)loadArchive:(const struct Document { int (**x1)(); struct PtrVector<versioned_document::Version> { struct vector<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> >, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_1_2_1; struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_1_2_2; struct __compressed_pair<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; unsigned int x3; struct { unsigned int x_4_1_1 : 1; } x4; }*)arg1;
- (void)loadData:(id)arg1;
- (void)loadDocumentArchive:(struct Document { int (**x1)(); struct PtrVector<versioned_document::Version> { struct vector<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> >, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_1_2_1; struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_1_2_2; struct __compressed_pair<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; unsigned int x3; struct { unsigned int x_4_1_1 : 1; } x4; }*)arg1;
- (unsigned int)maxDocumentVersion;
- (void)mergeVersion:(unsigned int)arg1 fromData:(id)arg2;
- (unsigned long long)mergeWithVersionedDocument:(id)arg1;
- (void)saveCurrentVersion:(struct Version { int (**x1)(); struct unique_ptr<PB::Data, std::__1::default_delete<PB::Data> > { struct __compressed_pair<PB::Data *, std::__1::default_delete<PB::Data> > { struct Data {} *x_1_2_1; } x_2_1_1; } x2; unsigned int x3; unsigned int x4; struct { unsigned int x_5_1_1 : 1; unsigned int x_5_1_2 : 1; } x5; }*)arg1;
- (void)saveToArchive:(struct Document { int (**x1)(); struct PtrVector<versioned_document::Version> { struct vector<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> >, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_1_2_1; struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_1_2_2; struct __compressed_pair<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; unsigned int x3; struct { unsigned int x_4_1_1 : 1; } x4; }*)arg1;
- (id)serialize;
- (id)serializeCurrentVersion:(unsigned int*)arg1;
- (void)setDocumentArchive:(struct Document { int (**x1)(); struct PtrVector<versioned_document::Version> { struct vector<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> >, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_1_2_1; struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_1_2_2; struct __compressed_pair<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > {} *x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; unsigned int x3; struct { unsigned int x_4_1_1 : 1; } x4; }*)arg1;

@end
