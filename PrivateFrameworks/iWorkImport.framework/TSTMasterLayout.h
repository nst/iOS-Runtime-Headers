/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TSReading.framework/TSReading
 */

@interface TSTMasterLayout : NSObject <TSKChangeSourceObserver> {
    bool  mBandedFillIsValid;
    TSDFill * mBandedFillObject;
    NSMutableArray * mBottomRowStrokes;
    unsigned long long  mCachedMaxNumberOfColumns;
    unsigned long long  mCachedMaxNumberOfRows;
    unsigned short  mCachedNumberOfFooterRows;
    unsigned short  mCachedNumberOfHeaderColumns;
    unsigned short  mCachedNumberOfHeaderRows;
    double  mCachedTableNameHeight;
    TSTWPColumnCache * mCellIDToWPColumnCache;
    NSMutableArray * mChangeDescriptors;
    TSKChangeNotifier * mChangeNotifier;
    TSWPEditingController * mContainedTextEditor;
    TSTLayoutTask * mCurrentLayoutTask;
    struct TSTTableStrokeDefaults { } * mDefaultStrokes;
    TSTDupContentCache * mDupContentCache;
    double  mDynamicAddOrRemoveColumnElementSize;
    double  mDynamicAddOrRemoveRowElementSize;
    bool  mDynamicBandedFill;
    bool  mDynamicBandedFillSetting;
    int  mDynamicColumnAdjustment;
    <TSTLayoutDynamicColumnSwapProtocol> * mDynamicColumnSwapDelegate;
    double  mDynamicColumnTabSize;
    <TSTLayoutDynamicContentProtocol> * mDynamicContentDelegate;
    TSUColor * mDynamicFontColor;
    struct { 
        struct { 
            unsigned short row; 
            unsigned char column; 
            unsigned char reserved; 
        } origin; 
        struct { 
            unsigned short numberOfColumns; 
            unsigned short numberOfRows; 
        } size; 
    }  mDynamicFontColorCellRange;
    double  mDynamicHeightResize;
    struct { 
        struct { 
            unsigned short row; 
            unsigned char column; 
            unsigned char reserved; 
        } origin; 
        struct { 
            unsigned short numberOfColumns; 
            unsigned short numberOfRows; 
        } size; 
    }  mDynamicHidingContent;
    struct { 
        struct { 
            unsigned short row; 
            unsigned char column; 
            unsigned char reserved; 
        } origin; 
        struct { 
            unsigned short numberOfColumns; 
            unsigned short numberOfRows; 
        } size; 
    }  mDynamicHidingRowsCols;
    int  mDynamicHidingRowsColsDirection;
    struct { 
        struct { 
            unsigned short row; 
            unsigned char column; 
            unsigned char reserved; 
        } origin; 
        struct { 
            unsigned short numberOfColumns; 
            unsigned short numberOfRows; 
        } size; 
    }  mDynamicHidingText;
    TSDInfoGeometry * mDynamicInfoGeometry;
    NSMutableSet * mDynamicLayouts;
    bool  mDynamicRepResize;
    bool  mDynamicRepressFrozenHeader;
    TSTLayoutDynamicResizeInfo * mDynamicResizeInfo;
    double  mDynamicResizingColumnAdjustment;
    struct { 
        struct { 
            unsigned short row; 
            unsigned char column; 
            unsigned char reserved; 
        } origin; 
        struct { 
            unsigned short numberOfColumns; 
            unsigned short numberOfRows; 
        } size; 
    }  mDynamicResizingColumnRange;
    bool  mDynamicResizingColumns;
    double  mDynamicResizingRowAdjustment;
    struct { 
        struct { 
            unsigned short row; 
            unsigned char column; 
            unsigned char reserved; 
        } origin; 
        struct { 
            unsigned short numberOfColumns; 
            unsigned short numberOfRows; 
        } size; 
    }  mDynamicResizingRowRange;
    bool  mDynamicResizingRows;
    struct { 
        struct { 
            unsigned short row; 
            unsigned char column; 
            unsigned char reserved; 
        } origin; 
        struct { 
            unsigned short numberOfColumns; 
            unsigned short numberOfRows; 
        } size; 
    }  mDynamicRevealingRowsCols;
    int  mDynamicRevealingRowsColsDirection;
    int  mDynamicRowAdjustment;
    <TSTLayoutDynamicRowSwapProtocol> * mDynamicRowSwapDelegate;
    double  mDynamicRowTabSize;
    TSDLayoutGeometry * mDynamicSavedLayoutGeometry;
    TSTCellRegion * mDynamicSelectionRegion;
    struct { 
        unsigned short row; 
        unsigned char column; 
        unsigned char reserved; 
    }  mDynamicSuppressingConditionalStylesCellID;
    double  mDynamicTableNameResize;
    double  mDynamicWidthResize;
    bool  mEmptyFilteredTable;
    bool  mHeaderColumnsFrozen;
    bool  mHeaderColumnsRepeat;
    bool  mHeaderRowsFrozen;
    bool  mHeaderRowsRepeat;
    TSTHiddenRowsColumnsCache * mHiddenRowsColumnsCache;
    bool  mInDynamicLayoutMode;
    NSObject<OS_dispatch_group> * mLayoutInFlight;
    NSObject<OS_dispatch_semaphore> * mLayoutSemaphore;
    NSMutableArray * mLeftColumnStrokes;
    NSLock * mLock;
    unsigned int  mMaxConcurrentTasks;
    struct CGSize { 
        double width; 
        double height; 
    }  mMaximumPartitionSize;
    TSTMergeRangeSortedSet * mMergeRanges;
    unsigned int  mNumCellsPerTask;
    TSURetainedPointerKeyDictionary * mParaStyleToHeightCache;
    bool  mProcessHiddenRowsForExport;
    int  mReferenceCount;
    NSMutableArray * mRightColumnStrokes;
    NSRecursiveLock * mStrokesLock;
    double  mTableDefaultFontHeightForArea;
    bool  mTableDefaultFontHeightsAreValid;
    int  mTableEnvironment;
    TSTTableInfo * mTableInfo;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mTableNameBounds;
    bool  mTableNameEnabled;
    int  mTableRowsBehavior;
    TSTWPColumnCache * mTempWPColumnCache;
    NSMutableArray * mTopRowStrokes;
    bool  mUseBandedFill;
    TSUReadWriteQueue * mWHCacheQueue;
    TSTWidthHeightCache * mWidthHeightCache;
}

@property (nonatomic, readonly) TSDFill *bandedFillObject;
@property (nonatomic, readonly) TSTWPColumnCache *cellIDToWPColumnCache;
@property (nonatomic, readonly) NSMutableArray *changeDescriptors;
@property (nonatomic, retain) TSKChangeNotifier *changeNotifier;
@property (nonatomic) TSWPEditingController *containedTextEditor;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) TSTDupContentCache *dupContentCache;
@property (nonatomic, readonly) double dynamicAddOrRemoveColumnElementSize;
@property (nonatomic, readonly) double dynamicAddOrRemoveRowElementSize;
@property (nonatomic, readonly) bool dynamicBandedFill;
@property (nonatomic, readonly) bool dynamicBandedFillSetting;
@property (nonatomic, readonly) int dynamicColumnAdjustment;
@property (nonatomic, readonly) <TSTLayoutDynamicColumnSwapProtocol> *dynamicColumnSwapDelegate;
@property (nonatomic, readonly) double dynamicColumnTabSize;
@property (nonatomic, readonly) <TSTLayoutDynamicContentProtocol> *dynamicContentDelegate;
@property (nonatomic, readonly) TSUColor *dynamicFontColor;
@property (nonatomic, readonly) struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; } dynamicFontColorCellRange;
@property (nonatomic) double dynamicHeightResize;
@property (nonatomic, readonly) TSDInfoGeometry *dynamicInfoGeometry;
@property (nonatomic, readonly) TSTLayout *dynamicLayout;
@property (nonatomic, readonly) NSMutableSet *dynamicLayouts;
@property (nonatomic) bool dynamicRepResize;
@property (nonatomic, readonly) double dynamicResizingColumnAdjustment;
@property (nonatomic, readonly) struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; } dynamicResizingColumnRange;
@property (nonatomic, readonly) bool dynamicResizingColumns;
@property (nonatomic, readonly) double dynamicResizingRowAdjustment;
@property (nonatomic, readonly) struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; } dynamicResizingRowRange;
@property (nonatomic, readonly) bool dynamicResizingRows;
@property (nonatomic, readonly) int dynamicRowAdjustment;
@property (nonatomic, readonly) <TSTLayoutDynamicRowSwapProtocol> *dynamicRowSwapDelegate;
@property (nonatomic, readonly) double dynamicRowTabSize;
@property (nonatomic, copy) TSDLayoutGeometry *dynamicSavedLayoutGeometry;
@property (nonatomic, readonly) TSTCellRegion *dynamicSelectionRegion;
@property (nonatomic, readonly) struct { unsigned short x1; unsigned char x2; unsigned char x3; } dynamicSuppressingConditionalStylesCellID;
@property (nonatomic, readonly) double dynamicTableNameResize;
@property (nonatomic) double dynamicWidthResize;
@property (nonatomic, readonly) bool emptyFilteredTable;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) TSTHiddenRowsColumnsCache *hiddenRowsColumnsCache;
@property (nonatomic, readonly) bool inDynamicLayoutMode;
@property (nonatomic, readonly) bool isGrouped;
@property (nonatomic) unsigned int maxConcurrentTasks;
@property (nonatomic) struct CGSize { double x1; double x2; } maximumPartitionSize;
@property (nonatomic, retain) TSTMergeRangeSortedSet *mergeRanges;
@property (nonatomic) unsigned int numCellsPerTask;
@property (nonatomic) bool processHiddenRowsForExport;
@property (readonly) Class superclass;
@property (nonatomic) int tableEnvironment;
@property (nonatomic) TSTTableInfo *tableInfo;
@property (nonatomic, readonly) TSTTableModel *tableModel;
@property (nonatomic, readonly) int tableRowsBehavior;
@property (nonatomic, readonly) TSTWPColumnCache *tempWPColumnCache;
@property (nonatomic, readonly) bool useBandedFill;
@property (nonatomic, readonly) NSIndexSet *visibleColumnIndices;
@property (nonatomic, readonly) NSIndexSet *visibleRowIndices;
@property (nonatomic, readonly) TSUReadWriteQueue *whCacheQueue;
@property (nonatomic, readonly) TSTWidthHeightCache *widthHeightCache;

+ (double)effectiveTableNameHeightForModel:(id)arg1;
+ (id)tableNameTextEngine:(id)arg1;
+ (struct CGSize { double x1; double x2; })tableNameTextSize:(id)arg1;

- (id)accountingParagraphStylePropertyMapForCell:(id)arg1 atCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (void)addChangeDescriptor:(id)arg1;
- (void)addChangeDescriptorWithType:(int)arg1 andCellRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg2;
- (void)addChangeDescriptorWithType:(int)arg1 andCellRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg2 andStrokeRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg3;
- (void)addDynamicLayoutBeginIfNecessary:(id)arg1;
- (id)bandedFillObject;
- (void)beginDynamicMode:(id)arg1;
- (void)calculateRawTableSize:(struct CGSize { double x1; double x2; }*)arg1 andStrokeDelta:(struct CGSize { double x1; double x2; }*)arg2;
- (double)calculatedTableNameHeight;
- (double)calculatedTableNameHeightIncludingDynamicResize:(bool)arg1;
- (void)cancelDynamicModeChanges;
- (void)captureDynamicResizeInfo;
- (bool)cell:(id*)arg1 forCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (id)cellIDToWPColumnCache;
- (id)changeDescriptors;
- (id)changeNotifier;
- (void)clearModelHeightWidthCacheForCellRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (id)containedTextEditor;
- (void)dealloc;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })defaultPaddingForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (id)description;
- (id)dupContentCache;
- (double)dynamicAddOrRemoveColumnElementSize;
- (double)dynamicAddOrRemoveRowElementSize;
- (bool)dynamicBandedFill;
- (bool)dynamicBandedFillSetting;
- (int)dynamicColumnAdjustment;
- (id)dynamicColumnSwapDelegate;
- (double)dynamicColumnTabSize;
- (id)dynamicContentDelegate;
- (id)dynamicFontColor;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })dynamicFontColorCellRange;
- (double)dynamicHeightResize;
- (id)dynamicInfoGeometry;
- (id)dynamicLayout;
- (id)dynamicLayouts;
- (bool)dynamicRepResize;
- (double)dynamicResizingColumnAdjustment;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })dynamicResizingColumnRange;
- (bool)dynamicResizingColumns;
- (double)dynamicResizingRowAdjustment;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })dynamicResizingRowRange;
- (bool)dynamicResizingRows;
- (int)dynamicRowAdjustment;
- (id)dynamicRowSwapDelegate;
- (double)dynamicRowTabSize;
- (id)dynamicSavedLayoutGeometry;
- (id)dynamicSelectionRegion;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })dynamicSuppressingConditionalStylesCellID;
- (double)dynamicTableNameResize;
- (double)dynamicWidthResize;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })edgeInsetsFromPadding:(id)arg1;
- (bool)emptyFilteredTable;
- (void)endDynamicMode;
- (double)fontHeightOfParagraphStyle:(id)arg1;
- (id)hiddenRowsColumnsCache;
- (bool)hintIsValid:(id)arg1;
- (bool)inDynamicLayoutMode;
- (id)initWithInfo:(id)arg1;
- (void)invalidateBandedFill;
- (void)invalidateDefaultFontHeights;
- (void)invalidateDynamicResizeInfo;
- (void)invalidateTableNameHeight;
- (bool)isDynamicallyChangingColumnCount;
- (bool)isDynamicallyChangingContent;
- (bool)isDynamicallyChangingFontColorOfCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (bool)isDynamicallyChangingInfoGeometry;
- (bool)isDynamicallyChangingRowCount;
- (bool)isDynamicallyChangingRowOrColumnCount;
- (bool)isDynamicallyChangingSelection;
- (bool)isDynamicallyColumnTabResizing;
- (bool)isDynamicallyHidingContentOfCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (bool)isDynamicallyHidingRowsCols;
- (bool)isDynamicallyHidingRowsCols:(int)arg1 rowColIndex:(unsigned short)arg2;
- (bool)isDynamicallyHidingRowsColsCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (bool)isDynamicallyHidingTextOfCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (bool)isDynamicallyRepressingFrozenHeaders;
- (bool)isDynamicallyResizing:(int)arg1;
- (bool)isDynamicallyResizing:(int)arg1 rowColIndex:(unsigned short)arg2;
- (bool)isDynamicallyResizingCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (bool)isDynamicallyResizingTableName;
- (bool)isDynamicallyRevealingRowsCols;
- (bool)isDynamicallyRevealingRowsCols:(int)arg1 rowColIndex:(unsigned short)arg2;
- (bool)isDynamicallyRowTabResizing;
- (bool)isDynamicallySettingBandedFill;
- (bool)isDynamicallySwappingColumns;
- (bool)isDynamicallySwappingRows;
- (bool)isGrouped;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })layoutCellIDForModelCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (unsigned int)maxConcurrentTasks;
- (struct CGSize { double x1; double x2; })maximumPartitionSize;
- (void)measureTextForLayoutState:(id)arg1;
- (id)mergeRanges;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })modelCellIDForLayoutCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })modelCellIDForStrokesOfLayoutCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (id)newLayoutHint;
- (id)newTextEngineForCell:(id)arg1 atCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (unsigned int)numCellsPerTask;
- (void)p_cancelDynamicRowColCountChanges;
- (void)p_processChange:(id)arg1 forChangeSource:(id)arg2;
- (void)p_validateFittingInfoForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 inMergeRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg2;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })p_validateFittingInfoForEmptyCellsBetween:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 andCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2 inRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg3;
- (void)p_validateFittingInfoForEmptyCellsOnSingleRowBetween:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 andEndCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })paddingForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (bool)processHiddenRowsForExport;
- (void)processLayoutTask:(id)arg1;
- (void)queueCellForValidation:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1 cell:(id)arg2 mergeRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg3 wrap:(bool)arg4 verticalAlignment:(unsigned int)arg5 padding:(id)arg6 prop:(bool)arg7 layoutCacheFlags:(int)arg8;
- (id)regionForStrokeValidationFromChangeDescriptors:(id)arg1;
- (void)removeDynamicLayoutEndIfNecessary:(id)arg1;
- (void)resetModelHeightWidthCache;
- (void)setChangeNotifier:(id)arg1;
- (void)setContainedTextEditor:(id)arg1;
- (void)setDynamicHeightResize:(double)arg1;
- (void)setDynamicRepResize:(bool)arg1;
- (void)setDynamicSavedLayoutGeometry:(id)arg1;
- (void)setDynamicWidthResize:(double)arg1;
- (void)setMaxConcurrentTasks:(unsigned int)arg1;
- (void)setMaximumPartitionSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMergeRanges:(id)arg1;
- (void)setNumCellsPerTask:(unsigned int)arg1;
- (void)setProcessHiddenRowsForExport:(bool)arg1;
- (void)setTableEnvironment:(int)arg1;
- (void)setTableInfo:(id)arg1;
- (bool)shouldRowUseBandedFill:(unsigned short)arg1;
- (void)syncProcessChanges:(id)arg1 forChangeSource:(id)arg2;
- (unsigned int)tableAreaForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (int)tableEnvironment;
- (id)tableInfo;
- (id)tableModel;
- (double)tableNameHeight;
- (id)tableNameTextEngine;
- (struct CGSize { double x1; double x2; })tableNameTextSize;
- (int)tableRowsBehavior;
- (id)tempWPColumnCache;
- (void)updateDynamicBandedFill:(bool)arg1 setting:(bool)arg2;
- (bool)updateDynamicChangeRowOrColumnCount:(int)arg1 count:(int)arg2 newlyAddedElementSize:(double)arg3;
- (void)updateDynamicColumnSwapDelegate:(id)arg1;
- (void)updateDynamicColumnTabSize:(double)arg1;
- (void)updateDynamicContentDelegate:(id)arg1;
- (void)updateDynamicFontColor:(id)arg1 andRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg2;
- (void)updateDynamicHidingContent:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (void)updateDynamicHidingRowsCols:(int)arg1 hidingCellRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg2;
- (void)updateDynamicHidingText:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (void)updateDynamicInfoGeometry:(id)arg1;
- (void)updateDynamicRepressFrozenHeader:(bool)arg1;
- (void)updateDynamicResize:(int)arg1 resizingRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg2 resizeAdjustment:(double)arg3;
- (void)updateDynamicResizeInfo:(id)arg1;
- (void)updateDynamicRevealingRowsCols:(int)arg1 revealingCellRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg2;
- (void)updateDynamicRowSwapDelegate:(id)arg1;
- (void)updateDynamicRowTabSize:(double)arg1;
- (void)updateDynamicSelectionRegion:(id)arg1;
- (void)updateDynamicSuppressingConditionalStylesCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (void)updateDynamicTableNameSize:(double)arg1;
- (void)updateWHCForMergeRanges;
- (bool)useBandedFill;
- (void)validate;
- (void)validateBandedFill;
- (id)validateCellForDrawing:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 cell:(id)arg2 contents:(id)arg3 wrap:(bool)arg4 verticalAlignment:(unsigned int)arg5 padding:(id)arg6 layoutCacheFlags:(int)arg7 pageNumber:(unsigned long long)arg8 pageCount:(unsigned long long)arg9;
- (void)validateChangeDescriptorQueue;
- (void)validateDefaultFontHeights;
- (void)validateDynamicResizeInfo;
- (void)validateFittingInfoForCell:(id)arg1 cellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2 mergeRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg3 setFitting:(bool)arg4;
- (id)validateFittingInfoForChangeDescriptors:(id)arg1 rowsNeedingFittingInfo:(id)arg2;
- (void)validateFittingInfoWithCellRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (void)validateFittingWidthsForRegion:(id)arg1;
- (void)validateLayoutHint:(id)arg1;
- (void)validateMasterLayoutForChangeDescriptors:(id)arg1;
- (void)validateRowVisibility:(id)arg1;
- (void)validateStrokesForRegion:(id)arg1 regionAlreadyValidated:(id)arg2;
- (void)validateTableRowsBehavior;
- (id)visibleColumnIndices;
- (id)visibleRowIndices;
- (void)waitForLayoutToComplete;
- (void)wasRemovedFromDocumentRoot;
- (id)whCacheQueue;
- (id)widthHeightCache;
- (void)willBeAddedToDocumentRoot:(id)arg1;

@end
