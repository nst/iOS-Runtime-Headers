/* Generated by RuntimeBrowser.
 */

@protocol VKInteractiveMap <NSObject>

@required

+ (bool)supportsMapType:(long long)arg1 scale:(int)arg2 manifestConfiguration:(GEOResourceManifestConfiguration *)arg3;

- (void)_setStyleTransitionProgress:(double)arg1 targetStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg2 step:(long long)arg3;
- (double)_styleTransitionProgress;
- (void)addAnnotationMarker:(VKAnnotationMarker *)arg1;
- (void)addCustomFeatureDataSource:(id <VKCustomFeatureDataSource>)arg1;
- (void)addExternalAnchor:(VKAnchorWrapper *)arg1;
- (void)addOverlay:(id <VKOverlay>)arg1;
- (void)addPersistentOverlay:(id <VKOverlay>)arg1;
- (void)addRasterOverlay:(VKRasterOverlay *)arg1;
- (id)annotationCoordinateTest:(void *)arg1; // needs 1 arg types, found 5: id, struct { double x1; double x2; }, void*, id, SEL
- (NSArray *)annotationMarkers;
- (id)annotationRectTest:(void *)arg1; // needs 1 arg types, found 8: id, double, double, double, double, void*, id, SEL
- (NSArray *)attributionsForCurrentRegion;
- (void)beginStyleAnimationGroup;
- (VKObjectBoundsContext *)boundsForSelectedTransitLines;
- (struct shared_ptr<md::LabelFeatureMarker> { struct LabelFeatureMarker {} *x1; struct __shared_weak_count {} *x2; })closestRoadMarkerForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (NSString *)consoleString:(bool)arg1;
- (struct CGPoint { double x1; double x2; })convertCoordinateToCameraModelPoint:(struct { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertCoordinateToPoint:(struct { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertMapPointToPoint:(struct { double x1; double x2; })arg1;
- (struct { double x1; double x2; })convertPointToCoordinate:(struct CGPoint { double x1; double x2; })arg1;
- (struct { double x1; double x2; })convertPointToMapPoint:(struct CGPoint { double x1; double x2; })arg1;
- (NSArray *)customFeatureDataSources;
- (void)debugHighlightFeatureMarker:(const struct shared_ptr<md::FeatureMarker> { struct FeatureMarker {} *x1; struct __shared_weak_count {} *x2; }*)arg1;
- (void)debugHighlightObjectAtPoint:(struct CGPoint { double x1; double x2; })arg1 highlightTarget:(unsigned char)arg2;
- (<VKInteractiveMapDelegate> *)delegate;
- (void)deselectLabelMarker;
- (void)deselectTransitLineMarker;
- (NSString *)detailedDescription;
- (NSDictionary *)detailedDescriptionDictionaryRepresentation;
- (void)endStyleAnimationGroup;
- (VKAnchorWrapper *)externalAnchors;
- (NSArray *)externalTrafficIncidents;
- (void)finishStyleBlend;
- (void)insertRasterOverlay:(VKRasterOverlay *)arg1 aboveOverlay:(VKRasterOverlay *)arg2;
- (void)insertRasterOverlay:(VKRasterOverlay *)arg1 belowOverlay:(VKRasterOverlay *)arg2;
- (bool)isFullyDrawn;
- (bool)isPointValidForGesturing:(struct CGPoint { double x1; double x2; })arg1;
- (bool)isShowingNoDataPlaceholders;
- (struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; })labelMarkerForCustomFeatureAnnotation:(id <VKCustomFeatureAnnotation>)arg1 dataSource:(id <VKCustomFeatureDataSource>)arg2;
- (struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; })labelMarkerForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1 selectableLabelsOnly:(bool)arg2;
- (bool)labelMarkerSelectionEnabled;
- (struct vector<std::__1::shared_ptr<md::LabelMarker>, std::__1::allocator<std::__1::shared_ptr<md::LabelMarker> > > { struct shared_ptr<md::LabelMarker> {} *x1; struct shared_ptr<md::LabelMarker> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelMarker> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMarker> > > { struct shared_ptr<md::LabelMarker> {} *x_3_1_1; } x3; })labelMarkers;
- (unsigned char)labelScaleFactor;
- (bool)localizeLabels;
- (long long)mapType;
- (long long)navigationShieldSize;
- (NSArray *)overlays;
- (NSSet *)persistentOverlays;
- (NSArray *)rasterOverlays;
- (void)removeAnnotationMarker:(VKAnnotationMarker *)arg1;
- (void)removeCustomFeatureDataSource:(id <VKCustomFeatureDataSource>)arg1;
- (void)removeExternalAnchor:(VKAnchorWrapper *)arg1;
- (void)removeOverlay:(id <VKOverlay>)arg1;
- (void)removePersistentOverlay:(id <VKOverlay>)arg1;
- (void)removeRasterOverlay:(VKRasterOverlay *)arg1;
- (void)requestStylesheetAnimation:(void *)arg1 targetMapDisplayStyle:(void *)arg2 setupHandler:(void *)arg3; // needs 3 arg types, found 7: VKAnimation *, struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; }, id, /* Warning: Unrecognized filer type: '<' using 'void*' */ void*, void, id, void*
- (<VKRouteMatchedAnnotationPresentation> *)routeLineSplitAnnotation;
- (struct PolylineCoordinate { unsigned int x1; float x2; })routeUserOffset;
- (void)selectLabelMarker:(const struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }*)arg1;
- (void)selectTransitLineMarker:(VKTransitLineMarker *)arg1;
- (struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; })selectedLabelMarker;
- (NSArray *)selectedTransitLineIDs;
- (void)setCustomFeatureDataSources:(NSArray *)arg1;
- (void)setDelegate:(id <VKInteractiveMapDelegate>)arg1;
- (void)setExternalTrafficIncidents:(NSArray *)arg1;
- (void)setLabelMarkerSelectionEnabled:(bool)arg1;
- (void)setLabelScaleFactor:(unsigned char)arg1;
- (void)setLocalizeLabels:(bool)arg1;
- (void)setMapType:(long long)arg1;
- (void)setMapType:(long long)arg1 animated:(bool)arg2;
- (void)setNavigationShieldSize:(long long)arg1;
- (void)setRouteLineSplitAnnotation:(id <VKRouteMatchedAnnotationPresentation>)arg1;
- (void)setRouteUserOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (void)setShieldIdiom:(long long)arg1;
- (void)setShieldSize:(long long)arg1;
- (void)setShowsBuildings:(bool)arg1;
- (void)setShowsPointsOfInterest:(bool)arg1;
- (void)setStylesheetMapDisplayStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg1;
- (void)setTrafficEnabled:(bool)arg1;
- (void)setTrafficIncidentsEnabled:(bool)arg1;
- (long long)shieldIdiom;
- (long long)shieldSize;
- (bool)shouldHideOffscreenSelectedAnnotation;
- (bool)showsBuildings;
- (bool)showsPointsOfInterest;
- (struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })sourceMapDisplayStyle;
- (void)stylesheetAnimationDidEnd:(bool)arg1;
- (void)stylesheetAnimationDidProgress:(float)arg1;
- (void)stylesheetAnimationWillStartFromStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg1 toStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg2;
- (bool)supportsMapDisplayStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg1;
- (bool)trafficEnabled;
- (bool)trafficIncidentsEnabled;
- (NSArray *)transitLineMarkersForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (NSArray *)transitLineMarkersInCurrentViewport;
- (NSArray *)visibleTileSets;

@end
