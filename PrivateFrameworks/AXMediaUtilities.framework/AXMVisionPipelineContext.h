/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AXMediaUtilities.framework/AXMediaUtilities
 */

@interface AXMVisionPipelineContext : NSObject <NSSecureCoding> {
    AXMVisionAnalysisOptions * _analysisOptions;
    NSNumber * _appliedImageOrientation;
    <NSCopying> * _cacheKey;
    struct CGSize { 
        double width; 
        double height; 
    }  _cachedSize;
    double  _creationTime;
    NSError * _error;
    bool  _evaluationExclusivelyUsesVisionFramework;
    struct CGColorSpace { } * _extendedSRGBColorSpace;
    NSMutableArray * _features;
    struct __CVBuffer { } * _nativeFormatPixelBuffer;
    double  _processingEndTime;
    double  _processingStartTime;
    AXMVisionResult * _result;
    NSMutableArray * _resultHandlers;
    unsigned long long  _sequenceID;
    bool  _shouldCallCompletionHandlersForEmptyResultSet;
    bool  _shouldCallCompletionHandlersForEngineBusyError;
    bool  _shouldProcessRemotely;
    CIImage * _sourceImage;
    NSDictionary * _sourceParameters;
    bool  _sourceProvidesOwnResults;
    VNImageRequestHandler * _visionImageRequestHandler;
}

@property (nonatomic, retain) AXMVisionAnalysisOptions *analysisOptions;
@property (nonatomic, retain) NSNumber *appliedImageOrientation;
@property (nonatomic, retain) <NSCopying> *cacheKey;
@property (nonatomic) double creationTime;
@property (nonatomic, retain) NSError *error;
@property (nonatomic) bool evaluationExclusivelyUsesVisionFramework;
@property (nonatomic, retain) NSMutableArray *features;
@property (nonatomic) double processingEndTime;
@property (nonatomic) double processingStartTime;
@property (nonatomic, retain) AXMVisionResult *result;
@property (nonatomic, readonly) NSArray *resultHandlers;
@property (nonatomic) unsigned long long sequenceID;
@property (nonatomic) bool shouldCallCompletionHandlersForEmptyResultSet;
@property (nonatomic) bool shouldCallCompletionHandlersForEngineBusyError;
@property (nonatomic) bool shouldProcessRemotely;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } size;
@property (nonatomic, readonly) bool sourceProvidesResults;
@property (nonatomic, retain) VNImageRequestHandler *visionImageRequestHandler;
@property (nonatomic, readonly) bool visionImageRequestHandlerIsLoaded;

+ (id)contextWithSourceParameters:(id)arg1 options:(id)arg2;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_commonInit;
- (void)_discardSourceImageIfPossible;
- (void)addResultHandler:(id /* block */)arg1;
- (void)addResultHandlers:(id)arg1;
- (id)analysisOptions;
- (id)analyzeBuffer:(id /* block */)arg1;
- (void)appendFeature:(id)arg1;
- (id)appliedImageOrientation;
- (id)cacheKey;
- (double)creationTime;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)error;
- (void)errorOccurred:(id)arg1;
- (bool)evaluationExclusivelyUsesVisionFramework;
- (id)features;
- (id)generateFileNameForImageWithPrefix:(id)arg1 extension:(id)arg2;
- (id)generateImageRepresentation;
- (struct CGColorSpace { }*)imageColorSpace;
- (id)initWithCoder:(id)arg1;
- (id)initWithSourceParameters:(id)arg1 options:(id)arg2;
- (struct __CVBuffer { }*)nativeFormatPixelBufferRenderIfNeeded:(bool)arg1;
- (double)processingEndTime;
- (double)processingStartTime;
- (void)produceImage:(id /* block */)arg1;
- (id)result;
- (id)resultHandlers;
- (unsigned long long)sequenceID;
- (void)setAnalysisOptions:(id)arg1;
- (void)setAppliedImageOrientation:(id)arg1;
- (void)setCacheKey:(id)arg1;
- (void)setCreationTime:(double)arg1;
- (void)setError:(id)arg1;
- (void)setEvaluationExclusivelyUsesVisionFramework:(bool)arg1;
- (void)setFeatures:(id)arg1;
- (void)setProcessingEndTime:(double)arg1;
- (void)setProcessingStartTime:(double)arg1;
- (void)setResult:(id)arg1;
- (void)setSequenceID:(unsigned long long)arg1;
- (void)setShouldCallCompletionHandlersForEmptyResultSet:(bool)arg1;
- (void)setShouldCallCompletionHandlersForEngineBusyError:(bool)arg1;
- (void)setShouldProcessRemotely:(bool)arg1;
- (void)setVisionImageRequestHandler:(id)arg1;
- (bool)shouldCallCompletionHandlersForEmptyResultSet;
- (bool)shouldCallCompletionHandlersForEngineBusyError;
- (bool)shouldProcessRemotely;
- (struct CGSize { double x1; double x2; })size;
- (bool)sourceProvidesResults;
- (id)visionImageRequestHandler;
- (bool)visionImageRequestHandlerIsLoaded;
- (id)visionImageRequestHandlerWithOptions:(id)arg1;

@end
