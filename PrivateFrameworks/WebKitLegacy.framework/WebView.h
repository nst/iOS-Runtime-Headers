/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/WebKitLegacy.framework/WebKitLegacy
 */

@interface WebView : WAKView {
    WebViewPrivate * _private;
}

@property (nonatomic) <WebUIDelegate> *UIDelegate;
@property (nonatomic, readonly) unsigned long long _dragSourceAction;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _draggedElementBounds;
@property (nonatomic, readonly) NSString *_draggedLinkTitle;
@property (nonatomic, readonly) NSURL *_draggedLinkURL;
@property (setter=_setUnobscuredSafeAreaInsets:, nonatomic) struct WebEdgeInsets { double x1; double x2; double x3; double x4; } _unobscuredSafeAreaInsets;
@property (setter=_setUseSystemAppearance:, nonatomic) bool _useSystemAppearance;
@property (nonatomic, copy) NSString *applicationNameForUserAgent;
@property (nonatomic, readonly) WebBackForwardList *backForwardList;
@property (nonatomic, readonly) bool canGoBack;
@property (nonatomic, readonly) bool canGoForward;
@property (nonatomic, readonly) bool canMakeTextLarger;
@property (nonatomic, readonly) bool canMakeTextSmaller;
@property (nonatomic, readonly) bool canMakeTextStandardSize;
@property (getter=isContinuousSpellCheckingEnabled, nonatomic) bool continuousSpellCheckingEnabled;
@property (nonatomic, copy) NSString *customTextEncodingName;
@property (nonatomic, copy) NSString *customUserAgent;
@property (getter=_dataInteractionCaretRect, nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } dataInteractionCaretRect;
@property (getter=_dataOperationTextIndicator, nonatomic, readonly) WebUITextIndicatorData *dataOperationTextIndicator;
@property (nonatomic) <WebDownloadDelegate> *downloadDelegate;
@property (nonatomic) bool drawsBackground;
@property (getter=isEditable, nonatomic) bool editable;
@property (nonatomic) <WebEditingDelegate> *editingDelegate;
@property (nonatomic, readonly) double estimatedProgress;
@property (nonatomic) <WebFrameLoadDelegate> *frameLoadDelegate;
@property (nonatomic, copy) NSString *groupName;
@property (nonatomic, retain) WAKWindow *hostWindow;
@property (getter=isLoading, nonatomic, readonly) bool loading;
@property (nonatomic, readonly) WebFrame *mainFrame;
@property (nonatomic, readonly) DOMDocument *mainFrameDocument;
@property (nonatomic, readonly, copy) NSString *mainFrameTitle;
@property (nonatomic, copy) NSString *mainFrameURL;
@property (nonatomic, readonly) bool maintainsInactiveSelection;
@property (nonatomic, copy) NSString *mediaStyle;
@property (nonatomic) <WebPolicyDelegate> *policyDelegate;
@property (nonatomic, retain) WebPreferences *preferences;
@property (nonatomic, copy) NSString *preferencesIdentifier;
@property (nonatomic) <WebResourceLoadDelegate> *resourceLoadDelegate;
@property (nonatomic, readonly) DOMRange *selectedDOMRange;
@property (nonatomic, readonly) WebFrame *selectedFrame;
@property (nonatomic, readonly) int selectionAffinity;
@property (nonatomic) bool shouldCloseWithWindow;
@property (nonatomic) bool shouldUpdateWhileOffscreen;
@property (nonatomic) bool smartInsertDeleteEnabled;
@property (getter=_sourceApplicationAuditData, setter=_setSourceApplicationAuditData:, nonatomic, copy) NSData *sourceApplicationAuditData;
@property (nonatomic, readonly) bool supportsTextEncoding;
@property (nonatomic) float textSizeMultiplier;
@property (nonatomic, retain) DOMCSSStyleDeclaration *typingStyle;
@property (nonatomic, readonly) NSUndoManager *undoManager;
@property (nonatomic, readonly) WebScriptObject *windowScriptObject;

// Image: /System/Library/PrivateFrameworks/WebKitLegacy.framework/WebKitLegacy

+ (id)MIMETypesShownAsHTML;
+ (bool)_HTTPPipeliningEnabled;
+ (id)_MIMETypeForFile:(id)arg1;
+ (void)_addOriginAccessWhitelistEntryWithSourceOrigin:(id)arg1 destinationProtocol:(id)arg2 destinationHost:(id)arg3 allowDestinationSubdomains:(bool)arg4;
+ (void)_addUserScriptToGroup:(id)arg1 world:(id)arg2 source:(id)arg3 url:(id)arg4 whitelist:(id)arg5 blacklist:(id)arg6 injectionTime:(int)arg7;
+ (void)_addUserScriptToGroup:(id)arg1 world:(id)arg2 source:(id)arg3 url:(id)arg4 whitelist:(id)arg5 blacklist:(id)arg6 injectionTime:(int)arg7 injectedFrames:(int)arg8;
+ (void)_addUserStyleSheetToGroup:(id)arg1 world:(id)arg2 source:(id)arg3 url:(id)arg4 whitelist:(id)arg5 blacklist:(id)arg6;
+ (void)_addUserStyleSheetToGroup:(id)arg1 world:(id)arg2 source:(id)arg3 url:(id)arg4 whitelist:(id)arg5 blacklist:(id)arg6 injectedFrames:(int)arg7;
+ (unsigned long long)_cacheModel;
+ (void)_cacheModelChangedNotification:(id)arg1;
+ (bool)_canHandleRequest:(id)arg1;
+ (bool)_canHandleRequest:(id)arg1 forMainFrame:(bool)arg2;
+ (bool)_canShowMIMEType:(id)arg1 allowingPlugins:(bool)arg2;
+ (id)_decodeData:(id)arg1;
+ (bool)_didSetCacheModel;
+ (void)_disableAutoStartRemoteInspector;
+ (void)_disableRemoteInspector;
+ (void)_doNotStartObservingNetworkReachability;
+ (void)_enableRemoteInspector;
+ (id)_generatedMIMETypeForURLScheme:(id)arg1;
+ (Class)_getPDFRepresentationClass;
+ (Class)_getPDFViewClass;
+ (bool)_hasRemoteInspectorSession;
+ (bool)_isIconLoadingEnabled;
+ (bool)_isRemoteInspectorEnabled;
+ (bool)_isUnderMemoryPressure;
+ (void)_makeAllWebViewsPerformSelector:(SEL)arg1;
+ (unsigned long long)_maxCacheModelInAnyInstance;
+ (void)_preferencesRemovedNotification:(id)arg1;
+ (void)_preflightSpellChecker;
+ (void)_preflightSpellCheckerNow:(id)arg1;
+ (id)_productivityDocumentMIMETypes;
+ (void)_registerPluginMIMEType:(id)arg1;
+ (void)_registerURLSchemeAsAllowingDatabaseAccessInPrivateBrowsing:(id)arg1;
+ (void)_registerURLSchemeAsAllowingLocalStorageAccessInPrivateBrowsing:(id)arg1;
+ (void)_registerURLSchemeAsSecure:(id)arg1;
+ (void)_registerViewClass:(Class)arg1 representationClass:(Class)arg2 forURLScheme:(id)arg3;
+ (void)_releaseMemoryNow;
+ (void)_removeAllUserContentFromGroup:(id)arg1;
+ (void)_removeOriginAccessWhitelistEntryWithSourceOrigin:(id)arg1 destinationProtocol:(id)arg2 destinationHost:(id)arg3 allowDestinationSubdomains:(bool)arg4;
+ (void)_removeUserScriptFromGroup:(id)arg1 world:(id)arg2 url:(id)arg3;
+ (void)_removeUserScriptsFromGroup:(id)arg1 world:(id)arg2;
+ (void)_removeUserStyleSheetFromGroup:(id)arg1 world:(id)arg2 url:(id)arg3;
+ (void)_removeUserStyleSheetsFromGroup:(id)arg1 world:(id)arg2;
+ (void)_reportException:(struct OpaqueJSValue { }*)arg1 inContext:(struct OpaqueJSContext { }*)arg2;
+ (bool)_representationExistsForURLScheme:(id)arg1;
+ (void)_resetOriginAccessWhitelists;
+ (void)_setAlwaysUsesComplexTextCodePath:(bool)arg1;
+ (void)_setCacheModel:(unsigned long long)arg1;
+ (void)_setDomainRelaxationForbidden:(bool)arg1 forURLScheme:(id)arg2;
+ (void)_setFontWhitelist:(id)arg1;
+ (void)_setHTTPPipeliningEnabled:(bool)arg1;
+ (void)_setIconLoadingEnabled:(bool)arg1;
+ (void)_setLoadResourcesSerially:(bool)arg1;
+ (void)_setPDFRepresentationClass:(Class)arg1;
+ (void)_setPDFViewClass:(Class)arg1;
+ (void)_setShouldUseFontSmoothing:(bool)arg1;
+ (void)_setTileCacheLayerPoolCapacity:(unsigned int)arg1;
+ (bool)_shouldUseFontSmoothing;
+ (id)_standardUserAgentWithApplicationName:(id)arg1;
+ (id)_supportedMIMETypes;
+ (void)_unregisterPluginMIMEType:(id)arg1;
+ (void)_unregisterViewClassAndRepresentationClassForMIMEType:(id)arg1;
+ (bool)_viewClass:(Class*)arg1 andRepresentationClass:(Class*)arg2 forMIMEType:(id)arg3 allowingPlugins:(bool)arg4;
+ (bool)canCloseAllWebViews;
+ (bool)canShowFile:(id)arg1;
+ (bool)canShowMIMEType:(id)arg1;
+ (bool)canShowMIMETypeAsHTML:(id)arg1;
+ (void)closeAllWebViews;
+ (void)enableWebThread;
+ (void)initialize;
+ (bool)isCharacterSmartReplaceExempt:(unsigned short)arg1 isPreviousCharacter:(bool)arg2;
+ (void)registerURLSchemeAsLocal:(id)arg1;
+ (void)registerViewClass:(Class)arg1 representationClass:(Class)arg2 forMIMEType:(id)arg3;
+ (void)setMIMETypesShownAsHTML:(id)arg1;
+ (bool)shouldIncludeInWebKitStatistics;
+ (void)willEnterBackgroundWithCompletionHandler:(id /* block */)arg1;

- (id)DOMRangeOfString:(id)arg1 relativeTo:(id)arg2 options:(unsigned long long)arg3;
- (id)UIDelegate;
- (id)_UIDelegateForSelector:(SEL)arg1;
- (id)_UIDelegateForwarder;
- (id)_UIKitDelegate;
- (id)_UIKitDelegateForwarder;
- (void)_addObject:(id)arg1 forIdentifier:(unsigned long long)arg2;
- (void)_addToAllWebViewsSet;
- (bool)_allowsMessaging;
- (void)_attachScriptDebuggerToAllFrames;
- (bool)_becomingFirstResponderFromOutside;
- (void)_cacheFrameLoadDelegateImplementations;
- (void)_cacheHistoryDelegateImplementations;
- (void)_cacheResourceLoadDelegateImplementations;
- (void)_cacheScriptDebugDelegateImplementations;
- (bool)_canResetZoom:(bool)arg1;
- (bool)_canShowMIMEType:(id)arg1;
- (bool)_canZoomIn:(bool)arg1;
- (bool)_canZoomOut:(bool)arg1;
- (void)_clearCredentials;
- (void)_clearDelegates;
- (void)_clearMainFrameName;
- (void)_close;
- (void)_closePluginDatabases;
- (void)_closeWindow;
- (void)_closeWithFastTeardown;
- (void)_commonInitializationWithFrameName:(id)arg1 groupName:(id)arg2;
- (id)_contentsOfUserInterfaceItem:(id)arg1;
- (bool)_continuousCheckingAllowed;
- (struct CGPoint { double x1; double x2; })_convertPointFromRootView:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRectFromRootView:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)_cookieEnabled;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_dataInteractionCaretRect;
- (id)_dataOperationTextIndicator;
- (void)_destroyAllPlugIns;
- (void)_detachScriptDebuggerFromAllFrames;
- (unsigned long long)_deviceOrientation;
- (id)_deviceOrientationProvider;
- (void)_didCommitLoadForFrame:(id)arg1;
- (void)_didConcludeEditDataInteraction;
- (void)_didFinishScrollingOrZooming;
- (void)_didScrollDocumentInFrameView:(id)arg1;
- (void)_dispatchPendingLoadRequests;
- (void)_dispatchTileDidDraw:(id)arg1;
- (void)_dispatchUnloadEvent;
- (id)_displayURL;
- (void)_documentScaleChanged;
- (id)_downloadURL:(id)arg1;
- (unsigned long long)_dragSourceAction;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_draggedElementBounds;
- (id)_draggedLinkTitle;
- (id)_draggedLinkURL;
- (id)_editingDelegateForwarder;
- (bool)_effectiveAppearanceIsDark;
- (id)_elementAtWindowPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_endedDataInteraction:(struct CGPoint { double x1; double x2; })arg1 global:(struct CGPoint { double x1; double x2; })arg2;
- (void)_enterVideoFullscreenForVideoElement:(struct HTMLVideoElement { int (**x1)(); struct Weak<WebCore::JSDOMObject> { struct WeakImpl {} *x_2_1_1; } x2; int x3; unsigned int x4; struct ContainerNode {} *x5; struct TreeScope {} *x6; struct Node {} *x7; struct Node {} *x8; union DataUnion { struct RenderObject {} *x_9_1_1; struct NodeRareDataBase {} *x_9_1_2; } x9; struct Node {} *x10; struct Node {} *x11; struct QualifiedName { struct RefPtr<WebCore::QualifiedName::QualifiedNameImpl, WTF::DumbPtrTraits<WebCore::QualifiedName::QualifiedNameImpl> > { struct QualifiedNameImpl {} *x_1_2_1; } x_12_1_1; } x12; struct RefPtr<WebCore::ElementData, WTF::DumbPtrTraits<WebCore::ElementData> > { struct ElementData {} *x_13_1_1; } x13; int (**x14)(); struct ScriptExecutionContext {} *x15; unsigned int x16; int (**x17)(); struct WeakPtrFactory<WebCore::HTMLMediaElement> { struct RefPtr<WTF::WeakReference<WebCore::HTMLMediaElement>, WTF::DumbPtrTraits<WTF::WeakReference<WebCore::HTMLMediaElement> > > { struct WeakReference<WebCore::HTMLMediaElement> {} *x_1_2_1; } x_18_1_1; } x18; int (**x19)(); }*)arg1 mode:(unsigned int)arg2;
- (unsigned long long)_enteredDataInteraction:(id)arg1 client:(struct CGPoint { double x1; double x2; })arg2 global:(struct CGPoint { double x1; double x2; })arg3 operation:(unsigned long long)arg4;
- (void)_executeCoreCommandByName:(id)arg1 value:(id)arg2;
- (void)_exitVideoFullscreen;
- (void)_exitedDataInteraction:(id)arg1 client:(struct CGPoint { double x1; double x2; })arg2 global:(struct CGPoint { double x1; double x2; })arg3 operation:(unsigned long long)arg4;
- (bool)_fetchCustomFixedPositionLayoutRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (struct CGSize { double x1; double x2; })_fixedLayoutSize;
- (id)_fixedPositionContent;
- (bool)_flushCompositingChanges;
- (id)_focusedFrame;
- (id)_formDelegate;
- (id)_formDelegateForSelector:(SEL)arg1;
- (id)_formDelegateForwarder;
- (id)_frameLoadDelegateForwarder;
- (id)_frameViewAtWindowPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)_gapBetweenPages;
- (void)_geolocationDidChangePosition:(id)arg1;
- (void)_geolocationDidFailWithMessage:(id)arg1;
- (id)_geolocationProvider;
- (id)_getDataInteractionData;
- (bool)_inFastImageScalingMode;
- (id)_initWithArguments:(id)arg1;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 frameName:(id)arg2 groupName:(id)arg3;
- (void)_insertNewlineInQuotedContent;
- (void)_invalidateUserAgentCache;
- (bool)_isClosed;
- (bool)_isClosing;
- (bool)_isLoading;
- (bool)_isMIMETypeRegisteredAsPlugin:(id)arg1;
- (bool)_isPerformingProgrammaticFocus;
- (bool)_isProcessingUserGesture;
- (bool)_isSoftwareRenderable;
- (bool)_isStopping;
- (bool)_isUsingAcceleratedCompositing;
- (bool)_isViewVisible;
- (int)_keyboardUIMode;
- (unsigned long long)_layoutMilestones;
- (void)_listenForLayoutMilestones:(unsigned long long)arg1;
- (void)_loadBackForwardListFromOtherView:(id)arg1;
- (bool)_locked_plugInsAreRunningInFrame:(id)arg1;
- (void)_locked_recursivelyPerformPlugInSelector:(SEL)arg1 inFrame:(id)arg2;
- (struct Frame { int (**x1)(); struct atomic<unsigned int> { unsigned int x_2_1_1; } x2; struct Ref<WebCore::WindowProxy, WTF::DumbPtrTraits<WebCore::WindowProxy> > { struct WindowProxy {} *x_3_1_1; } x3; struct HashSet<WebCore::FrameDestructionObserver *, WTF::PtrHash<WebCore::FrameDestructionObserver *>, WTF::HashTraits<WebCore::FrameDestructionObserver *> > { struct HashTable<WebCore::FrameDestructionObserver *, WebCore::FrameDestructionObserver *, WTF::IdentityExtractor, WTF::PtrHash<WebCore::FrameDestructionObserver *>, WTF::HashTraits<WebCore::FrameDestructionObserver *>, WTF::HashTraits<WebCore::FrameDestructionObserver *> > { struct FrameDestructionObserver {} **x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_4_1_1; } x4; struct Frame {} *x5; struct Page {} *x6; struct RefPtr<WebCore::Settings, WTF::DumbPtrTraits<WebCore::Settings> > { struct Settings {} *x_7_1_1; } x7; struct FrameTree { struct Frame {} *x_8_1_1; struct Frame {} *x_8_1_2; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_4_1; } x_1_3_1; } x_3_2_1; } x_8_1_3; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_4_1; } x_1_3_1; } x_4_2_1; } x_8_1_4; struct RefPtr<WebCore::Frame, WTF::DumbPtrTraits<WebCore::Frame> > { struct Frame {} *x_5_2_1; } x_8_1_5; struct Frame {} *x_8_1_6; struct RefPtr<WebCore::Frame, WTF::DumbPtrTraits<WebCore::Frame> > { struct Frame {} *x_7_2_1; } x_8_1_7; struct Frame {} *x_8_1_8; unsigned int x_8_1_9; unsigned long long x_8_1_10; } x8; }*)_mainCoreFrame;
- (id)_mainFrameOverrideEncoding;
- (void)_mouseDidMoveOverElement:(id)arg1 modifierFlags:(unsigned long long)arg2;
- (bool)_needsOneShotDrawingSynchronization;
- (bool)_needsPreHTML5ParserQuirks;
- (void)_notificationDidClick:(unsigned long long)arg1;
- (void)_notificationDidShow:(unsigned long long)arg1;
- (unsigned long long)_notificationIDForTesting:(struct OpaqueJSValue { }*)arg1;
- (id)_notificationProvider;
- (void)_notificationsDidClose:(id)arg1;
- (id)_objectForIdentifier:(unsigned long long)arg1;
- (id)_openNewWindowWithRequest:(id)arg1;
- (void)_overflowScrollPositionChangedTo:(struct CGPoint { double x1; double x2; })arg1 forNode:(id)arg2 isUserScroll:(bool)arg3;
- (unsigned long long)_pageCount;
- (double)_pageLength;
- (bool)_paginationBehavesLikeColumns;
- (bool)_paginationLineGridEnabled;
- (int)_paginationMode;
- (void)_performDataInteraction:(id)arg1 client:(struct CGPoint { double x1; double x2; })arg2 global:(struct CGPoint { double x1; double x2; })arg3 operation:(unsigned long long)arg4;
- (void)_performResponderOperation:(SEL)arg1 with:(id)arg2;
- (id)_pluginForExtension:(id)arg1;
- (id)_pluginForMIMEType:(id)arg1;
- (bool)_pluginsAreRunning;
- (id)_policyDelegateForwarder;
- (void)_popPerformingProgrammaticFocus;
- (bool)_postsAcceleratedCompositingNotifications;
- (void)_preferencesChanged:(id)arg1;
- (void)_preferencesChangedNotification:(id)arg1;
- (void)_pushPerformingProgrammaticFocus;
- (float)_realZoomMultiplier;
- (bool)_realZoomMultiplierIsTextOnly;
- (void)_removeFromAllWebViewsSet;
- (void)_removeObjectForIdentifier:(unsigned long long)arg1;
- (unsigned long long)_renderTreeSize;
- (void)_replaceCurrentHistoryItem:(id)arg1;
- (void)_replaceSelectionWithNode:(id)arg1 matchStyle:(bool)arg2;
- (bool)_requestStartDataInteraction:(struct CGPoint { double x1; double x2; })arg1 globalPosition:(struct CGPoint { double x1; double x2; })arg2;
- (void)_resetAllGeolocationPermission;
- (void)_resetZoom:(id)arg1 isTextOnly:(bool)arg2;
- (id)_resourceLoadDelegateForwarder;
- (id)_responderForResponderOperations;
- (void)_restorePlugInsFromCache;
- (void)_retrieveKeyboardUIModeFromPreferences:(id)arg1;
- (void)_scaleWebView:(float)arg1 atOrigin:(struct CGPoint { double x1; double x2; })arg2;
- (void)_scheduleCompositingLayerFlush;
- (void)_scheduleLayerFlushForPendingTileCacheRepaint;
- (id)_selectedOrMainFrame;
- (bool)_selectionIsAll;
- (bool)_selectionIsCaret;
- (void)_setAllowsMessaging:(bool)arg1;
- (void)_setBaseCTM:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 forContext:(struct CGContext { }*)arg2;
- (void)_setBrowserUserAgentProductVersion:(id)arg1 buildVersion:(id)arg2 bundleVersion:(id)arg3;
- (void)_setCookieEnabled:(bool)arg1;
- (void)_setCustomFixedPositionLayoutRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setCustomFixedPositionLayoutRectInWebThread:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 synchronize:(bool)arg2;
- (void)_setDeviceOrientation:(unsigned long long)arg1;
- (void)_setDeviceOrientationProvider:(id)arg1;
- (void)_setFixedLayoutSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_setFontFallbackPrefersPictographs:(bool)arg1;
- (void)_setFormDelegate:(id)arg1;
- (void)_setGapBetweenPages:(double)arg1;
- (void)_setGeolocationProvider:(id)arg1;
- (void)_setHostApplicationProcessIdentifier:(int)arg1 auditToken:(struct { unsigned int x1[8]; })arg2;
- (void)_setIsVisible:(bool)arg1;
- (void)_setMaintainsInactiveSelection:(bool)arg1;
- (bool)_setMediaLayer:(id)arg1 forPluginView:(id)arg2;
- (void)_setNeedsOneShotDrawingSynchronization:(bool)arg1;
- (void)_setNeedsUnrestrictedGetMatchedCSSRules:(bool)arg1;
- (void)_setNotificationProvider:(id)arg1;
- (void)_setPageLength:(double)arg1;
- (void)_setPaginationBehavesLikeColumns:(bool)arg1;
- (void)_setPaginationLineGridEnabled:(bool)arg1;
- (void)_setPaginationMode:(int)arg1;
- (void)_setPostsAcceleratedCompositingNotifications:(bool)arg1;
- (void)_setResourceLoadSchedulerSuspended:(bool)arg1;
- (void)_setSourceApplicationAuditData:(id)arg1;
- (void)_setUIKitDelegate:(id)arg1;
- (void)_setUIWebViewUserAgentWithBuildVersion:(id)arg1;
- (void)_setUnobscuredSafeAreaInsets:(struct WebEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setUseFastImageScalingMode:(bool)arg1;
- (void)_setUseFixedLayout:(bool)arg1;
- (void)_setUseSystemAppearance:(bool)arg1;
- (void)_setVisibilityState:(int)arg1 isInitialState:(bool)arg2;
- (void)_setWantsTelephoneNumberParsing:(bool)arg1;
- (void)_setWebGLEnabled:(bool)arg1;
- (void)_setZoomMultiplier:(float)arg1 isTextOnly:(bool)arg2;
- (bool)_shouldChangeSelectedDOMRange:(id)arg1 toDOMRange:(id)arg2 affinity:(int)arg3 stillSelecting:(bool)arg4;
- (void)_simplifyMarkup:(id)arg1 endNode:(id)arg2;
- (id)_sourceApplicationAuditData;
- (void)_startAllPlugIns;
- (void)_startDrag:(const struct DragItem { struct DragImage { struct RetainPtr<CGImage *> { void *x_1_2_1; } x_1_1_1; struct Optional<WebCore::TextIndicatorData> { bool x_2_2_1; union storage_t<WebCore::TextIndicatorData> { unsigned char x_2_3_1; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x_1_6_1; float x_1_6_2; } x_1_5_1; struct FloatSize { float x_2_6_1; float x_2_6_2; } x_1_5_2; } x_2_4_1; struct FloatRect { struct FloatPoint { float x_1_6_1; float x_1_6_2; } x_2_5_1; struct FloatSize { float x_2_6_1; float x_2_6_2; } x_2_5_2; } x_2_4_2; struct FloatRect { struct FloatPoint { float x_1_6_1; float x_1_6_2; } x_3_5_1; struct FloatSize { float x_2_6_1; float x_2_6_2; } x_3_5_2; } x_2_4_3; struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16> { struct FloatRect {} *x_4_5_1; unsigned int x_4_5_2; unsigned int x_4_5_3; } x_2_4_4; float x_2_4_5; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_6_5_1; } x_2_4_6; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_7_5_1; } x_2_4_7; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_8_5_1; } x_2_4_8; struct Color { union { unsigned long long x_1_6_1; struct ExtendedColor {} *x_1_6_2; } x_9_5_1; } x_2_4_9; } x_2_3_2; } x_2_2_2; } x_1_1_2; } x1; }*)arg1;
- (void)_stopAllPlugIns;
- (void)_stopAllPlugInsForPageCache;
- (void)_synchronizeCustomFixedPositionLayoutRect;
- (id)_touchEventRegions;
- (bool)_tryToPerformDataInteraction:(id)arg1 client:(struct CGPoint { double x1; double x2; })arg2 global:(struct CGPoint { double x1; double x2; })arg3 operation:(unsigned long long)arg4;
- (struct WebEdgeInsets { double x1; double x2; double x3; double x4; })_unobscuredSafeAreaInsets;
- (void)_updateActiveState;
- (void)_updateScreenScaleFromWindow;
- (void)_updateVisibilityState;
- (unsigned long long)_updatedDataInteraction:(id)arg1 client:(struct CGPoint { double x1; double x2; })arg2 global:(struct CGPoint { double x1; double x2; })arg3 operation:(unsigned long long)arg4;
- (bool)_useFixedLayout;
- (bool)_useSystemAppearance;
- (struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_1_1; } x1; })_userAgentString;
- (bool)_viewClass:(Class*)arg1 andRepresentationClass:(Class*)arg2 forMIMEType:(id)arg3;
- (void)_viewGeometryDidChange;
- (float)_viewScaleFactor;
- (void)_viewWillDrawInternal;
- (int)_visibilityState;
- (void)_wakWindowScreenScaleChanged:(id)arg1;
- (void)_wakWindowVisibilityChanged:(id)arg1;
- (bool)_wantsTelephoneNumberParsing;
- (bool)_webGLEnabled;
- (id)_webMailDelegate;
- (id)_webcore_effectiveFirstResponder;
- (void)_willStartScrollingOrZooming;
- (void)_windowVisibilityChanged:(id)arg1;
- (void)_zoomIn:(id)arg1 isTextOnly:(bool)arg2;
- (float)_zoomMultiplier:(bool)arg1;
- (void)_zoomOut:(id)arg1 isTextOnly:(bool)arg2;
- (bool)acceptsFirstResponder;
- (void)addCaretChangeListener:(id)arg1;
- (void)addVisitedLinks:(id)arg1;
- (void)alignCenter:(id)arg1;
- (void)alignJustified:(id)arg1;
- (void)alignLeft:(id)arg1;
- (void)alignRight:(id)arg1;
- (bool)allowsNewCSSAnimationsWhileSuspended;
- (bool)allowsRemoteInspection;
- (bool)allowsUndo;
- (id)applicationNameForUserAgent;
- (void)applyStyle:(id)arg1;
- (bool)areMemoryCacheDelegateCallsEnabled;
- (id)backForwardList;
- (struct CGColor { }*)backgroundColor;
- (bool)becomeFirstResponder;
- (bool)canGoBack;
- (bool)canGoForward;
- (bool)canMakeTextLarger;
- (bool)canMakeTextSmaller;
- (bool)canMakeTextStandardSize;
- (bool)canMarkAllTextMatches;
- (bool)canResetPageZoom;
- (bool)canZoomPageIn;
- (bool)canZoomPageOut;
- (id)candidateList;
- (void)capitalizeWord:(id)arg1;
- (id)caretChangeListener;
- (id)caretChangeListeners;
- (void)caretChanged;
- (void)centerSelectionInVisibleArea:(id)arg1;
- (void)changeAttributes:(id)arg1;
- (void)changeBaseWritingDirection:(id)arg1;
- (void)changeBaseWritingDirectionToLTR:(id)arg1;
- (void)changeBaseWritingDirectionToRTL:(id)arg1;
- (void)changeColor:(id)arg1;
- (void)changeDocumentBackgroundColor:(id)arg1;
- (void)changeFont:(id)arg1;
- (void)changeSpelling:(id)arg1;
- (void)checkSpelling:(id)arg1;
- (void)clearText:(id)arg1;
- (void)close;
- (void)complete:(id)arg1;
- (id)computedStyleForElement:(id)arg1 pseudoElement:(id)arg2;
- (void)copy:(id)arg1;
- (void)copyFont:(id)arg1;
- (unsigned long long)countMatchesForText:(id)arg1 caseSensitive:(bool)arg2 highlight:(bool)arg3 limit:(unsigned long long)arg4 markMatches:(bool)arg5;
- (unsigned long long)countMatchesForText:(id)arg1 inDOMRange:(id)arg2 options:(unsigned long long)arg3 highlight:(bool)arg4 limit:(unsigned long long)arg5 markMatches:(bool)arg6;
- (unsigned long long)countMatchesForText:(id)arg1 options:(unsigned long long)arg2 highlight:(bool)arg3 limit:(unsigned long long)arg4 markMatches:(bool)arg5;
- (bool)cssAnimationsSuspended;
- (id)currentNodeHighlight;
- (id)customTextEncodingName;
- (id)customUserAgent;
- (void)cut:(id)arg1;
- (void)dealloc;
- (bool)defersCallbacks;
- (void)delete:(id)arg1;
- (void)deleteBackward:(id)arg1;
- (void)deleteBackwardByDecomposingPreviousCharacter:(id)arg1;
- (void)deleteForward:(id)arg1;
- (void)deleteSelection;
- (void)deleteToBeginningOfLine:(id)arg1;
- (void)deleteToBeginningOfParagraph:(id)arg1;
- (void)deleteToEndOfLine:(id)arg1;
- (void)deleteToEndOfParagraph:(id)arg1;
- (void)deleteToMark:(id)arg1;
- (void)deleteWordBackward:(id)arg1;
- (void)deleteWordForward:(id)arg1;
- (id)documentViewAtWindowPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)downloadDelegate;
- (struct DragData { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; struct IntPoint { int x_2_1_1; int x_2_1_2; } x2; void *x3; int x4; int x5; struct Vector<WTF::String, 0, WTF::CrashOnOverflow, 16> { struct String {} *x_6_1_1; unsigned int x_6_1_2; unsigned int x_6_1_3; } x6; int x7; struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_2_1; } x_8_1_1; } x8; })dragDataForSession:(id)arg1 client:(struct CGPoint { double x1; double x2; })arg2 global:(struct CGPoint { double x1; double x2; })arg3 operation:(unsigned long long)arg4;
- (unsigned long long)dragDestinationActionMaskForSession:(id)arg1;
- (bool)drawsBackground;
- (id)editableDOMRangeForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)editingDelegate;
- (id)elementAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)estimatedProgress;
- (bool)findString:(id)arg1 options:(unsigned long long)arg2;
- (void)forceRequestCandidatesForTesting;
- (id)frameLoadDelegate;
- (id)fullScreenPlaceholderView;
- (bool)goBack;
- (void)goBack:(id)arg1;
- (bool)goForward;
- (void)goForward:(id)arg1;
- (bool)goToBackForwardItem:(id)arg1;
- (id)groupName;
- (void)hideFormValidationMessage;
- (id)historyDelegate;
- (id)hostWindow;
- (void)ignoreSpelling:(id)arg1;
- (void)indent:(id)arg1;
- (id)initSimpleHTMLDocumentWithStyle:(id)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 preferences:(id)arg3 groupName:(id)arg4;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 frameName:(id)arg2 groupName:(id)arg3;
- (void)insertBacktab:(id)arg1;
- (void)insertDictationPhrases:(id)arg1 metadata:(id)arg2;
- (void)insertLineBreak:(id)arg1;
- (void)insertNewline:(id)arg1;
- (void)insertNewlineIgnoringFieldEditor:(id)arg1;
- (void)insertParagraphSeparator:(id)arg1;
- (void)insertTab:(id)arg1;
- (void)insertTabIgnoringFieldEditor:(id)arg1;
- (void)insertText:(id)arg1;
- (id)inspector;
- (bool)interactiveFormValidationEnabled;
- (bool)isAutomaticDashSubstitutionEnabled;
- (bool)isAutomaticLinkDetectionEnabled;
- (bool)isAutomaticQuoteSubstitutionEnabled;
- (bool)isAutomaticSpellingCorrectionEnabled;
- (bool)isAutomaticTextReplacementEnabled;
- (bool)isContinuousSpellCheckingEnabled;
- (bool)isEditable;
- (bool)isLoading;
- (bool)isSelectTrailingWhitespaceEnabled;
- (bool)isTrackingRepaints;
- (void)lowercaseWord:(id)arg1;
- (id)mainFrame;
- (id)mainFrameDocument;
- (id)mainFrameIconURL;
- (id)mainFrameTitle;
- (id)mainFrameURL;
- (bool)maintainsInactiveSelection;
- (void)makeBaseWritingDirectionLeftToRight:(id)arg1;
- (void)makeBaseWritingDirectionRightToLeft:(id)arg1;
- (void)makeTextLarger:(id)arg1;
- (void)makeTextSmaller:(id)arg1;
- (void)makeTextStandardSize:(id)arg1;
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;
- (void)makeTextWritingDirectionNatural:(id)arg1;
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;
- (unsigned long long)markAllMatchesForText:(id)arg1 caseSensitive:(bool)arg2 highlight:(bool)arg3 limit:(unsigned long long)arg4;
- (id)mediaStyle;
- (float)mediaVolume;
- (void)moveBackward:(id)arg1;
- (void)moveBackwardAndModifySelection:(id)arg1;
- (void)moveDown:(id)arg1;
- (void)moveDownAndModifySelection:(id)arg1;
- (void)moveForward:(id)arg1;
- (void)moveForwardAndModifySelection:(id)arg1;
- (void)moveLeft:(id)arg1;
- (void)moveLeftAndModifySelection:(id)arg1;
- (void)moveParagraphBackwardAndModifySelection:(id)arg1;
- (void)moveParagraphForwardAndModifySelection:(id)arg1;
- (void)moveRight:(id)arg1;
- (void)moveRightAndModifySelection:(id)arg1;
- (void)moveToBeginningOfDocument:(id)arg1;
- (void)moveToBeginningOfDocumentAndModifySelection:(id)arg1;
- (void)moveToBeginningOfLine:(id)arg1;
- (void)moveToBeginningOfLineAndModifySelection:(id)arg1;
- (void)moveToBeginningOfParagraph:(id)arg1;
- (void)moveToBeginningOfParagraphAndModifySelection:(id)arg1;
- (void)moveToBeginningOfSentence:(id)arg1;
- (void)moveToBeginningOfSentenceAndModifySelection:(id)arg1;
- (void)moveToEndOfDocument:(id)arg1;
- (void)moveToEndOfDocumentAndModifySelection:(id)arg1;
- (void)moveToEndOfLine:(id)arg1;
- (void)moveToEndOfLineAndModifySelection:(id)arg1;
- (void)moveToEndOfParagraph:(id)arg1;
- (void)moveToEndOfParagraphAndModifySelection:(id)arg1;
- (void)moveToEndOfSentence:(id)arg1;
- (void)moveToEndOfSentenceAndModifySelection:(id)arg1;
- (void)moveToLeftEndOfLine:(id)arg1;
- (void)moveToLeftEndOfLineAndModifySelection:(id)arg1;
- (void)moveToRightEndOfLine:(id)arg1;
- (void)moveToRightEndOfLineAndModifySelection:(id)arg1;
- (void)moveUp:(id)arg1;
- (void)moveUpAndModifySelection:(id)arg1;
- (void)moveWordBackward:(id)arg1;
- (void)moveWordBackwardAndModifySelection:(id)arg1;
- (void)moveWordForward:(id)arg1;
- (void)moveWordForwardAndModifySelection:(id)arg1;
- (void)moveWordLeft:(id)arg1;
- (void)moveWordLeftAndModifySelection:(id)arg1;
- (void)moveWordRight:(id)arg1;
- (void)moveWordRightAndModifySelection:(id)arg1;
- (void)orderFrontSubstitutionsPanel:(id)arg1;
- (void)outdent:(id)arg1;
- (void)overWrite:(id)arg1;
- (struct Page { struct HashMap<const char *, std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > >, WTF::PtrHash<const char *>, WTF::HashTraits<const char *>, WTF::HashTraits<std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > > > > { struct HashTable<const char *, WTF::KeyValuePair<const char *, std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<const char *, std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > > > >, WTF::PtrHash<const char *>, WTF::HashMap<const char *, std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > >, WTF::PtrHash<const char *>, WTF::HashTraits<const char *>, WTF::HashTraits<std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > > > >::KeyValuePairTraits, WTF::HashTraits<const char *> > { struct KeyValuePair<const char *, std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > > > {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_1_1_1; } x1; }*)page;
- (void)pageDown:(id)arg1;
- (void)pageDownAndModifySelection:(id)arg1;
- (float)pageSizeMultiplier;
- (void)pageUp:(id)arg1;
- (void)pageUpAndModifySelection:(id)arg1;
- (void)paste:(id)arg1;
- (void)pasteAsPlainText:(id)arg1;
- (void)pasteAsRichText:(id)arg1;
- (void)pasteFont:(id)arg1;
- (void)performFindPanelAction:(id)arg1;
- (id)policyDelegate;
- (id)preferences;
- (id)preferencesIdentifier;
- (void)prepareForMouseDown;
- (void)prepareForMouseUp;
- (id)previousValidKeyView;
- (id)quickLookContentForURL:(id)arg1;
- (id)rectsForTextMatches;
- (void)registerForEditingDelegateNotification:(id)arg1 selector:(SEL)arg2;
- (void)reload:(id)arg1;
- (void)reloadFromOrigin:(id)arg1;
- (void)removeAllCaretChangeListeners;
- (void)removeCaretChangeListener:(id)arg1;
- (void)removeVisitedLink:(id)arg1;
- (void)replaceSelectionWithArchive:(id)arg1;
- (void)replaceSelectionWithMarkupString:(id)arg1;
- (void)replaceSelectionWithNode:(id)arg1;
- (void)replaceSelectionWithText:(id)arg1;
- (void)resetPageZoom:(id)arg1;
- (void)resetTrackedRepaints;
- (id)resourceLoadDelegate;
- (void)scheduleInRunLoop:(id)arg1 forMode:(id)arg2;
- (id)scriptDebugDelegate;
- (void)scrollDOMRangeToVisible:(id)arg1;
- (void)scrollDOMRangeToVisible:(id)arg1 withInset:(double)arg2;
- (void)scrollLineDown:(id)arg1;
- (void)scrollLineUp:(id)arg1;
- (void)scrollPageDown:(id)arg1;
- (void)scrollPageUp:(id)arg1;
- (void)scrollToBeginningOfDocument:(id)arg1;
- (void)scrollToEndOfDocument:(id)arg1;
- (bool)searchFor:(id)arg1 direction:(bool)arg2 caseSensitive:(bool)arg3 wrap:(bool)arg4;
- (bool)searchFor:(id)arg1 direction:(bool)arg2 caseSensitive:(bool)arg3 wrap:(bool)arg4 startInSelection:(bool)arg5;
- (void)selectAll:(id)arg1;
- (void)selectLine:(id)arg1;
- (void)selectParagraph:(id)arg1;
- (void)selectSentence:(id)arg1;
- (void)selectToMark:(id)arg1;
- (void)selectWord:(id)arg1;
- (id)selectedDOMRange;
- (id)selectedFrame;
- (int)selectionAffinity;
- (void)setAllowsNewCSSAnimationsWhileSuspended:(bool)arg1;
- (void)setAllowsRemoteInspection:(bool)arg1;
- (void)setAllowsUndo:(bool)arg1;
- (void)setApplicationNameForUserAgent:(id)arg1;
- (void)setBackgroundColor:(struct CGColor { }*)arg1;
- (void)setCSSAnimationsSuspended:(bool)arg1;
- (void)setCaretChangeListener:(id)arg1;
- (void)setContinuousSpellCheckingEnabled:(bool)arg1;
- (void)setCurrentNodeHighlight:(id)arg1;
- (void)setCustomTextEncodingName:(id)arg1;
- (void)setCustomUserAgent:(id)arg1;
- (void)setDefersCallbacks:(bool)arg1;
- (void)setDownloadDelegate:(id)arg1;
- (void)setDrawsBackground:(bool)arg1;
- (void)setEditable:(bool)arg1;
- (void)setEditingDelegate:(id)arg1;
- (void)setFrameLoadDelegate:(id)arg1;
- (void)setGroupName:(id)arg1;
- (void)setHistoryDelegate:(id)arg1;
- (void)setHostWindow:(id)arg1;
- (void)setInteractiveFormValidationEnabled:(bool)arg1;
- (void)setMainFrameDocumentReady:(bool)arg1;
- (void)setMainFrameURL:(id)arg1;
- (void)setMaintainsBackForwardList:(bool)arg1;
- (void)setMark:(id)arg1;
- (void)setMediaStyle:(id)arg1;
- (void)setMediaVolume:(float)arg1;
- (void)setMemoryCacheDelegateCallsEnabled:(bool)arg1;
- (void)setNextKeyView:(id)arg1;
- (void)setPageSizeMultiplier:(float)arg1;
- (void)setPolicyDelegate:(id)arg1;
- (void)setPreferences:(id)arg1;
- (void)setPreferencesIdentifier:(id)arg1;
- (void)setResourceLoadDelegate:(id)arg1;
- (void)setScriptDebugDelegate:(id)arg1;
- (void)setSelectTrailingWhitespaceEnabled:(bool)arg1;
- (void)setSelectedDOMRange:(id)arg1 affinity:(int)arg2;
- (void)setShouldCloseWithWindow:(bool)arg1;
- (void)setShouldUpdateWhileOffscreen:(bool)arg1;
- (void)setShowingInspectorIndication:(bool)arg1;
- (void)setSmartInsertDeleteEnabled:(bool)arg1;
- (void)setTabKeyCyclesThroughElements:(bool)arg1;
- (void)setTextSizeMultiplier:(float)arg1;
- (void)setTracksRepaints:(bool)arg1;
- (void)setTypingStyle:(id)arg1;
- (void)setUIDelegate:(id)arg1;
- (void)setUsesPageCache:(bool)arg1;
- (void)setValidationMessageTimerMagnification:(int)arg1;
- (void)setWebMailDelegate:(id)arg1;
- (bool)shouldClose;
- (bool)shouldCloseWithWindow;
- (bool)shouldRequestCandidates;
- (bool)shouldUpdateWhileOffscreen;
- (void)showCandidates:(id)arg1 forString:(id)arg2 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 forSelectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 view:(id)arg5 completionHandler:(id /* block */)arg6;
- (void)showFormValidationMessage:(id)arg1 withAnchorRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)showGuessPanel:(id)arg1;
- (bool)smartInsertDeleteEnabled;
- (void)startSpeaking:(id)arg1;
- (void)stopLoading:(id)arg1;
- (void)stopLoadingAndClear;
- (void)stopSpeaking:(id)arg1;
- (id)stringByEvaluatingJavaScriptFromString:(id)arg1;
- (id)styleAtSelectionStart;
- (id)styleDeclarationWithText:(id)arg1;
- (void)subscript:(id)arg1;
- (void)superscript:(id)arg1;
- (bool)supportsTextEncoding;
- (void)swapWithMark:(id)arg1;
- (bool)tabKeyCyclesThroughElements;
- (void)takeFindStringFromSelection:(id)arg1;
- (void)takeStringURLFrom:(id)arg1;
- (id)textIteratorForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (float)textSizeMultiplier;
- (void)toggleBaseWritingDirection:(id)arg1;
- (void)toggleBold:(id)arg1;
- (void)toggleContinuousSpellChecking:(id)arg1;
- (void)toggleItalic:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (id)trackedRepaintRects;
- (void)transpose:(id)arg1;
- (id)typingAttributes;
- (id)typingStyle;
- (void)underline:(id)arg1;
- (id)undoManager;
- (void)unmarkAllTextMatches;
- (void)unscheduleFromRunLoop:(id)arg1 forMode:(id)arg2;
- (void)unscript:(id)arg1;
- (void)updateLayoutIgnorePendingStyleSheets;
- (void)updateTouchBar;
- (void)uppercaseWord:(id)arg1;
- (id)userAgentForURL:(id)arg1;
- (bool)usesPageCache;
- (int)validationMessageTimerMagnification;
- (void)viewDidChangeEffectiveAppearance;
- (void)viewDidMoveToWindow;
- (id)windowScriptObject;
- (void)yank:(id)arg1;
- (void)yankAndSelect:(id)arg1;
- (void)zoomPageIn:(id)arg1;
- (void)zoomPageOut:(id)arg1;

// Image: /System/Library/PrivateFrameworks/WebBookmarks.framework/WebBookmarks

- (bool)_createSymlinkInDirectory:(id)arg1 pointingToPath:(id)arg2;
- (id)_quickLookContentFilePath;
- (bool)_writeDataAtPath:(id)arg1 asArchive:(bool)arg2;

@end
