/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PASampling.framework/PASampling
 */

@interface PASampleTimeSeriesDataStore : NSObject <NSSecureCoding> {
    struct _CSArchitecture { 
        int cpu_type; 
        int cpu_subtype; 
    }  _arch;
    double  _attemptedSamplingInterval;
    PABinaryLocator * _binaryLocator;
    unsigned int  _cpuDuration;
    unsigned int  _cpuPercent;
    unsigned long long  _dataSource;
    NSString * _durationNote;
    double  _endMachTimestamp;
    double  _endWallTimestamp;
    NSString * _event;
    NSString * _eventNote;
    bool  _expectsLiveProcesses;
    double  _extraDuration;
    NSMutableArray * _fanSpeedArray;
    PAGenealogyTracker * _genealogyTracker;
    NSString * _hardwareModel;
    NSString * _kernelVersion;
    NSString * _kextStat;
    struct mach_timebase_info { 
        unsigned int numer; 
        unsigned int denom; 
    }  _machTimebase;
    NSString * _machineArchitecture;
    PAMountStatusTracker * _mountStatusTracker;
    NSMutableArray * _namesForDsymForUUID;
    unsigned int  _numActiveCPUs;
    NSMutableArray * _numsForDsymForUUID;
    NSMutableDictionary * _oldSymbolHandleCache;
    bool  _omitSensitiveStrings;
    bool  _omitThirdPartyProcessStacks;
    NSString * _osBuildVersion;
    NSString * _osProductName;
    NSString * _osProductVersion;
    NSMutableSet * _pidsToTrack;
    unsigned long long  _previousSampleTimestamp;
    unsigned int  _previousStackshotBufferSize;
    NSString * _reason;
    NSMutableSet * _rootKernelFrames;
    bool  _sampleOnlyMainThreads;
    bool  _sanitizePaths;
    bool  _shouldGatherKextStat;
    bool  _shouldPreemptivelyCacheSymbolicators;
    bool  _shouldSymbolicate;
    NSString * _signature;
    double  _startMachTimestamp;
    double  _startWallTimestamp;
    NSString * _stepsNote;
    PASymbolDataStore * _symbolDataStore;
    NSMutableDictionary * _symbolHandleCache;
    NSString * _targetProcessBundleBuildVersion;
    NSString * _targetProcessBundleProductBuildVersion;
    NSString * _targetProcessBundleProjectName;
    NSString * _targetProcessBundleShortVersion;
    NSString * _targetProcessBundleSourceVersion;
    NSString * _targetProcessBundleVersion;
    NSString * _targetProcessCommerceAppID;
    NSString * _targetProcessCommerceExternalID;
    int  _targetProcessId;
    PASampleTimeInsensitiveTaskData * _targetTask;
    unsigned long long  _targetThreadId;
    NSMutableDictionary * _timeInsensitiveTaskDataDict;
    NSMutableArray * _timeSensitiveSampleDataArray;
    double  _timeWhenTransitionedToSamplingAllProcesses;
    bool  _usingDsymForUUIDForEverything;
    unsigned int  _wakeupsDuration;
    unsigned int  _wakeupsPerSec;
    unsigned int  _workQueueHardThreadLimit;
    unsigned int  _workQueueSoftThreadLimit;
    PAWSUpdateDataStore * _wsDataStore;
}

@property double attemptedSamplingInterval;
@property unsigned int cpuDuration;
@property unsigned int cpuPercent;
@property (readonly) unsigned long long dataSource;
@property (copy) NSString *durationNote;
@property (readonly) double endMachTimestamp;
@property (readonly) double endWallTimestamp;
@property (copy) NSString *event;
@property (copy) NSString *eventNote;
@property bool expectsLiveProcesses;
@property double extraDuration;
@property (readonly) PAGenealogyTracker *genealogyTracker;
@property (copy) NSString *hardwareModel;
@property (readonly) PAImageInfo *kernelCache;
@property (readonly) NSString *kernelVersion;
@property (readonly, copy) NSString *kextStat;
@property (copy) NSString *machineArchitecture;
@property (readonly) PAMountStatusTracker *mountStatusTracker;
@property unsigned int numActiveCPUs;
@property (readonly) unsigned long long numSamples;
@property bool omitSensitiveStrings;
@property bool omitThirdPartyProcessStacks;
@property (copy) NSString *osBuildVersion;
@property (copy) NSString *osProductName;
@property (copy) NSString *osProductVersion;
@property (copy) NSString *reason;
@property bool sampleOnlyMainThreads;
@property (readonly) NSArray *samples;
@property bool sanitizePaths;
@property bool shouldGatherKextStat;
@property bool shouldPreemptivelyCacheSymbolicators;
@property bool shouldSymbolicate;
@property bool shouldUseDsymForUUIDToFindBinaries;
@property (copy) NSString *signature;
@property (readonly) double startMachTimestamp;
@property (readonly) double startWallTimestamp;
@property (copy) NSString *stepsNote;
@property (readonly) NSString *targetProcessAbsolutePath;
@property (readonly) NSString *targetProcessBundleBuildVersion;
@property (readonly) NSString *targetProcessBundleName;
@property (readonly) NSString *targetProcessBundleProductBuildVersion;
@property (readonly) NSString *targetProcessBundleProjectName;
@property (readonly) NSString *targetProcessBundleShortVersion;
@property (readonly) NSString *targetProcessBundleSourceVersion;
@property (readonly) NSString *targetProcessBundleVersion;
@property (readonly) NSString *targetProcessCommerceAppID;
@property (readonly) NSString *targetProcessCommerceExternalID;
@property int targetProcessId;
@property (readonly) NSString *targetProcessName;
@property unsigned long long targetThreadId;
@property double timeWhenTransitionedToSamplingAllProcesses;
@property unsigned int wakeupsDuration;
@property unsigned int wakeupsPerSec;
@property (readonly) unsigned int workQueueHardThreadLimit;
@property (readonly) unsigned int workQueueSoftThreadLimit;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (unsigned long long)_addKCDataStackshotFromBuffer:(const void*)arg1 withLength:(unsigned long long)arg2 toSample:(id)arg3 shouldSkipSampleOut:(bool*)arg4;
- (void)_addSampleToSampleArray:(id)arg1;
- (bool)_addStackshot:(id)arg1;
- (void)_asynchronouslyCacheSymbolicatorForPid:(int)arg1;
- (void)addDSCSymFromBuffer:(const void*)arg1 withLength:(unsigned long long)arg2;
- (void)addDsymPaths:(id)arg1;
- (unsigned long long)addKCDataStackshotFromBuffer:(const void*)arg1 withLength:(unsigned long long)arg2;
- (unsigned long long)addKCDataStackshots:(id)arg1 createSeparateSamplePerStackshot:(bool)arg2;
- (bool)addKCDataThread:(const struct thread_snapshot_v2 { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned int x12; unsigned int x13; short x14; short x15; unsigned char x16; unsigned char x17; unsigned char x18; unsigned char x19; }*)arg1 orDeltaThread:(const struct thread_delta_snapshot_v2 { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned int x5; unsigned int x6; short x7; short x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; }*)arg2 withStack:(id)arg3 andName:(const char *)arg4 toTask:(id)arg5 withCurrentThreads:(id)arg6 withPreviousThreads:(id)arg7;
- (int)addKPerfDataFromKTraceSession:(struct ktrace_session { }*)arg1 beforeTime:(unsigned long long)arg2;
- (id)addKernelStack:(id)arg1;
- (void)addPidToSampledPids:(int)arg1;
- (void)addPidsWithNameToSampledPids:(id)arg1;
- (void)addProcessInfoFromTailspin:(id)arg1;
- (void)addStackshot:(id)arg1;
- (unsigned long long)addStackshots:(id)arg1;
- (void)addSymbolsFromTailspin:(id)arg1;
- (struct _CSArchitecture { int x1; int x2; })arch;
- (double)attemptedSamplingInterval;
- (void)backfillKPerfTaskWithDataFromKCDataTask:(const struct task_snapshot_v2 { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; int x15; BOOL x16[32]; }*)arg1;
- (void)backfillKPerfThreadWithDataFromKCDataThread:(const struct thread_snapshot_v2 { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned int x12; unsigned int x13; short x14; short x15; unsigned char x16; unsigned char x17; unsigned char x18; unsigned char x19; }*)arg1 inPid:(int)arg2 withLeafUserFrame:(id)arg3 andLeafKernelFrame:(id)arg4 andName:(const char *)arg5 taskIsSuspended:(bool)arg6;
- (void)cacheSymbolInformationForAllSymbols;
- (id)cachedSymbolHandleForAddress:(unsigned long long)arg1 inPid:(int)arg2;
- (id)copyImageInfosForPid:(int)arg1;
- (unsigned int)cpuDuration;
- (unsigned int)cpuPercent;
- (unsigned long long)dataSource;
- (void)dealloc;
- (void)doneSamplingLiveSystem;
- (id)durationNote;
- (void)encodeWithCoder:(id)arg1;
- (double)endMachTimestamp;
- (double)endWallTimestamp;
- (id)event;
- (id)eventNote;
- (bool)expectsLiveProcesses;
- (double)extraDuration;
- (id)fanSpeedClosestToMachTime:(double)arg1;
- (void)flushAllCachedSymbolInformation;
- (void)flushAllSymbolicators;
- (void)flushCachedSymbolicatorForTask:(id)arg1;
- (void)gatherHardwareModel;
- (void)gatherKernelVersion;
- (void)gatherKextStat;
- (void)gatherMachineArchitecture;
- (void)gatherNonTimeCriticalDataFromLiveSystem;
- (void)gatherNumActiveCPUs;
- (void)gatherOccasionalLiveDataForMachTime:(double)arg1;
- (void)gatherOsVersions;
- (void)gatherWorkQueueHardThreadLimit;
- (void)gatherWorkQueueSoftThreadLimit;
- (id)genealogyTracker;
- (id)getMissingSampleTaskInCurrentSampleForPid:(int)arg1 andTaskName:(const char *)arg2 didExecSinceLastSample:(bool)arg3 needNewTaskForThisSample:(bool)arg4;
- (id)getMissingSampleThreadInCurrentSampleInTask:(id)arg1 forTid:(unsigned long long)arg2 needNewThreadForThisSample:(bool)arg3;
- (id)hardwareModel;
- (bool)hasSampleOnOrAfterTime:(double)arg1 returningFirstIndex:(unsigned long long*)arg2;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)kernelCache;
- (id)kernelVersion;
- (id)kextStat;
- (struct mach_timebase_info { unsigned int x1; unsigned int x2; })machTimebase;
- (id)machineArchitecture;
- (id)mountStatusTracker;
- (id)newArrayOfSamplesForSampleIndexRangeStart:(unsigned long long)arg1 end:(unsigned long long)arg2;
- (id)newArrayOfSamplesForTimeRangeWithMachStartTime:(double)arg1 andEndTime:(double)arg2;
- (id)newArrayOfSamplesForTimeRangeWithWallClockStartTime:(double)arg1 andEndTime:(double)arg2;
- (unsigned int)numActiveCPUs;
- (unsigned long long)numSamples;
- (bool)omitSensitiveStrings;
- (bool)omitThirdPartyProcessStacks;
- (id)osBuildVersion;
- (id)osProductName;
- (id)osProductVersion;
- (void)printFrameRateReportWithStartSampleIndex:(unsigned long long)arg1 andEndIndex:(unsigned long long)arg2 andStartDisplayIndex:(unsigned long long)arg3 toStream:(id)arg4;
- (id)reason;
- (bool)sampleOnlyMainThreads;
- (void)sampleTrackedPidsNow;
- (id)samples;
- (bool)sanitizePaths;
- (void)setArch:(struct _CSArchitecture { int x1; int x2; })arg1;
- (void)setAttemptedSamplingInterval:(double)arg1;
- (void)setCpuDuration:(unsigned int)arg1;
- (void)setCpuPercent:(unsigned int)arg1;
- (void)setDSCSymDir:(id)arg1;
- (void)setDurationNote:(id)arg1;
- (void)setEvent:(id)arg1;
- (void)setEventNote:(id)arg1;
- (void)setExpectsLiveProcesses:(bool)arg1;
- (void)setExtraDuration:(double)arg1;
- (void)setHardwareModel:(id)arg1;
- (void)setMachTimebase:(struct mach_timebase_info { unsigned int x1; unsigned int x2; })arg1;
- (void)setMachineArchitecture:(id)arg1;
- (void)setNumActiveCPUs:(unsigned int)arg1;
- (void)setOmitSensitiveStrings:(bool)arg1;
- (void)setOmitThirdPartyProcessStacks:(bool)arg1;
- (void)setOsBuildVersion:(id)arg1;
- (void)setOsProductName:(id)arg1;
- (void)setOsProductVersion:(id)arg1;
- (void)setReason:(id)arg1;
- (void)setSampleOnlyMainThreads:(bool)arg1;
- (void)setSanitizePaths:(bool)arg1;
- (void)setShouldGatherKextStat:(bool)arg1;
- (void)setShouldPreemptivelyCacheSymbolicators:(bool)arg1;
- (void)setShouldSymbolicate:(bool)arg1;
- (void)setShouldUseDsymForUUIDToFindBinaries:(bool)arg1;
- (void)setSignature:(id)arg1;
- (void)setStepsNote:(id)arg1;
- (void)setTargetProcessId:(int)arg1;
- (void)setTargetThreadId:(unsigned long long)arg1;
- (void)setTimeWhenTransitionedToSamplingAllProcesses:(double)arg1;
- (void)setWakeupsDuration:(unsigned int)arg1;
- (void)setWakeupsPerSec:(unsigned int)arg1;
- (bool)shouldGatherKextStat;
- (bool)shouldPreemptivelyCacheSymbolicators;
- (bool)shouldSymbolicate;
- (bool)shouldUseDsymForUUIDToFindBinaries;
- (id)signature;
- (double)startMachTimestamp;
- (double)startWallTimestamp;
- (void)startingSamplingLiveSystem;
- (id)stepsNote;
- (id)symbolHandleForAddress:(unsigned long long)arg1 inLivingPid:(int)arg2;
- (id)symbolHandleForAddress:(unsigned long long)arg1 inSampleTask:(id)arg2;
- (id)symbolHandleForOffset:(unsigned long long)arg1 inBinaryWithUUID:(id)arg2 inSampleTask:(id)arg3;
- (id)targetProcessAbsolutePath;
- (id)targetProcessBundleBuildVersion;
- (id)targetProcessBundleName;
- (id)targetProcessBundleProductBuildVersion;
- (id)targetProcessBundleProjectName;
- (id)targetProcessBundleShortVersion;
- (id)targetProcessBundleSourceVersion;
- (id)targetProcessBundleVersion;
- (id)targetProcessCommerceAppID;
- (id)targetProcessCommerceExternalID;
- (int)targetProcessId;
- (id)targetProcessName;
- (id)targetTask;
- (unsigned long long)targetThreadId;
- (id)timeInsensitiveTaskDataForKCDataStackshotDeltaTask:(const struct task_delta_snapshot_v2 { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; }*)arg1 withLoadInfos:(const struct dyld_uuid_info_64 { unsigned long long x1; unsigned char x2[16]; }*)arg2 numLoadInfos:(unsigned int)arg3 andMachineArchitecture:(struct _CSArchitecture { int x1; int x2; })arg4;
- (id)timeInsensitiveTaskDataForKCDataStackshotTask:(const struct task_snapshot_v2 { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; int x15; BOOL x16[32]; }*)arg1 withLoadInfos:(const struct dyld_uuid_info_64 { unsigned long long x1; unsigned char x2[16]; }*)arg2 numLoadInfos:(unsigned int)arg3 andMachineArchitecture:(struct _CSArchitecture { int x1; int x2; })arg4;
- (id)timeInsensitiveTaskDataForStackshotTask:(id)arg1 andMachineArchitecture:(struct _CSArchitecture { int x1; int x2; })arg2;
- (id)timeInsensitiveTaskDataForUniqueId:(unsigned long long)arg1;
- (id)timeInsensitiveTaskDataPid:(int)arg1 andUniqueId:(unsigned long long)arg2 andName:(const char *)arg3 didExec:(bool)arg4;
- (double)timeWhenTransitionedToSamplingAllProcesses;
- (void)useDsymForUUIDFor:(id)arg1;
- (unsigned long long)useKCDataStackshotAsLastKPerSampleFromBuffer:(const void*)arg1 withLength:(unsigned long long)arg2;
- (unsigned int)wakeupsDuration;
- (unsigned int)wakeupsPerSec;
- (unsigned int)workQueueHardThreadLimit;
- (unsigned int)workQueueSoftThreadLimit;

@end
