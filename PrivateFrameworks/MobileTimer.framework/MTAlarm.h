/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MobileTimer.framework/MobileTimer
 */

@interface MTAlarm : NSObject <MTDictionarySerializable, MTDiffable, MTScheduleable, NAEquatable, NSCopying, NSMutableCopying, NSSecureCoding> {
    unsigned long long  _active;
    NSUUID * _alarmID;
    bool  _allowsSnooze;
    NSDate * _bedtimeForSleepTracking;
    unsigned long long  _bedtimeHour;
    unsigned long long  _bedtimeMinute;
    unsigned long long  _bedtimeReminderMinutes;
    NSDate * _bedtimeSnoozeFireDate;
    id /* block */  _currentDateProvider;
    NSDate * _dismissedDate;
    bool  _enabled;
    NSDate * _firedDate;
    bool  _firing;
    unsigned long long  _hour;
    NSDate * _lastModifiedDate;
    unsigned long long  _minute;
    unsigned long long  _repeatSchedule;
    bool  _sleepAlarm;
    NSDate * _snoozeFireDate;
    MTSound * _sound;
    NSString * _title;
}

@property (nonatomic) unsigned long long active;
@property (getter=isActiveAndEnabledForThisDevice, nonatomic, readonly) bool activeAndEnabledForThisDevice;
@property (getter=isActiveAnywhere, nonatomic, readonly) bool activeAnywhere;
@property (getter=isActiveForThisDevice, nonatomic, readonly) bool activeForThisDevice;
@property (nonatomic, readonly) NSUUID *alarmID;
@property (nonatomic, readonly) NSURL *alarmURL;
@property (nonatomic) bool allowsSnooze;
@property (nonatomic, copy) NSDate *bedtimeForSleepTracking;
@property (nonatomic) unsigned long long bedtimeHour;
@property (nonatomic) unsigned long long bedtimeMinute;
@property (nonatomic) unsigned long long bedtimeReminderMinutes;
@property (nonatomic, copy) NSDate *bedtimeSnoozeFireDate;
@property (getter=isBedtimeSnoozed, nonatomic, readonly) bool bedtimeSnoozed;
@property (nonatomic, copy) id /* block */ currentDateProvider;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) NSDate *dismissedDate;
@property (nonatomic, readonly) NSString *displayTitle;
@property (getter=isEnabled, nonatomic) bool enabled;
@property (nonatomic, copy) NSDate *firedDate;
@property (getter=isFiring, nonatomic) bool firing;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long hour;
@property (nonatomic, copy) NSDate *lastModifiedDate;
@property (nonatomic) unsigned long long minute;
@property (nonatomic, readonly) NSDate *nextFireDate;
@property (nonatomic) unsigned long long repeatSchedule;
@property (nonatomic, readonly) bool repeats;
@property (getter=isSleepAlarm, nonatomic) bool sleepAlarm;
@property (nonatomic, readonly) long long sleepDuration;
@property (nonatomic, copy) NSDate *snoozeFireDate;
@property (getter=isSnoozed, nonatomic, readonly) bool snoozed;
@property (nonatomic, copy) MTSound *sound;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *title;

// Image: /System/Library/PrivateFrameworks/MobileTimer.framework/MobileTimer

+ (bool)_date:(id)arg1 isOnDay:(long long)arg2 calendar:(id)arg3;
+ (bool)_isInternalBuild;
+ (id)alarm;
+ (id)alarmWithHour:(unsigned long long)arg1 minute:(unsigned long long)arg2;
+ (unsigned long long)defaultActiveStatus;
+ (id)descriptionForActiveStatus:(unsigned long long)arg1;
+ (id)sleepAlarm;
+ (id)sleepAlarmWithHour:(long long)arg1 minute:(long long)arg2;
+ (id)sleepAlarmWithHour:(long long)arg1 minute:(long long)arg2 bedtimeHour:(long long)arg3 bedtimeMinute:(long long)arg4;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)_actualTriggerStartDateForDate:(id)arg1;
- (void)_copyStateOntoAlarm:(id)arg1;
- (id)_initForCopy;
- (id)_initWithCurrentTime;
- (bool)_isEqualToAlarm:(id)arg1 checkLastModified:(bool)arg2;
- (id)_nextDateHelperWithDate:(id)arg1 hour:(long long)arg2 minute:(long long)arg3 calendar:(id)arg4;
- (unsigned long long)active;
- (id)alarmID;
- (id)alarmIDString;
- (id)alarmURL;
- (bool)allowsSnooze;
- (id)bedtimeForSleepTracking;
- (unsigned long long)bedtimeHour;
- (unsigned long long)bedtimeMinute;
- (unsigned long long)bedtimeReminderMinutes;
- (id)bedtimeSnoozeFireDate;
- (long long)compare:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id /* block */)currentDateProvider;
- (id)description;
- (id)dismissedDate;
- (id)displayTitle;
- (void)encodeWithCoder:(id)arg1;
- (id)firedDate;
- (unsigned long long)hash;
- (unsigned long long)hour;
- (id)identifier;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithHour:(unsigned long long)arg1 minute:(unsigned long long)arg2;
- (id)initWithIdentifier:(id)arg1;
- (bool)isActiveAndEnabledForThisDevice;
- (bool)isActiveAnywhere;
- (bool)isActiveForThisDevice;
- (bool)isBedtimeSnoozed;
- (bool)isEnabled;
- (bool)isEqual:(id)arg1;
- (bool)isEqualIgnoringLastModifiedDate:(id)arg1;
- (bool)isEqualToAlarm:(id)arg1;
- (bool)isFiring;
- (bool)isSleepAlarm;
- (bool)isSnoozed;
- (id)keyForIdentifier;
- (id)keysAffectingNotification;
- (id)keysAffectingScheduling;
- (id)keysAffectingSnooze;
- (id)lastModifiedDate;
- (unsigned long long)minute;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (id)nextFireDate;
- (id)nextFireDateAfterDate:(id)arg1;
- (id)nextFireDateAfterDate:(id)arg1 includeBedtimeNotification:(bool)arg2;
- (id)nextTrigger;
- (id)nextTriggerAfterDate:(id)arg1;
- (id)nextTriggerAfterDate:(id)arg1 includeBedtimeNotification:(bool)arg2;
- (id)nextTriggerAfterDate:(id)arg1 includeSnooze:(bool)arg2 includeBedtimeNotification:(bool)arg3;
- (id)nextTriggerAfterDate:(id)arg1 ofType:(unsigned long long)arg2;
- (id)nextTriggersAfterDate:(id)arg1;
- (id)nextTriggersAfterDate:(id)arg1 includeSnooze:(bool)arg2 includeBedtimeNotification:(bool)arg3;
- (unsigned long long)repeatSchedule;
- (bool)repeats;
- (void)setActive:(unsigned long long)arg1;
- (void)setActiveForThisDevice:(bool)arg1;
- (void)setAllowsSnooze:(bool)arg1;
- (void)setBedtimeForSleepTracking:(id)arg1;
- (void)setBedtimeHour:(unsigned long long)arg1;
- (void)setBedtimeMinute:(unsigned long long)arg1;
- (void)setBedtimeReminderMinutes:(unsigned long long)arg1;
- (void)setBedtimeSnoozeFireDate:(id)arg1;
- (void)setCurrentDateProvider:(id /* block */)arg1;
- (void)setDismissedDate:(id)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setFiredDate:(id)arg1;
- (void)setFiring:(bool)arg1;
- (void)setHour:(unsigned long long)arg1;
- (void)setLastModifiedDate:(id)arg1;
- (void)setMinute:(unsigned long long)arg1;
- (void)setRepeatSchedule:(unsigned long long)arg1;
- (void)setSleepAlarm:(bool)arg1;
- (void)setSnoozeFireDate:(id)arg1;
- (void)setSound:(id)arg1;
- (void)setTitle:(id)arg1;
- (bool)shouldBeScheduled;
- (long long)sleepDuration;
- (id)snoozeFireDate;
- (id)sound;
- (id)title;
- (id)upcomingTriggersAfterDate:(id)arg1;

// Image: /System/Library/PrivateFrameworks/Home.framework/Home

+ (id)hf_alarmsMatchingAlarmId:(id)arg1 withinItemArray:(id)arg2;
+ (bool)hf_areAlarms:(id)arg1 equalToAlarms:(id)arg2 includeModificationDate:(bool)arg3;
+ (id)hf_buildAlarmFromCollectionSettingItem:(id)arg1;
+ (id)hf_buildAlarmsFromCollectionSettingItems:(id)arg1;
+ (bool)hf_verifyThatAlarmsAreConsistent:(id)arg1;

@end
