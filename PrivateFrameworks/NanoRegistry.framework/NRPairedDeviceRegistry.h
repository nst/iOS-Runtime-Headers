/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry
 */

@interface NRPairedDeviceRegistry : NSObject <NRFrameworkDeviceDelegate, NRMutableStateParentDelegate, NRPairedDeviceRegistryXPCFrameworkDelegate, NSXPCConnectionDelegate> {
    bool  _areSecurePropertiesRequested;
    NSObject<OS_dispatch_queue> * _clientQueue;
    int  _demoModeNotifyToken;
    NRMutableDeviceCollection * _deviceCollection;
    NSMutableArray * _deviceCollectionUpdateBlocks;
    unsigned long long  _devicesUpdateCounter;
    int  _devicesUpdateCounterNotifyToken;
    NSMutableArray * _finishedPairingSemaphores;
    bool  _hasSecurePropertyEntitlement;
    bool  _hasSomeEntitlements;
    int  _idleNotifyToken;
    bool  _initialLastCompatibilityStateHasBeenSent;
    bool  _initialStatusHasBeenSent;
    NSObject<OS_dispatch_queue> * _internalQueue;
    bool  _isDeviceCollectionDiffRequested;
    bool  _isInitialized;
    unsigned short  _lastCompatibilityStateSent;
    unsigned long long  _lastStatusSent;
    long long  _maxPairingCompatibilityVersion;
    long long  _minPairingCompatibilityVersion;
    NSMutableDictionary * _mutableDeviceDictionary;
    bool  _needToFetchSecureProperties;
    long long  _pairingCompatibilityVersion;
    NSObject<OS_dispatch_queue> * _pairingOrSwitchCompleteQueue;
    bool  _secureDataIsAvailable;
    int  _securePropertiesUnlockedNotifyToken;
    NSMutableArray * _securePropertiesUpdateBlocks;
    NSMutableArray * _waitForDeviceCollectionBlocks;
    NSXPCConnection * _xpcConnection;
    bool  _xpcConnectionInvalidated;
}

@property (nonatomic) bool areSecurePropertiesRequested;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *clientQueue;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) int demoModeNotifyToken;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NRMutableDeviceCollection *deviceCollection;
@property (nonatomic, retain) NSMutableArray *deviceCollectionUpdateBlocks;
@property (nonatomic) unsigned long long devicesUpdateCounter;
@property (nonatomic) int devicesUpdateCounterNotifyToken;
@property (nonatomic, retain) NSMutableArray *finishedPairingSemaphores;
@property (nonatomic) bool hasSecurePropertyEntitlement;
@property (nonatomic) bool hasSomeEntitlements;
@property (readonly) unsigned long long hash;
@property (nonatomic) int idleNotifyToken;
@property (nonatomic) bool initialLastCompatibilityStateHasBeenSent;
@property (nonatomic) bool initialStatusHasBeenSent;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *internalQueue;
@property (nonatomic) bool isDeviceCollectionDiffRequested;
@property (nonatomic) bool isInitialized;
@property (nonatomic) unsigned short lastCompatibilityStateSent;
@property (nonatomic) unsigned long long lastStatusSent;
@property (nonatomic) long long maxPairingCompatibilityVersion;
@property (nonatomic) long long minPairingCompatibilityVersion;
@property (nonatomic, retain) NSMutableDictionary *mutableDeviceDictionary;
@property (nonatomic) bool needToFetchSecureProperties;
@property (nonatomic) long long pairingCompatibilityVersion;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *pairingOrSwitchCompleteQueue;
@property (nonatomic) bool secureDataIsAvailable;
@property (nonatomic) int securePropertiesUnlockedNotifyToken;
@property (nonatomic, retain) NSMutableArray *securePropertiesUpdateBlocks;
@property (nonatomic, readonly) unsigned long long status;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSMutableArray *waitForDeviceCollectionBlocks;
@property (nonatomic, retain) NSXPCConnection *xpcConnection;
@property (nonatomic) bool xpcConnectionInvalidated;

// Image: /System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry

+ (id /* block */)activeDeviceSelectorBlock;
+ (id /* block */)activePairedDeviceSelectorBlock;
+ (id /* block */)pairedDevicesSelectorBlock;
+ (id)sharedInstance;
+ (bool)shouldBoostProcess;

- (void).cxx_destruct;
- (void)_addRemoveRecoveryStepBackup:(bool)arg1 withPairingDeviceID:(id)arg2;
- (void)_addRemoveRecoveryStepDeleteAccounts:(bool)arg1;
- (void)_addRemoveRecoveryStepDeletePairingStore:(bool)arg1 withPairingDeviceID:(id)arg2;
- (void)_addRemoveRecoveryStepDisableDaemons:(bool)arg1;
- (void)_addRemoveRecoveryStepICloudDeletePaymentCards:(bool)arg1;
- (void)_addRemoveRecoveryStepIDSFinalize:(bool)arg1;
- (void)_addRemoveRecoveryStepIDSFinalizeQS:(bool)arg1 withPairedBTDeviceID:(id)arg2;
- (void)_addRemoveRecoveryStepIDSUnpair:(bool)arg1 withPairingDeviceID:(id)arg2;
- (void)_addRemoveRecoveryStepIDSUnpairStart:(bool)arg1;
- (void)_addRemoveRecoveryStepIDSUnpairStartQS:(bool)arg1 withPairedBTDeviceID:(id)arg2;
- (void)_addRemoveRecoveryStepObliterate:(bool)arg1 withStatePath:(id)arg2;
- (void)_addRemoveRecoveryStepRemoteUnpair:(bool)arg1 withAdvertisedName:(id)arg2 andPairedDeviceID:(id)arg3;
- (void)_addRemoveRecoveryStepResetNVRAM:(bool)arg1;
- (void)_addRemoveRecoveryStepStockholmReset:(bool)arg1;
- (void)_addRemoveRecoveryStepUnpairBluetooth:(bool)arg1 withPairingDeviceID:(id)arg2;
- (id)_deviceIDAtSwitchIndex:(unsigned int)arg1 date:(id*)arg2;
- (id)_findActivePairedDevice;
- (void)_getActiveDeviceAssertionsWithInlineBlock:(id /* block */)arg1;
- (id)_getChangeHistory;
- (id)_getClientInfo;
- (id)_getLocalDeviceCollection;
- (id)_getSecureProperties:(id)arg1;
- (void)_getSwitchEventsFromIndex:(unsigned int)arg1 toIndex:(unsigned int)arg2 inlineCallback:(id /* block */)arg3;
- (void)_invalidateActiveDeviceAssertionWithIdentifier:(id)arg1;
- (void)_pairingStorePathPairingID:(id /* block */)arg1;
- (void)_pingActiveGizmoWithPriority:(long long)arg1 withMessageSize:(unsigned long long)arg2 withBlock:(id /* block */)arg3;
- (id)_privateDaemonConnection;
- (id)_privateDaemonProxyWithErrorString:(id)arg1;
- (void)_qsRecoveryMigrationWithPairedBTDeviceID:(id)arg1;
- (id)_recoveryDescription;
- (void)_setObliterationEnabled:(bool)arg1;
- (void)_submitAlbertPairingReport;
- (void)_submitServerRequestReportWithRequestType:(id)arg1 duration:(double)arg2 errorCode:(unsigned int)arg3;
- (bool)_supportsWatch;
- (id)_synchronousPrivateDaemonProxyWithErrorString:(id)arg1;
- (void)_triggerRecovery;
- (id)_xpcInitializeConnection;
- (void)_xpcInterruptionHandler;
- (void)_xpcInvalidationHandler;
- (void)abortPairing;
- (void)abortPairingWithReason:(id)arg1;
- (void)applyDiff:(id)arg1;
- (bool)areSecurePropertiesRequested;
- (void)beginDiscovery;
- (id)blockAndQueryVersions;
- (void)blockUntilDeviceCollectionIsInitialized;
- (void)checkStatusAndCompatibilityState;
- (void)child:(id)arg1 didApplyDiff:(id)arg2;
- (id)clientQueue;
- (void)companionOOBDiscoverAndPairWithName:(id)arg1 withOutOfBandPairingKey:(id)arg2 withOptions:(id)arg3 operationHasBegun:(id /* block */)arg4;
- (void)companionPasscodePairWithDevice:(id)arg1 withOptions:(id)arg2 operationHasBegun:(id /* block */)arg3;
- (unsigned short)compatibilityState;
- (id)createDevicesFromMutableDevices:(id)arg1 andPropertyStore:(id)arg2;
- (void)createDevicesFromMutableDevicesAndPropertyStore:(id)arg1;
- (void)dealloc;
- (int)demoModeNotifyToken;
- (id)deviceCollection;
- (id)deviceCollectionUpdateBlocks;
- (id)deviceForBTDeviceID:(id)arg1;
- (id)deviceForBluetoothID:(id)arg1;
- (id)deviceForIDSDevice:(id)arg1;
- (id)deviceForNRDevice:(id)arg1 fromIDSDevices:(id)arg2;
- (id)deviceForPairingID:(id)arg1;
- (id)deviceIDForIDSDevice:(id)arg1;
- (id)deviceIDForNRDevice:(id)arg1;
- (id)devicesFromMigrationConsentRequestData:(id)arg1;
- (unsigned long long)devicesUpdateCounter;
- (int)devicesUpdateCounterNotifyToken;
- (void)endDiscovery;
- (void)enterCompatibilityState:(unsigned short)arg1 forDevice:(id)arg2;
- (id)finishedPairingSemaphores;
- (void)fireAllDeviceCollectionBlocksWithStatus:(bool)arg1;
- (void)fireAllInitialDeviceCollectionBlocksWith:(bool)arg1;
- (void)fireDeviceCollectionBlocksUpUntilIndex:(unsigned long long)arg1;
- (id)getActivePairedDevice;
- (id)getAllDevices;
- (id)getDevices;
- (id)getDevicesMatching:(id /* block */)arg1;
- (void)getDevicesWithBlock:(id /* block */)arg1;
- (void)getMigrationPairingCharacteristicReadDataWithQueue:(id)arg1 completion:(id /* block */)arg2;
- (id)getPairedDevices;
- (void)getSwitchEventsFromIndex:(unsigned int)arg1 inlineCallback:(id /* block */)arg2;
- (void)gizmoOOBAdvertiseAndPairWithName:(id)arg1 operationHasBegun:(id /* block */)arg2;
- (void)gizmoPasscodeAdvertiseAndPairWithName:(id)arg1 operationHasBegun:(id /* block */)arg2;
- (bool)hasSecurePropertyEntitlement;
- (bool)hasSomeEntitlements;
- (int)idleNotifyToken;
- (id)init;
- (void)initNotifyTokens;
- (id)initWithBoost:(bool)arg1;
- (bool)initialLastCompatibilityStateHasBeenSent;
- (bool)initialStatusHasBeenSent;
- (void)initializeWithShouldMakeEmptyDeviceCollection:(bool)arg1;
- (id)internalQueue;
- (bool)isDaemonIdle;
- (bool)isDeviceCollectionDiffRequested;
- (bool)isInitialized;
- (bool)isPaired;
- (bool)isWatchSetupPushActive;
- (void)keepPhoneUnlockedInternalTestSPI:(id /* block */)arg1;
- (unsigned short)lastCompatibilityStateSent;
- (unsigned long long)lastStatusSent;
- (long long)maxPairedDeviceCount;
- (long long)maxPairingCompatibilityVersion;
- (id)migrationConsentRequestData;
- (long long)minPairingCompatibilityVersion;
- (long long)minQuickSwitchCompatibilityVersion;
- (id)mutableDeviceDictionary;
- (bool)needToFetchSecureProperties;
- (void)notifyActivationCompleted:(id)arg1 withSuccess:(bool)arg2;
- (void)notifyPairingShouldContinue;
- (void)notifyPasscode:(id)arg1 forDevice:(id)arg2;
- (void)overrideSignalStrengthLimit:(long long)arg1;
- (void)pairWithSimulator:(id)arg1 withQueue:(id)arg2 withCompletion:(id /* block */)arg3;
- (bool)pairedDeviceCountIsLessThanMaxPairedDevices;
- (bool)pairedDeviceSupportQuickSwitch;
- (void)pairingClientDidEnterPhase:(id)arg1;
- (long long)pairingCompatibilityVersion;
- (id)pairingID;
- (id)pairingOrSwitchCompleteQueue;
- (id)pairingStorePath;
- (void)pairingStorePathPairingID:(id /* block */)arg1;
- (void)parseDiffForNRDeviceUpdatesAndPairUnpair:(id)arg1 hasSecurePropertyEntitlement:(bool)arg2 shouldBeQuiet:(bool)arg3;
- (void)postNotification:(id)arg1 forDeviceID:(id)arg2 withUserInfo:(id)arg3;
- (void)putMigrationChallengeCharacteristicWriteData:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (id)queue;
- (unsigned long long)readNotifyToken:(int)arg1;
- (int)registerNotifyTokenWithName:(id)arg1 withBlock:(id /* block */)arg2;
- (int)registerNotifyTokenWithName:(id)arg1 withQueue:(id)arg2 withBlock:(id /* block */)arg3;
- (void)requestDeviceCollectionDiffWithForce:(bool)arg1;
- (void)requestSecureProperties;
- (void)resumePairingClientCrashMonitoring;
- (void)resumePairingOrSwitchCompleteQueue;
- (id)retrieveSecurePropertiesWithIDs:(id)arg1;
- (void)retriggerUnpairInfoDialog;
- (bool)secureDataIsAvailable;
- (int)securePropertiesUnlockedNotifyToken;
- (id)securePropertiesUpdateBlocks;
- (void)sendCompatibilityStateChangeNotification;
- (void)sendDevicesUpdatedNotification;
- (void)sendStatusChangeNotification;
- (id)serverRequestReporterWithType:(id)arg1;
- (void)setActivePairedDevice:(id)arg1 isMagicSwitch:(bool)arg2 operationHasCompleted:(id /* block */)arg3;
- (void)setActivePairedDevice:(id)arg1 operationHasCompleted:(id /* block */)arg2;
- (void)setActivePairedDevice:(id)arg1 withActiveDeviceAssertionHandler:(id /* block */)arg2;
- (void)setAreSecurePropertiesRequested:(bool)arg1;
- (void)setClientQueue:(id)arg1;
- (void)setDemoModeNotifyToken:(int)arg1;
- (void)setDeviceCollection:(id)arg1;
- (void)setDeviceCollectionUpdateBlocks:(id)arg1;
- (void)setDevicesUpdateCounter:(unsigned long long)arg1;
- (void)setDevicesUpdateCounterNotifyToken:(int)arg1;
- (void)setFinishedPairingSemaphores:(id)arg1;
- (void)setHasSecurePropertyEntitlement:(bool)arg1;
- (void)setHasSomeEntitlements:(bool)arg1;
- (void)setIdleNotifyToken:(int)arg1;
- (void)setInitialLastCompatibilityStateHasBeenSent:(bool)arg1;
- (void)setInitialStatusHasBeenSent:(bool)arg1;
- (void)setInternalQueue:(id)arg1;
- (void)setIsDeviceCollectionDiffRequested:(bool)arg1;
- (void)setIsInitialized:(bool)arg1;
- (void)setLastCompatibilityStateSent:(unsigned short)arg1;
- (void)setLastStatusSent:(unsigned long long)arg1;
- (void)setMaxPairingCompatibilityVersion:(long long)arg1;
- (void)setMigrationConsented:(bool)arg1 forDevice:(id)arg2 withBlock:(id /* block */)arg3;
- (void)setMinPairingCompatibilityVersion:(long long)arg1;
- (void)setMutableDeviceDictionary:(id)arg1;
- (void)setNeedToFetchSecureProperties:(bool)arg1;
- (void)setPairingCompatibilityVersion:(long long)arg1;
- (void)setPairingOrSwitchCompleteQueue:(id)arg1;
- (void)setSecureDataIsAvailable:(bool)arg1;
- (void)setSecurePropertiesUnlockedNotifyToken:(int)arg1;
- (void)setSecurePropertiesUpdateBlocks:(id)arg1;
- (void)setWaitForDeviceCollectionBlocks:(id)arg1;
- (void)setXpcConnection:(id)arg1;
- (void)setXpcConnectionInvalidated:(bool)arg1;
- (void)setupDeviceCollectionObserver;
- (void)startWatchSetupPush;
- (unsigned long long)status;
- (void)stopWatchSetupPush;
- (bool)supportsPairedDevice;
- (void)suspendPairingClientCrashMonitoring;
- (unsigned int)switchIndex;
- (void)switchToSimulator:(id)arg1 withQueue:(id)arg2 withCompletion:(id /* block */)arg3;
- (void)syncDevicesWithDevice:(id)arg1;
- (void)transitionToCompatibilityState:(long long)arg1 withBlock:(id /* block */)arg2;
- (void)unpairWithDevice:(id)arg1 shouldObliterate:(bool)arg2 operationHasBegun:(id /* block */)arg3;
- (void)unpairWithDevice:(id)arg1 withOptions:(id)arg2 operationHasBegun:(id /* block */)arg3;
- (void)unpairWithSimulator:(id)arg1 withQueue:(id)arg2 withCompletion:(id /* block */)arg3;
- (void)updateDeviceCollectionWithQueue:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)updateSecurePropertiesWithQueue:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)userIsCheckingForUpdate;
- (id)waitForActivePairedDevice;
- (id)waitForDeviceCollectionBlocks;
- (void)waitForPairingStorePathPairingID:(id /* block */)arg1;
- (id)xpcConnection;
- (bool)xpcConnectionInvalidated;
- (void)xpcDeviceID:(id)arg1 needsPasscode:(id)arg2;
- (void)xpcHasNewOOBKey:(id)arg1;

// Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon

- (id)hd_deviceForIDSDevice:(id)arg1;

@end
