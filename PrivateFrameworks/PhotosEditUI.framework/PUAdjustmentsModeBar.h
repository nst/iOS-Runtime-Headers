/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotosEditUI.framework/PhotosEditUI
 */

@interface PUAdjustmentsModeBar : UIView <PUPhotoEditLayoutStaticAdaptable, UITableViewDataSource, UITableViewDelegate> {
    UIView * _adjustmentViewsContainer;
    NSArray * _adjustmentViewsContainerConstraints;
    NSArray * _allAdjustmentModes;
    double  _cachedAccessibilityRowHeight;
    double  _cachedAccessibilitySubRowHeight;
    bool  _dataIsValid;
    <PUAdjustmentsModeBarDataSource> * _dataSource;
    <PUAdjustmentsModeBarDelegate> * _delegate;
    bool  _didSetInitialModeSlidersOffset;
    double  _expandedShortSideSize;
    _UIDynamicValueAnimation * _finishTransitionAnimation;
    double  _interactiveTransitionProgress;
    long long  _interactiveTransitionState;
    long long  _layoutOrientation;
    bool  _listViewExpanded;
    bool  _listViewExpandedExplicitly;
    UITableView * _modePickerTableView;
    UIView * _modePickerTableViewBackground;
    NSArray * _modePickerTableViewConstraints;
    NSArray * _modePickerTableViewHiddenConstraints;
    NSLayoutConstraint * _modePickerTableViewShortSideConstraint;
    NSNumberFormatter * _nonZeroLevelValueFormatter;
    _PUSliderPlayheadBaseView * _playheadBaseView;
    double  _playheadSize;
    UIView * _playheadView;
    bool  _playheadViewVisible;
    NSArray * _playheadViewsConstraints;
    PUAdjustmentsMode * _selectedMode;
    NSLayoutConstraint * _selfSizeConstraint;
    double  _shortSideSize;
    double  _slidersLongContentLength;
    double  _slidersShortSideLength;
    NSNumberFormatter * _zeroLevelValueFormatter;
}

@property (nonatomic) <PUAdjustmentsModeBarDataSource> *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PUAdjustmentsModeBarDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) double interactiveTransitionProgress;
@property (nonatomic, readonly) long long interactiveTransitionState;
@property (nonatomic, readonly) bool isSlidersListReversed;
@property (nonatomic, readonly) long long layoutOrientation;
@property (getter=isListViewExpanded, nonatomic, readonly) bool listViewExpanded;
@property (getter=isListViewExpandedExplicitly, nonatomic, readonly) bool listViewExpandedExplicitly;
@property (nonatomic) double playheadSize;
@property (nonatomic, retain) PUAdjustmentsMode *selectedMode;
@property (nonatomic) double shortSideSize;
@property (nonatomic, readonly) bool shouldShowModePickerOnFirstDisplay;
@property (nonatomic) double slidersLongContentLength;
@property (nonatomic) double slidersShortSideLength;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_formattedLevelValue:(double)arg1;
- (void)_handleModePickerExpansionButton:(id)arg1;
- (double)_modePickerRowHeight;
- (double)_modePickerRowHeightIncludingDetail:(bool)arg1 forCachedVariable:(double*)arg2;
- (double)_modePickerSubRowHeight;
- (void)_preferredContentSizeCategoryChanged;
- (void)_transitionToInteractiveTransitionState:(long long)arg1;
- (void)_updateExpandedShortSideSize;
- (void)_updateInteractiveTransitionProgress:(double)arg1;
- (void)_updateModePickerTableView;
- (void)_updateModeSlidersCollectionViewLayout:(id)arg1;
- (void)_updatePlayheadViewsAnimated:(bool)arg1;
- (void)_updateViewsForModePickerExpandedStateAnimated:(bool)arg1;
- (id)_visibleModeHigherThanMode:(id)arg1;
- (id)_visibleModeLowerThanMode:(id)arg1;
- (id)adjustmentViewsContainer;
- (id)allAdjustmentModes;
- (void)beginInteractiveTransition;
- (void)configurePickerCell:(id)arg1 forMode:(id)arg2;
- (void)configureSliderCell:(id)arg1 forMode:(id)arg2;
- (void)copyStateFromAdjustmentsModeBar:(id)arg1;
- (id)currentSlidersCollectionView;
- (id)dataSource;
- (id)delegate;
- (void)finishInteractiveTransitionWithVelocity:(double)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)interactiveTransitionProgress;
- (long long)interactiveTransitionState;
- (bool)isInInteractiveTransition;
- (bool)isListViewExpanded;
- (bool)isListViewExpandedExplicitly;
- (bool)isModeEnabledInDataSource:(id)arg1;
- (bool)isPlayheadViewVisible;
- (bool)isSlidersListReversed;
- (long long)layoutOrientation;
- (void)layoutSubviews;
- (void)loadDataIfNeeded;
- (id)modeForSliderIndex:(long long)arg1;
- (double)modePickerHeightForAllRows;
- (double)modePickerWidthVertical;
- (id)newConstraintsForModePickerList:(id)arg1;
- (id)newModePickerExpansionButton;
- (id)newModePickerListBackgroundView;
- (id)newSlidersCollectionView;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (double)playheadSize;
- (void)ppt_selectBWMode;
- (void)ppt_selectColorMode;
- (void)ppt_selectLightMode;
- (void)reloadData;
- (id)selectedMode;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setListViewExpanded:(bool)arg1 explicitly:(bool)arg2 animated:(bool)arg3;
- (void)setPlayheadSize:(double)arg1;
- (void)setPlayheadViewVisible:(bool)arg1;
- (void)setPlayheadViewVisible:(bool)arg1 animated:(bool)arg2;
- (void)setSelectedMode:(id)arg1;
- (void)setSelectedMode:(id)arg1 animated:(bool)arg2;
- (void)setShortSideSize:(double)arg1;
- (void)setSlidersLongContentLength:(double)arg1;
- (void)setSlidersShortSideLength:(double)arg1;
- (void)setupWithLayoutOrientation:(long long)arg1;
- (double)shortSideSize;
- (bool)shouldShowModePickerOnFirstDisplay;
- (long long)sliderIndexForMode:(id)arg1;
- (double)slidersLongContentLength;
- (double)slidersShortSideLength;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (double)tableView:(id)arg1 heightForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (void)updateConstraints;
- (void)updateEnabledForCurrentMode;
- (void)updateInteractiveTransitionProgress:(double)arg1;
- (void)updateSlidersListScrollOffsetAnimated:(bool)arg1;
- (void)visibleModesDidChangeWithInsertedIndexes:(id)arg1 deletedIndexes:(id)arg2;
- (void)visibleModesWillChange;
- (id)visibleSliderAdjustmentModes;
- (bool)wantsToHandleEventAtPoint:(struct CGPoint { double x1; double x2; })arg1;

@end
