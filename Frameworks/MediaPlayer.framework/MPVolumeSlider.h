/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

@interface MPVolumeSlider : UISlider <MPVolumeControllerDelegate, MPVolumeDisplaying> {
    bool  _beganTrackingFromEUVolumeLimit;
    int  _coalescedVolumeDidChangeLogCount;
    NSTimer * _commitTimer;
    bool  _configuredLayoutGuide;
    bool  _forcingOffscreenVisibility;
    MPAVEndpointRoute * _groupRoute;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _hitRectInsets;
    bool  _isCurrentlyTracking;
    bool  _isOffScreen;
    bool  _optimisticState;
    float  _optimisticValue;
    double  _originalMaxValueViewAlphaOverride;
    double  _originalMinTrackViewAlphaOverride;
    double  _originalMinValueViewAlphaOverride;
    MPAVOutputDeviceRoute * _outputDeviceRoute;
    MPAVController * _player;
    UILabel * _routeNameLabel;
    float  _setVolumeStartValue;
    long long  _style;
    UIImageView * _thumbImageView;
    bool  _thumbIsDefault;
    UILayoutGuide * _trackLayoutGuide;
    MPVolumeController * _volumeController;
    bool  _volumeWarningBlinking;
    UIImage * _volumeWarningTrackImage;
    UIView * _volumeWarningView;
}

@property (setter=_setIsOffScreen:, nonatomic) bool _isOffScreen;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) MPAVEndpointRoute *groupRoute;
@property (readonly) unsigned long long hash;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } hitRectInsets;
@property (getter=isOnScreen, nonatomic, readonly) bool onScreen;
@property (getter=isOnScreenForVolumeDisplay, nonatomic, readonly) bool onScreenForVolumeDisplay;
@property (getter=isInOptimisticState, nonatomic) bool optimisticState;
@property (nonatomic) float optimisticValue;
@property (nonatomic, retain) MPAVOutputDeviceRoute *outputDeviceRoute;
@property (nonatomic, retain) MPAVController *player;
@property (nonatomic, retain) MPAVRoute *route;
@property (nonatomic, readonly) long long style;
@property (readonly) Class superclass;
@property (nonatomic, readonly) UIView *thumbView;
@property (nonatomic, readonly) UILayoutGuide *trackLayoutGuide;
@property (nonatomic, readonly) NSString *volumeAudioCategory;
@property (nonatomic, readonly, copy) NSString *volumeControlLabel;
@property (nonatomic, retain) MPVolumeController *volumeController;
@property (nonatomic, retain) UIImage *volumeWarningTrackImage;

- (void).cxx_destruct;
- (void)_applicationDidEnterBackgroundNotification:(id)arg1;
- (void)_applicationWillEnterForegroundNotification:(id)arg1;
- (void)_beginBlinkingWarningView;
- (void)_blinkWarningView;
- (void)_commitVolumeChange;
- (void)_endBlinkingWarningView;
- (void)_endTracking;
- (bool)_isOffScreen;
- (void)_layoutForAvailableRoutes;
- (void)_layoutVolumeWarningView;
- (void)_logVolumeValueDidChange:(float)arg1;
- (id)_maxTrackImageForStyle:(long long)arg1;
- (id)_minTrackImageForStyle:(long long)arg1;
- (id)_newVolumeWarningView;
- (void)_resetThumbImageForState:(unsigned long long)arg1;
- (id)_routeName;
- (void)_setIsOffScreen:(bool)arg1;
- (id)_thumbImageForStyle:(long long)arg1;
- (bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (void)cancelTrackingWithEvent:(id)arg1;
- (bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (id)createThumbView;
- (void)dealloc;
- (id)description;
- (void)didMoveToSuperview;
- (void)didMoveToWindow;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (id)groupRoute;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })hitRect;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })hitRectInsets;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 style:(long long)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 style:(long long)arg2 endpointRoute:(id)arg3 outputDeviceRoute:(id)arg4;
- (bool)isInOptimisticState;
- (bool)isOnScreenForVolumeDisplay;
- (void)layoutSubviews;
- (float)maximumValue;
- (float)minimumValue;
- (float)optimisticValue;
- (id)outputDeviceRoute;
- (id)player;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)route;
- (void)setAlpha:(double)arg1;
- (void)setGroupRoute:(id)arg1;
- (void)setHidden:(bool)arg1;
- (void)setHitRectInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setOptimisticState:(bool)arg1;
- (void)setOptimisticValue:(float)arg1;
- (void)setOutputDeviceRoute:(id)arg1;
- (void)setPlayer:(id)arg1;
- (void)setRoute:(id)arg1;
- (void)setThumbImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)setUserInteractionEnabled:(bool)arg1;
- (void)setValue:(float)arg1 animated:(bool)arg2;
- (void)setVolumeController:(id)arg1;
- (void)setVolumeDataSource:(id)arg1;
- (void)setVolumeWarningTrackImage:(id)arg1;
- (long long)style;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })thumbRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 trackRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 value:(float)arg3;
- (id)thumbView;
- (id)trackLayoutGuide;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })trackRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)volumeAudioCategory;
- (id)volumeControlLabel;
- (id)volumeController;
- (void)volumeController:(id)arg1 EUVolumeLimitDidChange:(float)arg2;
- (void)volumeController:(id)arg1 EUVolumeLimitEnforcedDidChange:(bool)arg2;
- (void)volumeController:(id)arg1 volumeControlAvailableDidChange:(bool)arg2;
- (void)volumeController:(id)arg1 volumeControlCapabilitiesDidChange:(unsigned int)arg2;
- (void)volumeController:(id)arg1 volumeControlLabelDidChange:(id)arg2;
- (void)volumeController:(id)arg1 volumeValueDidChange:(float)arg2;
- (void)volumeController:(id)arg1 volumeWarningStateDidChange:(long long)arg2;
- (id)volumeWarningTrackImage;

@end
