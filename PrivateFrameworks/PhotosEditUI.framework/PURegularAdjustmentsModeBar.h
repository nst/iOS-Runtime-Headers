/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotosEditUI.framework/PhotosEditUI
 */

@interface PURegularAdjustmentsModeBar : PUAdjustmentsModeBar <UICollectionViewDataSource> {
    NSArray * __availableSupermodes;
    NSArray * __visibleSliderModes;
    UIButton * _expansionButton;
    NSArray * _expansionButtonConstraints;
    PUSlidersCollectionView * _modeDetailSlidersCollectionView;
    NSArray * _modeDetailSlidersCollectionViewConstraints;
    UIView * _modeDetailView;
    NSArray * _modeDetailViewConstraints;
    NSMapTable * _supermodeButtonsByMode;
    NSArray * _supermodeButtonsConstraints;
    NSMapTable * _supermodeLabelsByMode;
    NSMapTable * _supermodeTitleBackgroundByMode;
}

@property (nonatomic, readonly) PUAdjustmentsMode *_expandedSupermode;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_availableSupermodes;
- (void)_createNewModeDetailViewAndSubviews;
- (id)_expandedSupermode;
- (void)_handleModeButton:(id)arg1;
- (id)_layoutConstraintsForCollapsedModeDetailView:(id)arg1 mode:(id)arg2;
- (id)_layoutConstraintsForExpandedModeDetailView:(id)arg1 mode:(id)arg2;
- (double)_slidersViewLongSideLength;
- (void)_updateSupermodeButtons;
- (void)_updateViewsForExpandedSupermode:(id)arg1 fromOldSupermode:(id)arg2 animated:(bool)arg3;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (void)configureSliderCell:(id)arg1 forMode:(id)arg2;
- (id)currentSlidersCollectionView;
- (id)newConstraintsForModePickerList:(id)arg1;
- (long long)numberOfSectionsInCollectionView:(id)arg1;
- (void)setSelectedMode:(id)arg1 animated:(bool)arg2;
- (void)setSlidersLongContentLength:(double)arg1;
- (void)updateConstraints;
- (void)updateEnabledForCurrentMode;
- (id)visibleSliderAdjustmentModes;
- (bool)wantsToHandleEventAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)willMoveToWindow:(id)arg1;

@end
