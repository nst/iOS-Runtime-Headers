/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKPolygonalItemGroup : NSObject {
    NSMutableOrderedSet * _attributeSets;
    struct Box<float, 3> { 
        struct Matrix<float, 3, 1> { 
            float _e[3]; 
        } _minimum; 
        struct Matrix<float, 3, 1> { 
            float _e[3]; 
        } _maximum; 
    }  _boundingBox;
    struct Matrix<float, 2, 1> { 
        float _e[2]; 
    }  _centroid;
    float  _contentScale;
    unsigned int  _cullingMask;
    struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > > > { 
        struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > {} *__begin_; 
        struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > {} *__end_; 
        struct __compressed_pair<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > > > { 
            struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > {} *__first_; 
        } __end_cap_; 
    }  _fillCullingGroups;
    struct MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> { 
        struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > { 
            struct pair<unsigned short, unsigned int> {} *__begin_; 
            struct pair<unsigned short, unsigned int> {} *__end_; 
            struct __compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > { 
                struct pair<unsigned short, unsigned int> {} *__first_; 
            } __end_cap_; 
        } _vertexAndIndexCounts; 
        struct vector<ggl::PolygonBase::CompressedMeshMesh, std::__1::allocator<ggl::PolygonBase::CompressedMeshMesh> > { 
            struct CompressedMeshMesh {} *__begin_; 
            struct CompressedMeshMesh {} *__end_; 
            struct __compressed_pair<ggl::PolygonBase::CompressedMeshMesh *, std::__1::allocator<ggl::PolygonBase::CompressedMeshMesh> > { 
                struct CompressedMeshMesh {} *__first_; 
            } __end_cap_; 
        } _meshes; 
        struct DataWrite<ggl::PolygonBase::CompressedVbo> { 
            struct BufferMemory { 
                struct BufferData {} *_user; 
                struct ResourceAccessor {} *_accessor; 
                struct Range { 
                    unsigned long long _start; 
                    unsigned long long _count; 
                } _range; 
                int _access; 
                int _sync; 
                char *_data; 
            } _memory; 
        } _vertexDataWrite; 
        struct DataWrite<unsigned short> { 
            struct BufferMemory { 
                struct BufferData {} *_user; 
                struct ResourceAccessor {} *_accessor; 
                struct Range { 
                    unsigned long long _start; 
                    unsigned long long _count; 
                } _range; 
                int _access; 
                int _sync; 
                char *_data; 
            } _memory; 
        } _indexDataWrite; 
        unsigned char _meshIndex; 
        unsigned short _meshVertexOffset; 
        unsigned int _meshIndexOffset; 
    }  _fillMeshInfo;
    struct vector<ggl::RenderItemBatcher, std::__1::allocator<ggl::RenderItemBatcher> > { 
        struct RenderItemBatcher {} *__begin_; 
        struct RenderItemBatcher {} *__end_; 
        struct __compressed_pair<ggl::RenderItemBatcher *, std::__1::allocator<ggl::RenderItemBatcher> > { 
            struct RenderItemBatcher {} *__first_; 
        } __end_cap_; 
    }  _fillRenderItemBatchers;
    bool  _hasRouteAttributes;
    bool  _isFixedSize;
    struct unordered_map<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> >, std::__1::hash<SectionKey>, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, std::__1::allocator<std::__1::pair<const std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > > { 
        struct __hash_table<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > > { 
            struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> > > { 
                    struct __hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> {} **__first_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> > { 
                            unsigned long long __first_; 
                        } __data_; 
                    } __second_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> { 
                    struct __hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> {} *__next_; 
                } __first_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true> > { 
                unsigned long long __first_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true> > { 
                float __first_; 
            } __p3_; 
        } __table_; 
    }  _polygonEdges;
    struct PolygonRouteAttributes { 
        unsigned int routeSignificance; 
        unsigned char routeProximity; 
        bool hasRouteSignificance; 
    }  _routeAttributes;
    struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > > > { 
        struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > {} *__begin_; 
        struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > {} *__end_; 
        struct __compressed_pair<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > > > { 
            struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > {} *__first_; 
        } __end_cap_; 
    }  _strokeCullingGroups;
    struct vector<ggl::RenderItemBatcher, std::__1::allocator<ggl::RenderItemBatcher> > { 
        struct RenderItemBatcher {} *__begin_; 
        struct RenderItemBatcher {} *__end_; 
        struct __compressed_pair<ggl::RenderItemBatcher *, std::__1::allocator<ggl::RenderItemBatcher> > { 
            struct RenderItemBatcher {} *__first_; 
        } __end_cap_; 
    }  _strokeRenderItemBatchers;
    struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { 
        struct StylesheetManager<gss::PropertyID> {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _styleManager;
    struct vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > { 
        struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > {} *__begin_; 
        struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > {} *__end_; 
        struct __compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > { 
            struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > {} *__first_; 
        } __end_cap_; 
    }  _styleQueries;
    bool  _stylesUpToDate;
    VKVectorTile * _tile;
}

@property (nonatomic, readonly) NSOrderedSet *attributeSets;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{Matrix<float' */ struct  centroid; /* unknown property attribute:  1>=[2f]} */
@property (nonatomic, readonly) unsigned int cullingMask;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<ggl::PolygonBase::CompressedMeshMesh' */ struct *fillMeshes; /* unknown property attribute:  std::__1::allocator<ggl::PolygonBase::CompressedMeshMesh> >=^{CompressedMeshMesh}}} */
@property (nonatomic, readonly) bool isFixedSize;
@property (nonatomic, readonly) const /* Warning: unhandled struct encoding: '{Matrix<float' */ struct *maxPoint; /* unknown property attribute:  1>=[3f]} */
@property (nonatomic, readonly) const /* Warning: unhandled struct encoding: '{Matrix<float' */ struct *origin; /* unknown property attribute:  1>=[3f]} */
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{Matrix<float' */ struct  size; /* unknown property attribute:  1>=[3f]} */
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >' */ struct *styleQueries; /* unknown property attribute:  std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > >=^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >}}} */
@property (nonatomic, readonly) float tileZoom;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addRangesToFillRenderItemBatcher:(struct RenderItemBatcher { struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { struct Range {} *x_1_1_1; struct Range {} *x_1_1_2; struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > { struct Range {} *x_3_2_1; } x_1_1_3; } x1; unsigned long long x2; struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > { struct MultiRange {} *x_3_1_1; struct MultiRange {} *x_3_1_2; struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> > { struct MultiRange {} *x_3_2_1; } x_3_1_3; } x3; struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { struct Range {} *x_4_1_1; struct Range {} *x_4_1_2; struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > { struct Range {} *x_3_2_1; } x_4_1_3; } x4; struct RenderItem {} *x5; struct Pool<ggl::RenderItem> { struct set<void *, std::__1::less<void *>, std::__1::allocator<void *> > { struct __tree<void *, std::__1::less<void *>, std::__1::allocator<void *> > { struct __tree_node<void *, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<void *, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::less<void *> > { unsigned long long x_3_4_1; } x_1_3_3; } x_1_2_1; } x_6_1_1; unsigned long long x_6_1_2; unsigned long long x_6_1_3; struct FreeList {} *x_6_1_4; } x6; }*)arg1 forMeshAtIndex:(unsigned long long)arg2 cullingMask:(unsigned int)arg3;
- (void)addRangesToStrokeRenderItemBatcher:(struct RenderItemBatcher { struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { struct Range {} *x_1_1_1; struct Range {} *x_1_1_2; struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > { struct Range {} *x_3_2_1; } x_1_1_3; } x1; unsigned long long x2; struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > { struct MultiRange {} *x_3_1_1; struct MultiRange {} *x_3_1_2; struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> > { struct MultiRange {} *x_3_2_1; } x_3_1_3; } x3; struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { struct Range {} *x_4_1_1; struct Range {} *x_4_1_2; struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > { struct Range {} *x_3_2_1; } x_4_1_3; } x4; struct RenderItem {} *x5; struct Pool<ggl::RenderItem> { struct set<void *, std::__1::less<void *>, std::__1::allocator<void *> > { struct __tree<void *, std::__1::less<void *>, std::__1::allocator<void *> > { struct __tree_node<void *, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<void *, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::less<void *> > { unsigned long long x_3_4_1; } x_1_3_3; } x_1_2_1; } x_6_1_1; unsigned long long x_6_1_2; unsigned long long x_6_1_3; struct FreeList {} *x_6_1_4; } x6; }*)arg1 forMeshAtIndex:(unsigned long long)arg2 cullingMask:(unsigned int)arg3;
- (id)attributeSets;
- (bool)canAcceptPolygon:(struct { struct { id x_1_1_1; unsigned long long x_1_1_2; unsigned long long x_1_1_3; unsigned long long x_1_1_4; unsigned long long x_1_1_5; unsigned int x_1_1_6; unsigned long long x_1_1_7; bool x_1_1_8; unsigned long long x_1_1_9; float x_1_1_10; unsigned long long x_1_1_11; id x_1_1_12; } x1; unsigned long long x2; unsigned long long x3; int x4; int x5; int x6; unsigned long long x7; unsigned long long x8; union { struct { struct { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_9_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; } x_9_1_2; } x9; struct { /* ? */ } *x10; struct { unsigned short x_11_1_1[2]; unsigned short x_11_1_2[2]; } x11; unsigned char x12; bool x13; unsigned char x14; bool x15; bool x16; unsigned char x17; bool x18; unsigned char x19; struct _NSRange { unsigned long long x_20_1_1; unsigned long long x_20_1_2; } x20; bool x21; }*)arg1;
- (struct Matrix<float, 2, 1> { float x1[2]; })centroid;
- (void)clearRouteAttributes;
- (void)computeUnitVectors:(struct vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1> > > { struct Matrix<float, 2, 1> {} *x1; struct Matrix<float, 2, 1> {} *x2; struct __compressed_pair<gm::Matrix<float, 2, 1> *, std::__1::allocator<gm::Matrix<float, 2, 1> > > { struct Matrix<float, 2, 1> {} *x_3_1_1; } x3; }*)arg1 forPoints:(struct Matrix<float, 2, 1> { float x1[2]; }*)arg2 count:(unsigned long long)arg3;
- (unsigned int)cullingMask;
- (void)dealloc;
- (void)didFinishAddingData;
- (struct vector<ggl::PolygonBase::CompressedMeshMesh, std::__1::allocator<ggl::PolygonBase::CompressedMeshMesh> > { struct CompressedMeshMesh {} *x1; struct CompressedMeshMesh {} *x2; struct __compressed_pair<ggl::PolygonBase::CompressedMeshMesh *, std::__1::allocator<ggl::PolygonBase::CompressedMeshMesh> > { struct CompressedMeshMesh {} *x_3_1_1; } x3; }*)fillMeshes;
- (unsigned char)indexForGeoFeatureAttributes:(id)arg1;
- (id)initWithStyleQuery:(struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> {} *x1; struct __shared_weak_count {} *x2; }*)arg1 tile:(id)arg2 fixedAroundCentroid:(const struct Matrix<float, 2, 1> { float x1[2]; }*)arg3 contentScale:(float)arg4;
- (bool)isFixedSize;
- (unsigned char)maxAttributeSetsPerGroup;
- (const struct Matrix<float, 3, 1> { float x1[3]; }*)maxPoint;
- (const struct Matrix<float, 3, 1> { float x1[3]; }*)origin;
- (void)setRouteAttributes:(const struct PolygonRouteAttributes { unsigned int x1; unsigned char x2; bool x3; }*)arg1;
- (struct Matrix<float, 3, 1> { float x1[3]; })size;
- (struct vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > { struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > {} *x1; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > {} *x2; struct __compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > { struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > {} *x_3_1_1; } x3; }*)styleQueries;
- (float)tileZoom;
- (void)updateCachedStyles;
- (void)willAddDataWithAccessor:(struct ResourceAccessor { int (**x1)(); }*)arg1;

@end
