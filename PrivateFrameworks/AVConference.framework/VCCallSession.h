/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference
 */

@interface VCCallSession : NSObject <AVCRateControllerDelegate, AVTelephonyInterfaceDelegate, VCAudioIOSink, VCCaptionsReceiverDelegate, VCSecureDataChannelDelegate, VCTransportSessionLegacyDelegate> {
    NSDictionary * _allPayloadsLocalFeaturesString;
    void * _callLogFile;
    VCCaptionsReceiver * _captionsReceiver;
    bool  _cleanupDone;
    int  _currentRedPayloadType;
    bool  _currentlyMediaStall;
    int  _deviceRole;
    bool  _didSendBasebandCodec;
    bool  _inviteDataRequested;
    bool  _isConnectedOnIPv6_LowestConnectionQuality;
    bool  _isLocalCellular_LowestConnectionQuality;
    bool  _isRedEnabled;
    bool  _isRemoteCellular_LowestConnectionQuality;
    bool  _isUseCaseWatchContinuity;
    double  _lastMediaStallDuration;
    VCRateControlMediaController * _mediaController;
    VCMediaNegotiator * _mediaNegotiator;
    unsigned int  _mediaStallCount;
    double  _mediaStallTotalTime;
    unsigned int  _peerProtocolVersion;
    unsigned int  _rateChangeCounter;
    AVCRateController * _rateController;
    bool  _shouldReportWRMMetrics;
    long long  _sipState;
    unsigned int  _targetBitrate;
    VCTransportSession * _transportSession;
    unsigned int  _transportType;
    int  aacBlockSize;
    bool  allowAudioRecording;
    bool  allowAudioSwitching;
    bool  audioIsPaused;
    void * audioMediaControlInfoGenerator;
    NSObject<OS_dispatch_queue> * audioQueue;
    struct tagVCAudioReceiver { struct tagVCAudioReceiverConfig { unsigned int x_1_1_1; struct tagVCAudioReceiverStream { struct tagHANDLE {} *x_2_2_1; unsigned short x_2_2_2; } x_1_1_2[3]; void *x_1_1_3; void *x_1_1_4; unsigned int x_1_1_5; int x_1_1_6; int x_1_1_7; bool x_1_1_8; struct opaqueRTCReporting {} *x_1_1_9; int x_1_1_10; bool x_1_1_11; struct __CFString {} *x_1_1_12; struct __CFString {} *x_1_1_13; unsigned short x_1_1_14; bool x_1_1_15; } x1; void *x2; void *x3; struct opaqueVCJitterBuffer {} *x4; bool x5; struct AudioStreamBasicDescription {} *x6; int x7; double x8; struct { long long x_9_1_1; int x_9_1_2; unsigned int x_9_1_3; long long x_9_1_4; } x9; struct tagVCRealTimeThread {} *x10; struct tagVCAudioReceiverReportingTask { struct opaqueRTCReporting {} *x_11_1_1; int x_11_1_2; struct tagHANDLE {} *x_11_1_3; } x11; bool x12; struct _opaque_pthread_mutex_t { long long x_13_1_1; BOOL x_13_1_2[56]; } x13; struct _opaque_pthread_mutex_t { long long x_14_1_1; BOOL x_14_1_2[56]; } x14; struct tagVCAudioDecoderList { struct tagDecoderSettings {} *x_15_1_1; unsigned int x_15_1_2; } x15; } * audioReceiver;
    VCAudioTransmitter * audioTransmitter;
    unsigned int  awdCallNonce;
    unsigned int  awdTime;
    bool  bBWEstActiveProbingSenderLog;
    bool  bBWEstFakeLargeFrameModeEnabled;
    bool  bBWEstNewBWEstModeEnabled;
    bool  bBWEstOperatingModeInitialized;
    int  bandwidthDownstream;
    int  bandwidthUpstream;
    NSNumber * basebandCodecSampleRate;
    NSString * basebandCodecType;
    unsigned int  callSessionBitrate;
    VCBitrateArbiter * callSessionBitrateArbiter;
    TimingCollection * cameraTimers;
    bool  canLocalResizePIP;
    bool  canRemoteResizePIP;
    VCCapabilities * caps;
    int  carrierBitrateCap;
    NSObject<OS_dispatch_source> * cellTechChangeSource;
    NSObject<OS_dispatch_queue> * cellTechQueue;
    VCCallLinkCongestionDetector * congestionDetector;
    NSObject<OS_dispatch_queue> * connectionChangeQueue;
    long long  connectionChangeState;
    VCConnectionManager * connectionManager;
    NSObject<OS_dispatch_source> * connectionTimeoutSource;
    VCControlChannel * controlChannel;
    VCAudioPayload * currentAudioPayload;
    VCAudioPayload * currentDTXPayload;
    NSObject<VCCallSessionDelegate> * delegate;
    NSObject<OS_dispatch_queue> * delegateNotificationQueue;
    bool  didAttemptSIPInvite;
    bool  didPrepareSRTP;
    bool  didReportAudioStall;
    bool  didReportLongConnectionTime;
    bool  didReportNoRemotePackets;
    bool  didSend200OK;
    unsigned int  dwRTT_ice;
    bool  enableRateControlDump;
    struct CGSize { 
        double width; 
        double height; 
    }  expectedDecodeSize;
    NSMutableDictionary * featuresListStringDict;
    int  fecMode;
    NSObject<OS_dispatch_source> * firstRemoteFrameTimemoutSource;
    struct tagHANDLE { int x1; } * hAFRC;
    struct tagHANDLE { int x1; } * hMediaQueue;
    struct tagHANDLE { int x1; } * hSIP;
    struct tagHANDLE { int x1; } * hVideoReceiver;
    struct tagHANDLE { int x1; } * hVideoTransmitter;
    struct __CVPixelBufferPool { } * hdBufferPool;
    struct OpaqueVTPixelTransferSession { } * hdTransferSession;
    bool  iRATSuggestionEnabled;
    int  iRemoteRTCPPort;
    int  iRemoteRTPPort;
    VCImageAttributeRules * imageAttributeRules;
    long long  initialReceivedBytes;
    long long  initialSentBytes;
    bool  isAudioRunning;
    bool  isCurrentNetworkBad;
    bool  isGKVoiceChat;
    bool  isInitiator;
    bool  isRTCPFBEnabled;
    bool  isRemoteMediaStalled;
    bool  isStarted;
    bool  isWaitingForICEResult;
    unsigned int  lastReceived;
    double  lastReceivedPacketTimestamp;
    double  lastVideoQualityNotificationUpdate;
    VCCallInfo * localCallInfo;
    unsigned short  maxPacketLength;
    VCSessionMessaging * messaging;
    NSArray * mutedPeers;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  mutex;
    int  natType;
    NSMutableArray * negotiatedAudioPayloads;
    double  networkConditionsTimeoutInSeconds;
    double  noRemotePacketsTimeout;
    int  operatingMode;
    float  packetLateAndMissingRatio;
    double  packetLossRate;
    long long  packetMultiplexMode;
    int  packetsSinceMediaStall;
    int  packetsSinceStall;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  pauseLock;
    NSObject<OS_dispatch_source> * pausedAudioHeartBeat;
    NSString * peerCN;
    NSString * peerReportingID;
    TimingCollection * perfTimers;
    int  preferredAudioCodec;
    bool  previousNoRemoteInProgress;
    NSObject<VideoConferenceChannelQualityDelegate> * qualityDelegate;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  qualityDelegateLock;
    NSObject<OS_dispatch_queue> * qualityQueue;
    bool  receivedFirstRemoteFrame;
    bool  receivedSIPInvite;
    VCCallInfo * remoteCallInfo;
    struct CGSize { 
        double width; 
        double height; 
    }  remoteExpectedLandscapeAspectRatio;
    struct CGSize { 
        double width; 
        double height; 
    }  remoteExpectedPortraitAspectRatio;
    unsigned int  remoteFrameHeight;
    unsigned int  remoteFrameWidth;
    struct CGSize { 
        double width; 
        double height; 
    }  remoteScreenLandscapeAspectRatio;
    struct CGSize { 
        double width; 
        double height; 
    }  remoteScreenPortraitAspectRatio;
    bool  remoteSupportsExpectedAspectRatio;
    bool  remoteSupportsVisibleRect;
    VideoAttributes * remoteVideoAttributes;
    int  reportReportFrequency;
    int  reportUpdateInterval;
    struct opaqueRTCReporting { } * reportingAgent;
    GKRingBuffer * ringBuf;
    unsigned int  roundTripTime;
    struct tagHANDLE { int x1; } * rtpHandle;
    struct tagHANDLE { int x1; } * rtpVideo;
    int  sampleLogCount;
    long long  sampleRate;
    long long  samplesPerFrame;
    long long  screenPayload;
    struct __CFData { } * secretKey;
    VCControlChannelMultiWay * secureControlChannel;
    VCSecureDataChannel * secureDataChannel;
    bool  sentClientSuccessfulDidStart;
    NSObject<OS_dispatch_source> * sessionHealthMonitor;
    NSString * sessionID;
    bool  shouldSendAudio;
    bool  shouldSendBlackFrame;
    bool  shouldTimeoutPackets;
    bool  shouldUpdateLastReceivedPacketTimestamp;
    int  signalGrade;
    int  signalRaw;
    int  signalStrength;
    struct SKEStateOpaque { } * skeState;
    NSData * srtpKeyBytes;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  srtpLock;
    long long  state;
    AVTelephonyInterface * telephonyInterface;
    double  timeLastCheckedNetworkConditions;
    double  timeLastKnowGoodNetworkPLR;
    double  timeLastKnowGoodNetworkRTT;
    double  timeSinceLastReportedNoPackets;
    NSObject<OS_dispatch_queue> * timestampQueue;
    <VCConnectionProtocol> * toBeChangedPrimaryConnection;
    bool  useAFRC;
    bool  useControlByte;
    bool  useRateControl;
    bool  useSBR;
    bool  useUEP;
    bool  useVCRC;
    VCWCMClient * vcWCMClient;
    WRMClient * vcWRMClient;
    NSObject<OS_dispatch_queue> * videoAsyncQueue;
    void * videoMediaControlInfoGenerator;
    long long  videoPayload;
    NSObject<OS_dispatch_queue> * videoQueue;
    double  videoThrottlingTimeout;
    struct AudioStreamBasicDescription { 
        double mSampleRate; 
        unsigned int mFormatID; 
        unsigned int mFormatFlags; 
        unsigned int mBytesPerPacket; 
        unsigned int mFramesPerPacket; 
        unsigned int mBytesPerFrame; 
        unsigned int mChannelsPerFrame; 
        unsigned int mBitsPerChannel; 
        unsigned int mReserved; 
    }  vpioFormat;
    struct tagWRMMetricsInfo { bool x1; struct tagHANDLE {} *x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned long long x14; unsigned long long x15; unsigned long long x16; int x17; int (*x18)(); struct { void *x_19_1_1; int (*x_19_1_2)(); int (*x_19_1_3)(); } x19; struct _opaque_pthread_mutex_t { long long x_20_1_1; BOOL x_20_1_2[56]; } x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; unsigned int x26; unsigned int x27; unsigned int x28; unsigned int x29; } * wrmInfo;
}

@property (readonly) bool audioIsPaused;
@property (readonly) struct tagVCAudioReceiver { struct tagVCAudioReceiverConfig { unsigned int x_1_1_1; struct tagVCAudioReceiverStream { struct tagHANDLE {} *x_2_2_1; unsigned short x_2_2_2; } x_1_1_2[3]; void *x_1_1_3; void *x_1_1_4; unsigned int x_1_1_5; int x_1_1_6; int x_1_1_7; bool x_1_1_8; struct opaqueRTCReporting {} *x_1_1_9; int x_1_1_10; bool x_1_1_11; struct __CFString {} *x_1_1_12; struct __CFString {} *x_1_1_13; unsigned short x_1_1_14; bool x_1_1_15; } x1; void *x2; void *x3; struct opaqueVCJitterBuffer {} *x4; bool x5; struct AudioStreamBasicDescription {} *x6; int x7; double x8; struct { long long x_9_1_1; int x_9_1_2; unsigned int x_9_1_3; long long x_9_1_4; } x9; struct tagVCRealTimeThread {} *x10; struct tagVCAudioReceiverReportingTask { struct opaqueRTCReporting {} *x_11_1_1; int x_11_1_2; struct tagHANDLE {} *x_11_1_3; } x11; bool x12; struct _opaque_pthread_mutex_t { long long x_13_1_1; BOOL x_13_1_2[56]; } x13; struct _opaque_pthread_mutex_t { long long x_14_1_1; BOOL x_14_1_2[56]; } x14; struct tagVCAudioDecoderList { struct tagDecoderSettings {} *x_15_1_1; unsigned int x_15_1_2; } x15; }*audioReceiver;
@property (nonatomic, readonly) int audioTierAudioCodecBitrate;
@property (nonatomic, readonly) int audioTierNetworkBitrate;
@property (nonatomic, readonly) int audioTierPacketsPerBundle;
@property (nonatomic, readonly) int audioTierPayload;
@property (nonatomic, readonly) int audioTierRedNumPayloads;
@property int bandwidthDownstream;
@property int bandwidthUpstream;
@property (nonatomic, retain) NSNumber *basebandCodecSampleRate;
@property (nonatomic, copy) NSString *basebandCodecType;
@property (readonly) int bundledPackets;
@property (retain) VCCapabilities *capabilities;
@property long long connectionChangeState;
@property (retain) VCConnectionManager *connectionManager;
@property (readonly, copy) NSString *debugDescription;
@property (retain) NSObject<VCCallSessionDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property int deviceRole;
@property bool didSend200OK;
@property (nonatomic, readonly) NSDictionary *dtxMetrics;
@property struct tagHANDLE { int x1; }*hAFRC;
@property struct tagHANDLE { int x1; }*hMediaQueue;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) VCImageAttributeRules *imageAttributeRules;
@property unsigned char inputMeter;
@property (readonly) bool isAudioRunning;
@property (nonatomic, readonly) bool isCaller;
@property (readonly) bool isCurrentPayloadTypeValid;
@property bool isGKVoiceChat;
@property (nonatomic) bool isRTCPFBEnabled;
@property (readonly) bool isRemoteMediaStalled;
@property (readonly) bool isSKEOptimizationEnabled;
@property (nonatomic) bool isStarted;
@property (readonly) bool isVideoRunning;
@property bool isWaitingForICEResult;
@property unsigned int lastReceived;
@property (readonly) unsigned int lastSentAudioSampleTime;
@property (readonly) VCCallInfo *localCallInfo;
@property unsigned short maxPacketLength;
@property (nonatomic, retain) NSArray *mutedPeers;
@property (nonatomic) int natType;
@property (nonatomic) double networkConditionsTimeoutInSeconds;
@property (readonly) double networkQuality;
@property (readonly) int numBufferBytesAvailable;
@property (nonatomic) int operatingMode;
@property (nonatomic) float packetLateAndMissingRatio;
@property (nonatomic) double packetLossRate;
@property int packetsPerBundle;
@property (nonatomic, copy) NSString *peerCN;
@property (nonatomic, copy) NSString *peerReportingID;
@property int preferredAudioCodec;
@property NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;
@property bool receivedSIPInvite;
@property unsigned int remoteFrameHeight;
@property unsigned int remoteFrameWidth;
@property (nonatomic, retain) VideoAttributes *remoteVideoAttributes;
@property (nonatomic, readonly) struct opaqueRTCReporting { }*reportingAgent;
@property (nonatomic) bool requiresWifi;
@property (nonatomic, retain) GKRingBuffer *ringBuf;
@property (nonatomic) unsigned int roundTripTime;
@property struct tagHANDLE { int x1; }*rtpHandle;
@property long long sampleRate;
@property (nonatomic, copy) NSString *sessionID;
@property (nonatomic) bool shouldSendAudio;
@property bool shouldTimeoutPackets;
@property (nonatomic) int signalGrade;
@property (nonatomic) int signalRaw;
@property (nonatomic) int signalStrength;
@property long long sipState;
@property (retain) NSData *srtpKeyBytes;
@property long long state;
@property (readonly) Class superclass;
@property (nonatomic) bool useCompressedConnectionData;
@property bool useControlByte;
@property (nonatomic) bool useRateControl;
@property bool useUEP;
@property (readonly) bool videoIsPaused;
@property long long videoPayload;

+ (id)getDecodePayloadTypes:(int)arg1 secondaryPayloadTypes:(id)arg2;
+ (id)keyPathsForValuesAffectingNetworkQuality;
+ (int)setRxPayloadList:(struct tagHANDLE { int x1; }*)arg1 withPayloadTypes:(id)arg2;
+ (int)setRxPayloadList:(struct tagHANDLE { int x1; }*)arg1 withPayloadTypes:(id)arg2 isRedEnabled:(bool)arg3;

- (int)Conference_SetBWEstMode:(bool)arg1 bFakeLargeFrameMode:(bool)arg2;
- (id)activeControlChannel;
- (id)addAudioPayload:(int)arg1;
- (void)addLocalCallInfoToInviteDictionary:(id)arg1;
- (void)addScreenConfigToSDP:(id)arg1;
- (void)adjustBitrateForConnectionType;
- (id)allPayloadsLocalFeaturesString;
- (int)applyFeaturesListStringForPayload:(int)arg1;
- (bool)applyNegotiatedAudioSettings:(id*)arg1;
- (void)applyNegotiatedCaptionsSettings;
- (void)applyNegotiatedMomentsSettings;
- (void)applyNegotiatedSettings;
- (bool)applyNegotiatedVideoSettings:(id*)arg1;
- (bool)audioIsPaused;
- (unsigned int)audioRTPID;
- (struct tagVCAudioReceiver { struct tagVCAudioReceiverConfig { unsigned int x_1_1_1; struct tagVCAudioReceiverStream { struct tagHANDLE {} *x_2_2_1; unsigned short x_2_2_2; } x_1_1_2[3]; void *x_1_1_3; void *x_1_1_4; unsigned int x_1_1_5; int x_1_1_6; int x_1_1_7; bool x_1_1_8; struct opaqueRTCReporting {} *x_1_1_9; int x_1_1_10; bool x_1_1_11; struct __CFString {} *x_1_1_12; struct __CFString {} *x_1_1_13; unsigned short x_1_1_14; bool x_1_1_15; } x1; void *x2; void *x3; struct opaqueVCJitterBuffer {} *x4; bool x5; struct AudioStreamBasicDescription {} *x6; int x7; double x8; struct { long long x_9_1_1; int x_9_1_2; unsigned int x_9_1_3; long long x_9_1_4; } x9; struct tagVCRealTimeThread {} *x10; struct tagVCAudioReceiverReportingTask { struct opaqueRTCReporting {} *x_11_1_1; int x_11_1_2; struct tagHANDLE {} *x_11_1_3; } x11; bool x12; struct _opaque_pthread_mutex_t { long long x_13_1_1; BOOL x_13_1_2[56]; } x13; struct _opaque_pthread_mutex_t { long long x_14_1_1; BOOL x_14_1_2[56]; } x14; struct tagVCAudioDecoderList { struct tagDecoderSettings {} *x_15_1_1; unsigned int x_15_1_2; } x15; }*)audioReceiver;
- (int)audioTierAudioCodecBitrate;
- (int)audioTierNetworkBitrate;
- (int)audioTierPacketsPerBundle;
- (int)audioTierPayload;
- (int)audioTierRedNumPayloads;
- (void)avTelephonyInterface:(id)arg1 vocoderInfoChangedToType:(id)arg2 sampleRate:(id)arg3;
- (int)bandwidthDownstream;
- (int)bandwidthUpstream;
- (id)basebandCodecSampleRate;
- (id)basebandCodecType;
- (int)bundledPackets;
- (long long)calculateSIPEndAction:(bool)arg1 currentState:(long long)arg2 error:(id)arg3;
- (void)callAlarmsWithRTPTimeStamp:(struct { long long x1; int x2; unsigned int x3; long long x4; }*)arg1;
- (unsigned int)callID;
- (id)callMetadata;
- (bool)canNegotiateVideoPayload:(int)arg1 supportedPayloads:(id)arg2 isLocalOnCellular:(bool)arg3 isRemoteOnCellular:(bool)arg4;
- (bool)canSendSIPInviteWithError:(id*)arg1;
- (bool)cancel:(id)arg1;
- (void)cancelConnectionTimeoutTimer;
- (void)cancelFirstRemoteFrameTimer;
- (id)capabilities;
- (bool)chooseDTXPayloads:(id)arg1;
- (bool)choosePayload:(id)arg1;
- (bool)chooseSecondaryPayloads:(id)arg1;
- (bool)chooseVideoPayload:(id)arg1 operatingMode:(int)arg2 isLocalOnCellular:(bool)arg3 isRemoteOnCellular:(bool)arg4;
- (bool)chooseVideoPayloadForInterface:(int)arg1;
- (void)cleanupMedia;
- (void)cleanupWCMClient;
- (void)cleanupWRMClient;
- (unsigned int)codecBitmapForPayloads:(id)arg1;
- (struct CGSize { double x1; double x2; })computeVisibleAspectRatioWithRemoteScreenAspectRatio:(struct CGSize { double x1; double x2; })arg1 remoteExpectedAspectRatio:(struct CGSize { double x1; double x2; })arg2 encodeWidth:(int)arg3 encodeHeight:(int)arg4;
- (id)configForPayloadType:(int)arg1;
- (bool)configureLegacyTransportWithInviteInfo:(id)arg1 error:(id*)arg2;
- (void)configureRateController;
- (long long)connectionChangeState;
- (id)connectionManager;
- (bool)createAudioTransmitter:(id*)arg1;
- (id)createInviteSDPWithError:(id*)arg1;
- (bool)createMediaQueueHandle:(id*)arg1;
- (bool)createRTPHandles:(id*)arg1;
- (bool)createSDP:(int*)arg1 audioPayloadCount:(int)arg2 secondaryPayloadTypes:(int*)arg3 secondaryPayloadCount:(int)arg4 videoPayloadTypes:(int*)arg5 videoPayloadCount:(int)arg6 localFeaturesList:(id)arg7 answerBandwidth:(int)arg8 maxBandwidth:(int)arg9 imageSizesSend:(struct imageTag {}**)arg10 imageSendCount:(int*)arg11 imageSizesRecv:(struct imageTag {}**)arg12 imageRecvCount:(int*)arg13 sdp:(char *)arg14 numSDPBytes:(int*)arg15 error:(id*)arg16;
- (unsigned int)currentAudioCap;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (int)deviceRole;
- (void)didReceiveCaptions:(id)arg1;
- (bool)didSend200OK;
- (void)disableSessionHealthMonitor;
- (bool)disconnect:(id)arg1 didRemoteCancel:(bool)arg2;
- (bool)disconnectInternal:(bool)arg1 disconnectError:(id)arg2 didRemoteCancel:(bool)arg3;
- (void)disconnectWithNoRemotePackets:(long long)arg1;
- (void)disconnectWithNoRemotePackets:(long long)arg1 timeoutUsed:(double)arg2;
- (void)doSipEndAction:(int)arg1 callID:(unsigned int)arg2 error:(id)arg3;
- (void)doSipEndProc:(id)arg1;
- (bool)doesVideoPayloadMatchRemoteImageAttributeRules:(id)arg1;
- (id)dtxMetrics;
- (void)enableAudio:(bool)arg1;
- (void)enableSessionHealthMonitor;
- (bool)establishSIPDialogWithSDP:(id)arg1 error:(id*)arg2;
- (bool)evaluateEnableRRx:(int*)arg1;
- (int)fillMediaControlInfo:(void*)arg1;
- (bool)findFeatureString:(const char *)arg1 value:(char *)arg2 valueLength:(unsigned long long)arg3 withPrefix:(const char *)arg4;
- (int)flushBasebandQueueWithPayloads:(id)arg1 flushCount:(unsigned int*)arg2;
- (int)getAllCompatibleVideoPayloads:(int**)arg1 forMediaType:(int)arg2;
- (void)getAllPayloadsForAudio:(int**)arg1 count:(int*)arg2 secondaryPayloads:(int**)arg3 secondaryCount:(int*)arg4;
- (void)getAllPayloadsForScreen:(int**)arg1 count:(int*)arg2;
- (void)getAllPayloadsForVideo:(int**)arg1 count:(int*)arg2;
- (int)getAudioTxBitrate;
- (id)getCompatibleLocalFeaturesListForPayloads:(int*)arg1 count:(int)arg2;
- (id)getFeaturesListStringForPayload:(int)arg1;
- (void)getFrontCaptureTime:(float*)arg1 backCaptureTime:(float*)arg2;
- (id)getVideoRuleForVideoMode:(unsigned long long)arg1 interface:(int)arg2 sessionBitrate:(int*)arg3;
- (bool)getVideoSettings:(int)arg1 forInterface:(int)arg2 payload:(int)arg3 width:(int*)arg4 height:(int*)arg5 framerate:(int*)arg6 bitRate:(int*)arg7;
- (struct tagHANDLE { int x1; }*)hAFRC;
- (struct tagHANDLE { int x1; }*)hMediaQueue;
- (void)handleCellTechChange:(int)arg1;
- (void)handleCellularMTUChanged:(unsigned short)arg1;
- (void)handleDuplicationEnabled:(bool)arg1 activeConnection:(id)arg2;
- (void)handleFirstConnectionSetup:(id)arg1;
- (int)handleIncomingWithCallID:(unsigned int)arg1 msgIn:(const char *)arg2 msgOut:(char *)arg3 optional:(void*)arg4 confIndex:(int*)arg5 error:(id*)arg6;
- (void)handleKeyExchangeCompleted;
- (void)handleMediaReceivedOverPeerToPeerLinkWithConnectionId:(int)arg1;
- (void)handleMediaReceivedOverRelayLinkWithConnectionId:(int)arg1;
- (void)handleNewConnectionSetup:(id)arg1 isInitialConnection:(bool)arg2;
- (void)handlePendingPrimaryConnectionChange;
- (void)handlePrimaryConnectionChanged:(id)arg1 oldPrimaryConnection:(id)arg2;
- (void)handleReceivedPiggybackBlobIDS:(id)arg1;
- (void)handleReceivedPiggybackBlobLegacy:(id)arg1;
- (bool)handshakeComplete:(struct SSLContext { }*)arg1 withError:(struct __CFError {}**)arg2;
- (id)imageAttributeRules;
- (id)init;
- (id)initWithDeviceRole:(int)arg1 transportType:(unsigned int)arg2;
- (void)initWithRelevantStorebagEntries;
- (bool)initializeVideoReceiver:(id*)arg1 reportingAgent:(struct opaqueRTCReporting { }*)arg2;
- (bool)initializeVideoTransmitter:(id*)arg1 encodeRule:(id)arg2 captureRuleWifi:(id)arg3 captureRuleCellular:(id)arg4 unpausing:(bool)arg5 reportingAgent:(struct opaqueRTCReporting { }*)arg6;
- (unsigned char)inputMeter;
- (int)interfaceForCurrentCall;
- (id)inviteDataForParticipantID:(id)arg1 callID:(unsigned int*)arg2 remoteInviteData:(id)arg3 nonCellularCandidateTimeout:(double)arg4 error:(id*)arg5;
- (bool)isAudioRunning;
- (bool)isBetterForSIPInviteWithSourceDestinationInfo:(struct tagVCSourceDestinationInfo { int x1; union { struct { struct tagIPPORT { int x_1_3_1; BOOL x_1_3_2[16]; union { unsigned int x_3_4_1; unsigned char x_3_4_2[16]; } x_1_3_3; unsigned short x_1_3_4; } x_1_2_1; struct tagIPPORT { int x_2_3_1; BOOL x_2_3_2[16]; union { unsigned int x_3_4_1; unsigned char x_3_4_2[16]; } x_2_3_3; unsigned short x_2_3_4; } x_1_2_2; struct { bool x_3_3_1; unsigned short x_3_3_2; } x_1_2_3; } x_2_1_1; struct { int x_2_2_1; struct tagIPPORT { int x_2_3_1; BOOL x_2_3_2[16]; union { unsigned int x_3_4_1; unsigned char x_3_4_2[16]; } x_2_3_3; unsigned short x_2_3_4; } x_2_2_2; } x_2_1_2; struct { unsigned int x_3_2_1; struct { BOOL x_2_3_1; unsigned short x_2_3_2; unsigned short x_2_3_3; unsigned char x_2_3_4; } x_3_2_2; } x_2_1_3; } x2; struct tagVCSourceDestinationInfo {} *x3; }*)arg1 thanSession:(id)arg2;
- (bool)isCallOngoing;
- (bool)isCaller;
- (bool)isCurrentPayloadTypeValid;
- (bool)isGKVoiceChat;
- (bool)isLocalOrRemoteOnCellular;
- (bool)isLowBitrateCodecPreferred:(id)arg1;
- (bool)isRTCPFBEnabled;
- (bool)isRemoteMediaStalled;
- (bool)isSKEOptimizationEnabled;
- (bool)isSecureMessagingRequired;
- (bool)isStarted;
- (bool)isValidVideoPayloadOverride:(id)arg1;
- (bool)isVideoRunning;
- (bool)isWaitingForICEResult;
- (unsigned int)lastReceived;
- (unsigned int)lastSentAudioSampleTime;
- (int)learntBitrateForSegment:(id)arg1 defaultValue:(int)arg2;
- (id)localCallInfo;
- (void)localCameraSwitchedFrom:(int)arg1 to:(int)arg2;
- (id)localParticipantID;
- (void)lock;
- (void)logConnectionSuccess;
- (void)logDetailedNetworkInformation;
- (void)logIdentity:(struct __SecIdentity { }*)arg1;
- (void)logPerfTimings;
- (int)mapPacketMultiplexModeToRTPMode:(long long)arg1;
- (int)mapPacketMultiplexModeToSIPMode:(long long)arg1;
- (const char *)matchedFeaturesStringForPayload:(int)arg1;
- (unsigned int)maxBitrateForConnectionType;
- (unsigned short)maxPacketLength;
- (void)mediaController:(void*)arg1 mediaSuggestionDidChange:(struct VCRateControlMediaSuggestion { bool x1; bool x2; bool x3; bool x4; bool x5; bool x6; bool x7; })arg2;
- (void)messageVCMomentsRequest:(id)arg1;
- (id)mutedPeers;
- (int)natType;
- (void)negotiateFeaturesString:(id)arg1 forPayload:(int)arg2;
- (bool)negotiateMaxBandwidth:(int*)arg1;
- (void)negotiateMediaMaxBandwidth;
- (bool)negotiatePayloads:(id*)arg1 withError:(id*)arg2;
- (id)negotiatedAudioPayloadTypes;
- (int)negotiatedReceivingFramerate;
- (double)networkConditionsTimeoutInSeconds;
- (double)networkQuality;
- (id)newMediaBlobWithRemoteMediaBlob:(id)arg1 localCallID:(unsigned int)arg2 isLowBitrateCodecPreferred:(bool)arg3;
- (id)newRemoteScreenAttributesForOrientation:(int)arg1;
- (id)newSKEBlobWithRemoteSKEBlob:(id)arg1;
- (void)notifyDelegateActiveConnectionDidChange;
- (void)notifyDelegateAndEndCall:(long long)arg1 didRemoteCancel:(bool)arg2 error:(id)arg3;
- (void)notifyDelegateSessionStarted;
- (int)numBufferBytesAvailable;
- (bool)onCaptureFrame:(struct opaqueCMSampleBuffer { }*)arg1 audioTS:(unsigned int)arg2 audioHT:(double)arg3 videoHT:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4 droppedFrames:(int)arg5 cameraBits:(unsigned char)arg6;
- (void)onPlayVideo:(struct __CVBuffer { }*)arg1 frameTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 cameraStatusBits:(unsigned char)arg3;
- (int)operatingMode;
- (void)packMeters:(char *)arg1 withLength:(char *)arg2;
- (float)packetLateAndMissingRatio;
- (double)packetLossRate;
- (int)packetsPerBundle;
- (unsigned int)parameterSetForPayload:(int)arg1;
- (id)peerCN;
- (id)peerReportingID;
- (id)pickFeaturesStringForPayload:(int)arg1 featuresListDict:(id)arg2 remote:(bool)arg3;
- (int)preferredAudioCodec;
- (bool)prepareSRTPWithError:(id*)arg1;
- (void)primaryConnectionDidChangeTo:(id)arg1 oldConnection:(id)arg2;
- (unsigned int)primaryConnectionType;
- (void)processBlackFrame:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)processCancelRelayRequest:(id)arg1 didOriginateRequest:(bool)arg2;
- (int)processMediaControlInfo:(void*)arg1 isAudio:(bool)arg2;
- (void)processRelayRequestResponseDict:(id)arg1 didOriginateRequest:(bool)arg2;
- (void)processRelayUpdateDict:(id)arg1 didOriginateRequest:(bool)arg2;
- (void)processRemoteIPChange:(id)arg1 callID:(unsigned int)arg2;
- (void)processResolutionChangeToVideoRule:(id)arg1 captureRule:(id)arg2 featuresListString:(id)arg3;
- (void)processSIPMessage:(char *)arg1 msgOut:(char *)arg2 optional:(void*)arg3 confIndex:(int*)arg4;
- (bool)pullAudioSamples:(struct opaqueVCAudioBufferList { }*)arg1 rtpTimestamp:(unsigned int*)arg2 lastReceivedAudioTime:(double*)arg3 padding:(char *)arg4 paddingLength:(char *)arg5 silence:(int*)arg6;
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList { }*)arg1;
- (id)qualityDelegate;
- (void)rateController:(void*)arg1 targetBitrateDidChange:(unsigned int)arg2 rateChangeCounter:(unsigned int)arg3;
- (void)rcvdFirstRemoteFrame;
- (bool)receivedSIPInvite;
- (void)releaseRTPHandles;
- (void)remoteCellTechStateUpdate:(int)arg1 maxRemoteBitrate:(unsigned int)arg2;
- (unsigned int)remoteFrameHeight;
- (unsigned int)remoteFrameWidth;
- (id)remoteParticipantID;
- (void)remotePauseDidChangeToState:(bool)arg1 forVideo:(bool)arg2;
- (id)remoteVideoAttributes;
- (void)reportDashboardEndResult:(bool)arg1;
- (void)reportOperatingMode;
- (void)reportSymptom:(unsigned int)arg1;
- (void)reportWRMMetrics:(const struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; unsigned long long x15; unsigned long long x16; unsigned long long x17; unsigned long long x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; unsigned long long x22; unsigned long long x23; unsigned long long x24; unsigned long long x25; unsigned long long x26; unsigned long long x27; unsigned long long x28; }*)arg1;
- (struct opaqueRTCReporting { }*)reportingAgent;
- (void)reportingMomentsWithRequest:(id)arg1;
- (void)requestWRMNotification;
- (bool)requiresWifi;
- (void)resetState;
- (void)resetVideoRulesForInterface:(int)arg1 videoReportingDictionary:(id)arg2;
- (struct __SecIdentity { }*)retrieveIdentity;
- (id)ringBuf;
- (unsigned int)roundTripTime;
- (int)rtcpDescriptor;
- (struct tagHANDLE { int x1; }*)rtpHandle;
- (long long)sampleRate;
- (void)schedulePrimaryConnectionChange:(id)arg1 oldConnection:(id)arg2;
- (void)sendARPLData:(id)arg1 toCallID:(unsigned int)arg2;
- (void)sendBasebandCodecMessage;
- (void)sendCallingModeMessage;
- (void)sendData:(id)arg1 messageType:(unsigned int)arg2 encrypted:(bool)arg3;
- (bool)sendSIPInviteWithError:(id*)arg1;
- (void)sendSymptomToRemote:(id)arg1 groupID:(id)arg2;
- (void)sendTimings;
- (void)sendWRMStatusUpdate:(const struct { int x1; int x2; int x3; unsigned int x4; }*)arg1;
- (id)sessionID;
- (double)sessionReceivingBitrate;
- (double)sessionReceivingFramerate;
- (double)sessionTransmittingBitrate;
- (double)sessionTransmittingFramerate;
- (void)setBandwidthDownstream:(int)arg1;
- (void)setBandwidthUpstream:(int)arg1;
- (void)setBasebandCodecSampleRate:(id)arg1;
- (void)setBasebandCodecType:(id)arg1;
- (void)setCapabilities:(id)arg1;
- (void)setConnectionChangeState:(long long)arg1;
- (void)setConnectionManager:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDeviceRole:(int)arg1;
- (void)setDidSend200OK:(bool)arg1;
- (void)setDuplicationFlag:(bool)arg1 withPreferredLocalLinkTypeForDuplication:(int)arg2 notifyPeer:(bool)arg3;
- (void)setHAFRC:(struct tagHANDLE { int x1; }*)arg1;
- (void)setHMediaQueue:(struct tagHANDLE { int x1; }*)arg1;
- (void)setImageAttributeRules:(id)arg1;
- (void)setInputMeter:(unsigned char)arg1;
- (void)setIsGKVoiceChat:(bool)arg1;
- (void)setIsRTCPFBEnabled:(bool)arg1;
- (void)setIsStarted:(bool)arg1;
- (void)setIsWaitingForICEResult:(bool)arg1;
- (void)setLastReceived:(unsigned int)arg1;
- (void)setLocalIdentityForKeyExchange;
- (bool)setMatchedFeaturesString:(char *)arg1 localFeaturesString:(id)arg2 remoteFeaturesString:(id)arg3;
- (void)setMaxPacketLength:(unsigned short)arg1;
- (bool)setMediaQueueStreamSettings;
- (void)setMutedPeers:(id)arg1;
- (void)setNatType:(int)arg1;
- (void)setNetworkConditionsTimeoutInSeconds:(double)arg1;
- (void)setOperatingMode:(int)arg1;
- (void)setPacketLateAndMissingRatio:(float)arg1;
- (void)setPacketLossRate:(double)arg1;
- (void)setPacketsPerBundle:(int)arg1;
- (bool)setPauseAudio:(bool)arg1 error:(id*)arg2;
- (bool)setPauseAudio:(bool)arg1 force:(bool)arg2 error:(id*)arg3;
- (bool)setPauseVideo:(bool)arg1 error:(id*)arg2;
- (bool)setPauseVideo:(bool)arg1 force:(bool)arg2 error:(id*)arg3;
- (void)setPeerCN:(id)arg1;
- (void)setPeerProtocolVersion:(unsigned int)arg1;
- (void)setPeerReportingID:(id)arg1;
- (void)setPreferredAudioCodec:(int)arg1;
- (void)setQualityDelegate:(id)arg1;
- (bool)setRTPPayloads:(id)arg1 withError:(id*)arg2;
- (void)setReceivedSIPInvite:(bool)arg1;
- (void)setRemoteCallInfoFromInviteDictionary:(id)arg1;
- (void)setRemoteFrameHeight:(unsigned int)arg1;
- (void)setRemoteFrameWidth:(unsigned int)arg1;
- (void)setRemoteVideoAttributes:(id)arg1;
- (void)setRequiresWifi:(bool)arg1;
- (void)setResumeAudio;
- (void)setResumeVideo;
- (void)setRingBuf:(id)arg1;
- (void)setRoundTripTime:(unsigned int)arg1;
- (void)setRtpHandle:(struct tagHANDLE { int x1; }*)arg1;
- (int)setSKEBlobOnTransportSession;
- (void)setSampleRate:(long long)arg1;
- (void)setSessionConferenceState:(unsigned int)arg1 callID:(unsigned int)arg2;
- (void)setSessionConferenceVisualRectangle:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 callID:(unsigned int)arg2;
- (void)setSessionID:(id)arg1;
- (void)setShouldSendAudio:(bool)arg1;
- (void)setShouldTimeoutPackets:(bool)arg1;
- (void)setSignalGrade:(int)arg1;
- (void)setSignalRaw:(int)arg1;
- (void)setSignalStrength:(int)arg1;
- (void)setSipState:(long long)arg1;
- (void)setSrtpKeyBytes:(id)arg1;
- (void)setState:(long long)arg1;
- (void)setSuspendAudio;
- (void)setSuspendVideo;
- (void)setUpFirstRemoteFrameTimer;
- (void)setUseCompressedConnectionData:(bool)arg1;
- (void)setUseControlByte:(bool)arg1;
- (void)setUseRateControl:(bool)arg1;
- (void)setUseUEP:(bool)arg1;
- (void)setVideoPayload:(long long)arg1;
- (void)setWRMMetricConfig:(struct { unsigned long long x1; }*)arg1;
- (void)setWRMNotification:(struct { int x1; int x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; }*)arg1;
- (void)setupAACELDPayload:(int)arg1;
- (bool)setupAudioCodecWithPayload:(int)arg1;
- (bool)setupAudioCookies;
- (void)setupAudioOnOffStateMessages;
- (void)setupAudioPauseMessages;
- (void)setupAudioPausedHBMessages;
- (void)setupBasebandCodecInfoMessages;
- (void)setupBitrateNegotiation;
- (void)setupCalleeSIPStartTimeout:(float)arg1;
- (bool)setupCallerRTPChannelWithError:(id*)arg1;
- (void)setupCallingModeMessages;
- (void)setupCellTechChangeMessages;
- (void)setupConnectionTimeoutTimerWithErrorCode:(int)arg1 detailedCode:(int)arg2 description:(id)arg3 reason:(id)arg4;
- (void)setupDTLSDefaults;
- (int)setupEncryptionWithKey:(const struct __CFData {}**)arg1 confIndex:(int*)arg2;
- (void)setupHandoverCandidateChangeMessage;
- (bool)setupIDSConnectionForCallID:(unsigned int)arg1 destination:(id)arg2 socket:(int)arg3 error:(id*)arg4;
- (void)setupMessaging;
- (void)setupMomentsMessages;
- (void)setupPeerInfo:(id)arg1 usingInviteData:(id)arg2 isCaller:(bool)arg3 capabilities:(id)arg4;
- (void)setupPiPStateChangeMessage;
- (void)setupPreferredInterfaceMessage;
- (void)setupSecureDataChannel;
- (void)setupSymptomEnabledMessage;
- (void)setupVideoPauseMessages;
- (void)setupWCMClient;
- (void)setupWRMClient;
- (bool)shouldNotifyDelegateDidStartBeforeAudioSetup;
- (bool)shouldSendAudio;
- (void)shouldSendBlackFrame:(bool)arg1;
- (bool)shouldTimeoutPackets;
- (void)shutdownVoiceChatFromRemoteSIPSignal:(int)arg1 withReason:(const char *)arg2;
- (int)signalGrade;
- (int)signalRaw;
- (int)signalStrength;
- (int)sipCallback:(int)arg1 callID:(unsigned int)arg2 msgIn:(const char *)arg3 msgOut:(char *)arg4 optional:(void*)arg5 confIndex:(int*)arg6;
- (void)sipConnectThreadProc:(id)arg1;
- (bool)sipConnectWithError:(id*)arg1;
- (long long)sipState;
- (id)srtpKeyBytes;
- (bool)startAFRC:(id*)arg1;
- (void)startAWDStats;
- (void)startAudioIOWithCompletionHandler:(id /* block */)arg1;
- (void)startAudioWithCompletionHandler:(id /* block */)arg1;
- (bool)startConnectionWithParticipantID:(id)arg1 callID:(unsigned int)arg2 usingInviteData:(id)arg3 isCaller:(bool)arg4 capabilities:(id)arg5 idsSocket:(int)arg6 destination:(id)arg7 error:(id*)arg8;
- (bool)startMediaQueue:(id*)arg1;
- (bool)startMediaWithPreNegotiatedSettings:(id*)arg1;
- (void)startPausedHeartbeat;
- (bool)startRateControl:(id*)arg1;
- (bool)startVCRC:(id*)arg1;
- (bool)startVideo:(bool)arg1 error:(id*)arg2;
- (bool)startVideoReceive:(id*)arg1;
- (bool)startVideoSend:(bool)arg1 error:(id*)arg2;
- (long long)state;
- (bool)stillWantsToRelay;
- (void)stopAudioIO:(id /* block */)arg1;
- (void)stopAudioWithCompletionHandler:(id /* block */)arg1;
- (bool)stopMediaQueue:(id*)arg1;
- (void)stopPausedHeartbeat;
- (bool)stopRateControl:(id*)arg1;
- (bool)stopVideo:(bool)arg1 error:(id*)arg2;
- (bool)stopVideoReceive:(id*)arg1 isPausing:(bool)arg2;
- (bool)stopVideoSend:(bool)arg1 error:(id*)arg2;
- (void)thermalLevelDidChange:(int)arg1;
- (void)timeoutUnfinishedConnection;
- (void)transportSession:(id)arg1 cancelRelayRequest:(id)arg2;
- (void)transportSession:(id)arg1 connectionSetupDataDidChange:(id)arg2;
- (void)transportSession:(id)arg1 initiateRelayRequest:(id)arg2;
- (void)transportSession:(id)arg1 sendRelayResponse:(id)arg2;
- (bool)treatAsCellular;
- (void)triggerInterfaceChange;
- (void)unlock;
- (void)updateCachedConnectionState;
- (void)updateDeviceRole:(int)arg1;
- (void)updateLastReceivedAudioTime;
- (void)updateLastReceivedPacket:(bool)arg1;
- (void)updateLastReceivedPacketWithTimestamp:(double)arg1;
- (void)updateMaxPktLength;
- (void)updateNetworkCheckHint:(double)arg1;
- (void)updateRemoteMediaStallState:(double)arg1;
- (void)updateVideoQualityNotification:(double)arg1;
- (void)updateVideoQualityStatus:(double)arg1 bitrate:(double)arg2 time:(double)arg3 isRemote:(bool)arg4;
- (bool)useCompressedConnectionData;
- (bool)useControlByte;
- (bool)useRateControl;
- (bool)useUEP;
- (void)vcSecureDataChannel:(id)arg1 messageType:(unsigned int)arg2 receivedData:(id)arg3;
- (bool)videoIsPaused;
- (long long)videoPayload;
- (unsigned int)videoRTPID;
- (void)wcmGetCallConfig:(unsigned int*)arg1 targetBitrate:(unsigned int*)arg2;
- (void)wcmSetCallConfig:(unsigned int)arg1 interferenceLevel:(unsigned int)arg2;

@end
