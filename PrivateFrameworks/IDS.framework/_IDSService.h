/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/IDS.framework/IDS
 */

@interface _IDSService : NSObject <IDSAccountControllerDelegate, IDSConnectionDelegatePrivate, IDSDaemonListenerProtocol, IDSGroupContextControllerDelegate> {
    IDSAccountController * _accountController;
    IDSQuickSwitchAcknowledgementTracker * _acknowledgementTracker;
    NSSet * _commands;
    NSObject<OS_xpc_object> * _connection;
    id  _delegateContext;
    NSMapTable * _delegateToInfo;
    bool  _everHadDelegate;
    IDSGroupContextController * _groupContextController;
    NSMutableSet * _lastIsActiveSet;
    unsigned int  _listenerCaps;
    bool  _manuallyAckMessages;
    id /* block */  _pendingRegisteredIdentitiesBlock;
    bool  _pretendingToBeFull;
    NSMutableDictionary * _protobufSelectors;
    NSString * _rerouteService;
    NSMutableDictionary * _subServices;
    NSMutableDictionary * _uniqueIDToConnection;
}

@property (nonatomic, readonly, copy) NSSet *accounts;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly, copy) NSArray *devices;
@property (nonatomic, readonly, retain) IDSGroupContextController *groupContextController;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) IDSAccount *iCloudAccount;
@property (nonatomic, readonly, copy) NSSet *internalAccounts;
@property (nonatomic) bool manuallyAckMessages;
@property (getter=isPretendingToBeFull, nonatomic) bool pretendingToBeFull;
@property (nonatomic, readonly, copy) NSString *serviceDomain;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)OTRTestCallback:(id)arg1 time:(double)arg2 error:(id)arg3;
- (id /* block */)_acknowledgementBlockWithDelegateIdentifier:(id)arg1;
- (void)_callDelegatesForDevicesChanged;
- (void)_callDelegatesRespondingToSelector:(SEL)arg1 withPreCallbacksBlock:(id /* block */)arg2 callbackBlock:(id /* block */)arg3 postCallbacksBlock:(id /* block */)arg4;
- (void)_callDelegatesRespondingToSelector:(SEL)arg1 withPreCallbacksBlock:(id /* block */)arg2 callbackBlock:(id /* block */)arg3 postCallbacksBlock:(id /* block */)arg4 group:(id)arg5;
- (void)_callDelegatesWithBlock:(id /* block */)arg1;
- (void)_callDelegatesWithBlock:(id /* block */)arg1 group:(id)arg2;
- (void)_callIsActiveChanged;
- (void)_disableAccount:(id)arg1;
- (void)_enableAccount:(id)arg1;
- (id)_filteredAccountsFrom:(id)arg1;
- (void)_handlePretendingToBeFullWithIdentifier:(id*)arg1;
- (bool)_isDroppingMessages;
- (void)_logConnectionMap;
- (id)_payloadFromDecryptedData:(id)arg1;
- (void)_processAccountSet:(id)arg1;
- (id)_sendingAccountForAccount:(id)arg1;
- (id)_sendingAccountForAccount:(id)arg1 destination:(id)arg2;
- (void)_setupIDSWakeListenerForService:(id)arg1;
- (void)_setupNewConnectionForAccount:(id)arg1;
- (void)_stopAwaitingQuickSwitchAcknowledgementFromDelegateWithIdentifier:(id)arg1;
- (void)_tearDownConnectionForUniqueID:(id)arg1;
- (void)accountController:(id)arg1 accountAdded:(id)arg2;
- (void)accountController:(id)arg1 accountDisabled:(id)arg2;
- (void)accountController:(id)arg1 accountEnabled:(id)arg2;
- (void)accountController:(id)arg1 accountRemoved:(id)arg2;
- (id)accounts;
- (void)addDelegate:(id)arg1 queue:(id)arg2;
- (bool)canSendMessageWithAccount:(id)arg1 toDestination:(id)arg2;
- (bool)cancelIdentifier:(id)arg1 error:(id*)arg2;
- (void)connection:(id)arg1 account:(id)arg2 sessionInviteReceived:(id)arg3 fromID:(id)arg4 transportType:(id)arg5 options:(id)arg6 context:(id)arg7 messageContext:(id)arg8;
- (void)connection:(id)arg1 connectedDevicesChanged:(id)arg2;
- (void)connection:(id)arg1 devicesChanged:(id)arg2;
- (void)connection:(id)arg1 didHintCheckingTransportLogWithReason:(long long)arg2;
- (void)connection:(id)arg1 didUpdateDeviceIdentity:(id)arg2 error:(id)arg3 context:(id)arg4;
- (void)connection:(id)arg1 identifier:(id)arg2 alternateCallbackID:(id)arg3 willSendToDestinations:(id)arg4 skippedDestinations:(id)arg5 registrationPropertyToDestinations:(id)arg6;
- (void)connection:(id)arg1 identifier:(id)arg2 didSendWithSuccess:(bool)arg3 error:(id)arg4 context:(id)arg5;
- (void)connection:(id)arg1 identifier:(id)arg2 hasBeenDeliveredWithContext:(id)arg3;
- (void)connection:(id)arg1 incomingAccessoryData:(id)arg2 fromID:(id)arg3 context:(id)arg4;
- (void)connection:(id)arg1 incomingAccessoryReportMessage:(id)arg2 accessoryID:(id)arg3 controllerID:(id)arg4 context:(id)arg5;
- (void)connection:(id)arg1 incomingData:(id)arg2 fromID:(id)arg3 context:(id)arg4;
- (void)connection:(id)arg1 incomingEngramMessage:(id)arg2 fromID:(id)arg3 context:(id)arg4;
- (void)connection:(id)arg1 incomingGroupData:(id)arg2 fromID:(id)arg3 context:(id)arg4;
- (void)connection:(id)arg1 incomingMessage:(id)arg2 fromID:(id)arg3 context:(id)arg4;
- (void)connection:(id)arg1 incomingProtobuf:(id)arg2 fromID:(id)arg3 context:(id)arg4;
- (void)connection:(id)arg1 incomingTopLevelMessage:(id)arg2 fromID:(id)arg3 messageContext:(id)arg4;
- (void)connection:(id)arg1 isActiveChanged:(bool)arg2;
- (void)connection:(id)arg1 messageIdentifier:(id)arg2 alternateCallbackID:(id)arg3 updatedWithResponseCode:(long long)arg4 error:(id)arg5 lastCall:(bool)arg6 messageContext:(id)arg7;
- (void)connection:(id)arg1 nearbyDevicesChanged:(id)arg2;
- (void)daemonConnected;
- (id)daemonController;
- (id)datagramChannelForSessionDestination:(id)arg1 error:(id*)arg2;
- (id)datagramChannelForSocketDescriptor:(int)arg1 error:(id*)arg2;
- (id)datagramConnectionForSessionDestination:(id)arg1 error:(id*)arg2;
- (id)datagramConnectionForSocketDescriptor:(int)arg1 error:(id*)arg2;
- (void)dealloc;
- (id)deviceForFromID:(id)arg1;
- (id)deviceForUniqueID:(id)arg1;
- (id)devices;
- (id)devicesForBTUUID:(id)arg1;
- (void)didSwitchActivePairedDevice:(id)arg1 forService:(id)arg2 wasHandled:(bool*)arg3;
- (void)disable;
- (void)disablePhoneUser;
- (void)disableiCloudUser;
- (void)enable;
- (void)enablePhoneUser;
- (void)enableiCloudUser;
- (void)fetchRegisteredDeviceIdentityWithCompletion:(id /* block */)arg1;
- (id)firstRoutableInternetDestinationForSelf;
- (id)groupContextController;
- (id)groupContextController:(id)arg1 accountsForAlises:(id)arg2;
- (void)groupContextController:(id)arg1 didCreateGroup:(id)arg2;
- (id)iCloudAccount;
- (void)identitiesForGroupContextController:(id)arg1 completion:(id /* block */)arg2;
- (id)initWithService:(id)arg1 commands:(id)arg2 delegateContext:(id)arg3;
- (id)initWithService:(id)arg1 serviceDomain:(id)arg2 delegateContext:(id)arg3;
- (id)internalAccounts;
- (bool)isPretendingToBeFull;
- (bool)manuallyAckMessages;
- (void)performGroupTask:(id /* block */)arg1;
- (id)phoneNumberAccount;
- (SEL)protobufActionForType:(unsigned short)arg1 isResponse:(bool)arg2;
- (void)removeDelegate:(id)arg1;
- (void)resendSubServicesToDaemonForCurrentDevice;
- (void)scheduleTransactionLogTask:(id)arg1;
- (bool)sendAccessoryData:(id)arg1 toAccessoryID:(id)arg2 accessToken:(id)arg3 options:(id)arg4 identifier:(id*)arg5 error:(id*)arg6;
- (void)sendAckForMessageWithContext:(id)arg1;
- (bool)sendAheadGroup:(id)arg1 priority:(long long)arg2 options:(id)arg3 identifier:(id*)arg4 completion:(id /* block */)arg5;
- (bool)sendData:(id)arg1 fromAccount:(id)arg2 toDestinations:(id)arg3 priority:(long long)arg4 options:(id)arg5 identifier:(id*)arg6 error:(id*)arg7;
- (bool)sendData:(id)arg1 priority:(long long)arg2 options:(id)arg3 identifier:(id*)arg4 error:(id*)arg5;
- (bool)sendMessage:(id)arg1 fromAccount:(id)arg2 toDestinations:(id)arg3 priority:(long long)arg4 options:(id)arg5 identifier:(id*)arg6 error:(id*)arg7;
- (bool)sendProtobuf:(id)arg1 fromAccount:(id)arg2 toDestinations:(id)arg3 priority:(long long)arg4 options:(id)arg5 identifier:(id*)arg6 error:(id*)arg7;
- (bool)sendResourceAtURL:(id)arg1 metadata:(id)arg2 fromAccount:(id)arg3 toDestinations:(id)arg4 priority:(long long)arg5 options:(id)arg6 identifier:(id*)arg7 error:(id*)arg8;
- (bool)sendServerMessage:(id)arg1 command:(id)arg2 fromAccount:(id)arg3;
- (id)serviceDomain;
- (void)setLinkPreferences:(id)arg1;
- (void)setManuallyAckMessages:(bool)arg1;
- (void)setPreferInfraWiFi:(bool)arg1;
- (void)setPretendingToBeFull:(bool)arg1;
- (void)setProtobufAction:(SEL)arg1 forProtobufType:(unsigned short)arg2 isResponse:(bool)arg3;
- (void)startOTRTest:(long long)arg1;
- (id)streamConnectionForSessionDestination:(id)arg1 error:(id*)arg2;
- (id)streamConnectionForSocketDescriptor:(int)arg1 error:(id*)arg2;
- (void)testCloudQRConnection;
- (bool)updateSubServices:(id)arg1 forDevice:(id)arg2;
- (id)uriForFromID:(id)arg1;

@end
