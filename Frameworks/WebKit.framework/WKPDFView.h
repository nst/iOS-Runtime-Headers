/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/WebKit.framework/WebKit
 */

@interface WKPDFView : WKApplicationStateTrackingView <PDFHostViewControllerDelegate, WKActionSheetAssistantDelegate, WKWebViewContentProvider, _WKWebViewPrintProvider> {
    struct RetainPtr<WKActionSheetAssistant> { 
        void *m_ptr; 
    }  _actionSheetAssistant;
    struct RetainPtr<NSData> { 
        void *m_ptr; 
    }  _data;
    struct RetainPtr<CGPDFDocument *> { 
        void *m_ptr; 
    }  _documentForPrinting;
    struct BlockPtr<void ()>="m_block"@? {}  _findCompletion;
    struct RetainPtr<NSString> { 
        void *m_ptr; 
    }  _findString;
    unsigned long long  _findStringCount;
    unsigned long long  _findStringMaxCount;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    }  _fixedOverlayView;
    struct Optional<unsigned long> { 
        bool init_; 
        union constexpr_storage_t<unsigned long> { 
            unsigned char dummy_; 
            unsigned long long value_; 
        } storage_; 
    }  _focusedSearchResultIndex;
    long long  _focusedSearchResultPendingOffset;
    struct RetainPtr<PDFHostViewController> { 
        void *m_ptr; 
    }  _hostViewController;
    struct CGSize { 
        double width; 
        double height; 
    }  _overlaidAccessoryViewsInset;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    }  _pageNumberIndicator;
    struct CString { 
        struct RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> > { 
            struct CStringBuffer {} *m_ptr; 
        } m_buffer; 
    }  _passwordForPrinting;
    struct InteractionInformationAtPosition { 
        struct InteractionInformationRequest { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } point; 
            bool includeSnapshot; 
            bool includeLinkIndicator; 
        } request; 
        bool nodeAtPositionIsFocusedElement; 
        bool hasSelectionAtPosition; 
        bool isSelectable; 
        bool isNearMarkedText; 
        bool touchCalloutEnabled; 
        bool isLink; 
        bool isImage; 
        bool isAttachment; 
        bool isAnimatedImage; 
        bool isElement; 
        bool isDataDetectorLink; 
        bool preventTextInteraction; 
        struct FloatPoint { 
            float m_x; 
            float m_y; 
        } adjustedPointForNodeRespondingToClickEvents; 
        struct URL { 
            struct String { 
                struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                    struct StringImpl {} *m_ptr; 
                } m_impl; 
            } m_string; 
            unsigned int m_isValid : 1; 
            unsigned int m_protocolIsInHTTPFamily : 1; 
            unsigned int m_cannotBeABaseURL : 1; 
            unsigned int m_portLength : 3; 
            unsigned int m_schemeEnd : 26; 
            unsigned int m_userStart; 
            unsigned int m_userEnd; 
            unsigned int m_passwordEnd; 
            unsigned int m_hostEnd; 
            unsigned int m_pathAfterLastSlash; 
            unsigned int m_pathEnd; 
            unsigned int m_queryEnd; 
        } url; 
        struct URL { 
            struct String { 
                struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                    struct StringImpl {} *m_ptr; 
                } m_impl; 
            } m_string; 
            unsigned int m_isValid : 1; 
            unsigned int m_protocolIsInHTTPFamily : 1; 
            unsigned int m_cannotBeABaseURL : 1; 
            unsigned int m_portLength : 3; 
            unsigned int m_schemeEnd : 26; 
            unsigned int m_userStart; 
            unsigned int m_userEnd; 
            unsigned int m_passwordEnd; 
            unsigned int m_hostEnd; 
            unsigned int m_pathAfterLastSlash; 
            unsigned int m_pathEnd; 
            unsigned int m_queryEnd; 
        } imageURL; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } title; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } idAttribute; 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } bounds; 
        struct RefPtr<WebKit::ShareableBitmap, WTF::DumbPtrTraits<WebKit::ShareableBitmap> > { 
            struct ShareableBitmap {} *m_ptr; 
        } image; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } textBefore; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } textAfter; 
        struct TextIndicatorData { 
            struct FloatRect { 
                struct FloatPoint { 
                    float m_x; 
                    float m_y; 
                } m_location; 
                struct FloatSize { 
                    float m_width; 
                    float m_height; 
                } m_size; 
            } selectionRectInRootViewCoordinates; 
            struct FloatRect { 
                struct FloatPoint { 
                    float m_x; 
                    float m_y; 
                } m_location; 
                struct FloatSize { 
                    float m_width; 
                    float m_height; 
                } m_size; 
            } textBoundingRectInRootViewCoordinates; 
            struct FloatRect { 
                struct FloatPoint { 
                    float m_x; 
                    float m_y; 
                } m_location; 
                struct FloatSize { 
                    float m_width; 
                    float m_height; 
                } m_size; 
            } contentImageWithoutSelectionRectInRootViewCoordinates; 
            struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16> { 
                struct FloatRect {} *m_buffer; 
                unsigned int m_capacity; 
                unsigned int m_size; 
            } textRectsInBoundingRectCoordinates; 
            float contentImageScaleFactor; 
            struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { 
                struct Image {} *m_ptr; 
            } contentImageWithHighlight; 
            struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { 
                struct Image {} *m_ptr; 
            } contentImageWithoutSelection; 
            struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { 
                struct Image {} *m_ptr; 
            } contentImage; 
            struct Color { 
                union { 
                    unsigned long long rgbaAndFlags; 
                    struct ExtendedColor {} *extendedColor; 
                } m_colorData; 
            } estimatedBackgroundColor; 
            unsigned char presentationTransition; 
            unsigned short options; 
        } linkIndicator; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } dataDetectorIdentifier; 
        struct RetainPtr<NSArray> { 
            void *m_ptr; 
        } dataDetectorResults; 
    }  _positionInformation;
    struct RetainPtr<NSString> { 
        void *m_ptr; 
    }  _suggestedFilename;
    /* Warning: unhandled struct encoding: '{WeakObjCPtr<WKWebView>="m_weakReference"@}' */ struct WeakObjCPtr<WKWebView> { 
        id m_weakReference; 
    }  _webView;
}

@property (nonatomic, readonly) struct CGPDFDocument { }*_wk_printedDocument;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (nonatomic, readonly) UIView *web_contentView;
@property (nonatomic, readonly) NSData *web_dataRepresentation;
@property (nonatomic, readonly) bool web_isBackground;
@property (nonatomic, readonly) NSString *web_suggestedFilename;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_URLWithPageIndex:(long long)arg1;
- (bool)_computeFocusedSearchResultIndexWithOptions:(unsigned long long)arg1 didWrapAround:(bool*)arg2;
- (id)_contentView;
- (struct CGPDFDocument { }*)_ensureDocumentForPrinting;
- (void)_findString:(id)arg1 withOptions:(unsigned long long)arg2 maxCount:(unsigned long long)arg3 completion:(id /* block */)arg4;
- (void)_focusOnSearchResultWithOptions:(unsigned long long)arg1;
- (void)_goToURL:(id)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)_movePageNumberIndicatorToPoint:(struct CGPoint { double x1; double x2; })arg1 animated:(bool)arg2;
- (struct CGPoint { double x1; double x2; })_offsetForPageNumberIndicator;
- (void)_resetFind;
- (void)_scrollToURLFragment:(id)arg1;
- (void)_showActionSheetForURL:(id)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2 withAnnotationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)_updateLayoutAnimated:(bool)arg1;
- (unsigned long long)_wk_pageCountForPrintFormatter:(id)arg1;
- (struct CGPDFDocument { }*)_wk_printedDocument;
- (struct RetainPtr<NSArray> { void *x1; })actionSheetAssistant:(id)arg1 decideActionsForElement:(id)arg2 defaultActions:(struct RetainPtr<NSArray> { void *x1; })arg3;
- (void)actionSheetAssistant:(id)arg1 openElementAtLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)actionSheetAssistant:(id)arg1 performAction:(int)arg2;
- (void)actionSheetAssistant:(id)arg1 shareElementWithURL:(id)arg2 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (bool)actionSheetAssistant:(id)arg1 shouldIncludeAppLinkActionsForElement:(id)arg2;
- (id)dataDetectionContextForActionSheetAssistant:(id)arg1;
- (void)dealloc;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)pdfHostViewController:(id)arg1 didLongPressPageIndex:(long long)arg2 atLocation:(struct CGPoint { double x1; double x2; })arg3 withAnnotationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (void)pdfHostViewController:(id)arg1 didLongPressURL:(id)arg2 atLocation:(struct CGPoint { double x1; double x2; })arg3 withAnnotationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (void)pdfHostViewController:(id)arg1 documentDidUnlockWithPassword:(id)arg2;
- (void)pdfHostViewController:(id)arg1 findStringUpdate:(unsigned long long)arg2 done:(bool)arg3;
- (void)pdfHostViewController:(id)arg1 goToPageIndex:(long long)arg2 withViewFrustum:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)pdfHostViewController:(id)arg1 goToURL:(id)arg2;
- (void)pdfHostViewController:(id)arg1 updatePageCount:(long long)arg2;
- (void)pdfHostViewControllerExtensionProcessDidCrash:(id)arg1;
- (struct Optional<WebKit::InteractionInformationAtPosition> { bool x1; union storage_t<WebKit::InteractionInformationAtPosition> { unsigned char x_2_1_1; struct InteractionInformationAtPosition { struct InteractionInformationRequest { struct IntPoint { int x_1_4_1; int x_1_4_2; } x_1_3_1; bool x_1_3_2; bool x_1_3_3; } x_2_2_1; bool x_2_2_2; bool x_2_2_3; bool x_2_2_4; bool x_2_2_5; bool x_2_2_6; bool x_2_2_7; bool x_2_2_8; bool x_2_2_9; bool x_2_2_10; bool x_2_2_11; bool x_2_2_12; bool x_2_2_13; struct FloatPoint { float x_14_3_1; float x_14_3_2; } x_2_2_14; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_5_1; } x_1_4_1; } x_15_3_1; unsigned int x_15_3_2 : 1; unsigned int x_15_3_3 : 1; unsigned int x_15_3_4 : 1; unsigned int x_15_3_5 : 3; unsigned int x_15_3_6 : 26; unsigned int x_15_3_7; unsigned int x_15_3_8; unsigned int x_15_3_9; unsigned int x_15_3_10; unsigned int x_15_3_11; unsigned int x_15_3_12; unsigned int x_15_3_13; } x_2_2_15; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_5_1; } x_1_4_1; } x_16_3_1; unsigned int x_16_3_2 : 1; unsigned int x_16_3_3 : 1; unsigned int x_16_3_4 : 1; unsigned int x_16_3_5 : 3; unsigned int x_16_3_6 : 26; unsigned int x_16_3_7; unsigned int x_16_3_8; unsigned int x_16_3_9; unsigned int x_16_3_10; unsigned int x_16_3_11; unsigned int x_16_3_12; unsigned int x_16_3_13; } x_2_2_16; } x_2_1_2; } x2; })positionInformationForActionSheetAssistant:(id)arg1;
- (void)web_beginAnimatedResizeWithUpdates:(id /* block */)arg1;
- (void)web_computedContentInsetDidChange;
- (id)web_contentView;
- (void)web_countStringMatches:(id)arg1 options:(unsigned long long)arg2 maxCount:(unsigned long long)arg3;
- (id)web_dataRepresentation;
- (void)web_didSameDocumentNavigation:(unsigned int)arg1;
- (void)web_findString:(id)arg1 options:(unsigned long long)arg2 maxCount:(unsigned long long)arg3;
- (bool)web_handleKeyEvent:(id)arg1;
- (void)web_hideFindUI;
- (id)web_initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 webView:(id)arg2 mimeType:(id)arg3;
- (bool)web_isBackground;
- (void)web_scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(double)arg3;
- (void)web_scrollViewDidScroll:(id)arg1;
- (void)web_scrollViewDidZoom:(id)arg1;
- (void)web_scrollViewWillBeginZooming:(id)arg1 withView:(id)arg2;
- (void)web_setContentProviderData:(id)arg1 suggestedFilename:(id)arg2;
- (void)web_setFixedOverlayView:(id)arg1;
- (void)web_setMinimumSize:(struct CGSize { double x1; double x2; })arg1;
- (void)web_setOverlaidAccessoryViewsInset:(struct CGSize { double x1; double x2; })arg1;
- (id)web_suggestedFilename;

@end
