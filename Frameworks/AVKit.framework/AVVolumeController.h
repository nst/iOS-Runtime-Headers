/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AVKit.framework/AVKit
 */

@interface AVVolumeController : NSObject {
    float  _EUVolumeLimit;
    bool  _EUVolumeLimitEnabled;
    bool  _EUVolumeLimitOverridden;
    bool  _canOverrideEUVolumeLimit;
    bool  _changingVolume;
    bool  _currentRouteHasVolumeControl;
    <AVVolumeControllerDelegate> * _delegate;
    NSNumber * _maximumTargetVolumeSinceChangingVolumeBegan;
    bool  _prefersSystemVolumeHUDHidden;
    bool  _prefersSystemVolumeHUDHiddenInternal;
    NSNumber * _targetVolumeInternal;
    float  _volume;
    NSString * _volumeCategory;
    bool  _volumeChangesThrottled;
}

@property (nonatomic) float EUVolumeLimit;
@property (getter=isEUVolumeLimitEnabled, nonatomic) bool EUVolumeLimitEnabled;
@property (getter=isEUVolumeLimitOverridden, nonatomic) bool EUVolumeLimitOverridden;
@property (nonatomic) bool canOverrideEUVolumeLimit;
@property (getter=isChangingVolume, nonatomic) bool changingVolume;
@property (nonatomic) bool currentRouteHasVolumeControl;
@property (nonatomic) <AVVolumeControllerDelegate> *delegate;
@property (nonatomic, readonly) float effectiveVolumeLimit;
@property (nonatomic, retain) NSNumber *maximumTargetVolumeSinceChangingVolumeBegan;
@property (nonatomic) bool prefersSystemVolumeHUDHidden;
@property (nonatomic) bool prefersSystemVolumeHUDHiddenInternal;
@property (nonatomic, retain) NSNumber *targetVolumeInternal;
@property (nonatomic) float volume;
@property (nonatomic, readonly) NSString *volumeCategory;
@property (nonatomic) bool volumeChangesThrottled;

- (void).cxx_destruct;
- (float)EUVolumeLimit;
- (void)_applyProposedVolumeIfNeeded;
- (void)_applyProposedVolumeImmediately;
- (void)_handleCurrentRouteHasVolumeControlDidChangeNotification:(id)arg1;
- (void)_handleEUVolumeLimitDidChangeNotification:(id)arg1;
- (void)_handleSystemControllerServerDiedNotification;
- (void)_handleSystemVolumeDidChangeNotification:(id)arg1;
- (void)_observeSystemController;
- (void)_performOnMainThread:(id /* block */)arg1;
- (void)_unobserveSystemController;
- (void)beginChangingVolume;
- (bool)canOverrideEUVolumeLimit;
- (bool)currentRouteHasVolumeControl;
- (void)dealloc;
- (id)delegate;
- (float)effectiveVolumeLimit;
- (void)endChangingVolume;
- (id)init;
- (bool)isChangingVolume;
- (bool)isEUVolumeLimitEnabled;
- (bool)isEUVolumeLimitOverridden;
- (id)maximumTargetVolumeSinceChangingVolumeBegan;
- (bool)prefersSystemVolumeHUDHidden;
- (bool)prefersSystemVolumeHUDHiddenInternal;
- (void)setCanOverrideEUVolumeLimit:(bool)arg1;
- (void)setChangingVolume:(bool)arg1;
- (void)setCurrentRouteHasVolumeControl:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEUVolumeLimit:(float)arg1;
- (void)setEUVolumeLimitEnabled:(bool)arg1;
- (void)setEUVolumeLimitOverridden:(bool)arg1;
- (void)setMaximumTargetVolumeSinceChangingVolumeBegan:(id)arg1;
- (void)setPrefersSystemVolumeHUDHidden:(bool)arg1;
- (void)setPrefersSystemVolumeHUDHiddenInternal:(bool)arg1;
- (void)setSystemVolumeHUDEnabled:(bool)arg1;
- (void)setTargetVolume:(float)arg1;
- (void)setTargetVolumeInternal:(id)arg1;
- (void)setVolume:(float)arg1;
- (void)setVolumeChangesThrottled:(bool)arg1;
- (id)targetVolumeInternal;
- (float)volume;
- (id)volumeCategory;
- (bool)volumeChangesThrottled;

@end
