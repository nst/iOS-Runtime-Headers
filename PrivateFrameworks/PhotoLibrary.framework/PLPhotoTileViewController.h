/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotoLibrary.framework/PhotoLibrary
 */

@interface PLPhotoTileViewController : UIViewController <PLPhotoTileCloudPlaceholderViewDelegate, UIGestureRecognizerDelegate, UIScrollViewDelegate> {
    PHCachingImageManager * __cachingImageManager;
    UIView * __customCenterOverlay;
    bool  _allowZoomToFill;
    unsigned int  _autoZooming;
    unsigned int  _avalancheBadgeShouldBeHidden;
    unsigned int  _badgeShouldBeVisible;
    double  _badgeViewOptimalLayoutLowestTop;
    bool  _centerContentVertically;
    bool  _clientIsTemporarilyWallpaper;
    PLTileContainerView * _containerView;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _cropOverlayRect;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _cropRect;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _cropRectBeforeDragging;
    float  _cropRectZoomScale;
    bool  _currentTileDownloadFinished;
    NSArray * _customCenterOverlayConstraints;
    id /* block */  _didEndZoomingBlock;
    unsigned int  _didRequestFullSizeImage;
    double  _dispatchStartTime;
    double  _dispatchTimeElapsed;
    NSObject<OS_dispatch_source> * _dispatchTimer;
    UIGestureRecognizer * _doubleTapGestureRecognizer;
    double  _doubleTapZoomScale;
    bool  _force1XCroppedImage;
    bool  _forceNativeScreenScale;
    int  _fullSizeImageRequestID;
    UIImageView * _gradientView;
    bool  _hasNotedZoom;
    unsigned int  _ignoreZoomChange;
    UIImage * _image;
    unsigned int  _imageIsThumbnail;
    int  _imageOrientation;
    struct CGSize { 
        double width; 
        double height; 
    }  _imageSize;
    PLExpandableImageView * _imageView;
    bool  _isLoadingFullSizeImage;
    unsigned int  _isTVOut;
    unsigned int  _lockedUnderCropOverlay;
    double  _minZoomScale;
    int  _mode;
    PHAsset * _modelPhoto;
    id  _orientationDelegate;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _overlayInsets;
    UIImage * _pendingImage;
    bool  _picked;
    UIView<PLTilePlaceholderView> * _placeholderView;
    UIImageView * _reviewCheckmarkImageView;
    bool  _reviewing;
    PLImageScrollView * _scrollView;
    bool  _shouldHideProgressIndicator;
    bool  _shouldSupressViewWillTransitionToSize;
    bool  _shouldUpdateBadgeViewOptimalLayout;
    UIGestureRecognizer * _singleTapGestureRecognizer;
    <PLPhotoTileViewControllerDelegate> * _tileDelegate;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _tileFrame;
    unsigned int  _tileParentIsPageController;
    UIImage * _unscaledImage;
    bool  _useLessThanMinZoomForZoomedOutTest;
    unsigned int  _useZoomScaleForCropRect;
    bool  _userDidAdjustWallpaper;
    unsigned int  _userDidZoom;
    PLVideoView * _videoView;
    unsigned int  _viewDidAppear;
    unsigned int  _viewWillAppear;
    float  _wallpaperLandscapeZoomScale;
    float  _wallpaperPortraitZoomScale;
    bool  _wantsCompactLayout;
    unsigned int  _zoomGesturesEnabled;
    float  _zoomScaleBeforeZooming;
    bool  _zoomToFillInsteadOfToFit;
    double  _zoomToFillScale;
    unsigned int  _zooming;
}

@property (setter=_setCustomCenterOverlay:, nonatomic, retain) UIView *_customCenterOverlay;
@property (nonatomic) bool centerContentVertically;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool force1XCroppedImage;
@property (nonatomic) bool forceNativeScreenScale;
@property (readonly) unsigned long long hash;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } overlayInsets;
@property (nonatomic, readonly) PHAsset *photo;
@property (nonatomic) bool picked;
@property (nonatomic) bool reviewing;
@property (nonatomic) bool shouldHideProgressIndicator;
@property (nonatomic) bool shouldSupressViewWillTransitionToSize;
@property (readonly) Class superclass;
@property (nonatomic, retain) UIImage *thumbnailImage;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } tileFrame;
@property (nonatomic, retain) UIImage *unscaledImage;
@property (nonatomic) bool wantsCompactLayout;

+ (bool)_shouldForwardViewWillTransitionToSize;
+ (id)newPhotoTileViewControllerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 image:(id)arg2 allowZoomToFill:(bool)arg3 mode:(int)arg4;
+ (id)newPhotoTileViewControllerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 imageRef:(struct CGImage { }*)arg2 imageOrientation:(long long)arg3 allowZoomToFill:(bool)arg4 mode:(int)arg5;
+ (id)newPhotoTileViewControllerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 modelPhoto:(id)arg2 mode:(int)arg3;
+ (bool)shouldShowPlaceholderForAsset:(id)arg1;
+ (struct CGSize { double x1; double x2; })tileSize;
+ (struct CGSize { double x1; double x2; })tvOutTileSize;

- (void)_adjustScrollViewContentOffsetForInsets;
- (void)_adjustZoomForEnteringMode:(bool)arg1;
- (float)_calculateZoomScale:(bool)arg1 inView:(id)arg2;
- (void)_centerImageInScrollView;
- (bool)_clientIsWallpaper;
- (void)_configureViews;
- (id)_customCenterOverlay;
- (void)_handleDoubleTap:(id)arg1;
- (void)_handleFullSizeImageRequestResult:(id)arg1 dataUTI:(id)arg2 orientation:(long long)arg3;
- (void)_handleSingleTap:(id)arg1;
- (long long)_imageOrientation;
- (void)_installSubview:(id)arg1;
- (id)_newOriginalImageForPickerFromCachedData;
- (void)_performDidEndZoomBlock;
- (void)_performRotationUpdatesWithDuration:(double)arg1 size:(struct CGSize { double x1; double x2; })arg2;
- (void)_removePlaceholderView;
- (void)_repositionBadgeView;
- (void)_requestFullSizeImage;
- (void)_resetZoomCommon;
- (void)_setCustomCenterOverlay:(id)arg1;
- (void)_setDefaultZoomScale;
- (void)_setDidEndZoomingBlock:(id /* block */)arg1;
- (void)_setImage:(id)arg1 isThumbnail:(bool)arg2 preserveFrame:(bool)arg3;
- (void)_setPhoto:(id)arg1;
- (void)_setupBadgeView;
- (void)_setupReviewCheckmark;
- (void)_showBadgeViewIfAppropriate;
- (void)_teardownDispatchTimer;
- (void)_updateAggdKeys;
- (void)_updateContentInset;
- (void)_updateModelPhotoWithImage:(id)arg1;
- (void)_updatePlaceholderImageRect;
- (void)_updatePlaceholderViewAnimated:(bool)arg1;
- (void)_updatePlaceholderVisibility;
- (void)_updateReviewCheckmark;
- (void)_updateSubviewOrdering;
- (void)_updateVideoViewForModelPhoto;
- (void)_viewWillMoveToSuperView:(id)arg1;
- (bool)allowsEditing;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (id)cachingImageManager;
- (void)cancelFullSizeImageRequest;
- (bool)centerContentVertically;
- (double)currentToDefaultZoomRatio;
- (double)currentToMinZoomRatio;
- (void)dealloc;
- (double)defaultZoomScale;
- (id)description;
- (id)dictionaryWithCroppedImageForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 minimalCropDimension:(double)arg2 withOptions:(int)arg3;
- (void)didLoadImage;
- (void)didMoveToParentViewController:(id)arg1;
- (void)ensureFullSizeImageLoaded;
- (id)expandableImageView;
- (bool)force1XCroppedImage;
- (bool)forceNativeScreenScale;
- (void)forceZoomingGesturesEnabled;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gesturesEnabled;
- (bool)hasFullSizeImage;
- (void)hideContentView;
- (id)image;
- (int)imageOrientation;
- (id)imageView;
- (id)init;
- (id)initForPageController;
- (id)initWithModelPhoto:(id)arg1 image:(id)arg2 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 isThumbnail:(bool)arg4 imageOrientation:(int)arg5 allowZoomToFill:(bool)arg6 mode:(int)arg7;
- (id)initWithModelPhoto:(id)arg1 thumbnailImage:(id)arg2 size:(struct CGSize { double x1; double x2; })arg3;
- (void)installVideoOverlay:(id)arg1;
- (bool)isTVOut;
- (bool)isZoomedOut;
- (void)loadView;
- (double)minRotatedScale;
- (double)minZoomScale;
- (id)newCGImageBackedUIImage;
- (id)newImageWithCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 minimalCropDimension:(double)arg2 croppedImageData:(id*)arg3 fullScreenImageData:(id*)arg4 fullScreenImage:(struct CGImage {}**)arg5 imageCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg6 intersectCropWithFullRect:(bool)arg7;
- (void)noteParentViewControllerDidDisappear;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })overlayInsets;
- (id)photo;
- (bool)photoShouldHaveAvalancheBadge;
- (bool)photoShouldHaveHDRBadge;
- (bool)picked;
- (void)refreshTileWithFullScreenImage:(id)arg1 modelPhoto:(id)arg2;
- (void)resetZoom;
- (void)retryDownload;
- (bool)reviewing;
- (id)scrollView;
- (struct CGSize { double x1; double x2; })scrollView:(id)arg1 contentSizeForZoomScale:(double)arg2 withProposedSize:(struct CGSize { double x1; double x2; })arg3;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(double)arg3;
- (void)scrollViewDidZoom:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewWillBeginZooming:(id)arg1 withView:(id)arg2;
- (void)setAllowsZoomToFill:(bool)arg1;
- (void)setAvalancheBadgesHidden:(bool)arg1;
- (void)setBadgeVisible:(bool)arg1;
- (void)setBadgeVisible:(bool)arg1 animated:(bool)arg2;
- (void)setCenterContentVertically:(bool)arg1;
- (void)setClientIsWallpaper:(bool)arg1;
- (void)setCropOverlayRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)setForce1XCroppedImage:(bool)arg1;
- (void)setForceNativeScreenScale:(bool)arg1;
- (void)setFullSizeImage:(id)arg1;
- (void)setGesturesEnabled:(bool)arg1;
- (void)setLockedUnderCropOverlay:(bool)arg1;
- (void)setOrientationDelegate:(id)arg1;
- (void)setOverlayInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setPicked:(bool)arg1;
- (void)setReviewing:(bool)arg1;
- (void)setReviewing:(bool)arg1 animated:(bool)arg2;
- (void)setShouldHideProgressIndicator:(bool)arg1;
- (void)setShouldSupressViewWillTransitionToSize:(bool)arg1;
- (void)setTVOut:(bool)arg1;
- (void)setThumbnailImage:(id)arg1;
- (void)setTileDelegate:(id)arg1;
- (void)setTileFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setUnscaledImage:(id)arg1;
- (void)setVideoView:(id)arg1;
- (void)setWantsCompactLayout:(bool)arg1;
- (void)setZoomScale:(float)arg1;
- (void)setZoomingGesturesEnabled:(bool)arg1;
- (bool)shouldAutorotateToInterfaceOrientation:(long long)arg1;
- (bool)shouldHideProgressIndicator;
- (bool)shouldSupressViewWillTransitionToSize;
- (void)showContentView;
- (void)showErrorPlaceholderView;
- (id)thumbnailImage;
- (id)tileDelegate;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })tileFrame;
- (bool)tileIsOnScreen;
- (id)unscaledImage;
- (void)updateAfterCollapse;
- (void)updateCenterOverlay;
- (void)updateCloudDownloadProgress:(double)arg1;
- (void)updateForVisibleOverlays:(bool)arg1;
- (void)updateViewConstraints;
- (void)updateZoomScales;
- (bool)userDidAdjustWallpaper;
- (id)videoView;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (id)viewForZoomingInScrollView:(id)arg1;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (bool)wantsCompactLayout;
- (double)zoomToFillScale;
- (double)zoomToFitScale;
- (void)zoomToScale:(double)arg1 animated:(bool)arg2 completionBlock:(id /* block */)arg3;

@end
