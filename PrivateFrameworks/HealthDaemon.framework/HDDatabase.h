/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
 */

@interface HDDatabase : NSObject <HDContentProtectionObserver, HDDiagnosticObject, HDHealthDatabase, HDSQLiteDatabaseDelegate, HDSQLiteDatabasePoolDelegate> {
    NSMutableSet * _activeDatabases;
    NSConditionLock * _activeDatabasesLock;
    NSOperationQueue * _asynchronousOperationQueue;
    bool  _checkpointRequired;
    HDContentProtectionManager * _contentProtectionManager;
    HDSQLiteDatabasePool * _databasePool;
    bool  _didRunPostMigrationUpdates;
    NSMutableDictionary * _extendedTransactions;
    NSMutableArray * _firstUnlockBlocks;
    bool  _hasScheduledCheckpoint;
    NSObject<OS_dispatch_queue> * _hfdQueue;
    struct shared_ptr<health::DataStore> { 
        struct DataStore {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _highFrequencyDataStore;
    NSString * _homeDirectoryPath;
    bool  _integrityCheckInProgress;
    int  _invalidated;
    bool  _isObservingContentProtection;
    HDDatabaseJournal * _journal;
    NSObject<OS_dispatch_group> * _journalGroup;
    NSObject<OS_dispatch_queue> * _journalQueue;
    NSHashTable * _migratedDatabases;
    long long  _observedContentProtectionState;
    double  _offsetTimeInterval;
    unsigned long long  _pendingJournalMerges;
    HDProfile * _profile;
    NSObject<OS_dispatch_queue> * _protectedDataObserverNotificationQueue;
    NSObject<OS_dispatch_queue> * _protectedDataObserverQueue;
    NSHashTable * _protectedDataObservers;
    NSObject<OS_dispatch_queue> * _protectedDataQueue;
    long long  _protectedDataState;
    NSLock * _schemaMigrationLock;
    bool  _shouldNotifyFirstUnlockObservers;
    NSString * _threadLocalActiveConnectionKey;
}

@property (nonatomic, retain) NSMutableSet *activeDatabases;
@property (nonatomic, retain) NSConditionLock *activeDatabasesLock;
@property (nonatomic, retain) NSOperationQueue *asynchronousOperationQueue;
@property (nonatomic) bool checkpointRequired;
@property (nonatomic, retain) HDContentProtectionManager *contentProtectionManager;
@property (getter=isDataProtectedByFirstUnlockAvailable, nonatomic, readonly) bool dataProtectedByFirstUnlockAvailable;
@property (nonatomic, readonly) HDSQLiteDatabasePool *databasePool;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool didRunPostMigrationUpdates;
@property (nonatomic, retain) NSMutableDictionary *extendedTransactions;
@property (nonatomic, retain) NSMutableArray *firstUnlockBlocks;
@property (nonatomic) bool hasScheduledCheckpoint;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *hfdQueue;
@property (nonatomic, copy) NSString *homeDirectoryPath;
@property (nonatomic) bool integrityCheckInProgress;
@property (nonatomic) int invalidated;
@property (nonatomic) bool isObservingContentProtection;
@property (nonatomic, readonly) HDDatabaseJournal *journal;
@property (nonatomic, retain) NSObject<OS_dispatch_group> *journalGroup;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *journalQueue;
@property (nonatomic, retain) NSHashTable *migratedDatabases;
@property (nonatomic) long long observedContentProtectionState;
@property (nonatomic) double offsetTimeInterval;
@property (nonatomic) unsigned long long pendingJournalMerges;
@property (nonatomic) HDProfile *profile;
@property (getter=isProtectedDataAvailable, nonatomic, readonly) bool protectedDataAvailable;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *protectedDataObserverNotificationQueue;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *protectedDataObserverQueue;
@property (nonatomic, retain) NSHashTable *protectedDataObservers;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *protectedDataQueue;
@property (nonatomic) long long protectedDataState;
@property (nonatomic, retain) NSLock *schemaMigrationLock;
@property (nonatomic) bool shouldNotifyFirstUnlockObservers;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSString *threadLocalActiveConnectionKey;

+ (id)_databaseCorruptionDefaultKeyForDatabaseWithName:(id)arg1;
+ (id)allEntityClasses;
+ (id)allEntityClassesWithProtectionClass:(long long)arg1;
+ (long long)currentSchemaVersionForProtectedDatabase:(bool)arg1;
+ (void)didEncounterUncorruptedDatabaseWithName:(id)arg1;
+ (void)didPassIntegrityCheck;
+ (void)loadEntityClasses;
+ (void)reportDatabaseCorruptionForDatabaseWithName:(id)arg1;
+ (void)reportIntegrityCheckFailure;
+ (bool)shouldEnableFutureMigrations;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)HFDSizeInBytes;
- (id)_URLForWALForDatabaseAtURL:(id)arg1;
- (id)_activeDatabase;
- (bool)_applyOffsetTimeInterval:(double)arg1 database:(id)arg2 error:(id*)arg3;
- (bool)_attachProtectedDatabaseIfNeededToDatabase:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (bool)_canAttachProtectedDatabaseWithOptions:(unsigned long long)arg1 error:(id*)arg2;
- (id)_copyProtectedDataObservers;
- (bool)_createDataTablesInDatabase:(id)arg1 entityClasses:(id)arg2 error:(id*)arg3;
- (id)_createDatabaseConnection;
- (id)_createDatabaseConnectionWithURL:(id)arg1;
- (long long)_createEntitiesInDatabase:(id)arg1 protectedEntities:(bool)arg2 error:(id*)arg3;
- (id)_databaseForOptions:(unsigned long long)arg1 outerDatabase:(id)arg2 error:(id*)arg3;
- (id)_databaseNameForProtectedDatabase:(bool)arg1;
- (void)_enableIncrementalAutoVacuumForDatabaseAtURL:(id)arg1;
- (long long)_fileSizeForURL:(id)arg1 error:(id*)arg2;
- (struct shared_ptr<health::DataStore> { struct DataStore {} *x1; struct __shared_weak_count {} *x2; })_highFrequencyDataStoreWithError:(id*)arg1;
- (id)_highPriorityReaderDatabaseWithError:(id*)arg1;
- (void)_invalidateAndWaitWithHandler:(id)arg1;
- (bool)_isDatabaseValidWithError:(id*)arg1;
- (id)_journalDirectoryPath;
- (bool)_journalQueue_performJournalMergeAndCleanup;
- (long long)_migrateDatabase:(id)arg1 fromUserVersion:(long long)arg2 protectedDatabase:(bool)arg3 error:(id*)arg4;
- (bool)_migrateOrCreateProtectedSchemaInDatabase:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (long long)_migrateOrCreateProtectedSchemaInDatabaseIfWritable:(id)arg1 error:(id*)arg2;
- (long long)_migrateOrCreateSchemaWithDatabase:(id)arg1 protectedDatabase:(bool)arg2 error:(id*)arg3;
- (id)_newDatabaseConnectionWithError:(id*)arg1;
- (void)_performIntegrityCheck;
- (void)_protectedDataObserverQueue_addObserver:(id)arg1;
- (void)_protectedDataObserverQueue_removeObserver:(id)arg1;
- (void)_protectedDataQueue_beginObservingContentProtection;
- (void)_protectedDataQueue_mergeJournalAsynchronously;
- (long long)_protectedDataState;
- (void)_protectedDatabaseDidBecomeAvailable;
- (id)_readerDatabaseWithError:(id*)arg1;
- (void)_reportDatabaseSizes;
- (bool)_runPostMigrationUpdatesWithDatabase:(id)arg1 error:(id*)arg2;
- (void)_setActiveDatabase:(id)arg1;
- (id)_writerDatabaseWithError:(id*)arg1;
- (bool)accessHighFrequencyDataStoreWithError:(id*)arg1 block:(id)arg2;
- (id)activeDatabases;
- (id)activeDatabasesLock;
- (bool)addJournalEntries:(id)arg1 error:(id*)arg2;
- (bool)addJournalEntry:(id)arg1 error:(id*)arg2;
- (void)addProtectedDataObserver:(id)arg1;
- (id)asynchronousOperationQueue;
- (id)beginExtendedTransactionWithOptions:(unsigned long long)arg1 transactionTimeout:(double)arg2 continuationTimeout:(double)arg3 error:(id*)arg4;
- (void)beginObservingContentProtection;
- (bool)checkpointRequired;
- (id)contentProtectionManager;
- (void)contentProtectionStateChanged:(long long)arg1 previousState:(long long)arg2;
- (id)databasePool;
- (void)databasePool:(id)arg1 didFlushDatabases:(id)arg2;
- (id)databaseSizeInBytesExcludingHFD;
- (id)diagnosticDescription;
- (bool)didRunPostMigrationUpdates;
- (bool)discardHighFrequencyDataStoreWithError:(id*)arg1;
- (id)dumpSchemaAndReturnError:(id*)arg1;
- (id)extendedDatabaseTransactionForIdentifier:(id)arg1;
- (id)extendedTransactions;
- (void)finalizeExtendedTransactionForIdentifier:(id)arg1;
- (id)firstUnlockBlocks;
- (bool)hasScheduledCheckpoint;
- (id)hfdQueue;
- (id)highFrequencyDataStoreURL;
- (id)homeDirectoryPath;
- (id)initWithHomeDirectoryPath:(id)arg1 profile:(id)arg2;
- (bool)integrityCheckInProgress;
- (void)invalidateAndObliterateWithReason:(id)arg1 preserveCopy:(bool)arg2;
- (void)invalidateAndWait;
- (int)invalidated;
- (bool)isDataProtectedByFirstUnlockAvailable;
- (bool)isObservingContentProtection;
- (bool)isProtectedDataAvailable;
- (id)journal;
- (id)journalGroup;
- (id)journalQueue;
- (id)mainDatabaseURL;
- (long long)migrateOrCreateSchemaInDatabase:(id)arg1 protectedDatabaseAvailable:(bool)arg2 error:(id*)arg3;
- (id)migratedDatabases;
- (id)newDatabaseForDatabasePool:(id)arg1 error:(id*)arg2;
- (long long)observedContentProtectionState;
- (double)offsetTimeInterval;
- (unsigned long long)pendingJournalMerges;
- (void)performAsynchronously:(id)arg1;
- (bool)performJournalMergeUsingBlock:(id)arg1 error:(id*)arg2;
- (bool)performMigrationForOptions:(unsigned long long)arg1 error:(id*)arg2;
- (bool)performTransactionWithOptions:(unsigned long long)arg1 error:(id*)arg2 usingBlock:(id)arg3 inaccessibilityHandler:(id)arg4;
- (void)performWhenDataProtectedByFirstUnlockIsAvailable:(id)arg1;
- (id)profile;
- (id)protectedDataObserverNotificationQueue;
- (id)protectedDataObserverQueue;
- (id)protectedDataObservers;
- (id)protectedDataQueue;
- (long long)protectedDataState;
- (id)protectedDatabaseURL;
- (void)removeProtectedDataObserver:(id)arg1;
- (id)schemaMigrationLock;
- (void)setActiveDatabases:(id)arg1;
- (void)setActiveDatabasesLock:(id)arg1;
- (void)setAsynchronousOperationQueue:(id)arg1;
- (void)setCheckpointRequired:(bool)arg1;
- (void)setContentProtectionManager:(id)arg1;
- (void)setDidRunPostMigrationUpdates:(bool)arg1;
- (void)setExtendedTransactions:(id)arg1;
- (void)setFirstUnlockBlocks:(id)arg1;
- (void)setHasScheduledCheckpoint:(bool)arg1;
- (void)setHfdQueue:(id)arg1;
- (void)setHomeDirectoryPath:(id)arg1;
- (void)setIntegrityCheckInProgress:(bool)arg1;
- (void)setInvalidated:(int)arg1;
- (void)setIsObservingContentProtection:(bool)arg1;
- (void)setJournalGroup:(id)arg1;
- (void)setJournalQueue:(id)arg1;
- (void)setMigratedDatabases:(id)arg1;
- (void)setObservedContentProtectionState:(long long)arg1;
- (void)setOffsetTimeInterval:(double)arg1;
- (void)setPendingJournalMerges:(unsigned long long)arg1;
- (void)setProfile:(id)arg1;
- (void)setProtectedDataObserverNotificationQueue:(id)arg1;
- (void)setProtectedDataObserverQueue:(id)arg1;
- (void)setProtectedDataObservers:(id)arg1;
- (void)setProtectedDataQueue:(id)arg1;
- (void)setProtectedDataState:(long long)arg1;
- (void)setSchemaMigrationLock:(id)arg1;
- (void)setShouldNotifyFirstUnlockObservers:(bool)arg1;
- (void)setThreadLocalActiveConnectionKey:(id)arg1;
- (bool)shouldNotifyFirstUnlockObservers;
- (id)threadLocalActiveConnectionKey;
- (id)virtualFilesystemModuleForDatabase:(id)arg1;

@end
