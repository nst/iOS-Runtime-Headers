/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard
 */

@interface FBApplicationProcess : FBProcess <BKSProcessDelegate> {
    NSMutableSet * _allowedLockedFilePaths;
    FBApplicationInfo * _applicationInfo;
    bool  _beingDebugged;
    BKSProcess * _bksProcess;
    bool  _bootstrapFailed;
    bool  _bootstrapped;
    bool  _connectedToExternalAccessory;
    BKSProcessAssertion * _continuousProcessAssertion;
    FBProcessCPUStatistics * _cpuStatistics;
    int  _defaultSceneSuspendType;
    double  _execTime;
    FBProcessExecutionContext * _executionContext;
    FBApplicationProcessExitContext * _exitContext;
    bool  _finishedLaunching;
    BSMachPortSendRight * _gsEventPort;
    BKSProcessAssertion * _launchProcessAssertion;
    bool  _nowPlayingWithAudio;
    bool  _pendingExit;
    bool  _performedLaunch;
    NSMutableArray * _queue_terminateRequestCompletionBlocks;
    NSMutableArray * _queuedSceneBlocksToExecuteAfterLaunch;
    bool  _recordingAudio;
    FBSProcessWatchdogPolicy * _sceneCreateWatchdogPolicy;
    bool  _supportsBackgroundTaskAssertions;
    bool  _supportsSuspendOnLock;
    long long  _terminationReason;
    FBProcessWatchdog * _watchdog;
}

@property (nonatomic, readonly, retain) FBApplicationInfo *applicationInfo;
@property (getter=isBeingDebugged, nonatomic) bool beingDebugged;
@property (getter=isConnectedToExternalAccessory, nonatomic) bool connectedToExternalAccessory;
@property (getter=_queue_cpuStatistics, nonatomic, readonly, retain) FBProcessCPUStatistics *cpuStatistics;
@property (readonly, copy) NSString *debugDescription;
@property (getter=_queue_defaultSuspendType, nonatomic, readonly) int defaultSuspendType;
@property (nonatomic) <FBApplicationProcessDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double elapsedCPUTime;
@property (getter=_queue_execTime, nonatomic, readonly) double execTime;
@property (nonatomic, readonly, copy) FBProcessExecutionContext *executionContext;
@property (nonatomic, readonly, retain) FBApplicationProcessExitContext *exitContext;
@property (nonatomic, readonly) bool finishedLaunching;
@property (readonly) unsigned long long hash;
@property (getter=isNowPlayingWithAudio, nonatomic) bool nowPlayingWithAudio;
@property (getter=isPendingExit, nonatomic, readonly) bool pendingExit;
@property (getter=isRecordingAudio, nonatomic) bool recordingAudio;
@property (readonly) Class superclass;
@property (getter=_queue_supportsBackgroundTaskAssertions, nonatomic, readonly) bool supportsBackgroundTaskAssertions;
@property (getter=_queue_supportsSuspendOnLock, nonatomic, readonly) bool supportsSuspendOnLock;
@property (getter=_queue_terminationReason, nonatomic, readonly) long long terminationReason;

+ (void)deleteAllJobs;

- (id)GSEventPort;
- (id)_applicationWorkspace;
- (id)_createWorkspace;
- (long long)_exceptionCodeForKillReason:(int)arg1;
- (void)_queue_addAllowedLockedFilePath:(id)arg1;
- (int)_queue_bksVisibilityForVisibility:(int)arg1;
- (bool)_queue_bootstrapAndExecWithContext:(id)arg1;
- (int)_queue_calculateDefaultSceneSuspendType;
- (void)_queue_callExitObservers;
- (void)_queue_cancelWatchdogTimer;
- (bool)_queue_consideredUnderLock;
- (id)_queue_cpuStatistics;
- (id)_queue_crashReportThermalsInfo;
- (int)_queue_defaultSuspendType;
- (void)_queue_doGracefulKillWithDeliveryConfirmation:(id)arg1;
- (void)_queue_dropContinuousProcessAssertion;
- (void)_queue_dropLaunchProcessAssertion;
- (int)_queue_effectiveVisibilityForSceneSettings:(id)arg1;
- (int)_queue_effectiveVisibilityForVisibility:(int)arg1;
- (int)_queue_effectiveVisibilityForVisibility:(int)arg1 underLock:(bool)arg2;
- (void)_queue_enumerateApplicationObserversWithBlock:(id)arg1;
- (double)_queue_execTime;
- (void)_queue_executeBlockAfterLaunchCompletes:(id)arg1;
- (void)_queue_executeKillForRequest:(id)arg1;
- (void)_queue_executeLaunchCompletionBlocks;
- (void)_queue_executeTerminateRequestCompletionBlocksIfNecessaryForSucccess:(bool)arg1;
- (void)_queue_finishLaunch;
- (id)_queue_internalDebugEnvironmentVariables;
- (void)_queue_invalidateBKSProcess;
- (bool)_queue_isAllowedLockedFilePath:(id)arg1 standardizedPath:(out id*)arg2;
- (bool)_queue_isSystemApplication;
- (void)_queue_killForReason:(long long)arg1 andReport:(bool)arg2 withDescription:(id)arg3 completion:(id)arg4;
- (void)_queue_killWithSignal:(int)arg1;
- (void)_queue_launchIfNecessary;
- (id)_queue_lockedFilePathsIgnoringAllowed;
- (id)_queue_name;
- (id)_queue_newWatchdogForContext:(id)arg1 completion:(id)arg2;
- (unsigned long long)_queue_noteExitedForForceQuit:(bool)arg1;
- (int)_queue_ourTaskStateForBKSTaskState:(int)arg1;
- (void)_queue_processDidExit;
- (void)_queue_processReallyDidExit;
- (void)_queue_sceneLifecycleStateChanged:(id)arg1;
- (void)_queue_sceneNeedsGracefulExit:(id)arg1 withDeliveryConfirmation:(id)arg2;
- (void)_queue_setSupportsBackgroundTaskAssertions:(bool)arg1;
- (void)_queue_setSupportsSuspendOnLock:(bool)arg1;
- (void)_queue_setTaskState:(int)arg1;
- (void)_queue_setVisibility:(int)arg1;
- (void)_queue_setupBKSProcess;
- (bool)_queue_shouldWatchdogWithDeclineReason:(id*)arg1;
- (void)_queue_startWatchdogTimerForContext:(id)arg1;
- (bool)_queue_supportsBackgroundTaskAssertions;
- (bool)_queue_supportsContinuousBackgroundMode;
- (bool)_queue_supportsSuspendOnLock;
- (void)_queue_takeLaunchProcessAssertion;
- (void)_queue_terminateWithRequest:(id)arg1 completion:(id)arg2;
- (long long)_queue_terminationReason;
- (void)_queue_waitToExecOrExit;
- (void)_terminateWithRequest:(id)arg1 forWatchdog:(id)arg2;
- (bool)_watchdog:(id)arg1 shouldTerminateWithDeclineReason:(out id*)arg2;
- (id)_watchdog:(id)arg1 terminationRequestForViolatedProvision:(id)arg2 error:(id)arg3;
- (id)_watchdogProvider;
- (long long)_watchdogReportType;
- (void)_watchdogStarted:(id)arg1;
- (void)_watchdogStopped:(id)arg1;
- (id)_workspace;
- (id)_workspaceServer;
- (id)applicationInfo;
- (bool)bootstrapWithContext:(id)arg1;
- (void)dealloc;
- (double)elapsedCPUTime;
- (void)executeBlockAfterLaunchCompletes:(id)arg1;
- (id)executionContext;
- (id)exitContext;
- (bool)finishedLaunching;
- (id)initWithApplicationInfo:(id)arg1 callOutQueue:(id)arg2;
- (id)initWithApplicationInfo:(id)arg1 handle:(id)arg2 callOutQueue:(id)arg3;
- (id)initWithBundleID:(id)arg1 pid:(int)arg2 callOutQueue:(id)arg3;
- (bool)isApplicationProcess;
- (bool)isBeingDebugged;
- (bool)isConnectedToExternalAccessory;
- (bool)isNowPlayingWithAudio;
- (bool)isPendingExit;
- (bool)isRecordingAudio;
- (bool)isSystemApplicationProcess;
- (void)killForReason:(long long)arg1 andReport:(bool)arg2 withDescription:(id)arg3;
- (void)killForReason:(long long)arg1 andReport:(bool)arg2 withDescription:(id)arg3 completion:(id)arg4;
- (void)launchIfNecessary;
- (void)noteWorkspaceLocked:(bool)arg1;
- (void)process:(id)arg1 isBeingDebugged:(bool)arg2;
- (void)process:(id)arg1 taskStateDidChange:(int)arg2;
- (void)processWillExpire:(id)arg1;
- (void)setBeingDebugged:(bool)arg1;
- (void)setConnectedToExternalAccessory:(bool)arg1;
- (void)setFinishedLaunching:(bool)arg1;
- (void)setNowPlayingWithAudio:(bool)arg1;
- (void)setPendingExit:(bool)arg1;
- (void)setRecordingAudio:(bool)arg1;
- (void)stop;

@end
