/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NanoPassKit.framework/NanoPassKit
 */

@interface NPKLibrary : NSObject <NPKGizmoClientProtocol> {
    NSObject<OS_dispatch_semaphore> * _connectionSemaphore;
    NSDate * _dateOfLastInvalidation;
    bool  _disableCaching;
    bool  _disabled;
    bool  _initialLoadComplete;
    int  _invalidationOccurrences;
    NSArray * _lastSeenRelevantPassTuples;
    bool  _needsRelevancyInformation;
    bool  _needsUpdatePassDescriptions;
    bool  _noPassesInDaemon;
    NSMutableDictionary * _passCache;
    NSArray * _passDescriptions;
    NSTimer * _passLibraryChangedCoalescingTimer;
    NSObject<OS_dispatch_queue> * _passesQueue;
    NSMutableDictionary * _preferredPaymentApplicationsCache;
    bool  _serverHasPasses;
    bool  _serverHasPotentiallyRelevantPasses;
    int  _updatePassDescriptionsFailureCount;
    NSObject<OS_dispatch_queue> * _updatePassDescriptionsQueue;
    bool  _updatingPassDescriptions;
    NSMutableArray * _workToPerformAfterInitialLoad;
    NSXPCConnection * _xpcConnection;
}

@property (nonatomic, readonly) NSArray *contactlessPaymentPassDescriptions;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disableCaching;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSArray *inAppPaymentPassDescriptions;
@property (nonatomic) bool initialLoadComplete;
@property (nonatomic, retain) NSArray *lastSeenRelevantPassTuples;
@property (nonatomic) bool needsRelevancyInformation;
@property (nonatomic) bool needsUpdatePassDescriptions;
@property (nonatomic, readonly) NSArray *nfcPassDescriptions;
@property (nonatomic, readonly) NSArray *nonPaymentPassDescriptions;
@property (nonatomic, retain) NSMutableDictionary *passCache;
@property (nonatomic, retain) NSArray *passDescriptions;
@property (nonatomic, retain) NSTimer *passLibraryChangedCoalescingTimer;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *passesQueue;
@property (nonatomic, readonly) NSArray *paymentPassDescriptions;
@property (nonatomic, readonly) PKPaymentPass *peerPaymentPass;
@property (nonatomic, retain) NSMutableDictionary *preferredPaymentApplicationsCache;
@property (nonatomic, readonly) NSArray *relevantPassTuples;
@property bool serverHasPasses;
@property bool serverHasPotentiallyRelevantPasses;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *updatePassDescriptionsQueue;
@property (nonatomic) bool updatingPassDescriptions;
@property (nonatomic, retain) NSMutableArray *workToPerformAfterInitialLoad;
@property (readonly) NSXPCConnection *xpcConnection;

+ (id)sharedInstance;

- (void).cxx_destruct;
- (id)_descriptionsWithFilter:(id /* block */)arg1;
- (id)_init;
- (bool)_shouldUpdatePassDescriptionsWithHighPriority;
- (void)_tearDownConnectionBecauseOfInvalidation;
- (void)_updatePassDescriptions;
- (void)_updatePassDescriptionsWithCompletionHandler:(id /* block */)arg1;
- (void)_updateRelevantPassIDs;
- (void)addPass:(id)arg1 completion:(id /* block */)arg2;
- (void)addPassData:(id)arg1 completion:(id /* block */)arg2;
- (void)boostDaemonUntilPassDBAvailable:(id /* block */)arg1;
- (id)cachedPassWithID:(id)arg1;
- (id)cachedPaymentPassWithDPANIdentifier:(id)arg1;
- (id)cachedPaymentPasses;
- (id)contactlessPaymentPassDescriptions;
- (void)dealloc;
- (void)deletePassWithID:(id)arg1;
- (bool)disableCaching;
- (void)getDeviceHasAnyPaymentPassesWithCompletion:(id /* block */)arg1;
- (void)getDiffForPassWithID:(id)arg1 reply:(id /* block */)arg2;
- (void)getPassWithID:(id)arg1 reply:(id /* block */)arg2;
- (void)getPassWithID:(id)arg1 reply:(id /* block */)arg2 queue:(id)arg3;
- (void)getSecureElementIdentifiers:(id /* block */)arg1;
- (void)handleAddedValue:(id)arg1 forPassUniqueID:(id)arg2;
- (void)handleEndedServiceModeRequest;
- (void)handlePassLibraryChangedNotification:(id)arg1;
- (void)handlePaymentTransactions:(id)arg1 forPassUniqueIDs:(id)arg2 completion:(id /* block */)arg3;
- (void)handleRelevancyCheckCompletedNotification:(id)arg1;
- (void)handleRelevancyPotentialChangedNotification:(id)arg1;
- (void)handleRelevantPassTuplesChanged:(id)arg1;
- (void)handleRelevantPassTuplesChangedNotification:(id)arg1;
- (void)handleValueAddedServiceTransactions:(id)arg1 forPassUniqueIDs:(id)arg2 completion:(id /* block */)arg3;
- (id)inAppPaymentPassDescriptions;
- (id)init;
- (bool)initialLoadComplete;
- (id)lastSeenRelevantPassTuples;
- (void)markAsHavingReceivedLocation;
- (bool)needsRelevancyInformation;
- (bool)needsUpdatePassDescriptions;
- (id)nfcPassDescriptions;
- (id)nonPaymentPassDescriptions;
- (void)noteWebServiceUpdateNeededWithCompletion:(id /* block */)arg1;
- (id)passCache;
- (id)passDescriptions;
- (id)passLibraryChangedCoalescingTimer;
- (id)passesQueue;
- (id)paymentPassDescriptions;
- (id)peerPaymentPass;
- (void)performWorkAfterFirstLibraryLoad:(id /* block */)arg1;
- (id)preferredPaymentApplicationForPaymentPass:(id)arg1;
- (id)preferredPaymentApplicationsCache;
- (void)processFelicaTransitAppletState:(id)arg1 forPassUniqueID:(id)arg2;
- (void)processFelicaTransitHistory:(id)arg1 forPaymentApplication:(id)arg2 withPassUniqueIdentifier:(id)arg3 transactionDate:(id)arg4;
- (id)relevantPassTuples;
- (void)requestPeerAccountTermsAndConditionsAcceptance;
- (bool)serverHasPasses;
- (bool)serverHasPotentiallyRelevantPasses;
- (void)setDisableCaching:(bool)arg1;
- (void)setExpressTransitUniqueID:(id)arg1 applicationIdentifier:(id)arg2 completion:(id /* block */)arg3;
- (void)setInitialLoadComplete:(bool)arg1;
- (void)setLastSeenRelevantPassTuples:(id)arg1;
- (void)setNeedsRelevancyInformation:(bool)arg1;
- (void)setNeedsUpdatePassDescriptions:(bool)arg1;
- (void)setPassCache:(id)arg1;
- (void)setPassDescriptions:(id)arg1;
- (void)setPassLibraryChangedCoalescingTimer:(id)arg1;
- (void)setPassesQueue:(id)arg1;
- (void)setPreferredPaymentApplication:(id)arg1 forPaymentPass:(id)arg2 completion:(id /* block */)arg3;
- (void)setPreferredPaymentApplicationsCache:(id)arg1;
- (void)setServerHasPasses:(bool)arg1;
- (void)setServerHasPotentiallyRelevantPasses:(bool)arg1;
- (void)setUpdatingPassDescriptions:(bool)arg1;
- (void)setWorkToPerformAfterInitialLoad:(id)arg1;
- (id)updatePassDescriptionsQueue;
- (bool)updatingPassDescriptions;
- (id)workToPerformAfterInitialLoad;
- (id)xpcConnection;

@end
