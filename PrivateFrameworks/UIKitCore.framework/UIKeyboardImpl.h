/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface UIKeyboardImpl : UIView <RTIInputSystemClientDelegate, RTIInputSystemSessionDelegate, TIKeyboardInputManagerToImplProtocol, UIKeyboardCandidateListDelegate, UITextInputSuggestionDelegate, _UIIVCResponseDelegateImpl, _UIKeyboardTextSelectionGestureControllerDelegate> {
    bool  _applicationStateIsActiveForRTI;
    UIKeyboardScheduledTask * _autocorrectPromptTask;
    NSDictionary * _candidateRequestInfo;
    int  _currentAlertReason;
    TICandidateRequestToken * _currentCandidateRequest;
    bool  _forceEnablePredictionView;
    bool  _handlingKeyCommandFromHardwareKeyboard;
    unsigned long long  _requestedInteractionModel;
    bool  _suppressRTIClient;
    _UIKeyboardTextSelectionController * _textSelectionController;
    bool  _viewServiceStateIsActiveForRTI;
    bool  committingCandidate;
    bool  geometryIsChanging;
    UIAlertView * keyboardAlertView;
    bool  m_UsedCandidateSelection;
    bool  m_acceptingCandidate;
    bool  m_animateUpdateBars;
    UITextInputArrowKeyHistory * m_arrowKeyHistory;
    unsigned int  m_autoDeleteCount;
    double  m_autoDeleteCurrentForce;
    double  m_autoDeleteCurrentForceMultipler;
    double  m_autoDeleteInterval;
    double  m_autoDeleteLastDelete;
    bool  m_autoDeleteOK;
    unsigned int  m_autoDeleteShiftCharacter;
    UIKeyboardScheduledTask * m_autoDeleteTask;
    bool  m_autoDeleteUseForce;
    bool  m_autocapitalizationPreference;
    UIAutocorrectInlinePrompt * m_autocorrectPrompt;
    UIKeyboardAutocorrectionController * m_autocorrectionController;
    bool  m_autocorrectionPreference;
    UIKBAutofillController * m_autofillController;
    NSDictionary * m_autofillCustomInfo;
    bool  m_autoshift;
    long long  m_cachedAutofillMode;
    bool  m_canUpdateIdleTimer;
    <UIKeyboardCandidateList> * m_candidateList;
    TIKeyboardCandidateResultSet * m_candidateResultSet;
    UIView * m_capsLockSign;
    bool  m_caretShowingNow;
    int  m_changeCount;
    bool  m_changeNotificationDisabled;
    double  m_changeTime;
    id  m_changedDelegate;
    bool  m_clientVariantSupportEnabled;
    bool  m_clientVariantSupportEnabledEver;
    bool  m_correctionLearningAllowed;
    long long  m_currentDirection;
    UITextInputTraits * m_defaultTraits;
    _UIActionWhenIdle * m_deferredDidSetDelegateAction;
    _UIActionWhenIdle * m_delayedCandidateRequest;
    <UIKeyInput> * m_delegate;
    bool  m_delegateAdoptsKeyInputPrivate;
    bool  m_delegateAdoptsKeyboardInput;
    bool  m_delegateAdoptsTextInput;
    bool  m_delegateAdoptsTextInputPrivate;
    bool  m_delegateAdoptsWKInteraction;
    bool  m_delegateAdoptsWebTextInputPrivate;
    bool  m_delegateIsSMSTextView;
    bool  m_delegateRequiresKeyEvents;
    UIDelayedAction * m_detachHardwareKeyboardAction;
    bool  m_didAutomaticallyInsertSpace;
    bool  m_didAutomaticallyInsertSpaceBeforeChangingInputMode;
    bool  m_didSyncDocumentStateToInputDelegate;
    UIDelayedAction * m_disablePredictionViewTimer;
    bool  m_disableSmartInsertDelete;
    bool  m_disableSyncTextChanged;
    bool  m_doubleSpacePeriodPreference;
    bool  m_doubleSpacePeriodWasAppliedInCurrentContext;
    id /* block */  m_externalTask;
    _UIKeyboardFeedbackGenerator * m_feedbackGenerator;
    <UIKeyboardImplGeometryDelegate> * m_geometryDelegate;
    bool  m_hardwareKeyboardAttached;
    UIPhysicalKeyboardEvent * m_hardwareRepeatEvent;
    UIKeyboardScheduledTask * m_hardwareRepeatTask;
    bool  m_hasEditedMarkedTextInExtendedView;
    bool  m_hasInputOnAcceptCandidate;
    bool  m_hasOutstandingObserverCallbackTask;
    bool  m_ignoreSelectionChange;
    _UIKeyboardImplProxy * m_implProxy;
    bool  m_inDealloc;
    bool  m_initializationDone;
    TIKeyboardInputManagerState * m_inputManagerState;
    struct CGPoint { 
        double x; 
        double y; 
    }  m_inputPoint;
    bool  m_insideKeyInputDelegateCall;
    bool  m_isAutofilling;
    bool  m_isCapsLocked;
    bool  m_isPerformingRemoteOperations;
    bool  m_isRotating;
    bool  m_keyboardDelegateStateNeedsRefresh;
    TIKeyboardState * m_keyboardState;
    NSMutableDictionary * m_keyedLayouts;
    NSMutableArray * m_keyplaneNamesCurrentDelegate;
    NSMutableArray * m_keyplaneNamesPreviousDelegate;
    UIView * m_languageIndicator;
    double  m_lastDisablePredictionViewTime;
    UIKeyboardLayout * m_layout;
    bool  m_longPress;
    UIDelayedAction * m_longPressAction;
    UIView * m_markedTextOverlay;
    bool  m_maximizing;
    bool  m_needsCandidates;
    bool  m_needsToRecomputeDesirableModes;
    unsigned long long  m_numCPwords;
    struct __CFRunLoopObserver { } * m_observer;
    long long  m_originalOrientation;
    bool  m_originalShouldSkipCandidateSelection;
    long long  m_pendingAutofillIndex;
    bool  m_preRotateShift;
    bool  m_preRotateShiftLocked;
    int  m_predictionType;
    NSString * m_previousInputString;
    unsigned long long  m_previousReturnKeyBehavior;
    unsigned long long  m_previousSpaceKeyBehavior;
    bool  m_prewarmsPredictiveCandidates;
    bool  m_receivedCandidatesInCurrentInputMode;
    UILexicon * m_recentInputs;
    bool  m_repeatDeleteFromHardwareKeyboard;
    bool  m_replacingWord;
    int  m_returnKeyState;
    bool  m_rivenCenterFilled;
    RTIInputSystemClient * m_rtiClient;
    RTIDocumentState * m_rtiDocumentState;
    RTIDocumentTraits * m_rtiDocumentTraits;
    bool  m_scrolling;
    bool  m_selecting;
    bool  m_settingShift;
    bool  m_shift;
    bool  m_shiftHeldDownNeedsUpdated;
    bool  m_shiftLocked;
    bool  m_shiftLockedEnabled;
    bool  m_shiftNeedsUpdate;
    bool  m_shiftPreventAutoshift;
    bool  m_shouldChargeKeys;
    bool  m_shouldSkipCandidateGeneration;
    bool  m_shouldUpdateCacheOnInputModesChange;
    bool  m_showInputModeIndicator;
    bool  m_showsCandidateBar;
    bool  m_showsCandidateInline;
    TISmartPunctuationController * m_smartPunctuationController;
    bool  m_softwareKeyboardShownByTouch;
    double  m_splitProgress;
    bool  m_suggestionsShownForCurrentDeletion;
    bool  m_suppressGeometryChangeNotifications;
    bool  m_suppressUpdateCandidateView;
    bool  m_suppressUpdateLayout;
    UIKeyboardTaskQueue * m_taskQueue;
    bool  m_textInputChangesIgnored;
    unsigned long long  m_textInputChangingCount;
    bool  m_textInputChangingDirection;
    bool  m_textInputChangingText;
    bool  m_textInputUpdatingSelection;
    TIKeyboardTouchEvent * m_touchEventWaitingForKeyInputEvent;
    UITextInputTraits * m_traits;
    UITextInputTraits * m_traitsForPreviousDelegate;
    bool  m_updateLayoutOnShowKeyboard;
    bool  m_updatingLayout;
    bool  m_updatingPreferences;
    bool  m_userChangedSelection;
    bool  m_usesAutoShiftFor3PK;
    bool  m_usesCandidateSelection;
}

@property (nonatomic) bool animateUpdateBars;
@property (nonatomic) bool applicationStateIsActiveForRTI;
@property (nonatomic, retain) UITextInputArrowKeyHistory *arrowKeyHistory;
@property (nonatomic, readonly) UIResponder<UIWKInteractionViewProtocol> *asynchronousInputDelegate;
@property (nonatomic, retain) UIKeyboardScheduledTask *autocorrectPromptTask;
@property (nonatomic, readonly) UIKeyboardAutocorrectionController *autocorrectionController;
@property (nonatomic, retain) UIKBAutofillController *autofillController;
@property (nonatomic) bool canUpdateIdleTimer;
@property (nonatomic, retain) NSDictionary *candidateRequestInfo;
@property (readonly) bool centerFilled;
@property (nonatomic, retain) id changedDelegate;
@property (nonatomic) bool committingCandidate;
@property (nonatomic, retain) TICandidateRequestToken *currentCandidateRequest;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) _UIActionWhenIdle *deferredDidSetDelegateAction;
@property (nonatomic, retain) _UIActionWhenIdle *delayedCandidateRequest;
@property (nonatomic, retain) UIResponder<UIKeyInput> *delegate;
@property (nonatomic, readonly) UIResponder *delegateAsResponder;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disableSmartInsertDelete;
@property (nonatomic, copy) id /* block */ externalTask;
@property (nonatomic, retain) _UIKeyboardFeedbackGenerator *feedbackGenerator;
@property (nonatomic) bool forceEnablePredictionView;
@property (nonatomic) <UIKeyboardImplGeometryDelegate> *geometryDelegate;
@property (nonatomic) bool geometryIsChanging;
@property (nonatomic) bool handlingKeyCommandFromHardwareKeyboard;
@property (nonatomic) bool hardwareKeyboardIsSeen;
@property (nonatomic, retain) UIPhysicalKeyboardEvent *hardwareRepeatEvent;
@property (nonatomic, retain) UIKeyboardScheduledTask *hardwareRepeatTask;
@property (readonly) unsigned long long hash;
@property (getter=isInHardwareKeyboardMode, nonatomic) bool inHardwareKeyboardMode;
@property (nonatomic, readonly) UIResponder<UITextInput> *inputDelegate;
@property (nonatomic, readonly) TIKeyboardInputManagerStub *inputManager;
@property (nonatomic, retain) TIKeyboardInputManagerState *inputManagerState;
@property (nonatomic, readonly) bool isAutofillPrediction;
@property (nonatomic, readonly) bool isDefaultPrediction;
@property (nonatomic, retain) UIAlertView *keyboardAlertView;
@property (nonatomic, retain) TIKeyboardLayout *layoutForKeyHitTest;
@property (nonatomic, readonly) <UIKeyboardInput> *legacyInputDelegate;
@property (readonly) unsigned long long minimumTouchesForTranslation;
@property (nonatomic) bool prewarmsPredictiveCandidates;
@property (nonatomic, readonly) UIResponder<UITextInputPrivate> *privateInputDelegate;
@property (nonatomic, readonly) UIResponder<UIKeyInputPrivate> *privateKeyInputDelegate;
@property (nonatomic) bool receivedCandidatesInCurrentInputMode;
@property (nonatomic) unsigned long long requestedInteractionModel;
@property bool rivenSplitLock;
@property (nonatomic, retain) RTIInputSystemClient *rtiClient;
@property (nonatomic, retain) RTIDocumentState *rtiDocumentState;
@property (nonatomic, retain) RTIDocumentTraits *rtiDocumentTraits;
@property (nonatomic, readonly) UITextSelectionView *selectionView;
@property (nonatomic, readonly) bool shouldShowCandidateBar;
@property (nonatomic) bool shouldSkipCandidateSelection;
@property (nonatomic) bool showInputModeIndicator;
@property (nonatomic) bool showsCandidateBar;
@property (nonatomic) bool showsCandidateInline;
@property (nonatomic, readonly) TISmartPunctuationController *smartPunctuationController;
@property (nonatomic) bool softwareKeyboardShownByTouch;
@property (nonatomic, readonly) bool splitTransitionInProgress;
@property (readonly) Class superclass;
@property (nonatomic) bool suppressRTIClient;
@property (nonatomic) bool suppressUpdateLayout;
@property (nonatomic, readonly) UIKeyboardTaskQueue *taskQueue;
@property (nonatomic, retain) _UIKeyboardTextSelectionController *textSelectionController;
@property (nonatomic, readonly) double timestampOfLastTouchesEnded;
@property (nonatomic, retain) TIKeyboardTouchEvent *touchEventWaitingForKeyInputEvent;
@property (nonatomic) bool viewServiceStateIsActiveForRTI;

+ (void)_clearHardwareKeyboardMinimizationPreference;
+ (id)activeInstance;
+ (double)additionalInstanceHeight;
+ (double)additionalInstanceHeightForInterfaceOrientation:(long long)arg1;
+ (double)additionalInstanceHeightForInterfaceOrientation:(long long)arg1 hasInputView:(bool)arg2;
+ (void)applicationDidBecomeActive:(id)arg1;
+ (void)applicationDidEnterBackground:(id)arg1;
+ (void)applicationDidReceiveMemoryWarning:(id)arg1;
+ (void)applicationDidRemoveDeactivationReason:(id)arg1;
+ (void)applicationWillAddDeactivationReason:(id)arg1;
+ (void)applicationWillEnterForeground:(id)arg1;
+ (void)applicationWillResignActive:(id)arg1;
+ (void)applicationWillSuspend:(id)arg1;
+ (struct CGSize { double x1; double x2; })defaultSizeForInterfaceOrientation:(long long)arg1;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })deviceSpecificPaddingForInterfaceOrientation:(long long)arg1 inputMode:(id)arg2;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })deviceSpecificStaticHitBufferForInterfaceOrientation:(long long)arg1 inputMode:(id)arg2;
+ (void)hardwareKeyboardAvailabilityChanged;
+ (bool)isActivatingForeground;
+ (bool)isSplit;
+ (bool)keyboardOrientation:(long long)arg1 isEquivalentToOrientation:(long long)arg2;
+ (id)keyboardScreen;
+ (struct CGSize { double x1; double x2; })keyboardSizeForInterfaceOrientation:(long long)arg1;
+ (double)keyboardWidthForScreen:(id)arg1 withOrientation:(long long)arg2;
+ (id)keyboardWindow;
+ (Class)layoutClassForCurrentInputMode;
+ (Class)layoutClassForInputMode:(id)arg1 keyboardType:(long long)arg2 screenTraits:(id)arg3;
+ (id)normalizedInputModesFromPreference;
+ (struct CGPoint { double x1; double x2; })normalizedPersistentOffset;
+ (struct CGPoint { double x1; double x2; })normalizedPersistentOffsetIgnoringState;
+ (bool)overrideNativeScreen;
+ (struct CGPoint { double x1; double x2; })persistentOffset;
+ (double)persistentSplitProgress;
+ (void)purgeImageCache;
+ (void)refreshRivenStateWithTraits:(id)arg1 isKeyboard:(bool)arg2;
+ (void)releaseSharedInstance;
+ (bool)rivenInstalled;
+ (bool)rivenPreference;
+ (bool)rivenTranslationPreference;
+ (void)screenModeDidChange:(id)arg1;
+ (void)sendPerformanceNotification:(id)arg1;
+ (void)sendPerformanceNotification:(id)arg1 userInfo:(id)arg2;
+ (void)setParentTestForProfiling:(id)arg1;
+ (void)setPersistentOffset:(struct CGPoint { double x1; double x2; })arg1;
+ (void)setPersistentSplitProgress:(double)arg1;
+ (id)sharedInstance;
+ (bool)shouldMergeAssistantBarWithKeyboardLayout;
+ (bool)showsGlobeAndDictationKeysExternallyForInterfaceOrientation:(long long)arg1;
+ (bool)showsGlobeAndDictationKeysExternallyForInterfaceOrientation:(long long)arg1 inputMode:(id)arg2;
+ (struct CGSize { double x1; double x2; })sizeForInterfaceOrientation:(long long)arg1;
+ (struct CGSize { double x1; double x2; })sizeForInterfaceOrientation:(long long)arg1 ignoreInputView:(bool)arg2;
+ (double)splitProgress;
+ (bool)supportsSplit;
+ (void)suppressSetPersistentOffset:(bool)arg1;
+ (void)switchControlStatusDidChange:(id)arg1;
+ (double)topMarginForInterfaceOrientation:(long long)arg1;
+ (id)uniqueNumberPadInputModesFromInputModes:(id)arg1 forKeyboardType:(long long)arg2;
+ (void)viewServiceHostDidBecomeActive:(id)arg1;
+ (void)viewServiceHostWillResignActive:(id)arg1;

- (id)UILanguagePreference;
- (bool)_activeCandidateViewNeedsBackdrop;
- (id)_autofillContext;
- (id)_autofillGroup;
- (void)_clearAutofillGroup;
- (int)_clipCornersOfView:(id)arg1;
- (void)_completePerformInputViewControllerOutput:(id)arg1 executionContext:(id)arg2;
- (void)_conditionallyNotifyPredictionsAreAvailableForCandidates:(id)arg1 containingProactiveTriggers:(bool)arg2;
- (bool)_containsUsernamePasswordPairsInAutofillGroup:(id)arg1;
- (void)_createRTIClientIfNecessary;
- (void)_didChangeKeyplaneWithContext:(id)arg1;
- (id)_fallbackAutofillGroup;
- (id)_getAutocorrection;
- (id)_getCurrentKeyboardName;
- (id)_getCurrentKeyplaneName;
- (id)_getLocalizedInputMode;
- (void)_handleKeyBehavior:(unsigned long long)arg1 forKeyType:(id)arg2;
- (void)_handleKeyEvent:(id)arg1 executionContext:(id)arg2;
- (void)_handleWebKeyEvent:(id)arg1 withEventType:(int)arg2 withInputString:(id)arg3 withInputStringIgnoringModifiers:(id)arg4 executionContext:(id)arg5;
- (void)_handleWebKeyEvent:(id)arg1 withIndex:(unsigned long long)arg2 inInputString:(id)arg3 executionContext:(id)arg4;
- (void)_handleWebKeyEvent:(id)arg1 withInputString:(id)arg2 executionContext:(id)arg3;
- (bool)_hasCandidates;
- (bool)_isShowingCandidateUIWithAvailableCandidates;
- (id)_keyboardBehaviorState;
- (void)_keyboardOutputToRTISourceSession:(id /* block */)arg1;
- (id)_layout;
- (void)_moveWithEvent:(id)arg1;
- (long long)_needAutofillCandidate:(id)arg1;
- (bool)_needsCandidates;
- (void)_nop;
- (id)_passwordRules;
- (void)_performInputViewControllerOutput:(id)arg1;
- (void)_performTextOperationActionSelector:(SEL)arg1;
- (long long)_positionInCandidateList:(id)arg1;
- (void)_processInputViewControllerKeyboardOutput:(id)arg1 executionContext:(id)arg2;
- (void)_queued_performTextOperations:(id)arg1;
- (id)_rangeForAutocorrectionText:(id)arg1;
- (void)_remapKeyEvent:(id)arg1 withKeyEventMap:(id)arg2;
- (id)_remoteAppId;
- (id)_remoteAssociatedDomains;
- (id)_remoteLocalizedAppName;
- (id)_remoteUnlocalizedAppName;
- (void)_requestInputManagerSync;
- (void)_setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inputString:(id)arg3 searchString:(id)arg4 compareAttributes:(bool)arg5;
- (void)_setAutocorrects:(bool)arg1;
- (void)_setAutofillGroup:(id)arg1;
- (void)_setInputManager:(id)arg1;
- (void)_setKeyboardInputMode:(id)arg1 userInitiated:(bool)arg2 force:(bool)arg3;
- (void)_setKeyboardInputMode:(id)arg1 userInitiated:(bool)arg2 updateIndicator:(bool)arg3 force:(bool)arg4 executionContext:(id)arg5;
- (void)_setNeedsCandidates:(bool)arg1;
- (void)_setShiftLockedEnabled:(bool)arg1;
- (bool)_shouldMinimizeForHardwareKeyboard;
- (bool)_shouldRequestInputManagerSyncForKeyboardOutputCallbacks:(id)arg1;
- (void)_showAutofillExtras;
- (void)_tagTouchForTypingMenu:(unsigned int)arg1;
- (void)_touchIDDismissed;
- (void)_touchIDPresented;
- (void)_updateExternalDeviceInputSettingForWindow:(id)arg1;
- (void)_updateInputViewControllerOutput:(id)arg1 forKeyboardOutput:(id)arg2;
- (void)_updateKeyboardConfigurations;
- (void)_updateRTIAllowedAndNotify:(bool)arg1 withReason:(id)arg2;
- (void)_updateRTIObjectsIfNecessary;
- (void)_updateRTIStateIfNecessary;
- (void)_updateRTITraitsIfNecessary;
- (void)_updateSoundPreheatingForWindow:(id)arg1;
- (void)_wheelChangedWithEvent:(id)arg1;
- (void)acceptAutocorrection;
- (void)acceptAutocorrection:(id)arg1 executionContextPassingTIKeyboardCandidate:(id)arg2;
- (void)acceptAutocorrectionAndEndComposition;
- (id)acceptAutocorrectionForWordTerminator:(id)arg1;
- (void)acceptAutocorrectionForWordTerminator:(id)arg1 executionContextPassingTIKeyboardCandidate:(id)arg2;
- (void)acceptCandidate:(id)arg1;
- (void)acceptCandidate:(id)arg1 forInput:(id)arg2;
- (void)acceptCandidate:(id)arg1 forInput:(id)arg2 executionContext:(id)arg3;
- (id)acceptCurrentCandidate;
- (id)acceptCurrentCandidateForInput:(id)arg1;
- (void)acceptCurrentCandidateIfSelected;
- (void)acceptCurrentCandidateIfSelectedWithExecutionContext:(id)arg1;
- (void)acceptFirstCandidate;
- (id)acceptInlineCandidate;
- (id)acceptInlineCandidateForInput:(id)arg1;
- (bool)acceptInputString:(id)arg1;
- (void)acceptPredictiveInput:(id)arg1;
- (void)acceptPredictiveInput:(id)arg1 executionContext:(id)arg2;
- (void)acceptRecentInput:(id)arg1;
- (bool)acceptWord:(id)arg1 firstDelete:(unsigned long long)arg2;
- (bool)acceptWord:(id)arg1 firstDelete:(unsigned long long)arg2 forInput:(id)arg3;
- (bool)accessibilityUsesExtendedKeyboardPredictionsEnabled;
- (void)addInputEvent:(id)arg1 executionContext:(id)arg2;
- (void)addInputObject:(id)arg1;
- (void)addInputObject:(id)arg1 executionContext:(id)arg2;
- (void)addInputString:(id)arg1;
- (void)addInputString:(id)arg1 fromVariantKey:(bool)arg2;
- (void)addInputString:(id)arg1 withFlags:(unsigned long long)arg2;
- (void)addInputString:(id)arg1 withFlags:(unsigned long long)arg2 executionContext:(id)arg3;
- (void)addInputString:(id)arg1 withFlags:(unsigned long long)arg2 withInputManagerHint:(id)arg3;
- (void)addInputString:(id)arg1 withFlags:(unsigned long long)arg2 withInputManagerHint:(id)arg3 executionContext:(id)arg4;
- (void)addWordTerminator:(id)arg1 afterSpace:(bool)arg2 afterAcceptingCandidate:(id)arg3 elapsedTime:(double)arg4 executionContext:(id)arg5;
- (void)adjustAutoDeleteTimerForForce:(double)arg1;
- (void)adjustPhraseBoundaryInForwardDirection:(bool)arg1 granularity:(int)arg2 executionContext:(id)arg3;
- (void)alertView:(id)arg1 clickedButtonAtIndex:(long long)arg2;
- (bool)allowsReachableKeyboard;
- (void)animateAutocorrectionToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)animateAutocorrectionToText:(id)arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (bool)animateUpdateBars;
- (void)applicationResumedEventsOnly:(id)arg1;
- (bool)applicationStateIsActiveForRTI;
- (void)applicationSuspendedEventsOnly:(id)arg1;
- (bool)applyAutocorrection:(id)arg1;
- (void)applyRemoteDocumentStateIfNecessary:(id)arg1 force:(bool)arg2;
- (void)applyRemoteDocumentTraitsIfNecessary:(id)arg1 force:(bool)arg2;
- (id)arrowKeyHistory;
- (id)asynchronousInputDelegate;
- (id)attributedMarkedText;
- (bool)autocapitalizationPreference;
- (id)autocorrectPrompt;
- (id)autocorrectPromptRectsForInput:(id)arg1;
- (id)autocorrectPromptRectsFromFirstDelegateRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 lastDelegateRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)autocorrectPromptTask;
- (bool)autocorrectSpellingEnabled;
- (void)autocorrectionAnimationDidStop:(id)arg1 finished:(id)arg2 context:(id)arg3;
- (id)autocorrectionController;
- (bool)autocorrectionPreference;
- (bool)autocorrectionPreferenceForTraits;
- (id)autocorrectionRecordForWord:(id)arg1;
- (id)autofillController;
- (bool)automaticMinimizationEnabled;
- (void)beginAllowingRemoteTextInput:(id)arg1;
- (double)biasedKeyboardWidthRatio;
- (void)callChanged;
- (void)callChangedSelection;
- (bool)callLayoutIgnoresShiftState;
- (bool)callLayoutIsShiftKeyBeingHeld;
- (bool)callLayoutIsShiftKeyPlaneChooser;
- (void)callLayoutLongPressAction;
- (void)callLayoutSetAutoshift:(bool)arg1;
- (void)callLayoutSetShift:(bool)arg1;
- (void)callLayoutUpdateAllLocalizedKeys;
- (void)callLayoutUpdateLocalizedKeys;
- (void)callLayoutUpdateRecentInputs;
- (void)callLayoutUpdateReturnKey;
- (bool)callLayoutUsesAutoShift;
- (bool)callShouldDeleteWithWordCountForRapidDelete:(int)arg1 characterCountForRapidDelete:(int)arg2;
- (bool)callShouldInsertText:(id)arg1;
- (bool)callShouldInsertText:(id)arg1 onDelegate:(id)arg2;
- (bool)callShouldReplaceExtendedRange:(long long)arg1 withText:(id)arg2 includeMarkedText:(bool)arg3;
- (bool)canHandleDelete;
- (bool)canHandleEvent:(id)arg1;
- (bool)canHandleKeyHitTest;
- (bool)canOfferPredictionsForTraits;
- (bool)canShowAppConnections;
- (bool)canShowPredictionBar;
- (bool)canUpdateIdleTimer;
- (void)cancelAllKeyEvents;
- (void)cancelCandidateRequests;
- (void)cancelSplitTransition;
- (id)candidateList;
- (void)candidateListAcceptCandidate:(id)arg1;
- (void)candidateListInvalidateSelection:(id)arg1;
- (void)candidateListSelectionDidChange:(id)arg1;
- (id)candidateRequestInfo;
- (bool)candidateSelectionPredictionForTraits;
- (bool)caretBlinks;
- (bool)caretVisible;
- (bool)centerFilled;
- (int)changeCount;
- (bool)changeNotificationDisabled;
- (id)changedDelegate;
- (bool)checkSpellingPreference;
- (bool)checkSpellingPreferenceForTraits;
- (void)cleanUpBeforeInputModeSwitch;
- (void)clearAnimations;
- (void)clearAutoDeleteTimer;
- (void)clearAutocorrectPromptTimer;
- (void)clearAutofillGroup;
- (void)clearChangeTimeAndCount;
- (void)clearDelegate;
- (void)clearDetachHardwareKeyboardAction;
- (void)clearDisablePredictionViewTimer;
- (void)clearExcessKeyboardMemory;
- (void)clearInput;
- (void)clearInputForMarkedText;
- (void)clearInputWithCandidatesCleared:(bool)arg1;
- (void)clearLanguageIndicator;
- (void)clearLayouts;
- (void)clearLongPressTimer;
- (void)clearRecentInput;
- (void)clearSelection;
- (void)clearShiftState;
- (void)clearTimers;
- (void)clearTransientState;
- (void)collapseSelection;
- (void)collapseSelectionAndAdjustByOffset:(long long)arg1;
- (bool)committingCandidate;
- (void)completeAcceptCandidate:(id)arg1;
- (void)completeAcceptCandidateBeforeAddingInputObject:(id)arg1 executionContext:(id)arg2;
- (void)completeAddInputString:(id)arg1;
- (void)completeAddInputString:(id)arg1 generateCandidates:(bool)arg2;
- (void)completeDeleteFromInput;
- (void)completeDeleteOnceFromInputWithCharacterBefore:(unsigned int)arg1;
- (void)completeHandleAutoDelete;
- (void)completeHandleKeyEvent:(id)arg1;
- (void)completeUpdateForChangedSelection:(bool)arg1;
- (void)composeTypologyRadar;
- (double)convertForceToGrams:(double)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectToAutocorrectRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 delegateView:(id)arg2 container:(id)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })correctionRect;
- (void)createTypoTrackerReport;
- (id)currentCandidateRequest;
- (long long)currentHandBias;
- (bool)currentKeyboardTraitsAllowCandidateBarWhileIgnoringHidePredictionTrait:(bool)arg1;
- (bool)cursorIsAtEndOfMarkedText;
- (void)deactivateLayout;
- (void)dealloc;
- (void)defaultsDidChange;
- (id)deferredDidSetDelegateAction;
- (id)delayedCandidateRequest;
- (void)delayedInit;
- (id)delegate;
- (bool)delegateAlreadyInAutofillGroup;
- (id)delegateAsResponder;
- (bool)delegateIsSMSTextView;
- (bool)delegateSuggestionsForCurrentInput;
- (bool)delegateSupportsCorrectionUI;
- (void)deleteBackward;
- (void)deleteBackwardAndNotify:(bool)arg1;
- (void)deleteForwardAndNotify:(bool)arg1;
- (void)deleteFromInput;
- (void)deleteFromInputWithFlags:(unsigned long long)arg1;
- (void)deleteFromInputWithFlags:(unsigned long long)arg1 executionContext:(id)arg2;
- (void)deleteHandwritingStrokesAtIndexes:(id)arg1;
- (void)deleteOnceFromInputWithExecutionContext:(id)arg1;
- (id)desirableInputModesWithExtensions:(bool)arg1;
- (void)detach;
- (void)detachHardwareKeyboard;
- (void)didAcceptAutocorrection:(id)arg1 wordTerminator:(id)arg2;
- (void)didApplyAutocorrection:(id)arg1 autocorrectPromptFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)didChangePhraseBoundary;
- (void)didClearText;
- (void)didHandleWebKeyEvent;
- (void)didMoveToSuperview;
- (void)didSetDelegate;
- (bool)disableInputBars;
- (void)disablePredictionViewIfNeeded;
- (bool)disableSmartInsertDelete;
- (void)dismissKeyboard;
- (bool)displaysCandidates;
- (id)documentIdentifierForInputDelegate:(id)arg1;
- (bool)dontPushOneTimeCode;
- (bool)doubleSpacePeriodPreference;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })dragGestureRectInView:(id)arg1;
- (id)dynamicCaretList;
- (void)ejectKeyDown;
- (id)emojiCandidate:(id)arg1;
- (void)enable;
- (void)endAllowingRemoteTextInput:(id)arg1;
- (id /* block */)externalTask;
- (void)fadeAutocorrectPrompt;
- (id)feedbackGenerator;
- (void)finishLayoutChangeWithArguments:(id)arg1;
- (void)finishLayoutToCurrentInterfaceOrientation;
- (void)finishSetExtensionInputMode:(id)arg1 didChangeDirection:(bool)arg2;
- (void)finishSetInputMode:(id)arg1 didChangeDirection:(bool)arg2;
- (void)finishSetInputModeToNextInPreferredListWithExecutionContext:(id)arg1 withPreviousInputMode:(id)arg2;
- (void)finishSetKeyboardInputMode:(id)arg1 didChangeDirection:(bool)arg2;
- (void)finishSplitTransitionWithProgress:(double)arg1;
- (void)finishTextChanged;
- (void)firstHardwareAutoRepeatWithExecutionContext:(id)arg1;
- (void)flushTouchEventWaitingForKeyInputEventIfNecessary;
- (bool)forceEnablePredictionView;
- (void)forceShiftUpdate;
- (void)forceShiftUpdateIfKeyboardStateChanged;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForKeylayoutName:(id)arg1;
- (id)generateAutocorrectionListForSelectedText;
- (id)generateAutocorrectionReplacements:(id)arg1;
- (void)generateAutocorrectionWithExecutionContext:(id)arg1;
- (void)generateAutocorrectionsWithCompletionHandler:(id /* block */)arg1;
- (void)generateAutofillCandidate;
- (void)generateCandidates;
- (void)generateCandidatesAsynchronously;
- (void)generateCandidatesAsynchronouslyWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 selectedCandidate:(id)arg2;
- (void)generateCandidatesFromReplacements;
- (void)generateCandidatesWithOptions:(int)arg1;
- (void)generateReplacementsForString:(id)arg1 candidatesHandler:(id /* block */)arg2 executionContext:(id)arg3;
- (void)geometryChangeDone:(bool)arg1;
- (id)geometryDelegate;
- (bool)geometryIsChanging;
- (bool)globeKeyDisplaysAsEmojiKey;
- (void)handleAcceptedCandidate:(id)arg1 executionContext:(id)arg2;
- (void)handleAutoDeleteWithExecutionContext:(id)arg1;
- (void)handleAutofillCredentialSaveIfNeeded:(id)arg1;
- (void)handleClear;
- (void)handleClearWithExecutionContext:(id)arg1;
- (void)handleClearWithInsertBeforeAdvance:(id)arg1;
- (void)handleDelayedActionLongPress:(id)arg1;
- (void)handleDelete;
- (void)handleDeleteAsRepeat:(bool)arg1 executionContext:(id)arg2;
- (id)handleDeleteAutospaceForInputString:(id)arg1 afterSpace:(bool)arg2;
- (void)handleDeleteWithExecutionContext:(id)arg1;
- (void)handleDeletionForCandidate:(id)arg1;
- (bool)handleKeyCommand:(id)arg1 repeatOkay:(bool*)arg2;
- (bool)handleKeyCommand:(id)arg1 repeatOkay:(bool*)arg2 beforePublicKeyCommands:(bool)arg3;
- (void)handleKeyEvent:(id)arg1;
- (void)handleKeyEvent:(id)arg1 executionContext:(id)arg2;
- (void)handleKeyWithString:(id)arg1 forKeyEvent:(id)arg2 executionContext:(id)arg3;
- (void)handleKeyboardInput:(id)arg1 executionContext:(id)arg2;
- (void)handleModifiersChangeForKeyEvent:(id)arg1 executionContext:(id)arg2;
- (void)handleObserverCallback;
- (void)handlePredictionViewIfNeeded:(bool)arg1;
- (id)handleReplacement:(id)arg1 forSpaceAndInput:(id)arg2;
- (void)handleStringInput:(id)arg1 withFlags:(unsigned long long)arg2 withInputManagerHint:(id)arg3 executionContext:(id)arg4;
- (bool)handleTabWithShift:(bool)arg1;
- (bool)handleTabWithShift:(bool)arg1 beforePublicKeyCommands:(bool)arg2;
- (void)handleWebViewCredentialsSaveForWebsiteURL:(id)arg1 user:(id)arg2 password:(id)arg3 passwordIsAutoGenerated:(bool)arg4;
- (bool)handlingKeyCommandFromHardwareKeyboard;
- (void)hardwareKeyboardAvailabilityChanged;
- (bool)hardwareKeyboardIsSeen;
- (id)hardwareKeyboardsSeenPreference;
- (id)hardwareRepeatEvent;
- (id)hardwareRepeatTask;
- (bool)hasAutoRepeat;
- (bool)hasDelegate;
- (bool)hasEditableMarkedText;
- (bool)hasMarkedText;
- (bool)hideAccessoryViewsDuringSplit;
- (void)hideKeyboard;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)implProxy;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)inputDelegate;
- (id)inputEventForInputString:(id)arg1;
- (id)inputForMarkedText;
- (id)inputManager;
- (void)inputManagerDidGenerateAutocorrections:(id)arg1 executionContext:(id)arg2;
- (void)inputManagerDidGenerateCandidatesForRequest:(id)arg1 resultSet:(id)arg2;
- (id)inputManagerState;
- (bool)inputModeHasHardwareLayout:(id)arg1;
- (id)inputModeLastUsedPreference;
- (id)inputModePreference;
- (id)inputOverlayContainer;
- (void)inputSession:(id)arg1 documentStateDidChange:(id)arg2;
- (void)inputSession:(id)arg1 documentTraitsDidChange:(id)arg2;
- (id)inputStringFromPhraseBoundary;
- (id)inputWordForTerminatorAtSelection;
- (void)insertAttributedText:(id)arg1;
- (void)insertText:(id)arg1;
- (void)insertTextAfterSelection:(id)arg1;
- (bool)insertTextIfShould:(id)arg1;
- (void)insertTextSuggestion:(id)arg1;
- (void)insertTextSuggestionCandidate:(id)arg1;
- (id)internationalKeyDisplayStringOnEmojiKeyboard;
- (bool)isAutoDeleteActive;
- (bool)isAutoFillMode;
- (bool)isAutoShifted;
- (bool)isAutofillPrediction;
- (bool)isCapsLockASCIIToggle;
- (bool)isCapsLockSwitchEnabled;
- (bool)isDefaultPrediction;
- (bool)isInHardwareKeyboardMode;
- (bool)isLongPress;
- (bool)isMemberOfAutofillGroup:(id)arg1;
- (bool)isMemberOfPossibleAutofillGroup:(id)arg1;
- (bool)isMinimized;
- (bool)isRTIClient;
- (bool)isSelectionAtSentenceAutoshiftBoundary;
- (bool)isShiftKeyBeingHeld;
- (bool)isShiftLocked;
- (bool)isShifted;
- (bool)isUsingDictationLayout;
- (bool)isValidKeyInput:(id)arg1;
- (void)jumpToCompositions;
- (void)keyActivated;
- (void)keyDeactivated;
- (id)keyboardAlertView;
- (void)keyboardDidHide:(id)arg1;
- (bool)keyboardDrawsOpaque;
- (bool)keyboardIsKeyPad;
- (bool)keyboardsExpandedPreference;
- (double)lastTouchDownTimestamp;
- (id)layoutForKeyHitTest;
- (void)layoutHasChanged;
- (id)layoutState;
- (id)legacyInputDelegate;
- (void)logHandwritingData;
- (void)longPressAction;
- (void)longPressAction:(id)arg1;
- (void)lookUpResponderChainForCustomInputView;
- (id)markedText;
- (id)markedTextOverlay;
- (unsigned long long)maxNumberOfProactiveCells;
- (bool)maximizing;
- (unsigned long long)minimumTouchesForTranslation;
- (void)moveCursorByAmount:(long long)arg1;
- (void)moveCursorLeftShifted:(bool)arg1;
- (void)moveCursorRightShifted:(bool)arg1;
- (void)movePhraseBoundaryToDirection:(long long)arg1 granularity:(long long)arg2;
- (void)moveSelectionToEndOfWord;
- (long long)needAutofill;
- (long long)needAutofillCandidate:(id)arg1;
- (bool)needAutofillLogin;
- (bool)needOneTimeCodeAutofill;
- (bool)needsToDeferUpdateTextCandidateView;
- (bool)nextCharacterIsWordCharacter;
- (bool)noContent;
- (void)notifyShiftState;
- (void)performHitTestForTouchEvent:(id)arg1 executionContextPassingNSNumber:(id)arg2;
- (void)performKeyBehaviorCommitInline;
- (void)performKeyBehaviorConfirm;
- (void)performKeyBehaviorConfirmFirstCandidate;
- (void)performKeyboardOutput:(id)arg1;
- (void)performKeyboardOutputInfo:(id)arg1;
- (void)performSendCurrentLocation;
- (void)performTextOperations:(id)arg1;
- (unsigned long long)phraseBoundary;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 forEvent:(struct __GSEvent { }*)arg2;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)postInputViewControllerShouldUpdateNotification:(id)arg1;
- (bool)predictionForTraits;
- (bool)predictionForTraitsWithForceEnable:(bool)arg1;
- (bool)predictionFromPreference;
- (bool)predictionPreferenceForTraits;
- (bool)preferFallbackAutofillGroup;
- (void)prepareForGeometryChange;
- (void)prepareForSelectionChange;
- (void)prepareKeyboardInputModeFromPreferences:(id)arg1;
- (void)prepareLayoutForInterfaceOrientation:(long long)arg1;
- (bool)prewarmsPredictiveCandidates;
- (id)privateInputDelegate;
- (id)privateKeyInputDelegate;
- (void)proceedShouldReturnIfNeededForASP;
- (void)processPayloadInfo:(id)arg1;
- (void)pushAutocorrections:(id)arg1 requestToken:(id)arg2;
- (bool)receivedCandidatesInCurrentInputMode;
- (void)recomputeActiveInputModesWithExtensions:(bool)arg1;
- (void)refreshAutofillModeIfNecessary;
- (void)refreshKeyboardState;
- (void)refreshRivenPreferences;
- (void)reinitializeAfterInputModeSwitch:(bool)arg1;
- (void)rejectAutocorrection:(id)arg1;
- (void)releaseInputManager;
- (void)releaseInputManagerIfInactive;
- (void)releaseSuppressUpdateCandidateView;
- (void)reloadCurrentInputMode;
- (void)remoteControlReceivedWithEvent:(id)arg1;
- (void)removeASPVisualEffectsIfNecessary:(id)arg1;
- (void)removeAllDynamicDictionaries;
- (void)removeAutocorrectPrompt;
- (void)removeAutocorrectPromptAndCandidateList;
- (void)removeAutocorrection;
- (void)removeCandidateList;
- (void)removeFromSuperview;
- (void)removeRecentInput:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)removeSpaceAfterEmojiForInputString:(id)arg1;
- (void)replaceAllTextInResponder:(id)arg1 withText:(id)arg2;
- (void)replaceText:(id)arg1;
- (id)replacementsFromSelectedText;
- (unsigned long long)requestedInteractionModel;
- (void)resizeCandidateBarWithDelta:(double)arg1;
- (id)responderForSendCurrentLocation;
- (void)responseContextDidChange;
- (id)returnKeyDisplayName;
- (bool)returnKeyEnabled;
- (int)returnKeyType;
- (void)revealHiddenCandidates;
- (bool)rivenSplitLock;
- (id)rtiClient;
- (id)rtiClient;
- (id)rtiDocumentState;
- (id)rtiDocumentTraits;
- (void)saveInputModesPreference:(id)arg1;
- (double)scaleCurrentForceFrom:(double)arg1 to:(double)arg2;
- (void)scheduleReplacementsAfterDeletionToEndOfWord;
- (void)scheduleReplacementsWithOptions:(unsigned long long)arg1;
- (id)searchStringForMarkedText;
- (void)selectionDidChange:(id)arg1;
- (bool)selectionIsEndOfWord;
- (void)selectionScrolling:(id)arg1;
- (id)selectionView;
- (void)selectionWillChange:(id)arg1;
- (void)sendCallbacksForPostCorrectionsRemoval;
- (void)sendCallbacksForPreCorrectionsDisplay;
- (void)setAnimateUpdateBars:(bool)arg1;
- (void)setApplicationStateIsActiveForRTI:(bool)arg1;
- (void)setArrowKeyHistory:(id)arg1;
- (void)setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inputString:(id)arg3 searchString:(id)arg4;
- (void)setAutocorrectPromptTask:(id)arg1;
- (void)setAutocorrectSpellingEnabled:(bool)arg1;
- (void)setAutocorrection:(id)arg1;
- (void)setAutocorrectionList:(id)arg1;
- (void)setAutofillController:(id)arg1;
- (void)setAutomaticMinimizationEnabled:(bool)arg1;
- (void)setCanUpdateIdleTimer:(bool)arg1;
- (void)setCandidateList:(id)arg1;
- (void)setCandidateRequestInfo:(id)arg1;
- (void)setCandidates:(id)arg1;
- (void)setCapsLockIfNeeded;
- (void)setCapsLockSign;
- (void)setCaretBlinks:(bool)arg1;
- (void)setCaretVisible:(bool)arg1;
- (void)setChangeNotificationDisabled:(bool)arg1;
- (void)setChanged;
- (void)setChangedDelegate:(id)arg1;
- (void)setCommittingCandidate:(bool)arg1;
- (void)setCorrectionLearningAllowed:(bool)arg1;
- (void)setCurrentCandidateRequest:(id)arg1;
- (void)setDefaultTextInputTraits:(id)arg1;
- (void)setDeferredDidSetDelegateAction:(id)arg1;
- (void)setDelayedCandidateRequest:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegate:(id)arg1 force:(bool)arg2;
- (void)setDisableSmartInsertDelete:(bool)arg1;
- (void)setDocumentStateForAutocorrection:(id)arg1;
- (void)setExternalTask:(id /* block */)arg1;
- (void)setFeedbackGenerator:(id)arg1;
- (void)setForceEnablePredictionView:(bool)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setGeometryDelegate:(id)arg1;
- (void)setGeometryIsChanging:(bool)arg1;
- (void)setHandlingKeyCommandFromHardwareKeyboard:(bool)arg1;
- (void)setHardwareKeyboardIsSeen:(bool)arg1;
- (void)setHardwareKeyboardsSeenPreference:(id)arg1;
- (void)setHardwareRepeatEvent:(id)arg1;
- (void)setHardwareRepeatTask:(id)arg1;
- (void)setInHardwareKeyboardMode:(bool)arg1;
- (void)setInSplitKeyboardMode:(bool)arg1;
- (void)setInitialDirection;
- (void)setInputManagerFromCurrentInputMode;
- (void)setInputManagerState:(id)arg1;
- (void)setInputMode:(id)arg1;
- (void)setInputMode:(id)arg1 userInitiated:(bool)arg2;
- (void)setInputMode:(id)arg1 userInitiated:(bool)arg2 updateIndicator:(bool)arg3 executionContext:(id)arg4;
- (void)setInputModeFromPreferences;
- (void)setInputModeToNextASCIICapableInPreferredList;
- (void)setInputModeToNextInPreferredListWithExecutionContext:(id)arg1;
- (void)setInputPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setKeyboardAlertView:(id)arg1;
- (void)setKeyboardInputMode:(id)arg1 userInitiated:(bool)arg2;
- (void)setKeyboardInputMode:(id)arg1 userInitiated:(bool)arg2 updateIndicator:(bool)arg3 executionContext:(id)arg4;
- (void)setKeyboardInputModeFromPreferences:(id)arg1;
- (void)setLabel:(id)arg1 forKey:(id)arg2;
- (void)setLayoutForKeyHitTest:(id)arg1;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inputString:(id)arg3 searchString:(id)arg4;
- (void)setPendingAutofillIndex:(long long)arg1;
- (void)setPreviousInputString:(id)arg1;
- (void)setPrewarmsPredictiveCandidates:(bool)arg1;
- (void)setReceivedCandidatesInCurrentInputMode:(bool)arg1;
- (void)setRequestedInteractionModel:(unsigned long long)arg1;
- (void)setReturnKeyEnabled:(bool)arg1;
- (void)setRivenSplitLock:(bool)arg1;
- (void)setRtiClient:(id)arg1;
- (void)setRtiDocumentState:(id)arg1;
- (void)setRtiDocumentTraits:(id)arg1;
- (void)setSelectionWithPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setShift:(bool)arg1;
- (void)setShift:(bool)arg1 autoshift:(bool)arg2;
- (void)setShiftLocked:(bool)arg1;
- (void)setShiftLockedForced:(bool)arg1;
- (void)setShiftNeedsUpdate;
- (void)setShiftOffIfNeeded;
- (void)setShiftPreventAutoshift:(bool)arg1;
- (void)setShouldSkipCandidateSelection:(bool)arg1;
- (void)setShouldSkipCandidateSelection:(bool)arg1 userInitiated:(bool)arg2;
- (void)setShouldUpdateCacheOnInputModesChange:(bool)arg1;
- (void)setShowInputModeIndicator:(bool)arg1;
- (void)setShowsCandidateBar:(bool)arg1;
- (void)setShowsCandidateInline:(bool)arg1;
- (void)setSoftwareKeyboardShownByTouch:(bool)arg1;
- (void)setSplit:(bool)arg1 animated:(bool)arg2;
- (void)setSplitProgress:(double)arg1;
- (void)setSuggestions:(id)arg1;
- (void)setSuppressRTIClient:(bool)arg1;
- (void)setSuppressUpdateLayout:(bool)arg1;
- (void)setTextInputChangesIgnored:(bool)arg1;
- (void)setTextSelectionController:(id)arg1;
- (void)setTextSelectionControllerFromDelegate;
- (void)setTouchEventWaitingForKeyInputEvent:(id)arg1;
- (void)setTwoFingerTapTimestamp:(double)arg1;
- (void)setUserSelectedCurrentCandidate:(bool)arg1;
- (void)setUsesCandidateSelection:(bool)arg1;
- (void)setViewServiceStateIsActiveForRTI:(bool)arg1;
- (bool)shiftLockPreference;
- (bool)shiftLockedEnabled;
- (bool)shouldAcceptCandidate:(id)arg1 beforeInputString:(id)arg2;
- (bool)shouldAllowRepeatEvent:(id)arg1;
- (bool)shouldAllowSelectionGestures:(bool)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 toBegin:(bool)arg3;
- (bool)shouldApplyAcceptedAutocorrection:(id)arg1;
- (bool)shouldDeleteAutospaceBeforeTerminator:(id)arg1;
- (bool)shouldEnableShiftForDeletedCharacter:(unsigned int)arg1;
- (double)shouldExtendLongPressAction:(id)arg1;
- (bool)shouldGenerateCandidatesAfterSelectionChange;
- (bool)shouldLoadAutofillSignUpInputViewController;
- (bool)shouldPrioritizeTextSuggestionsOverCandidateResultSet:(id)arg1;
- (bool)shouldRapidDelete;
- (bool)shouldRapidDeleteWithDelegate;
- (bool)shouldShowCandidateBar;
- (bool)shouldShowCandidateBarIfReceivedCandidatesInCurrentInputMode:(bool)arg1 ignoreHidePredictionTrait:(bool)arg2;
- (bool)shouldShowDictationKey;
- (bool)shouldShowInternationalKey;
- (bool)shouldSkipCandidateSelection;
- (bool)shouldSwitchFromInputManagerMode:(id)arg1 toInputMode:(id)arg2;
- (bool)shouldSwitchInputMode:(id)arg1;
- (bool)shouldUseCarPlayModes;
- (bool)shouldUsePinyinStyleRowNavigation;
- (void)showInformationalAlertIfNeededForReason:(int)arg1 withPreviousInputMode:(id)arg2;
- (bool)showInputModeIndicator;
- (void)showInternationalKeyInfoAlertIfNeededWithPreviousInputMode:(id)arg1;
- (void)showKeyboard;
- (void)showKeyboardIfNeeded;
- (void)showNextCandidates;
- (void)showNextPage;
- (void)showPreviousCandidate;
- (bool)showsCandidateBar;
- (bool)showsCandidateInline;
- (void)skipHitTestForTouchEvent:(id)arg1;
- (void)skipHitTestForTouchEvent:(id)arg1 delayed:(bool)arg2;
- (bool)smartInsertDeleteIsEnabled;
- (id)smartPunctuationController;
- (bool)softwareKeyboardShownByTouch;
- (bool)splitTransitionInProgress;
- (void)startAutoDeleteTimer;
- (void)startAutoDeleteTimerForForce:(double)arg1;
- (void)startCaretBlinkIfNeeded;
- (void)stopAutoDelete;
- (void)storeDelegateConformance;
- (struct CGSize { double x1; double x2; })stretchFactor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })subtractKeyboardFrameFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (bool)suppliesCompletions;
- (bool)supportsNumberKeySelection;
- (bool)suppressOptOutASPCandidateUpdateForDelegate:(id)arg1;
- (bool)suppressRTIClient;
- (bool)suppressUpdateLayout;
- (void)syncDocumentStateToInputDelegate;
- (void)syncDocumentStateToInputDelegateWithExecutionContext:(id)arg1;
- (void)syncInputManagerToAcceptedAutocorrection:(id)arg1 forInput:(id)arg2;
- (void)syncInputManagerToKeyboardState;
- (void)syncInputManagerToKeyboardStateWithExecutionContext:(id)arg1;
- (void)syncKeyboardToConfiguration:(id)arg1;
- (void)takeTextInputTraitsFromDelegate;
- (id)taskQueue;
- (void)testAutocorrectionPromptWithCorrection:(id)arg1;
- (void)textChanged:(id)arg1;
- (void)textChanged:(id)arg1 executionContext:(id)arg2;
- (void)textDidChange:(id)arg1;
- (void)textFrameChanged:(id)arg1;
- (int)textInputChangingCount;
- (id)textInputTraits;
- (bool)textInputTraitsNeedAutofill;
- (bool)textInputTraitsNeedAutofillExcludeOneTimeCode;
- (id)textInteractionAssistant;
- (id)textSelectionController;
- (void)textWillChange:(id)arg1;
- (double)timeoutForCurrentForce;
- (double)timestampOfLastTouchesEnded;
- (void)toggleShift;
- (void)toggleSoftwareKeyboard;
- (void)touchAutoDeleteTimerWithThreshold:(double)arg1 adjustForPartialCompletion:(bool)arg2;
- (void)touchAutocorrectPromptTimer;
- (id)touchEventWaitingForKeyInputEvent;
- (void)touchLongPressTimer;
- (void)touchLongPressTimerWithDelay:(double)arg1;
- (void)touchLongPressTimerWithDelay:(double)arg1 userInfo:(id)arg2;
- (void)trackResponderForAutofillIfNeeded:(id)arg1;
- (void)trackUsageForAcceptedAutocorrection:(id)arg1 promptWasShowing:(bool)arg2;
- (void)trackUsageForCandidateAcceptedAction:(id)arg1;
- (void)trackUsageForPromptedCorrection:(id)arg1 inputString:(id)arg2 previousPrompt:(id)arg3;
- (bool)transitionInProgress;
- (void)unmarkText;
- (void)unmarkText:(id)arg1;
- (void)updateAssistantBar;
- (void)updateAutocorrectPrompt:(id)arg1;
- (void)updateAutocorrectPrompt:(id)arg1 correctionRects:(id)arg2;
- (void)updateAutocorrectPrompt:(id)arg1 executionContext:(id)arg2;
- (void)updateCandidateDisplay;
- (void)updateCandidateDisplayAsyncWithCandidateSet:(id)arg1;
- (void)updateChangeTimeAndIncrementCount;
- (void)updateDoubleSpacePeriodStateForCharacter:(unsigned int)arg1;
- (void)updateDoubleSpacePeriodStateForString:(id)arg1;
- (void)updateForChangedSelection;
- (void)updateForChangedSelectionWithExecutionContext:(id)arg1;
- (void)updateForHandBiasChange;
- (void)updateFromTextInputTraits;
- (void)updateHardwareKeyboardLayout;
- (void)updateInputManagerAutocapitalizationType;
- (void)updateInputManagerMode;
- (void)updateInputModeIndicatorOnSingleKeyOnly:(bool)arg1;
- (void)updateInputModeIndicatorOnSingleKeyOnly:(bool)arg1 preserveIfPossible:(bool)arg2;
- (void)updateInputModeLastChosenPreference;
- (id)updateKeyBehaviors:(id)arg1 withBehaviors:(id)arg2 forState:(id)arg3;
- (void)updateKeyboardConfigurations;
- (void)updateKeyboardEventsLagging:(id)arg1;
- (void)updateKeyboardOutput:(id)arg1 withInputForSmartPunctuation:(id)arg2 keyboardConfiguration:(id)arg3;
- (void)updateKeyboardStateForDeletion;
- (void)updateKeyboardStateForInsertion:(id)arg1;
- (void)updateLayout;
- (void)updateLayoutAndSetShift;
- (void)updateLayoutIfNecessary;
- (void)updateLayoutIfNeeded;
- (void)updateLayoutToCurrentInterfaceOrientation;
- (void)updateNoContentViews;
- (void)updateObserverState;
- (void)updatePredictionView;
- (void)updatePredictionViewStateForCurrentPredictionPreferences;
- (void)updateReturnKey;
- (void)updateReturnKey:(bool)arg1;
- (id)updateSecureCandidateRenderTraits;
- (void)updateShiftState;
- (void)updateShowCandidateBar;
- (void)updateSmartPunctuationOptionsForLocaleIdentifier:(id)arg1;
- (void)updateStylingTraitsIfNeeded;
- (void)updateTextCandidateView;
- (id)updatedKeyBehaviors;
- (bool)userSelectedCurrentCandidate;
- (bool)usesAutoDeleteWord;
- (bool)usesAutocorrectionLists;
- (bool)usesCandidateSelection;
- (bool)viewServiceStateIsActiveForRTI;
- (bool)willDoubleSpacePeriodForInputString:(id)arg1 afterSpace:(bool)arg2 elapsedTime:(double)arg3;
- (void)willMoveToWindow:(id)arg1;
- (void)willReplaceTextInRangedSelectionWithKeyboardInput;

@end
