/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AVKit.framework/AVKit
 */

@interface AVPlayerViewController : UIViewController <AVFullScreenViewControllerDelegate, AVPictureInPictureControllerDelegate, AVPlaybackControlsVisibilityControllerDelegate, UIGestureRecognizerDelegate, UIPopoverPresentationControllerDelegate> {
    id  _activeAudioRouteDidChangeObserver;
    bool  _allowsPictureInPicturePlayback;
    AVAppBasedStatusBarAppearanceController * _appBasedStatusBarAppearanceController;
    id  _applicationSuspendedObserver;
    bool  _canChangeStatusBarHidden;
    <AVPlayerViewControllerDelegate> * _delegate;
    struct { 
        bool playerViewControllerWillStartPictureInPicture; 
        bool playerViewControllerDidStartPictureInPicture; 
        bool playerViewController_failedToStartPictureInPictureWithError; 
        bool playerViewControllerWillStopPictureInPicture; 
        bool playerViewControllerDidStopPictureInPicture; 
        bool playerViewControllerShouldAutomaticallyDismissAtPictureInPictureStart; 
        bool playerViewController_restoreUserInterfaceForPictureInPictureStopWithCompletionHandler; 
        bool playerViewController_shouldExitFullScreenWithReason; 
        bool playerViewControllerWillExitAutoplayPhase; 
    }  _delegateRespondsTo;
    bool  _entersFullScreenWhenPlaybackBegins;
    bool  _exitsFullScreenWhenPlaybackEnds;
    id /* block */  _finishPreparingForInteractiveDismissalHandler;
    AVFullScreenViewController * _fullScreenViewController;
    bool  _hasClientSetVideoGravity;
    id /* block */  _interactiveDismissalCompletionHandler;
    UIPopoverPresentationController * _mediaSelectionPopoverPresentationController;
    id  _nowPlayingControllerDidReceiveStopCommandEventObserver;
    AVNowPlayingInfoController * _nowPlayingInfoController;
    AVPictureInPictureController * _pictureInPictureController;
    NSDictionary * _pixelBufferAttributes;
    AVPlaybackControlsController * _playbackControlsController;
    bool  _playbackControlsViewControllerPictureInPictureButtonEnabled;
    AVPlaybackControlsVisibilityController * _playbackControlsVisibilityController;
    UIScreen * _playbackTargetScreen;
    AVPlayerController * _playerController;
    id  _playerControllerPlaybackDidEndObserver;
    __AVPlayerLayerView * _playerLayerView;
    bool  _playerShouldAutoplay;
    AVPlayerView * _playerViewControllerView;
    bool  _requiresLinearPlayback;
    id  _screenDidConnectObserver;
    id  _screenDidDisconnectObserver;
    id  _screenModeDidChangeObserver;
    UIWindow * _secondScreenWindow;
    bool  _shouldUseNetworkingResourcesForLiveStreamingWhilePaused;
    bool  _showsExitFullScreenButton;
    bool  _showsPlaybackControls;
    AVTransitionController * _transitionController;
    bool  _transitionFromFullScreenOrDismissViewControllerWhenEnteringBackgroundAfterPictureInPictureStart;
    long long  _videoGravity;
}

@property (nonatomic) bool allowsPictureInPicturePlayback;
@property (nonatomic) bool canHideInteractiveContentOverlayView;
@property (nonatomic) bool canHidePlaybackControls;
@property (nonatomic, readonly) UIView *contentOverlayView;
@property (nonatomic, readonly) AVPlayerViewControllerContentView *contentView;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <AVPlayerViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool entersFullScreenWhenPlaybackBegins;
@property (nonatomic) bool exitsFullScreenWhenPlaybackEnds;
@property (nonatomic, copy) id /* block */ finishPreparingForInteractiveDismissalHandler;
@property (nonatomic) AVFullScreenViewController *fullScreenViewController;
@property (nonatomic, readonly) UIViewController *fullScreenViewController;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) UIView *iAdPrerollView;
@property (nonatomic, readonly) UIView *interactiveContentOverlayView;
@property (nonatomic, copy) id /* block */ interactiveDismissalCompletionHandler;
@property (getter=isPictureInPictureActive, nonatomic, readonly) bool pictureInPictureActive;
@property (getter=isPictureInPicturePossible, nonatomic, readonly) bool pictureInPicturePossible;
@property (getter=isPictureInPictureSuspended, nonatomic, readonly) bool pictureInPictureSuspended;
@property (nonatomic, readonly) bool pictureInPictureWasStartedWhenEnteringBackground;
@property (nonatomic, copy) NSDictionary *pixelBufferAttributes;
@property (nonatomic, readonly) AVPlaybackControlsVisibilityController *playbackControlsVisibilityController;
@property (nonatomic, retain) UIScreen *playbackTargetScreen;
@property (nonatomic, retain) AVPlayer *player;
@property (nonatomic, retain) AVPlayerController *playerController;
@property (nonatomic) long long preferredUnobscuredArea;
@property (getter=isPresentedFullScreen, nonatomic, readonly) bool presentedFullScreen;
@property (getter=isPresentingFullScreenFromInline, nonatomic, readonly) bool presentingFullScreenFromInline;
@property (getter=isReadyForDisplay, nonatomic, readonly) bool readyForDisplay;
@property (nonatomic) bool requiresLinearPlayback;
@property (nonatomic, retain) UIWindow *secondScreenWindow;
@property (nonatomic) bool shouldUseNetworkingResourcesForLiveStreamingWhilePaused;
@property (nonatomic) bool showsExitFullScreenButton;
@property (nonatomic) bool showsPlaybackControls;
@property (readonly) Class superclass;
@property (nonatomic) bool updatesNowPlayingInfoCenter;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } videoBounds;
@property (nonatomic, copy) NSString *videoGravity;

// Image: /System/Library/Frameworks/AVKit.framework/AVKit

+ (id)keyPathsForValuesAffectingPictureInPictureActive;
+ (id)keyPathsForValuesAffectingPictureInPicturePossible;
+ (id)keyPathsForValuesAffectingPictureInPictureSuspended;
+ (id)keyPathsForValuesAffectingPictureInPictureWasStartedWhenEnteringBackground;
+ (id)keyPathsForValuesAffectingPixelBufferAttributes;
+ (id)keyPathsForValuesAffectingPlayer;
+ (id)keyPathsForValuesAffectingReadyForDisplay;
+ (id)keyPathsForValuesAffectingVideoBounds;
+ (id)keyPathsForValuesAffectingVideoGravity;

- (void).cxx_destruct;
- (bool)_canEnterFullScreen;
- (void)_handleDoubleDoubleTapGesture:(id)arg1;
- (void)_handleDoubleTapGesture:(id)arg1;
- (void)_handleExitFullScreenKeyCommand:(id)arg1;
- (void)_handleFastForwardKeyPressedCommand:(id)arg1;
- (void)_handleFastForwardKeyReleasedCommand:(id)arg1;
- (void)_handleGoToBeginningKeyCommand:(id)arg1;
- (void)_handlePlayPauseKeyCommand:(id)arg1;
- (void)_handleRewindKeyPressedCommand:(id)arg1;
- (void)_handleRewindKeyReleasedCommand:(id)arg1;
- (void)_handleShowNextFrameKeyCommand:(id)arg1;
- (void)_handleShowPreviousFrameKeyCommand:(id)arg1;
- (void)_handleSingleTapGesture:(id)arg1;
- (void)_handleSkipAhead15SecondsKeyCommand:(id)arg1;
- (void)_handleSkipBack15SecondsKeyCommand:(id)arg1;
- (void)_handleVolumeDownKeyPressedCommand:(id)arg1;
- (void)_handleVolumeDownKeyReleasedCommand:(id)arg1;
- (void)_handleVolumeUpKeyPressedCommand:(id)arg1;
- (void)_handleVolumeUpKeyReleasedCommand:(id)arg1;
- (bool)_ignoreAppSupportedOrientations;
- (bool)_isAudioOnlyContent;
- (bool)_isDescendantOfRootViewController;
- (bool)_isTransitioningToOrFromFullScreen;
- (bool)_isUnsupportedContent;
- (void)_loadPlaybackControlsControllersIfNeeded;
- (void)_mediaSelectionDoneButtonTapped:(id)arg1;
- (bool)_modalPresentationStyleIsFullScreen;
- (void)_setVideoGravity:(id)arg1 forLayoutMetrics:(unsigned long long)arg2;
- (void)_togglePictureInPicture;
- (void)_transitionFromFullScreenAnimated:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)_transitionFromFullScreenWithReason:(long long)arg1 animated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)_transitionToFullScreenAnimated:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)_updateAudioOnlyIndicatorView;
- (void)_updateExternalPlaybackIndicatorView;
- (void)_updatePlaybackControlsController;
- (void)_updatePlayerLayerViewAndContentOverlayView;
- (void)_updatePlayerLayerViewAndContentOverlayViewExcludingScreen:(id)arg1;
- (void)_updateUnsupportedContentIndicatorView;
- (long long)adaptivePresentationStyleForPresentationController:(id)arg1;
- (bool)allowsPictureInPicturePlayback;
- (bool)beginInteractiveDismissalTransition;
- (bool)beginInteractivePresentationTransition;
- (bool)canBecomeFirstResponder;
- (bool)canBeginInteractiveDismissalTransition;
- (bool)canBeginInteractivePresentationTransition;
- (bool)canHideInteractiveContentOverlayView;
- (bool)canHidePlaybackControls;
- (id)contentOverlayView;
- (id)contentView;
- (void)dealloc;
- (id)delegate;
- (void)didMoveToParentViewController:(id)arg1;
- (void)doneButtonTapped:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)enterAutoplayPhase;
- (void)enterFullScreenAnimated:(bool)arg1 completionHandler:(id /* block */)arg2;
- (bool)entersFullScreenWhenPlaybackBegins;
- (void)exitFullScreenAnimated:(bool)arg1 completionHandler:(id /* block */)arg2;
- (bool)exitsFullScreenWhenPlaybackEnds;
- (id /* block */)finishPreparingForInteractiveDismissalHandler;
- (void)flashAutoplayControls;
- (void)fullScreenButtonTapped:(id)arg1;
- (id)fullScreenViewController;
- (void)fullScreenViewControllerDidEndFullScreenPresentation:(id)arg1 wasInteractive:(bool)arg2;
- (void)fullScreenViewControllerNeedsAppBasedStatusBarAppearanceUpdate:(id)arg1;
- (void)fullScreenViewControllerWillBeginFullScreenPresentation:(id)arg1;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (id)iAdPrerollView;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithPlayerLayerView:(id)arg1;
- (id)interactiveContentOverlayView;
- (id /* block */)interactiveDismissalCompletionHandler;
- (bool)isPictureInPictureActive;
- (bool)isPictureInPicturePossible;
- (bool)isPictureInPictureSuspended;
- (bool)isPresentedFullScreen;
- (bool)isPresentingFullScreenFromInline;
- (bool)isReadyForDisplay;
- (id)keyCommandResponderForFullScreenViewController:(id)arg1;
- (id)keyCommands;
- (void)loadView;
- (void)mediaSelectionButtonTapped:(id)arg1;
- (bool)modalPresentationCapturesStatusBarAppearance;
- (long long)modalPresentationStyleForFullScreenViewController:(id)arg1 presentingViewController:(id)arg2;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)pictureInPictureButtonTapped:(id)arg1;
- (void)pictureInPictureController:(id)arg1 failedToStartPictureInPictureWithError:(id)arg2;
- (void)pictureInPictureController:(id)arg1 restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(id /* block */)arg2;
- (void)pictureInPictureControllerDidStartPictureInPicture:(id)arg1;
- (void)pictureInPictureControllerDidStopPictureInPicture:(id)arg1;
- (void)pictureInPictureControllerWillStartPictureInPicture:(id)arg1;
- (void)pictureInPictureControllerWillStopPictureInPicture:(id)arg1;
- (bool)pictureInPictureWasStartedWhenEnteringBackground;
- (id)pixelBufferAttributes;
- (id)playbackControlsController;
- (id)playbackControlsVisibilityController;
- (void)playbackControlsVisibilityController:(id)arg1 animateAlongsideVisibilityAnimations:(id)arg2;
- (void)playbackControlsVisibilityController:(id)arg1 updateStatusBarAppearanceUsingAnimator:(id)arg2;
- (void)playbackControlsVisibilityControllerDidChangeViewVisibility:(id)arg1;
- (void)playbackControlsVisibilityControllerWillExitAutoplayPhase:(id)arg1;
- (id)playbackTargetScreen;
- (id)player;
- (id)playerController;
- (void)popoverPresentationControllerDidDismissPopover:(id)arg1;
- (long long)preferredStatusBarStyle;
- (long long)preferredUnobscuredArea;
- (long long)preferredWhitePointAdaptivityStyle;
- (bool)prefersHomeIndicatorAutoHidden;
- (bool)prefersStatusBarHidden;
- (bool)prefersStatusBarHiddenForFullScreenViewController:(id)arg1;
- (void)prepareForFinishingInteractiveTransition:(id /* block */)arg1;
- (void)prepareForPopoverPresentation:(id)arg1;
- (bool)presentRoutingViewController:(id)arg1;
- (bool)requiresLinearPlayback;
- (id)secondScreenWindow;
- (void)setAllowsPictureInPicturePlayback:(bool)arg1;
- (void)setCanHideInteractiveContentOverlayView:(bool)arg1;
- (void)setCanHidePlaybackControls:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEntersFullScreenWhenPlaybackBegins:(bool)arg1;
- (void)setExitsFullScreenWhenPlaybackEnds:(bool)arg1;
- (void)setFinishPreparingForInteractiveDismissalHandler:(id /* block */)arg1;
- (void)setFullScreenViewController:(id)arg1;
- (void)setInteractiveDismissalCompletionHandler:(id /* block */)arg1;
- (void)setPixelBufferAttributes:(id)arg1;
- (void)setPlaybackTargetScreen:(id)arg1;
- (void)setPlayer:(id)arg1;
- (void)setPlayerController:(id)arg1;
- (void)setPreferredUnobscuredArea:(long long)arg1;
- (void)setRequiresLinearPlayback:(bool)arg1;
- (void)setSecondScreenWindow:(id)arg1;
- (void)setShouldUseNetworkingResourcesForLiveStreamingWhilePaused:(bool)arg1;
- (void)setShowsExitFullScreenButton:(bool)arg1;
- (void)setShowsPlaybackControls:(bool)arg1;
- (void)setUpdatesNowPlayingInfoCenter:(bool)arg1;
- (void)setVideoGravity:(id)arg1;
- (void)setView:(id)arg1;
- (bool)shouldUseNetworkingResourcesForLiveStreamingWhilePaused;
- (bool)showsExitFullScreenButton;
- (bool)showsPlaybackControls;
- (void)startPictureInPicture;
- (void)stopPictureInPicture;
- (void)togglePlayback:(id)arg1;
- (id)transitioningDelegateForFullScreenViewController:(id)arg1;
- (bool)updatesNowPlayingInfoCenter;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })videoBounds;
- (id)videoGravity;
- (void)videoGravityButtonTapped:(id)arg1;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLoad;
- (id)viewForFullScreenViewController:(id)arg1;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;

// Image: /System/Library/Frameworks/iAd.framework/iAd

+ (void)preparePrerollAds;

- (void)cancelPreroll;
- (void)playPrerollAdWithCompletionHandler:(id /* block */)arg1;

// Image: /System/Library/PrivateFrameworks/SiriUI.framework/SiriUI

- (bool)siriui_shouldHideStatusBar;
- (bool)siriui_shouldRotateToLandscape;

@end
