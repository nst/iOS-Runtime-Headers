/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AutoLoop.framework/AutoLoop
 */

@interface AutoLoopStabilizer : NSObject {
    int  _analysisResult;
    bool  _didDrop;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _firstFrameTimeAfterDrop;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _lastFrameTimeAfterDrop;
    int  _lastStabilizationResult;
    float  _lastTripodQuality;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _maxAllowedTrimTime;
    float  _minAllowedRemainingTripodCrop;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _minimumFrameDuration;
    int  _naturalTimeScale;
    NSArray * _presentationTimesOfFramesToSkip;
    NSArray * _skipFrameTimes;
    id /* block */  _statusUpdateBlock;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _trimLength;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _trimStart;
    bool  _useLimitedTime;
    float  alwaysAcceptedTripodCropRatio;
    int  canceledAnalysis;
    float  confidenceForSmoothingAccept;
    float  confidenceHighQualityThreshold;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  cropRect;
    NSString * currentStatusString;
    bool  didSkipFrames;
    bool  doLoopClosureCorrection;
    bool  drawFeaturesFlag;
    long long  droppedEndFrameCount;
    long long  droppedStartFrameCount;
    NSDictionary * featuresDictionary;
    unsigned long long  frameSearchLength;
    struct CGSize { 
        double width; 
        double height; 
    }  inputMovieDimensions;
    float  minConfidenceForTripodAccept;
    float  minimumHighQualityConfidenceValue;
    AVAsset * movieAssetIn;
    float  necessaryCropGainFractionPerDroppedFrame;
    bool  onlyProcessForHighQualityTripod;
    float  progressValue;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  refFrameTime;
    ICHomographyWrapper * stabilizingHomographies;
    StableVideoWriter * stableVideoWriter;
    NSURL * statsFileOutURL;
}

@property (nonatomic) float alwaysAcceptedTripodCropRatio;
@property (nonatomic, readonly) int analysisResult;
@property int canceledAnalysis;
@property (nonatomic) float confidenceForSmoothingAccept;
@property (nonatomic) float confidenceHighQualityThreshold;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } cropRect;
@property (retain) NSString *currentStatusString;
@property (nonatomic) bool didDrop;
@property (nonatomic, readonly) bool didSkipFrames;
@property bool doLoopClosureCorrection;
@property (nonatomic) bool drawFeaturesFlag;
@property (nonatomic) long long droppedEndFrameCount;
@property (nonatomic) long long droppedStartFrameCount;
@property (retain) NSDictionary *featuresDictionary;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } firstFrameTimeAfterDrop;
@property (nonatomic) unsigned long long frameSearchLength;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } inputMovieDimensions;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } lastFrameTimeAfterDrop;
@property (nonatomic, readonly) int lastStabilizationResult;
@property (readonly) float lastTripodQuality;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } maxAllowedTrimTime;
@property (nonatomic) float minAllowedRemainingTripodCrop;
@property (nonatomic) float minConfidenceForTripodAccept;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } minimumFrameDuration;
@property (nonatomic) float minimumHighQualityConfidenceValue;
@property (nonatomic, retain) AVAsset *movieAssetIn;
@property (nonatomic) int naturalTimeScale;
@property (nonatomic) float necessaryCropGainFractionPerDroppedFrame;
@property (nonatomic) bool onlyProcessForHighQualityTripod;
@property (retain) NSArray *presentationTimesOfFramesToSkip;
@property float progressValue;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } refFrameTime;
@property (nonatomic, retain) NSArray *skipFrameTimes;
@property (readonly, retain) ICHomographyWrapper *stabilizingHomographies;
@property (nonatomic, retain) StableVideoWriter *stableVideoWriter;
@property (nonatomic, retain) NSURL *statsFileOutURL;
@property (nonatomic, copy) id /* block */ statusUpdateBlock;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } trimLength;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } trimStart;
@property (nonatomic) bool useLimitedTime;

- (void).cxx_destruct;
- (bool)CheckForTripodOKInHomographies:(struct HomographyRecordVector { struct HomographyInfoRecord {} **x1; struct HomographyInfoRecord {} **x2; struct __compressed_pair<HomographyInfoRecord **, std::__1::allocator<HomographyInfoRecord *> > { struct HomographyInfoRecord {} **x_3_1_1; } x3; }*)arg1 firstIndex:(unsigned long long)arg2 lastIndex:(unsigned long long)arg3 cropRectOut:(struct FloatRect { struct Point2f { float x_1_1_1; float x_1_1_2; } x1; struct Point2f { float x_2_1_1; float x_2_1_2; } x2; }*)arg4 minConfidence:(float)arg5 confidenceOut:(float*)arg6;
- (float)CropRatio:(const struct FloatRect { struct Point2f { float x_1_1_1; float x_1_1_2; } x1; struct Point2f { float x_2_1_1; float x_2_1_2; } x2; }*)arg1;
- (bool)CropRectValid:(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (int)FindAcceptableTripodSegmentForInput:(struct HomographyRecordVector { struct HomographyInfoRecord {} **x1; struct HomographyInfoRecord {} **x2; struct __compressed_pair<HomographyInfoRecord **, std::__1::allocator<HomographyInfoRecord *> > { struct HomographyInfoRecord {} **x_3_1_1; } x3; }*)arg1;
- (unsigned long long)FindFrameIndexForReferenceTimeInHomographies:(const struct HomographyRecordVector { struct HomographyInfoRecord {} **x1; struct HomographyInfoRecord {} **x2; struct __compressed_pair<HomographyInfoRecord **, std::__1::allocator<HomographyInfoRecord *> > { struct HomographyInfoRecord {} **x_3_1_1; } x3; }*)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })GetPreciseReferenceTimeFromHomographies:(const struct HomographyRecordVector { struct HomographyInfoRecord {} **x1; struct HomographyInfoRecord {} **x2; struct __compressed_pair<HomographyInfoRecord **, std::__1::allocator<HomographyInfoRecord *> > { struct HomographyInfoRecord {} **x_3_1_1; } x3; }*)arg1;
- (void)SetMinimumTripodCropRatio:(float)arg1;
- (void)SetSkipFrameTimesFromArray:(struct vector<CMTime, std::__1::allocator<CMTime> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<CMTime *, std::__1::allocator<CMTime> > { struct { /* ? */ } *x_3_1_1; } x3; }*)arg1;
- (float)alwaysAcceptedTripodCropRatio;
- (int)analysisResult;
- (int)analyzeForAutoloopWithDirect:(bool)arg1 toAnalysisOutput:(id*)arg2;
- (int)canceledAnalysis;
- (float)confidenceForSmoothingAccept;
- (float)confidenceHighQualityThreshold;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cropRect;
- (id)currentStatusString;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })determinePreciseTimeRange;
- (bool)didDrop;
- (bool)didSkipFrames;
- (bool)doLoopClosureCorrection;
- (bool)drawFeaturesFlag;
- (long long)droppedEndFrameCount;
- (long long)droppedStartFrameCount;
- (id)featuresDictionary;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })firstFrameTimeAfterDrop;
- (unsigned long long)frameSearchLength;
- (void)frameTimesToPassThruHomographies:(const struct vector<CMTime, std::__1::allocator<CMTime> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<CMTime *, std::__1::allocator<CMTime> > { struct { /* ? */ } *x_3_1_1; } x3; }*)arg1;
- (bool)getNaturalTimeScaleForVideoTrackInAsset;
- (id)getVideoTrack;
- (id)init;
- (struct CGSize { double x1; double x2; })inputMovieDimensions;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })lastFrameTimeAfterDrop;
- (int)lastStabilizationResult;
- (float)lastTripodQuality;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })maxAllowedTrimTime;
- (float)minAllowedRemainingTripodCrop;
- (float)minConfidenceForTripodAccept;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })minimumFrameDuration;
- (float)minimumHighQualityConfidenceValue;
- (id)movieAssetIn;
- (int)naturalTimeScale;
- (float)necessaryCropGainFractionPerDroppedFrame;
- (bool)onlyProcessForHighQualityTripod;
- (id)presentationTimesOfFramesToSkip;
- (int)processStabilizationAnalysis:(id)arg1 forcePassThru:(bool)arg2 forceSequentialTripod:(bool)arg3;
- (float)progressValue;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })refFrameTime;
- (void)setAlwaysAcceptedTripodCropRatio:(float)arg1;
- (void)setCanceledAnalysis:(int)arg1;
- (void)setConfidenceForSmoothingAccept:(float)arg1;
- (void)setConfidenceHighQualityThreshold:(float)arg1;
- (void)setCurrentStatusString:(id)arg1;
- (void)setDidDrop:(bool)arg1;
- (void)setDoLoopClosureCorrection:(bool)arg1;
- (void)setDrawFeaturesFlag:(bool)arg1;
- (void)setDroppedEndFrameCount:(long long)arg1;
- (void)setDroppedStartFrameCount:(long long)arg1;
- (void)setFeaturesDictionary:(id)arg1;
- (void)setFirstFrameTimeAfterDrop:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setFrameSearchLength:(unsigned long long)arg1;
- (void)setLastFrameTimeAfterDrop:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setMaxAllowedTrimTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setMinAllowedRemainingTripodCrop:(float)arg1;
- (void)setMinConfidenceForTripodAccept:(float)arg1;
- (void)setMinimumFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setMinimumHighQualityConfidenceValue:(float)arg1;
- (void)setMovieAssetIn:(id)arg1;
- (void)setNaturalTimeScale:(int)arg1;
- (void)setNecessaryCropGainFractionPerDroppedFrame:(float)arg1;
- (void)setOnlyProcessForHighQualityTripod:(bool)arg1;
- (void)setPresentationTimesOfFramesToSkip:(id)arg1;
- (void)setProgressValue:(float)arg1;
- (void)setRefFrameTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setSkipFrameTimes:(id)arg1;
- (bool)setStabilizerLimitedTimes;
- (void)setStableVideoWriter:(id)arg1;
- (void)setStatsFileOutURL:(id)arg1;
- (void)setStatusUpdateBlock:(id /* block */)arg1;
- (void)setTrimLength:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setTrimStart:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setUpLoopClosures;
- (void)setUseLimitedTime:(bool)arg1;
- (id)skipFrameTimes;
- (id)stabilizingHomographies;
- (id)stableVideoWriter;
- (id)statsFileOutURL;
- (id /* block */)statusUpdateBlock;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })trimLength;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })trimStart;
- (bool)tripodOKWithTrimming:(const struct HomographyRecordVector { struct HomographyInfoRecord {} **x1; struct HomographyInfoRecord {} **x2; struct __compressed_pair<HomographyInfoRecord **, std::__1::allocator<HomographyInfoRecord *> > { struct HomographyInfoRecord {} **x_3_1_1; } x3; }*)arg1 minConfidence:(float)arg2;
- (bool)updateStabilizerStatus;
- (bool)updateVideoProgress;
- (bool)useLimitedTime;

@end
