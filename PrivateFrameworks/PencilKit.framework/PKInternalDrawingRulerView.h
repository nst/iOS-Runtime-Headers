/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PencilKit.framework/PencilKit
 */

@interface PKInternalDrawingRulerView : PKInternalDrawingView <UIGestureRecognizerDelegate> {
    bool  _canRulerSnapToAngle;
    double  _currentTValueForSnappedDrawing;
    NSTimer * _imageTransformTimer;
    double  _initialDrawingBoundsYOrigin;
    bool  _isExpandedInline;
    bool  _isInlineResizing;
    bool  _isInteractingWithRuler;
    bool  _isRulerDrawingMovingToEndOfRuler;
    bool  _lastTouchWasMaskedByRuler;
    double  _maxTValueForSnappedDrawing;
    double  _minTValueForSnappedDrawing;
    double  _originTValueForSnappedDrawing;
    struct { 
        int arcType; 
        bool before; 
        double snapAngle; 
    }  _previousRulerState;
    CALayer * _rulerAngleMarker;
    CATextLayer * _rulerAngleText;
    CALayer * _rulerAngleTick;
    CALayer * _rulerDistanceHUD;
    CATextLayer * _rulerDistanceText;
    PKRulerGestureRecognizer * _rulerGestureRecognizer;
    bool  _rulerIsRotating;
    PKRulerLayer * _rulerLayer;
    bool  _rulerSnappedToAngle;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _rulerStartTransform;
    struct { 
        int arcType; 
        bool before; 
        double snapAngle; 
    }  _rulerState;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _rulerTransform;
    bool  _rulerWasShownViaGesture;
    double  _rulerZoomStartCenterTValueOnScreen;
    double  _rulerZoomStartScale;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _rulerZoomStartTransform;
    UIImpactFeedbackGenerator * _snapImpactBehavior;
    UIImpactFeedbackGenerator * _unsnapImpactBehavior;
}

@property (nonatomic) bool canRulerSnapToAngle;
@property (nonatomic) double currentTValueForSnappedDrawing;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSTimer *imageTransformTimer;
@property (nonatomic) double initialDrawingBoundsYOrigin;
@property (nonatomic) bool isExpandedInline;
@property (nonatomic) bool isInlineResizing;
@property (nonatomic) bool isInteractingWithRuler;
@property (nonatomic) bool isRulerDrawingMovingToEndOfRuler;
@property (nonatomic) bool lastTouchWasMaskedByRuler;
@property (nonatomic) double maxTValueForSnappedDrawing;
@property (nonatomic) double minTValueForSnappedDrawing;
@property (nonatomic) double originTValueForSnappedDrawing;
@property (nonatomic) struct { int x1; bool x2; double x3; } previousRulerState;
@property (nonatomic, retain) CALayer *rulerAngleMarker;
@property (nonatomic, retain) CATextLayer *rulerAngleText;
@property (nonatomic, retain) CALayer *rulerAngleTick;
@property (nonatomic, retain) CALayer *rulerDistanceHUD;
@property (nonatomic, retain) CATextLayer *rulerDistanceText;
@property (nonatomic, retain) PKRulerGestureRecognizer *rulerGestureRecognizer;
@property (nonatomic) bool rulerIsRotating;
@property (nonatomic, retain) PKRulerLayer *rulerLayer;
@property (nonatomic) bool rulerSnappedToAngle;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } rulerStartTransform;
@property (nonatomic) struct { int x1; bool x2; double x3; } rulerState;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } rulerTransform;
@property (nonatomic) bool rulerWasShownViaGesture;
@property (nonatomic) double rulerZoomStartCenterTValueOnScreen;
@property (nonatomic) double rulerZoomStartScale;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } rulerZoomStartTransform;
@property (nonatomic, retain) UIImpactFeedbackGenerator *snapImpactBehavior;
@property (readonly) Class superclass;
@property (nonatomic, retain) UIImpactFeedbackGenerator *unsnapImpactBehavior;

- (void).cxx_destruct;
- (id)_accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)accessibilityElements;
- (id)addOpacityAnimationOnLayer:(id)arg1 delegate:(id)arg2 toOpacity:(double)arg3;
- (void)addScaleAndOpacityAnimationOnLayer:(id)arg1 delegate:(id)arg2 fromScale:(double)arg3 toScale:(double)arg4 fromAlpha:(double)arg5 toAlpha:(double)arg6;
- (id)addScaleAnimationOnLayer:(id)arg1 delegate:(id)arg2 fromScale:(double)arg3 toScale:(double)arg4;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })angleSnapRulerTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 aroundOrigin:(struct CGPoint { double x1; double x2; })arg2;
- (void)animationDidStop:(id)arg1 finished:(bool)arg2;
- (bool)canRulerSnapToAngle;
- (void)cancelNonDrawingGestures;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })canvasTransform;
- (bool)compactRuler;
- (double)currentTValueForSnappedDrawing;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })defaultRulerTransfrom;
- (void)drawingBegan:(id)arg1;
- (void)drawingCancelled;
- (void)drawingEnded:(id)arg1;
- (void)drawingMoved:(id)arg1 withEvent:(id)arg2;
- (void)endRulerDrawing;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })ensureRulerFullyOnscreen:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (struct CGPoint { double x1; double x2; })getRulerCenterLineOriginAndTangent:(struct CGPoint { double x1; double x2; }*)arg1;
- (double)getRulerCenterTValueOnScreenForTransfrom:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)hideRuler;
- (void)hideRulerAnimated:(bool)arg1;
- (void)hideUI;
- (id)imageTransformTimer;
- (void)incrementRulerAngleBy:(double)arg1;
- (double)initialDrawingBoundsYOrigin;
- (bool)isExpandedInline;
- (bool)isInlineResizing;
- (bool)isInteractingWithRuler;
- (bool)isRulerDrawingMovingToEndOfRuler;
- (bool)lastTouchWasMaskedByRuler;
- (void)makeRulerHorizontal;
- (void)makeRulerVertical;
- (double)maxTValueForSnappedDrawing;
- (double)minTValueForSnappedDrawing;
- (double)originTValueForSnappedDrawing;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })pixelSnapRulerTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (struct { int x1; bool x2; double x3; })previousRulerState;
- (void)removeRulerMarkers;
- (void)resetRuler;
- (void)resetRulerTouches;
- (void)resetRulerTransform;
- (double)rulerAlignInset;
- (id)rulerAngleMarker;
- (id)rulerAngleText;
- (id)rulerAngleTick;
- (id)rulerBackgroundImage;
- (id)rulerDialImage;
- (id)rulerDialLevelImage;
- (id)rulerDistanceHUD;
- (id)rulerDistanceText;
- (id)rulerGestureRecognizer;
- (bool)rulerIsRotating;
- (id)rulerLayer;
- (void)rulerMoveGesture:(id)arg1;
- (bool)rulerSnappedToAngle;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })rulerStartTransform;
- (struct { int x1; bool x2; double x3; })rulerState;
- (double)rulerTickMarkInset;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })rulerTransform;
- (bool)rulerWasShownViaGesture;
- (double)rulerWidth;
- (double)rulerZoomStartCenterTValueOnScreen;
- (double)rulerZoomStartScale;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })rulerZoomStartTransform;
- (void)setCanRulerSnapToAngle:(bool)arg1;
- (void)setCurrentTValueForSnappedDrawing:(double)arg1;
- (void)setImageTransformFrom:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 toTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 animated:(bool)arg3 duration:(double)arg4;
- (void)setImageTransformTimer:(id)arg1;
- (void)setInitialDrawingBoundsYOrigin:(double)arg1;
- (void)setIsExpandedInline:(bool)arg1;
- (void)setIsInlineResizing:(bool)arg1;
- (void)setIsInteractingWithRuler:(bool)arg1;
- (void)setIsRulerDrawingMovingToEndOfRuler:(bool)arg1;
- (void)setLastTouchWasMaskedByRuler:(bool)arg1;
- (void)setMaxTValueForSnappedDrawing:(double)arg1;
- (void)setMinTValueForSnappedDrawing:(double)arg1;
- (void)setOriginTValueForSnappedDrawing:(double)arg1;
- (void)setPreviousRulerState:(struct { int x1; bool x2; double x3; })arg1;
- (void)setRulerAngleMarker:(id)arg1;
- (void)setRulerAngleText:(id)arg1;
- (void)setRulerAngleTick:(id)arg1;
- (void)setRulerDistanceHUD:(id)arg1;
- (void)setRulerDistanceText:(id)arg1;
- (void)setRulerGestureRecognizer:(id)arg1;
- (void)setRulerIsRotating:(bool)arg1;
- (void)setRulerLayer:(id)arg1;
- (void)setRulerSnappedToAngle:(bool)arg1;
- (void)setRulerStartTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setRulerState:(struct { int x1; bool x2; double x3; })arg1;
- (void)setRulerTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setRulerWasShownViaGesture:(bool)arg1;
- (void)setRulerZoomStartCenterTValueOnScreen:(double)arg1;
- (void)setRulerZoomStartScale:(double)arg1;
- (void)setRulerZoomStartTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setSnapImpactBehavior:(id)arg1;
- (void)setUnsnapImpactBehavior:(id)arg1;
- (void)setZooming:(bool)arg1;
- (void)setupGestures;
- (bool)shouldUseLargestRulerTextFontSize;
- (void)showRuler;
- (id)snapImpactBehavior;
- (void)startRulerDrawing;
- (id)unsnapImpactBehavior;
- (void)updateAngle:(id)arg1;
- (void)updateAngleWithAngleMarkerPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)updateDistanceMarkerWithSpacing:(double)arg1;
- (void)updateImageTransform:(id)arg1;
- (void)updateRuler:(id)arg1;
- (void)updateRulerMarkerForLocation:(struct CGPoint { double x1; double x2; })arg1 firstTouch:(bool)arg2;
- (void)updateRulerTickMarkImage;
- (bool)viewPointInRuler:(struct CGPoint { double x1; double x2; })arg1;

@end
