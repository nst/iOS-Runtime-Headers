/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@interface UIPrintInteractionController : NSObject {
    unsigned long long  _backgroundTaskIdentifier;
    id /* block */  _completionHandler;
    <UIPrintInteractionControllerDelegate> * _delegate;
    bool  _hidesNumberOfCopies;
    bool  _isManagedContent;
    NSObject<OS_dispatch_queue> * _previewQueue;
    <UIPrintInteractionControllerActivityDelegate> * _printActivityDelegate;
    UIPrintFormatter * _printFormatter;
    UIPrintInfo * _printInfo;
    UIPrintPageRenderer * _printPageRenderer;
    UIPrintPaper * _printPaper;
    id  _printState;
    id  _printingItem;
    NSArray * _printingItems;
    bool  _showsPageRange;
    bool  _showsPaperSelectionForLoadedPapers;
    id  _temporaryRetainCycle;
}

@property (nonatomic) <UIPrintInteractionControllerDelegate> *delegate;
@property (nonatomic) bool isManagedContent;
@property (nonatomic, readonly) long long pageCount;
@property (nonatomic, retain) NSArray *pageRanges;
@property (nonatomic, retain) UIPrintPaper *paper;
@property (nonatomic) <UIPrintInteractionControllerActivityDelegate> *printActivityDelegate;
@property (nonatomic, retain) UIPrintFormatter *printFormatter;
@property (nonatomic, retain) UIPrintInfo *printInfo;
@property (nonatomic, retain) UIPrintPageRenderer *printPageRenderer;
@property (nonatomic, readonly) UIPrintPaper *printPaper;
@property (nonatomic, retain) PKPrinter *printer;
@property (nonatomic, copy) id printingItem;
@property (nonatomic, copy) NSArray *printingItems;
@property (nonatomic) bool showsNumberOfCopies;
@property (nonatomic) bool showsPageRange;
@property (nonatomic) bool showsPaperSelectionForLoadedPapers;

+ (bool)canPrintData:(id)arg1;
+ (bool)canPrintURL:(id)arg1;
+ (bool)isPrintingAvailable;
+ (id)printableUTIs;
+ (id)sharedPrintController;

- (void).cxx_destruct;
- (bool)_canPrintPDFData:(id)arg1;
- (bool)_canPrintPDFURL:(id)arg1;
- (bool)_canShowAnnotations;
- (bool)_canShowColor;
- (bool)_canShowCopies;
- (bool)_canShowDuplex;
- (bool)_canShowPageRange;
- (bool)_canShowPaperList;
- (bool)_canShowPreview;
- (bool)_canShowPunch;
- (bool)_canShowStaple;
- (void)_cancelAllPreviewGeneration;
- (void)_cancelManualPrintPage;
- (void)_cleanPrintState;
- (id)_currentPrintInfo;
- (void)_enableManualPrintPage:(bool)arg1;
- (void)_endPrintJob:(bool)arg1 error:(id)arg2;
- (void)_ensurePDFIsUnlockedFirstAttempt:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)_generatePrintPreview:(id /* block */)arg1;
- (id)_getChosenPaperFromDelegateForPaperList:(id)arg1;
- (double)_getCutLengthFromDelegateForPaper:(id)arg1;
- (id)_init;
- (void)_manualPrintPage;
- (id)_newPDFPreviewURLWithPath:(id)arg1 isManagedContent:(bool)arg2;
- (struct CGContext { }*)_newSaveContext:(id)arg1 withMediaRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_paperForContentType:(long long)arg1;
- (id)_paperForPDFItem:(id)arg1 withDuplexMode:(long long)arg2;
- (void)_preparePrintInfo;
- (id)_printItem:(id)arg1;
- (struct CGSize { double x1; double x2; })_printItemContentSize;
- (void)_printPage;
- (id)_printPageRenderer:(id)arg1;
- (void)_printPanelDidDismiss;
- (void)_printPanelDidPresent;
- (void)_printPanelWillDismiss:(bool)arg1;
- (struct CGSize { double x1; double x2; })_printablePDFDataSize:(id)arg1;
- (struct CGSize { double x1; double x2; })_printablePDFURLSize:(id)arg1;
- (bool)_printingItemIsReallyTallPDF;
- (void)_setPrintInfoState:(int)arg1;
- (bool)_setupPrintPanel:(id /* block */)arg1;
- (void)_startPrinting;
- (void)_updateCutterBehavior;
- (void)_updatePageCount;
- (void)_updatePrintPaper;
- (void)dealloc;
- (id)delegate;
- (void)dismissAnimated:(bool)arg1;
- (id)init;
- (bool)isManagedContent;
- (long long)pageCount;
- (id)pageRanges;
- (id)paper;
- (bool)presentAnimated:(bool)arg1 completionHandler:(id /* block */)arg2;
- (bool)presentFromBarButtonItem:(id)arg1 animated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (bool)presentFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2 animated:(bool)arg3 completionHandler:(id /* block */)arg4;
- (id)printActivityDelegate;
- (id)printFormatter;
- (id)printInfo;
- (id)printPageRenderer;
- (id)printPaper;
- (bool)printToPrinter:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)printer;
- (id)printingItem;
- (id)printingItems;
- (bool)savePDFToURL:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)setDelegate:(id)arg1;
- (void)setIsManagedContent:(bool)arg1;
- (void)setPageRanges:(id)arg1;
- (void)setPaper:(id)arg1;
- (void)setPrintActivityDelegate:(id)arg1;
- (void)setPrintFormatter:(id)arg1;
- (void)setPrintInfo:(id)arg1;
- (void)setPrintPageRenderer:(id)arg1;
- (void)setPrinter:(id)arg1;
- (void)setPrintingItem:(id)arg1;
- (void)setPrintingItems:(id)arg1;
- (void)setShowsNumberOfCopies:(bool)arg1;
- (void)setShowsPageRange:(bool)arg1;
- (void)setShowsPaperSelectionForLoadedPapers:(bool)arg1;
- (bool)showsNumberOfCopies;
- (bool)showsPageRange;
- (bool)showsPaperSelectionForLoadedPapers;

@end
