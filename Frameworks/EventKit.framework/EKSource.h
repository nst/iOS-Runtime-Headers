/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/EventKit.framework/EventKit
 */

@interface EKSource : EKObject {
    EKAvailabilityCache * _availabilityCache;
    NSString * _cachedHost;
    NSSet * _cachedOwnerAddresses;
    long long  _cachedPort;
    NSDate * _timeOfLastExternalIdentificationCache;
}

@property (nonatomic, readonly) NSSet *allCalendars;
@property (nonatomic, readonly) EKAvailabilityCache *availabilityCache;
@property (nonatomic, retain) NSString *cachedHost;
@property (nonatomic, retain) NSSet *cachedOwnerAddresses;
@property (nonatomic) long long cachedPort;
@property (nonatomic, readonly) NSSet *calendars;
@property (nonatomic, readonly) CDBSourceConstraints *constraints;
@property (nonatomic, copy) NSNumber *defaultAlarmOffset;
@property (nonatomic, readonly) int displayOrderForNewCalendar;
@property (getter=isEnabled, nonatomic, readonly) bool enabled;
@property (nonatomic, copy) NSString *externalID;
@property (nonatomic, copy) NSString *externalModificationTag;
@property (nonatomic, readonly) bool isFacebookSource;
@property (nonatomic) bool onlyCreatorCanModify;
@property (nonatomic, readonly) NSSet *ownerAddresses;
@property (nonatomic, readonly) long long preferredEventPrivateValue;
@property (nonatomic, readonly) NSString *serverHost;
@property (nonatomic, readonly) long long serverPort;
@property (nonatomic, readonly) NSString *sourceIdentifier;
@property (nonatomic, readonly) long long sourceType;
@property (nonatomic, readonly) long long strictestEventPrivateValue;
@property (nonatomic, readonly) bool supportsCalendarCreation;
@property (nonatomic, readonly) bool supportsReminderActions;
@property (nonatomic, retain) NSDate *timeOfLastExternalIdentificationCache;
@property (nonatomic, copy) NSString *title;
@property (nonatomic, readonly) bool wantsCommentPromptWhenDeclining;

+ (id)sourceWithEventStore:(id)arg1;

- (void).cxx_destruct;
- (void)_cacheExternalIdentificationIfNeeded;
- (id)_persistentItem;
- (id)allCalendars;
- (id)availabilityCache;
- (id)cachedHost;
- (id)cachedOwnerAddresses;
- (long long)cachedPort;
- (id)calendars;
- (id)calendarsForEntityType:(unsigned long long)arg1;
- (bool)commit:(id*)arg1;
- (id)constraints;
- (id)defaultAlarmOffset;
- (id)description;
- (int)displayOrderForNewCalendar;
- (id)externalID;
- (id)externalModificationTag;
- (id)init;
- (bool)isEnabled;
- (bool)isFacebookSource;
- (bool)onlyCreatorCanModify;
- (id)ownerAddresses;
- (long long)preferredEventPrivateValue;
- (id)readWriteCalendarsForEntityType:(unsigned long long)arg1;
- (bool)remove:(id*)arg1;
- (id)serverHost;
- (long long)serverPort;
- (void)setCachedHost:(id)arg1;
- (void)setCachedOwnerAddresses:(id)arg1;
- (void)setCachedPort:(long long)arg1;
- (void)setDefaultAlarmOffset:(id)arg1;
- (void)setExternalID:(id)arg1;
- (void)setExternalModificationTag:(id)arg1;
- (void)setOnlyCreatorCanModify:(bool)arg1;
- (void)setTimeOfLastExternalIdentificationCache:(id)arg1;
- (void)setTitle:(id)arg1;
- (id)sourceIdentifier;
- (long long)sourceType;
- (long long)strictestEventPrivateValue;
- (bool)supportsCalendarCreation;
- (bool)supportsReminderActions;
- (id)timeOfLastExternalIdentificationCache;
- (id)title;
- (bool)wantsCommentPromptWhenDeclining;

@end
