/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreData.framework/CoreData
 */

@interface PFUbiquityRecordImportConflict : NSObject {
    NSDate * _conflictLogDate;
    NSDictionary * _conflictingLogContent;
    PFUbiquityKnowledgeVector * _conflictingLogKnowledgeVector;
    NSNumber * _conflictingLogTransactionNumber;
    int  _conflictingLogTransactionType;
    NSString * _conflictingObjectGlobalIDStr;
    PFUbiquityKnowledgeVector * _currentKnowledgeVector;
    NSDictionary * _globalIDIndexToLocalIDURIMap;
    PFUbiquityImportContext * _importContext;
    NSMutableDictionary * _relationshipsToObjectIDsToCheck;
    NSManagedObject * _sourceObject;
    NSArray * _transactionHistory;
}

@property (nonatomic, retain) NSDate *conflictLogDate;
@property (nonatomic, retain) NSDictionary *conflictingLogContent;
@property (nonatomic, retain) PFUbiquityKnowledgeVector *conflictingLogKnowledgeVector;
@property (nonatomic, retain) NSNumber *conflictingLogTransactionNumber;
@property (nonatomic) int conflictingLogTransactionType;
@property (nonatomic, retain) NSString *conflictingObjectGlobalIDStr;
@property (nonatomic, retain) PFUbiquityKnowledgeVector *currentKnowledgeVector;
@property (nonatomic, retain) NSDictionary *globalIDIndexToLocalIDURIMap;
@property (nonatomic, retain) PFUbiquityImportContext *importContext;
@property (nonatomic, readonly) NSDictionary *relationshipToObjectIDsToCheck;
@property (nonatomic, retain) NSManagedObject *sourceObject;
@property (nonatomic, retain) NSArray *transactionHistory;

+ (id)createSnapshotFromManagedObject:(id)arg1 withSourceObject:(id)arg2;
+ (id)createTransactionLogForTransactionEntry:(id)arg1 withImportContext:(id)arg2 error:(id*)arg3;
+ (id)electAncestorKnowledgeVectorForKnowledgeVector:(id)arg1 withExportingPeerID:(id)arg2 fromPeerSnapshotCollection:(id)arg3;
+ (void)initialize;
+ (int)resolvedTypeForConflictingLogType:(int)arg1 andLatestTransactionEntry:(id)arg2 skipObject:(bool*)arg3;

- (id)_newNormalizedSnapshot:(id)arg1 forObject:(id)arg2;
- (void)addObjectID:(id)arg1 forRelationship:(id)arg2;
- (void)addObjectIDsForDiff:(id)arg1 forRelationship:(id)arg2;
- (id)conflictLogDate;
- (id)conflictingLogContent;
- (id)conflictingLogKnowledgeVector;
- (id)conflictingLogTransactionNumber;
- (int)conflictingLogTransactionType;
- (id)conflictingObjectGlobalIDStr;
- (id)createSetOfManagedObjectIDsForGlobalIDsInRelationship:(id)arg1 withValue:(id)arg2 withGlobalIDToLocalIDURIMap:(id)arg3 andTransactionLog:(id)arg4;
- (id)createSnapshotDictionaryForObjectWithEntry:(id)arg1 inTransactionLog:(id)arg2 withError:(id*)arg3;
- (id)createSnapshotDictionaryFromLogEntry:(id)arg1 withError:(id*)arg2;
- (id)createSnapshotFromBaselineForEntry:(id)arg1 error:(id*)arg2;
- (id)createSnapshotFromLogContent:(id)arg1 withTransactionLog:(id)arg2;
- (id)currentKnowledgeVector;
- (void)dealloc;
- (id)description;
- (id)globalIDIndexToLocalIDURIMap;
- (id)importContext;
- (id)init;
- (id)relationshipToObjectIDsToCheck;
- (bool)resolveConflict:(id*)arg1;
- (bool)resolveMergeConflictForLogContent:(id)arg1 previousSnapshot:(id)arg2 andAncestorSnapshot:(id)arg3 withOldVersion:(unsigned int)arg4 andNewVersion:(unsigned int)arg5 error:(id*)arg6;
- (void)setConflictLogDate:(id)arg1;
- (void)setConflictingLogContent:(id)arg1;
- (void)setConflictingLogKnowledgeVector:(id)arg1;
- (void)setConflictingLogTransactionNumber:(id)arg1;
- (void)setConflictingLogTransactionType:(int)arg1;
- (void)setConflictingObjectGlobalIDStr:(id)arg1;
- (void)setCurrentKnowledgeVector:(id)arg1;
- (void)setGlobalIDIndexToLocalIDURIMap:(id)arg1;
- (void)setImportContext:(id)arg1;
- (void)setSourceObject:(id)arg1;
- (void)setTransactionHistory:(id)arg1;
- (id)sourceObject;
- (id)transactionHistory;

@end
