/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSCH3DShaderContext : NSObject {
    NSSet * _debugEffects;
    TSCH3DShaderResource * _shader;
    struct ObjectStateMatchObject { 
        struct ObjcSharedPtr<NSSet> { 
            NSSet *mValue; 
        } mEffects; 
        struct vector<TSCH3D::ResourceAttributeState, std::__1::allocator<TSCH3D::ResourceAttributeState> > { 
            struct ResourceAttributeState {} *__begin_; 
            struct ResourceAttributeState {} *__end_; 
            struct __compressed_pair<TSCH3D::ResourceAttributeState *, std::__1::allocator<TSCH3D::ResourceAttributeState> > { 
                struct ResourceAttributeState {} *__value_; 
            } __end_cap_; 
        } mAttributes; 
        struct vector<TSCH3D::TextureAttributeState, std::__1::allocator<TSCH3D::TextureAttributeState> > { 
            struct TextureAttributeState {} *__begin_; 
            struct TextureAttributeState {} *__end_; 
            struct __compressed_pair<TSCH3D::TextureAttributeState *, std::__1::allocator<TSCH3D::TextureAttributeState> > { 
                struct TextureAttributeState {} *__value_; 
            } __end_cap_; 
        } mTextures; 
    }  _state;
    TSCH3DVersion * _version;
}

@property (nonatomic, copy) NSSet *debugEffects;
@property (nonatomic, retain) TSCH3DShaderResource *shader;
@property (nonatomic, retain) TSCH3DVersion *version;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)debugEffects;
- (id)diffEffects:(id)arg1;
- (id)discardStatement;
- (unsigned long long)hash;
- (id)initWithObjectState:(const /* Warning: unhandled struct encoding: '{ObjectState={ObjcSharedPtr<NSSet>=@}{vector<TSCH3D::ObjectState::Lookup<TSCH3D::AttributeSpecs>, std::__1::allocator<TSCH3D::ObjectState::Lookup<TSCH3D::AttributeSpecs> > >=^{Lookup<TSCH3D::AttributeSpecs>}^{Lookup<TSCH3D::AttributeSpecs>}{__compressed_pair<TSCH3D::ObjectState::Lookup<TSCH3D::AttributeSpecs> *, std::__1::allocator<TSCH3D::ObjectState::Lookup<TSCH3D::AttributeSpecs> > >=^{Lookup<TSCH3D::AttributeSpecs>}}}{vector<TSCH3D::ObjectState::Lookup<TSCH3D::TextureAttributes>, std::__1::allocator<TSCH3D::ObjectState::Lookup<TSCH3D::TextureAttributes> > >=^{Lookup<TSCH3D::TextureAttributes>}^{Lookup<TSCH3D::TextureAttributes>}{__compressed_pair<TSCH3D::ObjectState::Lookup<TSCH3D::TextureAttributes> *, std::__1::allocator<TSCH3D::ObjectState::Lookup<TSCH3D::TextureAttributes> > >=^{Lookup<TSCH3D::TextureAttributes>}}}}' */ struct ObjectState { struct ObjcSharedPtr<NSSet> { id x_1_1_1; struct vector<TSCH3D::ObjectState::Lookup<TSCH3D::AttributeSpecs>, std::__1::allocator<TSCH3D::ObjectState::Lookup<TSCH3D::AttributeSpecs> > > { struct Lookup<TSCH3D::AttributeSpecs> {} *x_2_2_1; struct Lookup<TSCH3D::AttributeSpecs> {} *x_2_2_2; struct __compressed_pair<TSCH3D::ObjectState::Lookup<TSCH3D::AttributeSpecs> *, std::__1::allocator<TSCH3D::ObjectState::Lookup<TSCH3D::AttributeSpecs> > > { struct Lookup<TSCH3D::AttributeSpecs> {} *x_3_3_1; } x_2_2_3; } x_1_1_2; struct vector<TSCH3D::ObjectState::Lookup<TSCH3D::TextureAttributes>, std::__1::allocator<TSCH3D::ObjectState::Lookup<TSCH3D::TextureAttributes> > > { struct Lookup<TSCH3D::TextureAttributes> {} *x_3_2_1; struct Lookup<TSCH3D::TextureAttributes> {} *x_3_2_2; struct __compressed_pair<TSCH3D::ObjectState::Lookup<TSCH3D::TextureAttributes> *, std::__1::allocator<TSCH3D::ObjectState::Lookup<TSCH3D::TextureAttributes> > > { struct Lookup<TSCH3D::TextureAttributes> {} *x_3_3_1; } x_3_2_3; } x_1_1_3; } x1; }*)arg1 version:(id)arg2;
- (bool)isEqual:(id)arg1;
- (void)setDebugEffects:(id)arg1;
- (void)setShader:(id)arg1;
- (void)setVersion:(id)arg1;
- (id)shader;
- (const /* Warning: unhandled struct encoding: '{ObjectStateMatchObject={ObjcSharedPtr<NSSet>=@}{vector<TSCH3D::ResourceAttributeState, std::__1::allocator<TSCH3D::ResourceAttributeState> >=^{ResourceAttributeState}^{ResourceAttributeState}{__compressed_pair<TSCH3D::ResourceAttributeState *, std::__1::allocator<TSCH3D::ResourceAttributeState> >=^{ResourceAttributeState}}}{vector<TSCH3D::TextureAttributeState, std::__1::allocator<TSCH3D::TextureAttributeState> >=^{TextureAttributeState}^{TextureAttributeState}{__compressed_pair<TSCH3D::TextureAttributeState *, std::__1::allocator<TSCH3D::TextureAttributeState> >=^{TextureAttributeState}}}}' */ struct ObjectStateMatchObject { struct ObjcSharedPtr<NSSet> { id x_1_1_1; struct vector<TSCH3D::ResourceAttributeState, std::__1::allocator<TSCH3D::ResourceAttributeState> > { struct ResourceAttributeState {} *x_2_2_1; struct ResourceAttributeState {} *x_2_2_2; struct __compressed_pair<TSCH3D::ResourceAttributeState *, std::__1::allocator<TSCH3D::ResourceAttributeState> > { struct ResourceAttributeState {} *x_3_3_1; } x_2_2_3; } x_1_1_2; struct vector<TSCH3D::TextureAttributeState, std::__1::allocator<TSCH3D::TextureAttributeState> > { struct TextureAttributeState {} *x_3_2_1; struct TextureAttributeState {} *x_3_2_2; struct __compressed_pair<TSCH3D::TextureAttributeState *, std::__1::allocator<TSCH3D::TextureAttributeState> > { struct TextureAttributeState {} *x_3_3_1; } x_3_2_3; } x_1_1_3; } x1; }*)state;
- (struct TextureAttributes { int x1; int x2; bool x3; bool x4; bool x5; struct TextureSizeHint { int x_6_1_1; struct tvec2<int> { union { int x_1_3_1; int x_1_3_2; int x_1_3_3; } x_2_2_1; union { int x_2_3_1; int x_2_3_2; int x_2_3_3; } x_2_2_2; } x_6_1_2; } x6; bool x7; })textureAttributesForVariable:(id)arg1;
- (id)textureFunctionNameForVariable:(id)arg1 projective:(bool)arg2;
- (id)textureVariables;
- (id)version;

@end
