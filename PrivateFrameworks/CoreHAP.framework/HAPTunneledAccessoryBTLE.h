/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP
 */

@interface HAPTunneledAccessoryBTLE : HAPAccessory <HAPAccessoryServerInternalDelegate, HAPBTLEControlOutputStreamDelegate, HAPSecuritySessionDelegate, HMFTimerDelegate> {
    HAPCharacteristic * _advertisingCharacteristic;
    NSOperationQueue * _clientOperationQueue;
    HMFTimer * _connectionIdleTimer;
    <HAPKeyStore> * _keyStore;
    HAPCharacteristic * _pairVerifyCharacteristic;
    NSOperationQueue * _pairVerifyOperationQueue;
    HAPService * _pairingService;
    HAPCharacteristic * _pairingsCharacteristic;
    NSMutableArray * _pendingRequests;
    NSMutableArray * _pendingResponses;
    NSObject<OS_dispatch_queue> * _propertyQueue;
    NSOperationQueue * _requestOperationQueue;
    HAPSecuritySession * _securitySession;
    bool  _securitySessionOpen;
    bool  _securitySessionOpening;
    NSNumber * _sessionLifetimeTimeout;
    NSNumber * _stateNumber;
    HAPService * _tunneledBTLEAccessoryService;
    HMFExponentialBackoffTimer * _verificationBackoffTimer;
    bool  _verified;
    bool  _verifying;
}

@property (nonatomic) HAPCharacteristic *advertisingCharacteristic;
@property (nonatomic, readonly) NSOperationQueue *clientOperationQueue;
@property (nonatomic, retain) HMFTimer *connectionIdleTimer;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) <HAPKeyStore> *keyStore;
@property (nonatomic) HAPCharacteristic *pairVerifyCharacteristic;
@property (nonatomic, readonly) NSOperationQueue *pairVerifyOperationQueue;
@property (nonatomic) HAPService *pairingService;
@property (nonatomic) HAPCharacteristic *pairingsCharacteristic;
@property (nonatomic, readonly) NSMutableArray *pendingRequests;
@property (nonatomic, readonly) NSMutableArray *pendingResponses;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *propertyQueue;
@property (nonatomic, readonly) NSOperationQueue *requestOperationQueue;
@property (nonatomic, retain) HAPSecuritySession *securitySession;
@property (getter=isSecuritySessionOpen, nonatomic) bool securitySessionOpen;
@property (getter=isSecuritySessionOpening, nonatomic) bool securitySessionOpening;
@property (nonatomic, retain) NSNumber *sessionLifetimeTimeout;
@property (nonatomic, copy) NSNumber *stateNumber;
@property (readonly) Class superclass;
@property (nonatomic) HAPService *tunneledBTLEAccessoryService;
@property (nonatomic, retain) HMFExponentialBackoffTimer *verificationBackoffTimer;
@property (getter=isVerified, nonatomic) bool verified;
@property (getter=isVerifying, nonatomic) bool verifying;

+ (bool)shouldVerifyCharacteristic:(id)arg1;

- (void).cxx_destruct;
- (bool)__isAdvertising;
- (void)_cancelAllQueuedOperationsWithError:(id)arg1;
- (id)_decryptData:(id)arg1 error:(id*)arg2;
- (id)_encryptDataAndGenerateAuthTag:(id)arg1 error:(id*)arg2;
- (void)_enqueueRequest:(id)arg1;
- (bool)_establishSecureSessionWithError:(id*)arg1;
- (void)_handleConnectionIdleTimeout;
- (void)_handleSecuritySession:(id)arg1 setupExchangeData:(id)arg2;
- (void)_kickConnectionIdleTimer;
- (void)_markNotifyingCharacteristicUpdatedForCharacteristic:(id)arg1;
- (unsigned long long)_outstandingRequests;
- (bool)_parsePairingService:(id)arg1;
- (bool)_parseServices;
- (bool)_parseTunneledBTLEAccessoryService:(id)arg1;
- (id)_pendingRequestForCharacteristic:(id)arg1;
- (id)_pendingResponseForRequest:(id)arg1;
- (void)_performTimedWriteExecuteForCharacteristic:(id)arg1 value:(id)arg2 options:(long long)arg3 completionHandler:(id /* block */)arg4;
- (void)_performTimedWritePrepareWithValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 options:(long long)arg4 completionHandler:(id /* block */)arg5;
- (void)_performTimedWriteValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 options:(long long)arg4 completionHandler:(id /* block */)arg5;
- (void)_performWriteValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 options:(long long)arg4 completionHandler:(id /* block */)arg5;
- (void)_readUpdatedCharacteristics:(id)arg1 queue:(id)arg2;
- (void)_readValueForCharacteristic:(id)arg1 options:(long long)arg2 completionHandler:(id /* block */)arg3;
- (void)_reallySendRequest:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_registerForTunnelCharacteristicNotifications;
- (void)_requestResponseForRequest:(id)arg1;
- (void)_resumeAllOperations;
- (void)_resumeConnectionIdleTimer;
- (void)_sanitizeAllTunneledCharacteristics;
- (void)_sendControlPacket:(id)arg1 forRequest:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_sendPairingRequestData:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_sendRequest:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_suspendAllOperations;
- (void)_suspendConnectionIdleTimer;
- (void)_tearDownSessionWithError:(id)arg1;
- (void)_updateOnStateNumberChange;
- (void)_verifyCharacteristicSignature:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_verifyServiceSignature:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_writeValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 options:(long long)arg4 completionHandler:(id /* block */)arg5;
- (void)accessoryServer:(id)arg1 didUpdateValueForCharacteristic:(id)arg2;
- (void)addPairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)advertisingCharacteristic;
- (id)clientOperationQueue;
- (id)connectionIdleTimer;
- (void)controlOutputStream:(id)arg1 didCloseWithError:(id)arg2;
- (void)controlOutputStream:(id)arg1 didReceiveRequestToSendControlPacket:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)controlOutputStreamDidComplete:(id)arg1;
- (void)controlOutputStreamDidOpen:(id)arg1;
- (id)getLocalPairingIdentityAndAllowCreation:(bool)arg1 error:(id*)arg2;
- (id)initWithServer:(id)arg1 instanceID:(id)arg2 parsedServices:(id)arg3;
- (id)initWithServer:(id)arg1 instanceID:(id)arg2 parsedServices:(id)arg3 keyStore:(id)arg4;
- (void)invalidate;
- (bool)isPaired;
- (bool)isSecuritySessionOpen;
- (bool)isSecuritySessionOpening;
- (bool)isVerified;
- (bool)isVerifying;
- (id)keyStore;
- (void)listPairingsWithCompletionQueue:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)mergeObject:(id)arg1;
- (id)pairVerifyCharacteristic;
- (id)pairVerifyOperationQueue;
- (id)pairingService;
- (id)pairingsCharacteristic;
- (id)pendingRequests;
- (id)pendingResponses;
- (id)propertyQueue;
- (void)readCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)readValueForCharacteristic:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)removePairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)removePairingForCurrentControllerWithCompletionQueue:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)requestOperationQueue;
- (id)securitySession;
- (void)securitySession:(id)arg1 didCloseWithError:(id)arg2;
- (id)securitySession:(id)arg1 didReceiveLocalPairingIdentityRequestWithError:(id*)arg2;
- (id)securitySession:(id)arg1 didReceiveRequestForPeerPairingIdentityWithIdentifier:(id)arg2 error:(id*)arg3;
- (void)securitySession:(id)arg1 didReceiveSetupExchangeData:(id)arg2;
- (void)securitySessionDidOpen:(id)arg1;
- (void)securitySessionIsOpening:(id)arg1;
- (id)sessionLifetimeTimeout;
- (void)setAdvertisingCharacteristic:(id)arg1;
- (void)setConnectionIdleTimer:(id)arg1;
- (void)setKeyStore:(id)arg1;
- (void)setPairVerifyCharacteristic:(id)arg1;
- (void)setPairingService:(id)arg1;
- (void)setPairingsCharacteristic:(id)arg1;
- (void)setReachable:(bool)arg1;
- (void)setSecuritySession:(id)arg1;
- (void)setSecuritySessionOpen:(bool)arg1;
- (void)setSecuritySessionOpening:(bool)arg1;
- (void)setSessionLifetimeTimeout:(id)arg1;
- (void)setStateNumber:(id)arg1;
- (void)setTunneledBTLEAccessoryService:(id)arg1;
- (void)setVerificationBackoffTimer:(id)arg1;
- (void)setVerified:(bool)arg1;
- (void)setVerifying:(bool)arg1;
- (id)shortDescription;
- (id)stateNumber;
- (void)timerDidFire:(id)arg1;
- (id)tunneledBTLEAccessoryService;
- (id)uniqueIdentifier;
- (id)verificationBackoffTimer;
- (void)verify;
- (void)writeCharacteristicValue:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)writeCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;

@end
