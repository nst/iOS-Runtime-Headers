/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/QuartzCore.framework/QuartzCore
 */

@interface CADisplay : NSObject {
    void * _impl;
}

@property bool allowsVirtualModes;
@property (nonatomic, readonly) NSArray *availableModes;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (getter=isCloned, nonatomic, readonly) bool cloned;
@property (getter=isCloningSupported, nonatomic, readonly) bool cloningSupported;
@property (nonatomic, copy) NSString *colorMode;
@property (nonatomic, readonly) unsigned int connectionSeed;
@property (nonatomic, readonly) NSString *containerId;
@property (nonatomic, retain) CADisplayMode *currentMode;
@property (nonatomic, readonly) NSString *currentOrientation;
@property (nonatomic, readonly) NSString *deviceName;
@property (nonatomic, readonly) unsigned int displayId;
@property (getter=isExternal, nonatomic, readonly) bool external;
@property (nonatomic, readonly) CADisplayAttributes *externalDisplayAttributes;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (nonatomic, readonly) double heartbeatRate;
@property (nonatomic, readonly) int linkQuality;
@property (nonatomic, readonly) long long minimumFrameDuration;
@property (nonatomic, readonly) NSString *name;
@property (nonatomic, readonly) NSString *nativeOrientation;
@property (nonatomic, readonly) unsigned int odLUTVersion;
@property (nonatomic, copy) NSString *overscanAdjustment;
@property (nonatomic, readonly) double overscanAmount;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } overscanAmounts;
@property (getter=isOverscanned, nonatomic, readonly) bool overscanned;
@property (nonatomic, copy) CADisplayPreferences *preferences;
@property (nonatomic, readonly) CADisplayMode *preferredMode;
@property (nonatomic, readonly) int processId;
@property (nonatomic, readonly) NSString *productName;
@property (nonatomic, readonly) double refreshRate;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } safeBounds;
@property (nonatomic, readonly) unsigned int seed;
@property (getter=isSupported, nonatomic, readonly) bool supported;
@property (nonatomic, readonly) bool supportsExtendedColors;
@property (nonatomic, readonly) long long tag;
@property (nonatomic, readonly) NSString *uniqueId;

+ (id)TVOutDisplay;
+ (bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)displays;
+ (id)mainDisplay;

- (id)_initWithDisplay:(struct Display { int (**x1)(); struct Mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_2_1_1; } x2; struct SpinLock { struct { int x_1_2_1; } x_3_1_1; } x3; id x4; struct __CFString {} x5; struct __CFString {} *x6; unsigned int x7; unsigned int x8; unsigned int x9; struct __CFString {} *x10; struct __CFString {} *x11; struct __CFString {} *x12; struct ModeSet { struct vector<CA::WindowServer::Display::Mode, std::__1::allocator<CA::WindowServer::Display::Mode> > { struct Mode {} *x_1_2_1; struct Mode {} *x_1_2_2; struct __compressed_pair<CA::WindowServer::Display::Mode *, std::__1::allocator<CA::WindowServer::Display::Mode> > { struct Mode {} *x_3_3_1; } x_1_2_3; } x_13_1_1; struct set<std::__1::tuple<unsigned short, unsigned short>, std::__1::less<std::__1::tuple<unsigned short, unsigned short> >, std::__1::allocator<std::__1::tuple<unsigned short, unsigned short> > > { struct __tree<std::__1::tuple<unsigned short, unsigned short>, std::__1::less<std::__1::tuple<unsigned short, unsigned short> >, std::__1::allocator<std::__1::tuple<unsigned short, unsigned short> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::tuple<unsigned short, unsigned short>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::tuple<unsigned short, unsigned short> > > { unsigned long long x_3_4_1; } x_1_3_3; } x_2_2_1; } x_13_1_2; } x13; }*)arg1;
- (void)_invalidate;
- (id)allowedHDRModes;
- (bool)allowsVirtualModes;
- (id)availableModes;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (id)colorMode;
- (unsigned int)connectionSeed;
- (id)containerId;
- (id)currentMode;
- (id)currentOrientation;
- (void)dealloc;
- (id)description;
- (id)deviceName;
- (unsigned int)displayId;
- (id)externalDisplayAttributes;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (double)heartbeatRate;
- (id)immutableCopy;
- (bool)isCloned;
- (bool)isCloningSupported;
- (bool)isExternal;
- (bool)isOverscanned;
- (bool)isSupported;
- (int)linkQuality;
- (long long)minimumFrameDuration;
- (id)name;
- (id)nativeOrientation;
- (unsigned int)odLUTVersion;
- (id)overscanAdjustment;
- (double)overscanAmount;
- (struct CGSize { double x1; double x2; })overscanAmounts;
- (id)preferences;
- (id)preferredHDRModes;
- (id)preferredMode;
- (id)preferredModeWithCriteria:(id)arg1;
- (int)processId;
- (id)productName;
- (double)refreshRate;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })safeBounds;
- (unsigned int)seed;
- (void)setAllowsVirtualModes:(bool)arg1;
- (void)setColorMode:(id)arg1;
- (void)setCurrentMode:(id)arg1;
- (bool)setDisplayProperties:(id)arg1;
- (void)setOverscanAdjustment:(id)arg1;
- (void)setPreferences:(id)arg1;
- (id)supportedHDRModes;
- (bool)supportsExtendedColors;
- (long long)tag;
- (id)uniqueId;
- (void)update;

@end
