/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NetworkServiceProxy.framework/NetworkServiceProxy
 */

@interface NSPManager : NSObject <NEAppProxyProviderContainerDelegate, NPTunnelDelegate> {
    NSDictionary * _appRules;
    id /* block */  _changeHandler;
    NSPConfiguration * _configuration;
    id /* block */  _connectionInfoSetHandler;
    NSArray * _currentAgents;
    bool  _currentNetworkHasProxies;
    <NSPManagerDelegate> * _delegate;
    NSMutableDictionary * _fallbackCounts;
    NSPFlowDivert * _flowDivert;
    NSMutableDictionary * _flowInfoMap;
    bool  _initialUpdate;
    bool  _isObserving;
    NSMutableArray * _knownFlows;
    NSPAppRule * _matchingAppRule;
    unsigned int  _nextFlowID;
    NWPathEvaluator * _pathEvaluator;
    id /* block */  _pendingCancellationHandler;
    NWPathEvaluator * _policyEvaluator;
    NSString * _signingIdentifier;
    bool  _testFetchDaypass;
    NSArray * _testLatencyMap;
    unsigned long long  _testLatencyMapIndex;
    id /* block */  _tunnelConnectedHandler;
    NSMutableDictionary * _tunnels;
}

@property (readonly) bool TFORequirementNotMet;
@property (retain) NSDictionary *appRules;
@property (copy) id /* block */ changeHandler;
@property (retain) NSPConfiguration *configuration;
@property (copy) id /* block */ connectionInfoSetHandler;
@property (retain) NSArray *currentAgents;
@property bool currentNetworkHasProxies;
@property (readonly, copy) NSString *debugDescription;
@property <NSPManagerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) NSMutableDictionary *fallbackCounts;
@property (retain) NSPFlowDivert *flowDivert;
@property (retain) NSMutableDictionary *flowInfoMap;
@property (readonly) unsigned long long hash;
@property bool initialUpdate;
@property (readonly) bool isEnabled;
@property (readonly) bool isFirstTunnel;
@property bool isObserving;
@property (readonly) NSMutableArray *knownFlows;
@property (retain) NSPAppRule *matchingAppRule;
@property unsigned int nextFlowID;
@property (readonly) NWPathEvaluator *pathEvaluator;
@property (copy) id /* block */ pendingCancellationHandler;
@property (readonly) NWPathEvaluator *policyEvaluator;
@property (readonly) NSString *signingIdentifier;
@property (readonly) Class superclass;
@property bool testFetchDaypass;
@property (retain) NSArray *testLatencyMap;
@property unsigned long long testLatencyMapIndex;
@property (copy) id /* block */ tunnelConnectedHandler;
@property (retain) NSMutableDictionary *tunnels;

+ (id)sharedManager;

- (void).cxx_destruct;
- (bool)TFORequirementNotMet;
- (id)appRules;
- (id)buildTestLatencyMap:(id)arg1;
- (void)cancelAllTunnelsWithCompletionHandler:(id /* block */)arg1;
- (id /* block */)changeHandler;
- (id)configuration;
- (id /* block */)connectionInfoSetHandler;
- (void)container:(id)arg1 didFailWithError:(id)arg2;
- (void)container:(id)arg1 didRequestFlowDivertControlSocketWithCompletionHandler:(id /* block */)arg2;
- (void)container:(id)arg1 didSetTunnelConfiguration:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)container:(id)arg1 didStartWithError:(id)arg2;
- (id)createAppRuleMapWithRules:(id)arg1;
- (id)createReplacementEndpointForEndpoint:(id)arg1 properties:(id)arg2;
- (id)createTransformsForEndpoint:(id)arg1 parameters:(id)arg2;
- (id)currentAgents;
- (bool)currentNetworkHasProxies;
- (id)delegate;
- (id)fallbackCounts;
- (void)fetchStateForClient:(id)arg1 withPeerEndpoint:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)flowDivert;
- (id)flowInfoMap;
- (id)getAppRuleMatchingParameters:(id)arg1 flowProperties:(id)arg2;
- (id)getConnectionInfoForIdentifier:(id)arg1;
- (unsigned long long)getTestLatencyRTT:(id)arg1 parameters:(struct networkParameters { bool x1; bool x2; bool x3; }*)arg2;
- (void)handlePolicyUpdate;
- (void)ingestTestLatencyMap:(id)arg1 local:(bool)arg2 completionHandler:(id /* block */)arg3;
- (id)init;
- (bool)initialUpdate;
- (id)instantiateFlowWithTunnel:(id)arg1 inputProtocol:(struct nw_protocol { unsigned char x1[16]; struct nw_protocol_identifier {} *x2; struct nw_protocol_callbacks {} *x3; struct nw_protocol {} *x4; void *x5; struct nw_protocol {} *x6; void *x7; }*)arg2;
- (id)instantiateTunnelWithEndpoint:(id)arg1 parameters:(id)arg2;
- (bool)isEnabled;
- (bool)isFirstTunnel;
- (bool)isObserving;
- (id)knownFlows;
- (id)matchingAppRule;
- (unsigned int)nextFlowID;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)pathEvaluator;
- (id /* block */)pendingCancellationHandler;
- (id)policyEvaluator;
- (void)resetTestLatencyMapIndex:(unsigned long long)arg1;
- (void)resetTunnelWithCompletionHandler:(id /* block */)arg1;
- (void)sendKeyBag:(id)arg1 usageData:(id)arg2 fromClient:(id)arg3;
- (void)setAppRules:(id)arg1;
- (void)setChangeHandler:(id /* block */)arg1;
- (void)setConfiguration:(id)arg1;
- (void)setConnectionInfo:(id)arg1 forIdentifier:(id)arg2;
- (void)setConnectionInfoSetHandler:(id /* block */)arg1;
- (void)setCurrentAgents:(id)arg1;
- (void)setCurrentNetworkHasProxies:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFlowDivert:(id)arg1;
- (void)setFlowInfoMap:(id)arg1;
- (void)setInitialUpdate:(bool)arg1;
- (void)setIsObserving:(bool)arg1;
- (void)setMatchingAppRule:(id)arg1;
- (void)setNextFlowID:(unsigned int)arg1;
- (void)setPendingCancellationHandler:(id /* block */)arg1;
- (void)setTestFetchDaypass:(bool)arg1;
- (void)setTestLatencyMap:(id)arg1;
- (void)setTestLatencyMapIndex:(unsigned long long)arg1;
- (void)setTunnelConnectedHandler:(id /* block */)arg1;
- (void)setTunnels:(id)arg1;
- (id)signingIdentifier;
- (void)start;
- (void)startWithConfiguration:(id)arg1 appRules:(id)arg2 delegate:(id)arg3;
- (void)stopWithCompletionHandler:(id /* block */)arg1;
- (bool)testFetchDaypass;
- (id)testLatencyMap;
- (unsigned long long)testLatencyMapIndex;
- (void)tunnel:(id)arg1 flowDidFallbackWithReason:(long long)arg2;
- (id /* block */)tunnelConnectedHandler;
- (void)tunnelDidCancel:(id)arg1;
- (void)tunnelDidConnect:(id)arg1;
- (bool)tunnelExistsFowFlow:(id)arg1;
- (id)tunnels;
- (bool)useTestDaypass;
- (bool)useTestLatencyMap;

@end
