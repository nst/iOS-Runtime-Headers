/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/StoreBookkeeper.framework/StoreBookkeeper
 */

@interface SBKTransactionController : NSObject <ISStoreURLOperationDelegate> {
    SSAccount * _account;
    SBKStoreAuthenticationController * _authenticationController;
    SBKTaskAssertion * _backgroundTaskAssertion;
    long long  _conflictResolutionAttempts;
    SBKTransaction * _currentTransaction;
    <SBKTransactionControllerDelegate> * _delegate;
    NSString * _domain;
    bool  _enabled;
    bool  _isResolvingError;
    id  _networkTypeObserver;
    NSOperationQueue * _operationQueue;
    NSMutableArray * _pendingTransactions;
    NSObject<OS_dispatch_queue> * _queue;
    NSURL * _requestURL;
    bool  _shouldAuthenticateIfNecessary;
}

@property (retain) SSAccount *account;
@property (retain) SBKStoreAuthenticationController *authenticationController;
@property (retain) SBKTaskAssertion *backgroundTaskAssertion;
@property long long conflictResolutionAttempts;
@property (nonatomic, retain) SBKTransaction *currentTransaction;
@property (readonly, copy) NSString *debugDescription;
@property <SBKTransactionControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *domain;
@property (getter=isEnabled, readonly) bool enabled;
@property (readonly) unsigned long long hash;
@property (getter=isIdle, readonly) bool idle;
@property bool isResolvingError;
@property (nonatomic, readonly) NSNumber *metricsLoadURLSamplingPercentage;
@property (nonatomic, readonly) NSNumber *metricsLoadURLSamplingPercentageCachedResponses;
@property (nonatomic, readonly) NSNumber *metricsLoadURLSessionDuration;
@property id networkTypeObserver;
@property (retain) NSOperationQueue *operationQueue;
@property (retain) NSMutableArray *pendingTransactions;
@property (retain) NSObject<OS_dispatch_queue> *queue;
@property (readonly) NSURL *requestURL;
@property bool shouldAuthenticateIfNecessary;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_beginBackgroundTask;
- (bool)_delegateShouldScheduleTransaction:(id)arg1 error:(id*)arg2;
- (void)_delegateTransactionDidCancel:(id)arg1 withError:(id)arg2;
- (bool)_delegateTransactionDidFail:(id)arg1 withError:(id)arg2;
- (void)_delegateTransactionDidFinish:(id)arg1;
- (void)_endBackgroundTask;
- (void)_enqueueStoreOperation:(id)arg1;
- (void)_networkTypeChangedNotification:(id)arg1;
- (void)_onQueue_addPendingTransaction:(id)arg1;
- (void)_onQueue_assertIsTransactionValid:(id)arg1 error:(id*)arg2;
- (bool)_onQueue_authenticationCanProcessTransaction:(id)arg1 error:(id*)arg2;
- (void)_onQueue_beginBackgroundTask;
- (bool)_onQueue_canScheduleTransaction:(id)arg1 error:(id*)arg2;
- (void)_onQueue_cancelAllPendingTransactions:(id)arg1;
- (void)_onQueue_cancelTransaction:(id)arg1 error:(id)arg2;
- (bool)_onQueue_clampsCanScheduleTransaction:(id)arg1 error:(id*)arg2;
- (id)_onQueue_clampsController;
- (void)_onQueue_currentTransactionDidFinish;
- (void)_onQueue_endBackgroundTask;
- (bool)_onQueue_isEnabledForTransaction:(id)arg1 error:(id*)arg2;
- (bool)_onQueue_isIdle;
- (void)_onQueue_performCancelErrorHandlingForError:(id)arg1;
- (void)_onQueue_performDefaultErrorHandlingForError:(id)arg1;
- (void)_onQueue_performRetryErrorHandlingForError:(id)arg1;
- (void)_onQueue_processCurrentTransaction;
- (void)_onQueue_processOperationOutput:(id)arg1 operation:(id)arg2 operationAuthenticated:(bool)arg3;
- (void)_onQueue_processPendingTransactions;
- (void)_onQueue_resolveError:(id)arg1 resolution:(int)arg2;
- (void)_onQueue_scheduleTransaction:(id)arg1 isRetry:(bool)arg2;
- (void)_onQueue_transactionDidCancel:(id)arg1 withError:(id)arg2;
- (void)_onQueue_transactionDidFail:(id)arg1 withError:(id)arg2;
- (void)_processDataInResponse:(id)arg1;
- (void)_resolveError:(id)arg1 resolution:(int)arg2;
- (bool)_sendFinishedBlockForTransaction:(id)arg1 success:(bool)arg2 cancelled:(bool)arg3 error:(id)arg4 handledAsFinishedBlock:(bool*)arg5;
- (void)_storeOperationDidComplete:(id)arg1;
- (id)account;
- (id)authenticationController;
- (id)backgroundTaskAssertion;
- (void)cancelAllTransactions;
- (void)cancelAllTransactionsCancelCode:(long long)arg1;
- (void)cancelScheduledTransaction:(id)arg1;
- (long long)conflictResolutionAttempts;
- (id)currentTransaction;
- (void)dealloc;
- (id)delegate;
- (id)domain;
- (id)initWithDomain:(id)arg1 requestURL:(id)arg2;
- (bool)isEnabled;
- (bool)isIdle;
- (bool)isResolvingError;
- (id)networkTypeObserver;
- (void)operation:(id)arg1 didReceiveResponse:(id)arg2;
- (void)operation:(id)arg1 failedWithError:(id)arg2;
- (void)operation:(id)arg1 finishedWithOutput:(id)arg2;
- (id)operationQueue;
- (id)pendingTransactions;
- (id)queue;
- (id)requestURL;
- (void)scheduleTransaction:(id)arg1;
- (void)scheduleTransaction:(id)arg1 withTransactionFinishedBlock:(id /* block */)arg2;
- (void)setAccount:(id)arg1;
- (void)setAuthenticationController:(id)arg1;
- (void)setBackgroundTaskAssertion:(id)arg1;
- (void)setConflictResolutionAttempts:(long long)arg1;
- (void)setCurrentTransaction:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDomain:(id)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setIsResolvingError:(bool)arg1;
- (void)setNetworkTypeObserver:(id)arg1;
- (void)setOperationQueue:(id)arg1;
- (void)setPendingTransactions:(id)arg1;
- (void)setQueue:(id)arg1;
- (void)setRequestURL:(id)arg1;
- (void)setShouldAuthenticateIfNecessary:(bool)arg1;
- (bool)shouldAuthenticateIfNecessary;

@end
