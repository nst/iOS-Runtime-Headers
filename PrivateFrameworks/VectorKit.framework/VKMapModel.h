/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKMapModel : VKModelObject <GEOExperimentConfigurationObserver, GEOResourceManifestTileGroupObserver, VKLabelModelDelegate, VKOverlayContainerDelegate, VKPolylineGroupOverlayObserver, VKPolylineOverlayRouteRibbonObserver, VKTileProviderClient> {
    bool  _activeMapLayers;
    struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { 
        struct StylesheetManager<gss::PropertyID> {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _activeStyleManager;
    GEOResourceManifestConfiguration * _additionalManifestConfiguration;
    VKTileProvider * _additionalManifestTileProvider;
    int  _annotationMarkerStyle;
    VKAnnotationModel * _annotationModel;
    unsigned char  _applicationUILayout;
    NSMutableSet * _blockingStylesheetObservers;
    VKBuildingFootprintMapModel * _buildingFootprintModel;
    VKTileProvider * _buildingTileProvider;
    bool  _buildingsAreVisible;
    struct Matrix<float, 4, 1> { 
        float _e[4]; 
    }  _clearColor;
    struct ClearItem { 
        unsigned char colorMask; 
        struct Matrix<float, 4, 1> { 
            float _e[4]; 
        } color; 
        bool clearDepthBuffer; 
        float depth; 
        unsigned char clearStencilBuffer; 
        unsigned int stencil; 
    }  _clearItem;
    VKCoastlineMapModel * _coastlineModel;
    double  _contentScale;
    struct shared_ptr<md::DataOverrideManager> { 
        struct DataOverrideManager {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _dataOverrideManager;
    VKDebugModel * _debugModel;
    struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { 
        struct StylesheetManager<gss::PropertyID> {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _defaultStyleManager;
    <VKMapModelDelegate> * _delegate;
    long long  _desiredMapMode;
    bool  _disableBuildingFootprints;
    bool  _disableGrid;
    bool  _disableLabels;
    bool  _disablePolygons;
    bool  _disableRasters;
    bool  _disableRoadClass;
    bool  _disableRoads;
    bool  _disableTransitLines;
    NSMutableArray * _drawOrder;
    NSMutableArray * _externalAnchors;
    bool  _forceMapDrawStyleUpdate;
    double  _forcedMaxZoomLevel;
    bool  _fullyDrawn;
    VKGridModel * _gridModel;
    VKGroundMapModel * _groundCoverModel;
    bool  _hasFailedTile;
    VKTimedAnimation * _highZoomTransitionAnimation;
    VKHybridRasterMapModel * _hybridRasterModel;
    VKRoadMapModel * _hybridRoadModel;
    struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { 
        struct StylesheetManager<gss::PropertyID> {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _hybridStyleManager;
    bool  _isTransitioningToTransit;
    VKLabelModel * _labelModel;
    bool  _limitingNavCameraHeight;
    long long  _loadingCount;
    NSLocale * _locale;
    double  _lodBias;
    GEOResourceManifestConfiguration * _manifestConfiguration;
    struct FeatureAttributeSet { 
        struct vector<gss::FeatureAttributePair, std::__1::allocator<gss::FeatureAttributePair> > { 
            struct FeatureAttributePair {} *__begin_; 
            struct FeatureAttributePair {} *__end_; 
            struct __compressed_pair<gss::FeatureAttributePair *, std::__1::allocator<gss::FeatureAttributePair> > { 
                struct FeatureAttributePair {} *__first_; 
            } __end_cap_; 
        } _attributes; 
    }  _mapFeatureStyleAttributes;
    NSMutableArray * _mapLayerSubmodels;
    long long  _mapMode;
    <VKMapModeObserver> * _mapModeObserver;
    unsigned long long  _mapPurpose;
    NSMutableArray * _mapTileSubmodels;
    long long  _mapType;
    int  _metroArea;
    VKTimedAnimation * _modeTransitionAnimation;
    float  _navMapModeTransitionZ;
    VKPolygonMapModel * _navPolygonModel;
    float  _navigationPuckSize;
    VKOverlayContainerModel * _overlayContainerModel;
    VKPolygonMapModel * _polygonModel;
    NSMutableSet * _polylineOverlays;
    VKRasterMapModel * _rasterModel;
    VKRasterOverlayMapModel * _rasterOverlayModel;
    VKTileProvider * _rasterOverlayProvider;
    VKRasterOverlayTileSource * _rasterOverlayTileSource;
    VKRasterMapModel * _rasterViewer;
    VKMapRasterizer * _rasterizer;
    VKRiverMapModel * _riverLineModel;
    VKRoadMapModel * _roadModel;
    VKRoadTrafficMapModel * _roadTrafficModel;
    <GEORoutePreloadSession> * _routePreloadSession;
    struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { 
        struct StylesheetManager<gss::PropertyID> {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _satelliteStyleManager;
    VKSceneConfiguration * _sceneConfiguration;
    struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { 
        struct StylesheetManager<gss::ScenePropertyID> {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _sceneManager;
    VKPolylineOverlay * _selectedPolyline;
    VKSelectedTransitLineMapModel * _selectedTransitLineModel;
    bool  _shouldNotifyFullyDrawn;
    bool  _shouldRasterize;
    bool  _showsBuildings;
    VKSkyModel * _skyModel;
    VKRasterMapModel * _standardRasterModel;
    struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { 
        struct StylesheetQuery<gss::PropertyID> {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _styleQuery;
    double  _styleTransitionProgress;
    unsigned char  _targetDisplay;
    VKTileProvider * _tileProvider;
    long long  _tileSize;
    NSMapTable * _tileSources;
    bool  _trafficEnabled;
    bool  _trafficIncidentsEnabled;
    struct unique_ptr<md::TrafficSharedResources, std::__1::default_delete<md::TrafficSharedResources> > { 
        struct __compressed_pair<md::TrafficSharedResources *, std::__1::default_delete<md::TrafficSharedResources> > { 
            struct TrafficSharedResources {} *__first_; 
        } __ptr_; 
    }  _trafficSharedResources;
    VKTrafficTileSource * _trafficSource;
    VKTransitLineMapModel * _transitLineModel;
    bool  _transitioningToNav;
    struct VehicleState { 
        bool _isParked; 
    }  _vehicleState;
    double  _zoomLevel;
}

@property (nonatomic, retain) GEOResourceManifestConfiguration *additionalManifestConfiguration;
@property (nonatomic) unsigned char applicationUILayout;
@property (nonatomic, readonly) VKBuildingFootprintMapModel *buildingFootprintModel;
@property (nonatomic, readonly) bool buildingsAreVisible;
@property (nonatomic) /* Warning: unhandled struct encoding: '{Matrix<float' */ struct  clearColor; /* unknown property attribute:  1>=[4f]} */
@property (nonatomic) double contentScale;
@property (nonatomic, readonly) long long currentMapMode;
@property (nonatomic, readonly) float currentRoadSignOffset;
@property (nonatomic, retain) NSArray *customFeatureDataSources;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <VKMapModelDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disableBuildingFootprints;
@property (nonatomic) bool disableGrid;
@property (nonatomic) bool disableLabels;
@property (nonatomic) bool disablePolygons;
@property (nonatomic) bool disableRasters;
@property (nonatomic) bool disableRoads;
@property (nonatomic) bool disableTransitLines;
@property (nonatomic, retain) NSArray *externalTrafficIncidents;
@property (nonatomic, retain) VKPolylineOverlayPainter *focusedLabelsPolylinePainter;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isFullyDrawn;
@property (nonatomic) bool labelMarkerSelectionEnabled;
@property (nonatomic) unsigned char labelScaleFactor;
@property (nonatomic) bool limitingNavCameraHeight;
@property (nonatomic) bool localizeLabels;
@property (nonatomic) double lodBias;
@property (nonatomic, readonly) GEOResourceManifestConfiguration *manifestConfiguration;
@property (nonatomic) long long mapType;
@property (nonatomic) float navMapModeTransitionZ;
@property (nonatomic) float navigationPuckSize;
@property (nonatomic) long long navigationShieldSize;
@property (nonatomic) unsigned long long neighborMode;
@property (nonatomic, readonly) NSArray *overlays;
@property (nonatomic, readonly) NSSet *persistentOverlays;
@property (nonatomic, readonly) NSArray *rasterOverlays;
@property (nonatomic) <VKRouteMatchedAnnotationPresentation> *routeLineSplitAnnotation;
@property (nonatomic, retain) <GEORoutePreloadSession> *routePreloadSession;
@property (nonatomic) struct PolylineCoordinate { unsigned int x1; float x2; } routeUserOffset;
@property (nonatomic, readonly) VKSceneConfiguration *sceneConfiguration;
@property (nonatomic) struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x1; struct __shared_weak_count {} *x2; } sceneManager;
@property (nonatomic, readonly) struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; } selectedLabelMarker;
@property (nonatomic) long long shieldIdiom;
@property (nonatomic) long long shieldSize;
@property (nonatomic) bool shouldLoadFallbackTiles;
@property (nonatomic, readonly) bool shouldRasterize;
@property (nonatomic, readonly) bool showingTrafficCasing;
@property (nonatomic) bool showsBuildings;
@property (nonatomic) bool showsPointsOfInterest;
@property (nonatomic) struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x1; struct __shared_weak_count {} *x2; } styleManager;
@property (readonly) Class superclass;
@property (nonatomic) unsigned char targetDisplay;
@property (nonatomic, readonly) VKMercatorTerrainHeightCache *terrainHeightCache;
@property (nonatomic, readonly) VKTileProvider *tileProvider;
@property (getter=isTrafficEnabled, nonatomic) bool trafficEnabled;
@property (getter=isTrafficIncidentsEnabled, nonatomic) bool trafficIncidentsEnabled;
@property (nonatomic, readonly) const struct TrafficSharedResources { struct TrafficSharedPipelineStates { struct shared_ptr<ggl::SolidTraffic::BasePipelineState> { struct BasePipelineState {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_1_1_1; struct shared_ptr<ggl::TrafficGlow::BasePipelineState> { struct BasePipelineState {} *x_2_2_1; struct __shared_weak_count {} *x_2_2_2; } x_1_1_2; struct shared_ptr<ggl::OptimizedTraffic::BasePipelineState> { struct BasePipelineState {} *x_3_2_1; struct __shared_weak_count {} *x_3_2_2; } x_1_1_3; } x1; /* Warning: unhandled struct encoding: '{TrafficSharedRenderStates={unique_ptr<ggl::RenderState' */ struct x2; }*trafficResources; /* unknown property attribute:  std::__1::default_delete<ggl::RenderState> >=^{RenderState}}}}^{IsoAlphaAtlas}} */
@property (nonatomic) struct VehicleState { bool x1; } vehicleState;
@property (nonatomic, readonly) NSArray *visibleTileSets;

+ (const char *)nameForRoadClass:(int)arg1;
+ (unsigned long long)numberOfRoadClasses;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_activateModel:(id)arg1;
- (void)_beginNavMapModeTransitionToMode:(unsigned char)arg1;
- (void)_deactivateModel:(id)arg1;
- (void)_forceLayout;
- (void)_localeChanged:(id)arg1;
- (void)_mapConfigurationDidChange;
- (bool)_modelIsActive:(id)arg1;
- (id)_rasterOverlayTileSourceForLevel:(unsigned long long)arg1;
- (void)_setStyleManagerFromMapType:(long long)arg1;
- (void)_setStyleTransitionProgress:(double)arg1 targetStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg2 step:(long long)arg3;
- (double)_styleTransitionProgress;
- (float)_tileSelectionScaleForContext:(struct LayoutContext { id x1; short x2; /* Warning: Unrecognized filer type: 'h' using 'void*' */ void*x3; void*x4; const void*x5; double x6; void*x7; void*x8; void*x9; const void*x10; void*x11; double x12; SEL x13; SEL x14; oneway int x15; void*x16; void*x17; void*x18; const void*x19; in short x20; float x21; out const void*x22; void*x23; void*x24; struct ViewTransform {} *x25; struct __shared_weak_count {} *x26; }*)arg1;
- (void)_transitFadeOutCompletionCallback;
- (void)_transitionFromMode:(long long)arg1 toMode:(long long)arg2 animated:(bool)arg3;
- (void)_updateOverlayTileSource;
- (void)_updateRasterOverlayZoomOverride;
- (void)_updateRegularTileProviderMode;
- (void)_updateTileExclusionAreas;
- (void)_updateZoomLevel:(struct LayoutContext { id x1; short x2; /* Warning: Unrecognized filer type: 'h' using 'void*' */ void*x3; void*x4; const void*x5; double x6; void*x7; void*x8; void*x9; const void*x10; void*x11; double x12; SEL x13; SEL x14; oneway int x15; void*x16; void*x17; void*x18; const void*x19; in short x20; float x21; out const void*x22; void*x23; void*x24; struct ViewTransform {} *x25; struct __shared_weak_count {} *x26; }*)arg1;
- (void)addAnnotationMarker:(id)arg1;
- (void)addCustomFeatureDataSource:(id)arg1;
- (void)addExternalAnchor:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)addPersistentOverlay:(id)arg1;
- (void)addRasterOverlay:(id)arg1;
- (void)addSubmodel:(id)arg1;
- (id)additionalManifestConfiguration;
- (id)annotationMarkers;
- (id)annotationModel;
- (unsigned char)applicationUILayout;
- (id)attributionsForCurrentRegion;
- (void)beginStyleAnimationGroup;
- (id)boundsForSelectedTransitLines;
- (id)buildingFootprintModel;
- (struct shared_ptr<md::FeatureMarker> { struct FeatureMarker {} *x1; struct __shared_weak_count {} *x2; })buildingMarkerAtScreenPoint:(struct CGPoint { double x1; double x2; })arg1 groundPoint:(struct Matrix<double, 3, 1> { double x1[3]; })arg2;
- (bool)buildingsAreVisible;
- (void)buildingsDidBecome3D:(bool)arg1;
- (bool)canPitch;
- (void)cancelTileRequests;
- (struct Matrix<float, 4, 1> { float x1[4]; })clearColor;
- (void)clearScene;
- (void)clearTileSources;
- (struct shared_ptr<md::LabelFeatureMarker> { struct LabelFeatureMarker {} *x1; struct __shared_weak_count {} *x2; })closestRoadMarkerForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)configureTileSources;
- (double)contentScale;
- (id)createSourceForLayer:(unsigned long long)arg1 tileSet:(id)arg2 useAdditionalManifest:(bool)arg3;
- (id)createSourceForLayer:(unsigned long long)arg1 useAdditionalManifest:(bool)arg2;
- (void)createTrafficTileSourceIfNecessary:(id)arg1;
- (long long)currentMapMode;
- (float)currentRoadSignOffset;
- (id)customFeatureDataSources;
- (void)dealloc;
- (void)debugHighlightFeatureMarker:(const struct shared_ptr<md::FeatureMarker> { struct FeatureMarker {} *x1; struct __shared_weak_count {} *x2; }*)arg1;
- (void)debugHighlightObjectAtPoint:(struct CGPoint { double x1; double x2; })arg1 highlightTarget:(unsigned char)arg2;
- (id)debugModel;
- (id)delegate;
- (void)deselectLabelMarker;
- (void)deselectTransitLineMarker;
- (id)detailedDescription;
- (id)detailedDescriptionDictionaryRepresentation;
- (void)didBeginTransitionToNavigation;
- (void)didBeginTransitionToTransit;
- (void)didEndNavigation;
- (void)didEndTransitionToTransit;
- (void)didReceiveMemoryWarning:(bool)arg1;
- (void)didStopLoadingTilesWithError:(id)arg1;
- (bool)disableBuildingFootprints;
- (bool)disableGrid;
- (bool)disableLabels;
- (bool)disablePolygons;
- (bool)disableRasters;
- (void)disableRoadClass:(bool)arg1 withRoadClass:(int)arg2;
- (bool)disableRoads;
- (bool)disableTransitLines;
- (void)endStyleAnimationGroup;
- (void)experimentConfigurationDidChange:(id)arg1;
- (id)externalAnchors;
- (id)externalTrafficIncidents;
- (struct shared_ptr<md::FeatureMarker> { struct FeatureMarker {} *x1; struct __shared_weak_count {} *x2; })featureMarkerAtScreenPoint:(struct CGPoint { double x1; double x2; })arg1 groundPoint:(struct Matrix<double, 3, 1> { double x1[3]; })arg2;
- (void)finishStyleBlend;
- (void)flushCaches:(bool)arg1;
- (id)focusedLabelsPolylinePainter;
- (void)forceMapType:(long long)arg1 animated:(bool)arg2;
- (void)foreachActiveLayer:(id)arg1;
- (void)gglLayoutScene:(id)arg1 withContext:(struct LayoutContext { id x1; short x2; /* Warning: Unrecognized filer type: 'h' using 'void*' */ void*x3; void*x4; const void*x5; double x6; void*x7; void*x8; void*x9; const void*x10; void*x11; double x12; SEL x13; SEL x14; oneway int x15; void*x16; void*x17; void*x18; const void*x19; in short x20; float x21; out const void*x22; void*x23; void*x24; struct ViewTransform {} *x25; struct __shared_weak_count {} *x26; }*)arg2 renderQueue:(struct RenderQueue { int (**x1)(); struct shared_ptr<ggl::RenderQueue> { struct RenderQueue {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; }*)arg3;
- (id)gridModel;
- (id)hybridRasterModel;
- (id)hybridRoadModel;
- (id)initWithTarget:(id)arg1 purpose:(unsigned long long)arg2 manifestConfiguration:(id)arg3 locale:(id)arg4;
- (void)insertRasterOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)insertRasterOverlay:(id)arg1 belowOverlay:(id)arg2;
- (bool)isFullyDrawn;
- (bool)isRoadClassDisabled:(int)arg1;
- (bool)isShowingNoDataPlaceholders;
- (bool)isTrafficEnabled;
- (bool)isTrafficIncidentsEnabled;
- (id)labelDebugString;
- (struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; })labelMarkerForCustomFeatureAnnotation:(id)arg1 dataSource:(id)arg2;
- (struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; })labelMarkerForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1 selectableLabelsOnly:(bool)arg2;
- (bool)labelMarkerSelectionEnabled;
- (struct vector<std::__1::shared_ptr<md::LabelMarker>, std::__1::allocator<std::__1::shared_ptr<md::LabelMarker> > > { struct shared_ptr<md::LabelMarker> {} *x1; struct shared_ptr<md::LabelMarker> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelMarker> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMarker> > > { struct shared_ptr<md::LabelMarker> {} *x_3_1_1; } x3; })labelMarkers;
- (id)labelModel;
- (id)labelModel:(id)arg1 mapTileForTile:(id)arg2 layer:(unsigned long long)arg3;
- (void)labelModel:(id)arg1 selectedLabelMarkerDidChangeState:(const struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }*)arg2;
- (void)labelModel:(id)arg1 selectedLabelMarkerWillDisappear:(const struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }*)arg2;
- (void)labelModelDidLayoutLabels:(id)arg1;
- (unsigned char)labelScaleFactor;
- (void)layoutScene:(id)arg1 withContext:(struct LayoutContext { id x1; short x2; /* Warning: Unrecognized filer type: 'h' using 'void*' */ void*x3; void*x4; const void*x5; double x6; void*x7; void*x8; void*x9; const void*x10; void*x11; double x12; SEL x13; SEL x14; oneway int x15; void*x16; void*x17; void*x18; const void*x19; in short x20; float x21; out const void*x22; void*x23; void*x24; struct ViewTransform {} *x25; struct __shared_weak_count {} *x26; }*)arg2;
- (bool)limitingNavCameraHeight;
- (bool)localizeLabels;
- (double)lodBias;
- (id)manifestConfiguration;
- (long long)mapType;
- (double)maxTileHeightAtPoint:(struct Mercator2<double> { double x1[2]; })arg1;
- (long long)maximumZoomLevelInView:(id)arg1;
- (long long)minimumZoomLevelInView:(id)arg1;
- (float)navMapModeTransitionZ;
- (float)navigationPuckSize;
- (long long)navigationShieldSize;
- (unsigned long long)neighborMode;
- (double)northYawAtZoom:(int)arg1;
- (id)overlayContainer:(id)arg1 painterForOverlay:(id)arg2;
- (id)overlayContainer:(id)arg1 roadTileForTile:(id)arg2;
- (void)overlayContainer:(id)arg1 showingOuterHaloOnLabelsDidChange:(bool)arg2;
- (bool)overlayContainerIsInNavigationMode:(id)arg1;
- (bool)overlayContainerIsInTransitMode:(id)arg1;
- (id)overlayContainerModel;
- (id)overlays;
- (void)performStylesheetDidChange;
- (void)performStylesheetDidReload;
- (void)performStylesheetDoneChanging;
- (void)performStylesheetTransitionDidProgress;
- (void)performStylesheetWillTransitionToDisplayStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg1;
- (id)persistentOverlays;
- (id)polygonModel;
- (void)polylineGroup:(id)arg1 didAddPolyline:(id)arg2;
- (void)polylineGroup:(id)arg1 didRemovePolyline:(id)arg2;
- (void)polylineGroup:(id)arg1 didSelectPolyline:(id)arg2;
- (void)polylineOverlay:(id)arg1 didUpdateRouteRibbon:(id)arg2;
- (float)ppi;
- (id)rasterModel;
- (id)rasterOverlays;
- (void)reloadStylesheet;
- (void)removeAnnotationMarker:(id)arg1;
- (void)removeCustomFeatureDataSource:(id)arg1;
- (void)removeExternalAnchor:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)removePersistentOverlay:(id)arg1;
- (void)removeRasterOverlay:(id)arg1;
- (void)requestStylesheetAnimation:(id)arg1 targetMapDisplayStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg2 setupHandler:(id)arg3;
- (void)reserveStencilRangesForScene:(id)arg1 context:(struct LayoutContext { id x1; short x2; /* Warning: Unrecognized filer type: 'h' using 'void*' */ void*x3; void*x4; const void*x5; double x6; void*x7; void*x8; void*x9; const void*x10; void*x11; double x12; SEL x13; SEL x14; oneway int x15; void*x16; void*x17; void*x18; const void*x19; in short x20; float x21; out const void*x22; void*x23; void*x24; struct ViewTransform {} *x25; struct __shared_weak_count {} *x26; }*)arg2 renderQueue:(struct RenderQueue { int (**x1)(); struct shared_ptr<ggl::RenderQueue> { struct RenderQueue {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; }*)arg3;
- (void)resetTileContainers;
- (void)resourceManifestManager:(id)arg1 didChangeActiveTileGroup:(id)arg2 fromOldTileGroup:(id)arg3;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (id)riverLineModel;
- (struct shared_ptr<md::LabelFeatureMarker> { struct LabelFeatureMarker {} *x1; struct __shared_weak_count {} *x2; })roadMarkerForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct vector<std::__1::shared_ptr<md::LabelFeatureMarker>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeatureMarker> > > { struct shared_ptr<md::LabelFeatureMarker> {} *x1; struct shared_ptr<md::LabelFeatureMarker> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeatureMarker> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeatureMarker> > > { struct shared_ptr<md::LabelFeatureMarker> {} *x_3_1_1; } x3; })roadMarkersForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)roadModel;
- (id)roadTrafficModel;
- (id)routeLineSplitAnnotation;
- (id)routePreloadSession;
- (struct PolylineCoordinate { unsigned int x1; float x2; })routeUserOffset;
- (id)sceneConfiguration;
- (struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x1; struct __shared_weak_count {} *x2; })sceneManager;
- (void)selectLabelMarker:(const struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }*)arg1;
- (void)selectTransitLineMarker:(id)arg1;
- (struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; })selectedLabelMarker;
- (id)selectedTransitLineIDs;
- (void)setAdditionalManifestConfiguration:(id)arg1;
- (void)setApplicationState:(unsigned char)arg1;
- (void)setApplicationUILayout:(unsigned char)arg1;
- (void)setClearColor:(struct Matrix<float, 4, 1> { float x1[4]; })arg1;
- (void)setContentScale:(double)arg1;
- (void)setCurrentLocationText:(id)arg1;
- (void)setCustomFeatureDataSources:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDesiredMapMode:(long long)arg1 immediate:(bool)arg2;
- (void)setDisableBuildingFootprints:(bool)arg1;
- (void)setDisableGrid:(bool)arg1;
- (void)setDisableLabels:(bool)arg1;
- (void)setDisablePolygons:(bool)arg1;
- (void)setDisableRasters:(bool)arg1;
- (void)setDisableRoads:(bool)arg1;
- (void)setDisableTransitLines:(bool)arg1;
- (void)setExternalTrafficIncidents:(id)arg1;
- (void)setFocusedLabelsPolylinePainter:(id)arg1;
- (void)setLabelMarkerSelectionEnabled:(bool)arg1;
- (void)setLabelScaleFactor:(unsigned char)arg1;
- (void)setLimitingNavCameraHeight:(bool)arg1;
- (void)setLocalizeLabels:(bool)arg1;
- (void)setLodBias:(double)arg1;
- (void)setMapType:(long long)arg1;
- (void)setMapType:(long long)arg1 animated:(bool)arg2;
- (void)setNavCameraIsDetached:(bool)arg1;
- (void)setNavMapModeTransitionZ:(float)arg1;
- (void)setNavigationPuckSize:(float)arg1;
- (void)setNavigationShieldSize:(long long)arg1;
- (void)setNeighborMode:(unsigned long long)arg1;
- (void)setRouteContext:(id)arg1;
- (void)setRouteLineSplitAnnotation:(id)arg1;
- (void)setRoutePreloadSession:(id)arg1;
- (void)setRouteUserOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (void)setSceneManager:(struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)setShieldIdiom:(long long)arg1;
- (void)setShieldSize:(long long)arg1;
- (void)setShouldLoadFallbackTiles:(bool)arg1;
- (void)setShowsBuildings:(bool)arg1;
- (void)setShowsPointsOfInterest:(bool)arg1;
- (void)setStyleManager:(struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)setStyleManager:(struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x1; struct __shared_weak_count {} *x2; })arg1 forRealistic:(bool)arg2;
- (void)setStylesheetMapDisplayStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg1;
- (void)setTargetDisplay:(unsigned char)arg1;
- (void)setTrafficEnabled:(bool)arg1;
- (void)setTrafficIncidentsEnabled:(bool)arg1;
- (void)setVehicleState:(struct VehicleState { bool x1; })arg1;
- (long long)shieldIdiom;
- (long long)shieldSize;
- (void)shouldFlushCaches:(id)arg1;
- (bool)shouldLoadFallbackTiles;
- (bool)shouldRasterize;
- (bool)showingTrafficCasing;
- (bool)showsBuildings;
- (bool)showsPointsOfInterest;
- (void)sizeDidChange:(struct CGSize { double x1; double x2; })arg1;
- (id)skyModel;
- (struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })sourceMapDisplayStyle;
- (void)startStylesheetAnimation:(id)arg1 targetMapDisplayStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg2;
- (struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x1; struct __shared_weak_count {} *x2; })styleManager;
- (void)stylesheetAnimationDidEnd:(bool)arg1;
- (void)stylesheetAnimationDidProgress:(float)arg1;
- (void)stylesheetAnimationWillStartFromStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg1 toStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg2;
- (bool)supportsMapDisplayStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg1;
- (unsigned char)targetDisplay;
- (id)terrainHeightCache;
- (id)tileProvider;
- (id)tileProviderForMapLayer:(unsigned long long)arg1;
- (void)tileProviderNeedsUpdate:(id)arg1;
- (id)tileSetForMapLayer:(unsigned long long)arg1 tileGroup:(id)arg2;
- (long long)tileSize;
- (int)tileStyleForMapLayer:(unsigned long long)arg1;
- (const struct TrafficSharedResources { struct TrafficSharedPipelineStates { struct shared_ptr<ggl::SolidTraffic::BasePipelineState> { struct BasePipelineState {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_1_1_1; struct shared_ptr<ggl::TrafficGlow::BasePipelineState> { struct BasePipelineState {} *x_2_2_1; struct __shared_weak_count {} *x_2_2_2; } x_1_1_2; struct shared_ptr<ggl::OptimizedTraffic::BasePipelineState> { struct BasePipelineState {} *x_3_2_1; struct __shared_weak_count {} *x_3_2_2; } x_1_1_3; } x1; struct TrafficSharedRenderStates { struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { struct RenderState {} *x_1_3_1; } x_1_2_1; } x_2_1_1; struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { struct RenderState {} *x_1_3_1; } x_2_2_1; } x_2_1_2; struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { struct RenderState {} *x_1_3_1; } x_3_2_1; } x_2_1_3; struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { struct RenderState {} *x_1_3_1; } x_4_2_1; } x_2_1_4; struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { struct RenderState {} *x_1_3_1; } x_5_2_1; } x_2_1_5; } x2; }*)trafficResources;
- (id)transitLineMarkersForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)transitLineMarkersInCurrentViewport;
- (id)transitModel;
- (void)updateMapDrawStyleWithContext:(struct LayoutContext { id x1; short x2; /* Warning: Unrecognized filer type: 'h' using 'void*' */ void*x3; void*x4; const void*x5; double x6; void*x7; void*x8; void*x9; const void*x10; void*x11; double x12; SEL x13; SEL x14; oneway int x15; void*x16; void*x17; void*x18; const void*x19; in short x20; float x21; out const void*x22; void*x23; void*x24; struct ViewTransform {} *x25; struct __shared_weak_count {} *x26; }*)arg1;
- (void)updateOverlayType;
- (void)updateRasterOverlayProviders:(id)arg1 withContext:(struct LayoutContext { id x1; short x2; /* Warning: Unrecognized filer type: 'h' using 'void*' */ void*x3; void*x4; const void*x5; double x6; void*x7; void*x8; void*x9; const void*x10; void*x11; double x12; SEL x13; SEL x14; oneway int x15; void*x16; void*x17; void*x18; const void*x19; in short x20; float x21; out const void*x22; void*x23; void*x24; struct ViewTransform {} *x25; struct __shared_weak_count {} *x26; }*)arg2;
- (struct VehicleState { bool x1; })vehicleState;
- (id)visibleTileSets;
- (void)willStartLoadingTiles;

@end
