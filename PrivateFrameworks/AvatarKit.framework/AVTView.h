/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AvatarKit.framework/AvatarKit
 */

@interface AVTView : SCNView {
    bool  _arMode;
    SCNTechnique * _arTechnique;
    AVTAvatar * _avatar;
    SCNNode * _avatarNode;
    <SCNCaptureDeviceOutputConsumer> * _captureDeviceOutputConsumer;
    bool  _captureImageIsTooDark;
    unsigned long long  _currentExpressionIndex;
    double  _currentlyRenderedTrackingDate;
    AVTHUDView * _debugView;
    bool  _directRetargetingMode;
    int  _droppedFrameCount;
    bool  _enableFaceTracking;
    bool  _enableReticle;
    AVTAvatarEnvironment * _environment;
    bool  _faceIsTracked;
    AVTFaceTracker * _faceTracker;
    <AVTViewFaceTrackingDelegate> * _faceTrackingDelegate;
    bool  _faceTrackingPaused;
    <SCNSceneRendererDelegate> * _fwdDelegate;
    bool  _isSensorCovered;
    AVTAvatar * _lastRenderedAvatar;
    unsigned long long  _lastTrackingUpdateTimestamp;
    NSLock * _lock;
    bool  _lockLookAt;
    AVTARMaskRenderer * _maskRenderer;
    unsigned long long  _noTrackingFrameCount;
    bool  _packetNeedRecording;
    double  _perfPacketUpdateTimestamp;
    NSTimer * _perfTimeRefreshTimer;
    struct { 
        struct os_unfair_lock_s { 
            unsigned int _os_unfair_lock_opaque; 
        } lock; 
        struct { /* ? */ } *head; 
        int current; 
        int capacity; 
        bool reached_max_capacity; 
    }  _perfTimes;
    bool  _showPerfHUD;
    struct __CVMetalTextureCache { } * _textureCache;
}

@property (nonatomic) bool arMode;
@property (nonatomic, retain) AVTAvatar *avatar;
@property (nonatomic, readonly) bool captureImageIsTooDark;
@property (nonatomic) bool enableFaceTracking;
@property (nonatomic) bool enableReticle;
@property (nonatomic, readonly) bool faceIsTracked;
@property (getter=faceTrackingIsPaused, nonatomic) bool faceTrackingPaused;
@property (getter=isSensorCovered, nonatomic, readonly) bool sensorCovered;

// Image: /System/Library/PrivateFrameworks/AvatarKit.framework/AvatarKit

- (void).cxx_destruct;
- (void)_UIOrientationDidChangeNotification:(id)arg1;
- (void)_animateToNoTrackingState:(bool)arg1;
- (void)_avtCommonInit;
- (void)_cancelDelayedtrackingLoss;
- (void)_delayedTrackingLoss;
- (void)_drawAtTime:(double)arg1;
- (void)_enablePhysics:(bool)arg1;
- (void)_fireTrackingLoss;
- (void)_refreshPerfTimesInfo;
- (void)_renderer:(id)arg1 didBuildSubdivDataForHash:(id)arg2 dataProvider:(id /* block */)arg3;
- (id)_renderer:(id)arg1 subdivDataForHash:(id)arg2;
- (void)_resetFaceToRandomPosition;
- (void)_updateAvatarForARMode:(bool)arg1;
- (void)_updateFocal;
- (void)_willRecord;
- (bool)allowTrackSmoothing;
- (bool)arMode;
- (id)arSession;
- (id)avatar;
- (void)avatarDidChange;
- (bool)captureImageIsTooDark;
- (double)currentAudioTime;
- (double)currentlyRenderedTrackingDate;
- (void)dealloc;
- (id)delegate;
- (void)didLostTrackingForAWhile;
- (bool)directRetargetingMode;
- (bool)enableFaceTracking;
- (bool)enableReticle;
- (id)environment;
- (bool)faceIsFullyActive;
- (bool)faceIsTracked;
- (id)faceTracker;
- (void)faceTracker:(id)arg1 session:(id)arg2 didFailWithError:(id)arg3;
- (void)faceTracker:(id)arg1 sessionInterruptionEnded:(id)arg2;
- (void)faceTracker:(id)arg1 sessionWasInterrupted:(id)arg2;
- (void)faceTrackerDidUpdate:(id)arg1 trackingInfo:(id)arg2;
- (id)faceTrackingDelegate;
- (bool)faceTrackingIsPaused;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 options:(id)arg2;
- (long long)interfaceOrientation;
- (bool)isDoubleBuffered;
- (bool)isSensorCovered;
- (void)layoutSubviews;
- (void)lockAvatar;
- (void)renderer:(id)arg1 didApplyAnimationsAtTime:(double)arg2;
- (void)renderer:(id)arg1 didApplyConstraintsAtTime:(double)arg2;
- (void)renderer:(id)arg1 didRenderScene:(id)arg2 atTime:(double)arg3;
- (void)renderer:(id)arg1 didSimulatePhysicsAtTime:(double)arg2;
- (void)renderer:(id)arg1 updateAtTime:(double)arg2;
- (void)renderer:(id)arg1 willRenderScene:(id)arg2 atTime:(double)arg3;
- (void)setArMode:(bool)arg1;
- (void)setAvatar:(id)arg1;
- (void)setCaptureImageIsTooDark:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDirectRetargetingMode:(bool)arg1;
- (void)setEnableFaceTracking:(bool)arg1;
- (void)setEnableReticle:(bool)arg1;
- (void)setFaceIsTracked:(bool)arg1;
- (void)setFaceTracker:(id)arg1;
- (void)setFaceTrackingDelegate:(id)arg1;
- (void)setFaceTrackingPaused:(bool)arg1;
- (void)setInterfaceOrientation:(long long)arg1;
- (void)setSensorCovered:(bool)arg1;
- (void)setShowPerfHUD:(bool)arg1;
- (void)setup;
- (void)setupOrientation;
- (bool)showPerfHUD;
- (struct UIImage { Class x1; }*)snapshotWithSize:(struct CGSize { double x1; double x2; })arg1;
- (struct UIImage { Class x1; }*)snapshotWithSize:(struct CGSize { double x1; double x2; })arg1 scaleFactor:(float)arg2;
- (id)transitionTexture;
- (void)unlockAvatar;
- (void)updateAtTime:(double)arg1;
- (void)updateForChangedFaceTrackingPaused;
- (void)warmupMemoji;
- (void)willUpdateAvatarWithNewFaceTrackingData:(double)arg1;

// Image: /System/Library/PrivateFrameworks/AvatarUI.framework/AvatarUI

+ (id)snapshotAVTView:(id)arg1 matchingViewSize:(id)arg2;

- (void)downcastWithAVTViewHandler:(id /* block */)arg1 recordViewHandler:(id /* block */)arg2;

@end
