/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PencilKit.framework/PencilKit
 */

@interface PKTiledView : UIView <PKDrawableView, PKSelectionDelegate, PKTiledCanvasViewDelegate, UIDropInteractionDelegate_Private, UIGestureRecognizerDelegate, UIScrollViewDelegate, _UIScrollViewLayoutObserver, _UIScrollViewScrollObserver> {
    NSArray * _additionalStrokes;
    long long  _aggd_cachedVisibleStrokeCount;
    bool  _aggd_didMergeWithCollaborator;
    UIView * _attachmentContainerView;
    PKDrawing * _cachedDrawingForHiddenAdditionalStrokes;
    NSArray * _cachedHiddenAdditionalStrokes;
    NSMutableArray * _cachedVisibleStrokesForDirtyDrawing;
    NSMutableArray * _cachedVisibleStrokesMinusHiddenStrokesForDirtyDrawing;
    PKTiledCanvasView * _canvasView;
    UITapGestureRecognizer * _clearSelectionGestureRecognizer;
    PKDrawing * _createdDrawingForTouchThatHitNothing;
    PKDrawing * _dirtyDrawing;
    UITouch * _drawingTouchThatHitNothing;
    UIDropInteraction * _dropInteraction;
    bool  _fingerDrawingEnabled;
    UIView * _gestureView;
    NSArray * _hideAdditionalStrokes;
    PKInlineInkPicker * _inkPicker;
    bool  _isLayingOut;
    PKDrawing * _isRenderingDrawing;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastContentOffset;
    PKLinedPaper * _linedPaper;
    PKAttachmentView * _liveAttachment;
    struct CGPoint { 
        double x; 
        double y; 
    }  _liveStrokeContentOffset;
    UIScrollView * _scrollView;
    PKSelectionController * _selectionController;
    bool  _shouldHideCanvasAfterScroll;
    bool  _showDebugOutlines;
    PKController * _tileController;
    long long  _tileLevel;
    double  _tileScale;
    double  _tileSize;
}

@property (nonatomic, readonly) NSArray *additionalStrokes;
@property (nonatomic) long long aggd_cachedVisibleStrokeCount;
@property (nonatomic) bool aggd_didMergeWithCollaborator;
@property (nonatomic) UIView *attachmentContainerView;
@property (nonatomic, copy) PKDrawing *cachedDrawingForHiddenAdditionalStrokes;
@property (nonatomic, copy) NSArray *cachedHiddenAdditionalStrokes;
@property (nonatomic, retain) NSMutableArray *cachedVisibleStrokesForDirtyDrawing;
@property (nonatomic, retain) NSMutableArray *cachedVisibleStrokesMinusHiddenStrokesForDirtyDrawing;
@property (nonatomic, retain) PKTiledCanvasView *canvasView;
@property (nonatomic, readonly) UITapGestureRecognizer *clearSelectionGestureRecognizer;
@property (nonatomic, retain) PKDrawing *createdDrawingForTouchThatHitNothing;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) UITouch *drawingTouchThatHitNothing;
@property (getter=isFingerDrawingEnabled, nonatomic) bool fingerDrawingEnabled;
@property (nonatomic, retain) UIView *gestureView;
@property (nonatomic, readonly) bool hasSelection;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSArray *hideAdditionalStrokes;
@property (nonatomic, copy) PKInk *ink;
@property (nonatomic, retain) PKInlineInkPicker *inkPicker;
@property (nonatomic) bool isLayingOut;
@property (nonatomic) PKDrawing *isRenderingDrawing;
@property (nonatomic) struct CGPoint { double x1; double x2; } lastContentOffset;
@property (nonatomic, copy) PKLinedPaper *linedPaper;
@property (nonatomic, retain) PKAttachmentView *liveAttachment;
@property (nonatomic) struct CGPoint { double x1; double x2; } liveStrokeContentOffset;
@property (nonatomic) UIScrollView *scrollView;
@property (nonatomic, readonly) PKSelectionController *selectionController;
@property (nonatomic) bool shouldHideCanvasAfterScroll;
@property (nonatomic) bool showDebugOutlines;
@property (readonly) Class superclass;
@property (nonatomic, retain) PKController *tileController;
@property (nonatomic) long long tileLevel;
@property (nonatomic) double tileScale;
@property (nonatomic) double tileSize;

+ (id)newInlineDrawing;
+ (bool)showDebugOutlines;

- (void).cxx_destruct;
- (void)_addGestureToClearSelection;
- (id)_attachmentForSelectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_canvasView:(id)arg1 didFinishRenderingStrokeOnRenderQueue:(id)arg2 inDrawing:(id)arg3;
- (void)_clearSelectionIfNecessary;
- (void)_copyFromCanvas:(id)arg1 intoAttachment:(id)arg2 hideCanvas:(bool)arg3 stroke:(id)arg4;
- (void)_didAddDrawingAttachmentView;
- (id)_drawingForUUID:(id)arg1;
- (long long)_dropInteraction:(id)arg1 dataOwnerForSession:(id)arg2;
- (void)_hideCanvas;
- (void)_layoutSubviews;
- (void)_observeScrollViewDidScroll:(id)arg1;
- (void)_scrollViewDidLayoutSubviews:(id)arg1;
- (long long)_totalVisibleStrokes;
- (void)_updateAttachmentHeightIfNecessaryForDrawing:(id)arg1;
- (void)_updateHeightOfAttachmentIfNecessary:(id)arg1;
- (id)_visibleTilesForAttachment:(id)arg1 includePartiallyVisible:(bool)arg2;
- (id)additionalStrokes;
- (long long)aggd_cachedVisibleStrokeCount;
- (bool)aggd_didMergeWithCollaborator;
- (void)applyCommand:(id)arg1 toDrawing:(id)arg2;
- (id)attachmentContainerView;
- (id)attachmentForUUID:(id)arg1;
- (id)attachments;
- (void)blitOldTilesIntoNewTiles;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsForDrawing:(id)arg1;
- (id)cachedDrawingForHiddenAdditionalStrokes;
- (id)cachedHiddenAdditionalStrokes;
- (id)cachedVisibleStrokesForDirtyDrawing;
- (id)cachedVisibleStrokesMinusHiddenStrokesForDirtyDrawing;
- (bool)canAddStroke;
- (bool)canBecomeFirstResponder;
- (bool)canModifyWhitespace;
- (void)cancelTileGeneration;
- (id)canvasView;
- (void)canvasView:(id)arg1 drawingDidChange:(id)arg2;
- (void)canvasViewDidCancelStroke:(id)arg1;
- (void)canvasViewDidEndStroke:(id)arg1;
- (void)canvasViewWillBeginNewStroke:(id)arg1 withTouch:(id)arg2;
- (id)clearSelectionGestureRecognizer;
- (struct CGPoint { double x1; double x2; })closestPointForPastedSelectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withDrawing:(id*)arg2;
- (void)copy:(id)arg1;
- (void)createInkPicker;
- (id)createdDrawingForTouchThatHitNothing;
- (void)cut:(id)arg1;
- (void)dealloc;
- (void)delete:(id)arg1;
- (void)didBeginDraggingSelection;
- (id)drawingForLiveAttachment;
- (id)drawingForSelectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)drawingForUUID:(id)arg1;
- (id)drawingTouchThatHitNothing;
- (SEL)drawingUndoSelector;
- (id)drawingUndoTarget;
- (bool)dropInteraction:(id)arg1 canHandleSession:(id)arg2;
- (void)dropInteraction:(id)arg1 performDrop:(id)arg2;
- (id)dropInteraction:(id)arg1 sessionDidUpdate:(id)arg2;
- (void)duplicate:(id)arg1;
- (id)generateTile:(struct CGPoint { double x1; double x2; })arg1 inAttachment:(id)arg2 rendering:(bool)arg3;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)gestureView;
- (void)getAttachment:(id)arg1 tileTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg2 strokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg3 paperTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg4;
- (void)getAttachment:(id)arg1 tileTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg2 strokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg3 paperTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg4 scrollViewContentOffset:(struct CGPoint { double x1; double x2; })arg5;
- (void)gpuActiveNotification;
- (bool)hasSelection;
- (id)hideAdditionalStrokes;
- (id)hitAttachment:(struct CGPoint { double x1; double x2; })arg1;
- (id)hitAttachment:(struct CGPoint { double x1; double x2; })arg1 includeStandinAttachment:(bool)arg2;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })imageTransform;
- (id)initInScrollView:(id)arg1;
- (id)ink;
- (id)inkPicker;
- (bool)insertAttachmentIfInBlankSpace:(struct CGPoint { double x1; double x2; })arg1;
- (bool)isFingerDrawingEnabled;
- (bool)isLayingOut;
- (id)isRenderingDrawing;
- (bool)isValidDropPointForStrokes:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })lastContentOffset;
- (id)linedPaper;
- (id)liveAttachment;
- (bool)liveDrawingIsAtEndOfDocument;
- (struct CGPoint { double x1; double x2; })liveStrokeContentOffset;
- (bool)needToUpdateViewFrame;
- (void)newCanvasView;
- (void)paste:(id)arg1;
- (void)performUndo:(id)arg1;
- (void)performUndoModifyStrokesCommand:(id)arg1;
- (void)performUndoSelectionCommand:(id)arg1;
- (void)pickInk;
- (struct CGPoint { double x1; double x2; })pointInStrokeSpace:(struct CGPoint { double x1; double x2; })arg1 inDrawing:(id)arg2;
- (void)renderAttachment:(id)arg1 intoCanvas:(id)arg2 showing:(bool)arg3;
- (void)resetSelectedStrokeStateForRenderer;
- (void)resizeTiles;
- (void)scrollContent:(struct CGPoint { double x1; double x2; })arg1;
- (id)scrollView;
- (id)selectionController;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })selectionDrawingTransform;
- (struct CGPoint { double x1; double x2; })selectionOffsetForDrawing:(id)arg1;
- (void)selectionRefreshWithChangeToDrawings:(id)arg1;
- (id)selectionTopView;
- (void)setAggd_cachedVisibleStrokeCount:(long long)arg1;
- (void)setAggd_didMergeWithCollaborator:(bool)arg1;
- (void)setAttachmentContainerView:(id)arg1;
- (void)setCachedDrawingForHiddenAdditionalStrokes:(id)arg1;
- (void)setCachedHiddenAdditionalStrokes:(id)arg1;
- (void)setCachedVisibleStrokesForDirtyDrawing:(id)arg1;
- (void)setCachedVisibleStrokesMinusHiddenStrokesForDirtyDrawing:(id)arg1;
- (void)setCanvasView:(id)arg1;
- (void)setCreatedDrawingForTouchThatHitNothing:(id)arg1;
- (void)setFingerDrawingEnabled:(bool)arg1;
- (void)setGestureView:(id)arg1;
- (void)setInk:(id)arg1;
- (void)setInkPicker:(id)arg1;
- (void)setIsLayingOut:(bool)arg1;
- (void)setIsRenderingDrawing:(id)arg1;
- (void)setLastContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setLinedPaper:(id)arg1;
- (void)setLiveAttachment:(id)arg1;
- (void)setLiveStrokeContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setScrollView:(id)arg1;
- (void)setShouldHideCanvasAfterScroll:(bool)arg1;
- (void)setShowDebugOutlines:(bool)arg1;
- (void)setTileController:(id)arg1;
- (void)setTileLevel:(long long)arg1;
- (void)setTileScale:(double)arg1;
- (void)setTileSize:(double)arg1;
- (bool)shouldHideCanvasAfterScroll;
- (bool)showDebugOutlines;
- (id)standInAttachmentView;
- (void)startedDrawingInBlankSpaceWithTouch:(id)arg1;
- (id)tileController;
- (id)tileForOffset:(struct CGPoint { double x1; double x2; })arg1 inAttachment:(id)arg2;
- (bool)tileIsVisibleForOffset:(struct CGPoint { double x1; double x2; })arg1 inAttachment:(id)arg2 distanceToMiddle:(double*)arg3;
- (long long)tileLevel;
- (double)tileScale;
- (double)tileSize;
- (void)toggleSelectedStrokes:(id)arg1 hide:(bool)arg2 inDrawing:(id)arg3 isErasing:(bool)arg4;
- (void)updateTilesForVisibleRect;
- (void)updateTilesForVisibleRectForceIfZooming:(bool)arg1;
- (void)updateTilesForVisibleRectRendering:(bool)arg1;
- (id)visibleAttachments;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleOnscreenBoundsForDrawing:(id)arg1;
- (id)visibleStrokesOnscreen:(id)arg1 forDrawing:(id)arg2;

@end
