/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TPFootnoteContainerLayout : TSDLayout <TSWPColumnMetrics, TSWPFootnoteMarkProvider, TSWPLayoutParent> {
    <TSWPFootnoteMarkProvider> * _footnoteMarkProvider;
    double  _footnoteSpacing;
    bool  _includeFootnoteSeparatorLine;
    double  _lineWidth;
    double  _maxFootnoteBlockHeight;
    bool  _vertical;
}

@property (nonatomic, readonly) bool alwaysStartsNewTarget;
@property (nonatomic, readonly) double blockHeight;
@property (nonatomic, readonly) unsigned long long columnCount;
@property (nonatomic, readonly) bool columnsAreLeftToRight;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } footnoteSeparatorLineFrame;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool includeFootnoteSeparatorLine;
@property (nonatomic, readonly) bool isEmpty;
@property (nonatomic, readonly) TSWPPadding *layoutMargins;
@property (nonatomic, readonly) double maxBlockHeight;
@property (nonatomic, readonly) bool shrinkTextToFit;
@property (readonly) Class superclass;
@property (nonatomic, readonly) double textScaleFactor;

- (void).cxx_destruct;
- (void)addFootnoteLayout:(id)arg1;
- (struct CGSize { double x1; double x2; })adjustedInsetsForTarget:(id)arg1;
- (bool)alwaysStartsNewTarget;
- (unsigned long long)autosizeFlagsForTextLayout:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })autosizedFrameForTextLayout:(id)arg1 textSize:(struct CGSize { double x1; double x2; })arg2;
- (double)blockHeight;
- (unsigned long long)columnCount;
- (bool)columnsAreLeftToRight;
- (id)computeLayoutGeometry;
- (id)dependentsOfTextLayout:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })footnoteSeparatorLineFrame;
- (double)gapForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2;
- (bool)includeFootnoteSeparatorLine;
- (id)initWithFootnoteMarkProvider:(id)arg1 vertical:(bool)arg2 lineWidth:(double)arg3 maxFootnoteBlockHeight:(double)arg4 footnoteSpacing:(double)arg5;
- (void)invalidateForAutosizingTextLayout:(id)arg1;
- (bool)isEmpty;
- (id)layoutMargins;
- (id)markStringForFootnoteReferenceStorage:(id)arg1;
- (id)markStringForFootnoteReferenceStorage:(id)arg1 ignoreDeletedFootnotes:(bool)arg2 forceDocumentEndnotes:(bool)arg3;
- (double)maxAutoGrowBlockHeightForTextLayout:(id)arg1;
- (double)maxBlockHeight;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })nonAutosizedFrameForTextLayout:(id)arg1;
- (double)positionForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2 target:(id)arg3 outWidth:(double*)arg4 outGap:(double*)arg5;
- (void)removeAllFootnoteLayouts;
- (void)removeFootnoteLayout:(id)arg1;
- (void)removeFootnoteLayoutWithInfo:(id)arg1;
- (Class)repClassForTextLayout:(id)arg1;
- (Class)repClassOverride;
- (void)setFootnoteSpacing:(long long)arg1;
- (void)setIncludeFootnoteSeparatorLine:(bool)arg1;
- (void)setLineWidth:(double)arg1;
- (bool)shouldProvideSizingGuides;
- (bool)shrinkTextToFit;
- (bool)textIsVertical;
- (bool)textIsVerticalForFootnoteReferenceStorage:(id)arg1;
- (bool)textLayoutShouldLayoutVertically:(id)arg1;
- (void)trimFootnoteLayoutsFromIndex:(unsigned long long)arg1;
- (void)validate;
- (int)verticalAlignmentForTextLayout:(id)arg1;
- (double)widthForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2;

@end
