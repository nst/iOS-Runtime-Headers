/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VideosUI.framework/VideosUI
 */

@interface VUIStoreMediaItem_iOS : VUILibraryMediaItem_iOS <TVPContentKeyLoading, TVPMediaItemReportingDelegate, VUIStoreFPSKeyLoaderDelegate> {
    NSString * _alternateAssetURLString;
    NSURL * _downloadDestinationURL;
    VUIStoreDownloadMonitor * _downloadMonitor;
    NSNumber * _downloadToken;
    NSNumber * _fileSize;
    NSDictionary * _fpsAdditionalServerParams;
    NSURL * _fpsCertificateURL;
    NSError * _fpsKeyError;
    NSURL * _fpsKeyServerURL;
    unsigned long long  _loadingContext;
    bool  _needsRentalCheckin;
    NSObject * _parentReportingToken;
    long long  _playbackType;
    NSURL * _playbackURL;
    NSDictionary * _sinfsDict;
    NSNumber * _startTime;
    VUIStoreFPSKeyLoader * _storeFPSKeyLoader;
}

@property (nonatomic, retain) NSString *alternateAssetURLString;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSURL *downloadDestinationURL;
@property (nonatomic, retain) VUIStoreDownloadMonitor *downloadMonitor;
@property (nonatomic, retain) NSNumber *downloadToken;
@property (nonatomic, retain) NSNumber *fileSize;
@property (nonatomic, copy) NSDictionary *fpsAdditionalServerParams;
@property (nonatomic, copy) NSURL *fpsCertificateURL;
@property (nonatomic, retain) NSError *fpsKeyError;
@property (nonatomic, copy) NSURL *fpsKeyServerURL;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long loadingContext;
@property (nonatomic) bool needsRentalCheckin;
@property (nonatomic, retain) NSObject *parentReportingToken;
@property (nonatomic) long long playbackType;
@property (nonatomic, retain) NSURL *playbackURL;
@property (nonatomic, retain) NSDictionary *sinfsDict;
@property (nonatomic) NSNumber *startTime;
@property (nonatomic, retain) VUIStoreFPSKeyLoader *storeFPSKeyLoader;
@property (getter=isStreamingHLS, nonatomic, readonly) bool streamingHLS;
@property (readonly) Class superclass;

+ (void)initialize;

- (void).cxx_destruct;
- (id)_adamIDString;
- (bool)_allowedToPlayWhileOnCellularNetwork;
- (void)_checkInRental;
- (void)_checkoutRentalWithCheckoutType:(unsigned long long)arg1 startPlaybackClock:(bool)arg2 completion:(id /* block */)arg3;
- (void)_configureForLocalPlaybackWithURL:(id)arg1 completion:(id /* block */)arg2;
- (void)_configureForPlaybackFromExistingDownload:(id)arg1 downloadManager:(id)arg2 completion:(id /* block */)arg3;
- (void)_configureForStreamingPlaybackWithCompletion:(id /* block */)arg1;
- (void)_deleteDownloadKeyCookieForURL:(id)arg1;
- (id)_downloadForThisMediaItemReturningDownloadManager:(id*)arg1;
- (void)_externalPlaybackTypeDidChange:(id)arg1;
- (id)_iTunesStoreContentInfo;
- (id)_iTunesStoreContentPurchasedMediaKind;
- (bool)_loadingCancelled:(unsigned long long)arg1;
- (id)_offlineKeyDataForKeyRequest:(id)arg1;
- (void)_performStreamingRedownloadWithCompletion:(id /* block */)arg1;
- (void)_persistOfflineKeyData:(id)arg1 forKeyRequest:(id)arg2;
- (id)_rentalEndDate;
- (id)_rentalExpirationDate;
- (id)_rentalPlaybackEndDate;
- (void)_setDownloadKeyCookieWithURL:(id)arg1 downloadKey:(id)arg2;
- (void)_updateRentalPlaybackStartDate:(id)arg1;
- (void)_userPlaybackSettingsDidChange:(id)arg1;
- (id)_videoPlaybackTypeDescription;
- (id)alternateAssetURLString;
- (void)cleanUpMediaItem;
- (void)dealloc;
- (id)downloadDestinationURL;
- (id)downloadMonitor;
- (id)downloadToken;
- (id)fileSize;
- (id)fpsAdditionalServerParams;
- (id)fpsCertificateURL;
- (id)fpsKeyError;
- (id)fpsKeyServerURL;
- (bool)hasTrait:(id)arg1;
- (id)initWithAdamID:(long long)arg1;
- (id)initWithMPMediaItem:(id)arg1;
- (bool)isStreamingHLS;
- (void)loadFairPlayStreamingKeyRequests:(id)arg1;
- (unsigned long long)loadingContext;
- (void)mediaItemAllInitialLoadingComplete:(id)arg1 totalTime:(double)arg2 player:(id)arg3;
- (id)mediaItemMetadataForProperty:(id)arg1;
- (id)mediaItemURL;
- (bool)needsRentalCheckin;
- (id)parentReportingToken;
- (long long)playbackType;
- (id)playbackURL;
- (void)prepareForLoadingWithCompletion:(id /* block */)arg1;
- (void)prepareForPlaybackInitiationWithCompletion:(id /* block */)arg1;
- (id)replacementErrorForPlaybackError:(id)arg1;
- (id)reportingDelegate;
- (void)setAlternateAssetURLString:(id)arg1;
- (void)setDownloadDestinationURL:(id)arg1;
- (void)setDownloadMonitor:(id)arg1;
- (void)setDownloadToken:(id)arg1;
- (void)setFileSize:(id)arg1;
- (void)setFpsAdditionalServerParams:(id)arg1;
- (void)setFpsCertificateURL:(id)arg1;
- (void)setFpsKeyError:(id)arg1;
- (void)setFpsKeyServerURL:(id)arg1;
- (void)setLoadingContext:(unsigned long long)arg1;
- (void)setNeedsRentalCheckin:(bool)arg1;
- (void)setParentReportingToken:(id)arg1;
- (void)setPlaybackType:(long long)arg1;
- (void)setPlaybackURL:(id)arg1;
- (void)setSinfsDict:(id)arg1;
- (void)setStartTime:(id)arg1;
- (void)setStoreFPSKeyLoader:(id)arg1;
- (id)sinfsDict;
- (id)startTime;
- (id)storeFPSKeyLoader;
- (void)storeFPSKeyLoader:(id)arg1 didLoadOfflineKeyData:(id)arg2 forKeyRequest:(id)arg3;
- (void)storeFPSKeyLoader:(id)arg1 didReceiveUpdatedRentalExpirationDate:(id)arg2 playbackStartDate:(id)arg3;
- (void)storeFPSKeyLoader:(id)arg1 willFailWithError:(id)arg2 forKeyRequest:(id)arg3;

@end
