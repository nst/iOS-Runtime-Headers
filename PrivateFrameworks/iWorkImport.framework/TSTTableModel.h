/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TSReading.framework/TSReading
 */

@interface TSTTableModel : TSPObject {
    TSTCellDictionary * mCellsPendingWrite;
    TSTTableDataStore * mDataStore;
    struct _TSTDefaultCellBlock { 
        TSTCell *defaultBodyCell; 
        TSTCell *defaultHeaderRowCell; 
        TSTCell *defaultHeaderColumnCell; 
        TSTCell *defaultFooterRowCell; 
    }  mDefaultCells;
    double  mDefaultColumnWidth;
    double  mDefaultRowHeight;
    TSWPStorage * mDeprecatedProvider;
    struct __CFUUID { } * mFromTableID;
    bool  mHeaderColumnsFrozen;
    bool  mHeaderRowsFrozen;
    unsigned short  mNumberOfColumns;
    unsigned short  mNumberOfFilteredRows;
    unsigned short  mNumberOfFooterRows;
    unsigned short  mNumberOfHeaderColumns;
    unsigned short  mNumberOfHeaderRows;
    unsigned short  mNumberOfHiddenColumns;
    unsigned short  mNumberOfHiddenRows;
    unsigned short  mNumberOfRows;
    unsigned short  mNumberOfUserHiddenColumns;
    unsigned short  mNumberOfUserHiddenRows;
    unsigned long long  mPresetIndex;
    bool  mRepeatingHeaderColumnsEnabled;
    bool  mRepeatingHeaderRowsEnabled;
    bool  mStyleApplyClearsAll;
    struct { 
        TSTTableStyle *tableStyle; 
        TSTCellStyle *bodyCellStyle; 
        TSTCellStyle *headerRowCellStyle; 
        TSTCellStyle *headerColumnCellStyle; 
        TSTCellStyle *footerRowCellStyle; 
        TSWPParagraphStyle *bodyTextStyle; 
        TSWPParagraphStyle *headerRowTextStyle; 
        TSWPParagraphStyle *headerColumnTextStyle; 
        TSWPParagraphStyle *footerRowTextStyle; 
        TSWPParagraphStyle *tableNameStyle; 
        TSWPShapeStyle *tableNameShapeStyle; 
    }  mStyles;
    struct __CFUUID { } * mTableID;
    NSString * mTableName;
    bool  mTableNameBorderEnabled;
    bool  mTableNameEnabled;
    double  mTableNameHeight;
    bool  mWasUnarchivedFromAProvidedTable;
}

@property (nonatomic, readonly) TSDFill *backgroundFill;
@property (nonatomic, readonly) TSTCellStyle *bodyCellStyle;
@property (nonatomic, readonly) TSDStroke *bodyColumnStroke;
@property (nonatomic, readonly) TSDFill *bodyFill;
@property (nonatomic, readonly) TSDStroke *bodyRowStroke;
@property (nonatomic, readonly) TSWPParagraphStyle *bodyTextStyle;
@property (nonatomic, readonly) TSDStroke *borderStrokeEvenIfNotVisible;
@property (nonatomic, readonly) TSTCellDictionary *cellsPendingWrite;
@property NSArray *columnWidths;
@property (nonatomic, readonly) TSTCell *defaultBodyCell;
@property (nonatomic, readonly) TSTCell *defaultFooterRowCell;
@property (nonatomic, readonly) TSTCell *defaultHeaderColumnCell;
@property (nonatomic, readonly) TSTCell *defaultHeaderRowCell;
@property (nonatomic, readonly) TSKDocumentRoot *documentRoot;
@property (nonatomic, readonly) TSDStroke *footerRowBodyColumnStroke;
@property (nonatomic, readonly) TSDStroke *footerRowBodyRowStroke;
@property (nonatomic, readonly) TSDStroke *footerRowBorderStroke;
@property (nonatomic, readonly) TSTCellStyle *footerRowCellStyle;
@property (nonatomic, readonly) TSDStroke *footerRowSeparatorStroke;
@property (nonatomic, readonly) TSWPParagraphStyle *footerRowTextStyle;
@property (nonatomic, readonly) TSDFill *footerRowsFill;
@property (nonatomic, readonly) struct __CFUUID { }*fromTableID;
@property (nonatomic, readonly) bool hasAlternatingRows;
@property (nonatomic, readonly) bool hasTableBorder;
@property (nonatomic, readonly) TSDStroke *headerColumnBodyColumnStroke;
@property (nonatomic, readonly) TSDStroke *headerColumnBodyRowStroke;
@property (nonatomic, readonly) TSDStroke *headerColumnBorderStroke;
@property (nonatomic, readonly) TSTCellStyle *headerColumnCellStyle;
@property (nonatomic, readonly) TSDStroke *headerColumnSeparatorStroke;
@property (nonatomic, readonly) TSWPParagraphStyle *headerColumnTextStyle;
@property (nonatomic, readonly) TSDFill *headerColumnsFill;
@property (nonatomic) bool headerColumnsFrozen;
@property (nonatomic, readonly) TSDStroke *headerRowBodyColumnStroke;
@property (nonatomic, readonly) TSDStroke *headerRowBodyRowStroke;
@property (nonatomic, readonly) TSDStroke *headerRowBorderStroke;
@property (nonatomic, readonly) TSTCellStyle *headerRowCellStyle;
@property (nonatomic, readonly) TSDStroke *headerRowSeparatorStroke;
@property (nonatomic, readonly) TSWPParagraphStyle *headerRowTextStyle;
@property (nonatomic, readonly) TSDFill *headerRowsFill;
@property (nonatomic) bool headerRowsFrozen;
@property (nonatomic) unsigned short numberOfColumns;
@property (nonatomic) unsigned short numberOfFooterRows;
@property (nonatomic) unsigned short numberOfHeaderColumns;
@property (nonatomic) unsigned short numberOfHeaderRows;
@property (nonatomic, readonly) unsigned short numberOfHiddenColumns;
@property (nonatomic, readonly) unsigned short numberOfHiddenRows;
@property (nonatomic) unsigned short numberOfRows;
@property (nonatomic, readonly) unsigned short numberOfUserHiddenColumns;
@property (nonatomic, readonly) unsigned short numberOfUserHiddenRows;
@property (nonatomic, readonly) unsigned short numberOfVisibleBodyColumns;
@property (nonatomic, readonly) unsigned short numberOfVisibleBodyRows;
@property (nonatomic, readonly) TSDStroke *parentBorderStroke;
@property (nonatomic) unsigned long long presetIndex;
@property (nonatomic) bool repeatingHeaderColumnsEnabled;
@property (nonatomic) bool repeatingHeaderRowsEnabled;
@property NSArray *rowHeights;
@property (nonatomic) bool styleApplyClearsAll;
@property (nonatomic, readonly) struct __CFUUID { }*tableID;
@property (nonatomic, retain) NSString *tableName;
@property (nonatomic) bool tableNameBorderEnabled;
@property (nonatomic, readonly) TSDStroke *tableNameBorderStroke;
@property (nonatomic) bool tableNameEnabled;
@property (nonatomic) double tableNameHeight;
@property (nonatomic, readonly) TSWPShapeStyle *tableNameShapeStyle;
@property (nonatomic, readonly) TSWPParagraphStyle *tableNameStyle;
@property (nonatomic, readonly) TSTTableStyle *tableStyle;
@property (nonatomic) bool wasUnarchivedFromAProvidedTable;

+ (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })cellRangeForTableArea:(unsigned int)arg1 givenTableSize:(struct { unsigned short x1; unsigned short x2; })arg2 numberOfHeaderRows:(unsigned short)arg3 numberOfFooterRows:(unsigned short)arg4 numberOfHeaderColumns:(unsigned short)arg5;
+ (unsigned int)tableAreaForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 inTableWithHeaderColumns:(unsigned short)arg2 headerRows:(unsigned short)arg3 footerRows:(unsigned short)arg4 totalRows:(unsigned short)arg5;
+ (id)unnamedTableString;

- (void)adoptStylesheet:(id)arg1 withMapper:(id)arg2;
- (id)allRichTextPayloadStorages;
- (id)backgroundFill;
- (id)bandedFillObject;
- (id)bodyCellStyle;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })bodyColumnRange;
- (id)bodyColumnStroke;
- (id)bodyFill;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })bodyRange;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })bodyRowRange;
- (id)bodyRowStroke;
- (id)bodyTextStyle;
- (id)borderStrokeEvenIfNotVisible;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })cellRangeForTableArea:(unsigned int)arg1;
- (id)cellRegionWithConditionalStyleMatchingCell:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (id)cellsPendingWrite;
- (id)columnWidths;
- (id)dataStore;
- (void)dealloc;
- (id)defaultBodyCell;
- (int)defaultCell:(id)arg1 forTableArea:(unsigned int)arg2;
- (id)defaultCellForTableArea:(unsigned int)arg1;
- (id)defaultCellStyleForTableArea:(unsigned int)arg1;
- (id)defaultFooterRowCell;
- (id)defaultHeaderColumnCell;
- (id)defaultHeaderRowCell;
- (void)defaultStrokesForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 inTableWithHeaderColumns:(unsigned short)arg2 headerRows:(unsigned short)arg3 footerRows:(unsigned short)arg4 totalColumns:(unsigned short)arg5 totalRows:(unsigned short)arg6 tableArea:(unsigned int)arg7 outTopStroke:(id*)arg8 outLeftStroke:(id*)arg9 outBottomStroke:(id*)arg10 outRightStroke:(id*)arg11;
- (void)defaultStrokesForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 outTopStroke:(id*)arg2 outLeftStroke:(id*)arg3 outBottomStroke:(id*)arg4 outRightStroke:(id*)arg5;
- (id)defaultTextStyleForTableArea:(unsigned int)arg1;
- (id)documentRoot;
- (id)footerRowBodyColumnStroke;
- (id)footerRowBodyRowStroke;
- (id)footerRowBorderStroke;
- (id)footerRowCellStyle;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })footerRowRange;
- (id)footerRowSeparatorStroke;
- (id)footerRowTextStyle;
- (id)footerRowsFill;
- (struct __CFUUID { }*)fromTableID;
- (bool)hasAlternatingRows;
- (bool)hasMergeRanges;
- (bool)hasTableBorder;
- (id)headerColumnBodyColumnStroke;
- (id)headerColumnBodyRowStroke;
- (id)headerColumnBorderStroke;
- (id)headerColumnCellStyle;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })headerColumnRange;
- (id)headerColumnSeparatorStroke;
- (id)headerColumnTextStyle;
- (id)headerColumnsFill;
- (bool)headerColumnsFrozen;
- (id)headerRowBodyColumnStroke;
- (id)headerRowBodyRowStroke;
- (id)headerRowBorderStroke;
- (id)headerRowCellStyle;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })headerRowRange;
- (id)headerRowSeparatorStroke;
- (id)headerRowTextStyle;
- (id)headerRowsFill;
- (bool)headerRowsFrozen;
- (int)hidingStateForColumn:(unsigned char)arg1;
- (int)hidingStateForRow:(unsigned short)arg1;
- (id)init;
- (id)initWithContext:(id)arg1 fromSourceModel:(id)arg2 region:(id)arg3 tableInfo:(id)arg4;
- (id)initWithContext:(id)arg1 rows:(unsigned short)arg2 columns:(unsigned short)arg3 styles:(id)arg4 tableInfo:(id)arg5;
- (bool)isColumnHidden:(unsigned char)arg1 forAction:(int)arg2;
- (bool)isRowHidden:(unsigned short)arg1 forAction:(int)arg2;
- (void)mapTableStylesToStylesheet:(id)arg1 withMapper:(id)arg2;
- (id)mergedGridIndicesForDirection:(int)arg1;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })minPopulatedCellRange;
- (void)moveCalcEngineReferencesFromSourceTable:(struct __CFUUID { }*)arg1 sourceRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg2 sourceOffset:(struct { int x1; int x2; })arg3;
- (unsigned short)numberOfColumns;
- (unsigned short)numberOfFooterRows;
- (unsigned short)numberOfHeaderColumns;
- (unsigned short)numberOfHeaderRows;
- (unsigned short)numberOfHiddenColumns;
- (unsigned short)numberOfHiddenRows;
- (unsigned short)numberOfRows;
- (unsigned short)numberOfUserHiddenColumns;
- (unsigned short)numberOfUserHiddenRows;
- (unsigned short)numberOfVisibleBodyColumns;
- (unsigned short)numberOfVisibleBodyRows;
- (void)p_fetchCellHoldingReadLock:(void*)arg1 returnCode:(void*)arg2;
- (void)p_releaseExistingDefaultStyles;
- (void)p_scaleStrokeFromProperty:(int)arg1 style:(id)arg2 pmap:(id)arg3 scale:(double)arg4;
- (void)p_scaleStrokesOnCell:(id)arg1 atCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2 transformedObjects:(id)arg3 scale:(double)arg4;
- (id)parentBorderStroke;
- (unsigned long long)presetIndex;
- (void)private_validateMergeCellsPedantically;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })range;
- (bool)repeatingHeaderColumnsEnabled;
- (bool)repeatingHeaderRowsEnabled;
- (void)resetStyles:(id)arg1;
- (id)rowHeights;
- (void)setBodyCellStyle:(id)arg1;
- (void)setBodyTextStyle:(id)arg1;
- (void)setColumnWidths:(id)arg1;
- (void)setDrawableIsBeingCopied:(bool)arg1;
- (void)setFooterRowCellStyle:(id)arg1;
- (void)setFooterRowTextStyle:(id)arg1;
- (void)setHeaderColumnCellStyle:(id)arg1;
- (void)setHeaderColumnTextStyle:(id)arg1;
- (void)setHeaderColumnsFrozen:(bool)arg1;
- (void)setHeaderRowCellStyle:(id)arg1;
- (void)setHeaderRowTextStyle:(id)arg1;
- (void)setHeaderRowsFrozen:(bool)arg1;
- (void)setHeight:(double)arg1 ofRow:(unsigned short)arg2;
- (void)setNumberOfColumns:(unsigned short)arg1;
- (void)setNumberOfFooterRows:(unsigned short)arg1;
- (void)setNumberOfHeaderColumns:(unsigned short)arg1;
- (void)setNumberOfHeaderRows:(unsigned short)arg1;
- (void)setNumberOfRows:(unsigned short)arg1;
- (void)setPresetIndex:(unsigned long long)arg1;
- (void)setRepeatingHeaderColumnsEnabled:(bool)arg1;
- (void)setRepeatingHeaderRowsEnabled:(bool)arg1;
- (void)setRowHeights:(id)arg1;
- (void)setStorageParentToInfo:(id)arg1;
- (void)setStyleApplyClearsAll:(bool)arg1;
- (void)setTableID:(struct __CFUUID { }*)arg1;
- (void)setTableName:(id)arg1;
- (void)setTableNameBorderEnabled:(bool)arg1;
- (void)setTableNameEnabled:(bool)arg1;
- (void)setTableNameHeight:(double)arg1;
- (void)setTableNameShapeStyle:(id)arg1;
- (void)setTableNameStyle:(id)arg1;
- (void)setTableStyle:(id)arg1;
- (void)setWasUnarchivedFromAProvidedTable:(bool)arg1;
- (void)setWidth:(double)arg1 ofColumn:(unsigned char)arg2;
- (void)setupDefaultCells;
- (bool)styleApplyClearsAll;
- (unsigned int)tableAreaForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (struct __CFUUID { }*)tableID;
- (id)tableName;
- (bool)tableNameBorderEnabled;
- (id)tableNameBorderStroke;
- (bool)tableNameEnabled;
- (double)tableNameHeight;
- (id)tableNameShapeStyle;
- (id)tableNameStyle;
- (id)tableStyle;
- (void)transformStrokes:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 transformedObjects:(id)arg2 inBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)upgradeFromPreUFF;
- (bool)useBandedFill;
- (void)validate;
- (void)validateStyles;
- (bool)wasUnarchivedFromAProvidedTable;

@end
