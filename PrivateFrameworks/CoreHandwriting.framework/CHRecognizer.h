/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHRecognizer : NSObject {
    NSCharacterSet * _activeCharacterSet;
    CHDrawing * _cachedDrawing;
    struct map<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { 
        struct __tree<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { 
            struct __tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __first_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true> > { 
                unsigned long long __first_; 
            } __pair3_; 
        } __tree_; 
    }  _cachedResults;
    struct CHNeuralNetwork { int (**x1)(); int x2; char *x3; unsigned long long x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; } * _engine;
    struct Network { unsigned int x1; unsigned int x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; unsigned int x4; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_5_1_1; struct NetworkNode {} *x_5_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_5_1_3; } x5; struct vector<NetworkEdge, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_6_1_1; struct NetworkEdge {} *x_6_1_2; struct __compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_3_2_1; } x_6_1_3; } x6; } * _formatGrammarFST;
    struct CHNeuralNetwork { int (**x1)(); int x2; char *x3; unsigned long long x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; } * _freeformEngine;
    void ** _icuTransliterator;
    void * _languageModel;
    unsigned long long  _lastCharacterStrokeCount;
    NSMutableIndexSet * _lastCharacterStrokeIndexes;
    NSURL * _learningDictionaryURL;
    unsigned long long  _maxRecognitionResultCount;
    struct __Mecabra { } * _mecabra;
    void * _mecabraDynamicLexicon;
    void * _mecabraStaticLexicon;
    struct CGSize { 
        double width; 
        double height; 
    }  _minimumDrawingSize;
    struct Network { unsigned int x1; unsigned int x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; unsigned int x4; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_5_1_1; struct NetworkNode {} *x_5_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_5_1_3; } x5; struct vector<NetworkEdge, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_6_1_1; struct NetworkEdge {} *x_6_1_2; struct __compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_3_2_1; } x_6_1_3; } x6; } * _radicalClusterFST;
    int  _recognitionMode;
    NSObject<OS_dispatch_queue> * _recognitionQueue;
    int  _recognitionType;
    bool  _saveDrawingUntilNextCandidateAccepted;
    CHDrawing * _savedDrawing;
    NSString * _savedTop1CandidateString;
    struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; } * _scVariantMap;
    struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; } * _tcVariantMap;
}

@property (nonatomic, retain) NSCharacterSet *activeCharacterSet;
@property (nonatomic, copy) CHDrawing *cachedDrawing;
@property (nonatomic) /* Warning: unhandled struct encoding: '{map<std::__1::set<unsigned long' */ struct  cachedResults; /* unknown property attribute:  true> >=Q}}} */
@property (nonatomic) struct CHNeuralNetwork { int (**x1)(); int x2; char *x3; unsigned long long x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; }*engine;
@property (nonatomic) /* Warning: unhandled struct encoding: '{Network=II{basic_string<char' */ struct *formatGrammarFST; /* unknown property attribute:  std::__1::less<uint128> >=Q}}}} */
@property (nonatomic) struct CHNeuralNetwork { int (**x1)(); int x2; char *x3; unsigned long long x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; }*freeformEngine;
@property (nonatomic) void**icuTransliterator;
@property (nonatomic) void*languageModel;
@property (nonatomic) unsigned long long lastCharacterStrokeCount;
@property (nonatomic) NSMutableIndexSet *lastCharacterStrokeIndexes;
@property (nonatomic, retain) NSURL *learningDictionaryURL;
@property (nonatomic) unsigned long long maxRecognitionResultCount;
@property (nonatomic) struct __Mecabra { }*mecabra;
@property (nonatomic) void*mecabraDynamicLexicon;
@property (nonatomic) void*mecabraStaticLexicon;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } minimumDrawingSize;
@property (nonatomic) /* Warning: unhandled struct encoding: '{Network=II{basic_string<char' */ struct *radicalClusterFST; /* unknown property attribute:  std::__1::less<uint128> >=Q}}}} */
@property (nonatomic) int recognitionMode;
@property (nonatomic) NSObject<OS_dispatch_queue> *recognitionQueue;
@property (nonatomic) int recognitionType;
@property (nonatomic) bool saveDrawingUntilNextCandidateAccepted;
@property (nonatomic, copy) CHDrawing *savedDrawing;
@property (nonatomic, copy) NSString *savedTop1CandidateString;
@property (nonatomic) struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*scVariantMap;
@property (nonatomic) struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*tcVariantMap;

+ (id)defaultPunctuationResultsForRecognitionType:(int)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)activeCharacterSet;
- (id)applySentenceTransliterationCandidates:(unsigned short*)arg1 codesLen:(int)arg2 codesMax:(int)arg3;
- (void)applyTransliterationAndSyntheticCandidates:(struct vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x1; struct CHCandidateResult {} *x2; struct __compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x_3_1_1; } x3; }*)arg1;
- (id)bestNetworkPaths:(struct Network { unsigned int x1; unsigned int x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; unsigned int x4; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_5_1_1; struct NetworkNode {} *x_5_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_5_1_3; } x5; struct vector<NetworkEdge, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_6_1_1; struct NetworkEdge {} *x_6_1_2; struct __compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_3_2_1; } x_6_1_3; } x6; }*)arg1 count:(unsigned long long)arg2 mecabraIDs:(struct vector<int, std::__1::allocator<int> > { int *x1; int *x2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_1_1; } x3; }*)arg3;
- (id)cachedDrawing;
- (struct map<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { struct __tree<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { struct __tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })cachedResults;
- (void)candidateAccepted:(void*)arg1;
- (void)candidatesCleared;
- (id)characterSetForStrings:(id)arg1;
- (id)chatBubbleCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (struct vector<const void *, std::__1::allocator<const void *> > { void **x1; void **x2; struct __compressed_pair<const void **, std::__1::allocator<const void *> > { void **x_3_1_1; } x3; })completionsForCandidate:(id)arg1 candidateContext:(id)arg2 prefix:(id)arg3 option:(unsigned long long)arg4;
- (struct vector<const void *, std::__1::allocator<const void *> > { void **x1; void **x2; struct __compressed_pair<const void **, std::__1::allocator<const void *> > { void **x_3_1_1; } x3; })completionsForCandidate:(id)arg1 prefix:(id)arg2 option:(unsigned long long)arg3;
- (void)dealloc;
- (id)ellipseCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (void)endpointsForDrawing:(id)arg1 startLocation:(struct CGPoint { double x1; double x2; }*)arg2 endLocation:(struct CGPoint { double x1; double x2; }*)arg3;
- (struct CHNeuralNetwork { int (**x1)(); int x2; char *x3; unsigned long long x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; }*)engine;
- (struct Network { unsigned int x1; unsigned int x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; unsigned int x4; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_5_1_1; struct NetworkNode {} *x_5_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_5_1_3; } x5; struct vector<NetworkEdge, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_6_1_1; struct NetworkEdge {} *x_6_1_2; struct __compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_3_2_1; } x_6_1_3; } x6; }*)formatGrammarFST;
- (struct CHNeuralNetwork { int (**x1)(); int x2; char *x3; unsigned long long x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; }*)freeformEngine;
- (void**)icuTransliterator;
- (id)initWithType:(int)arg1 mode:(int)arg2;
- (id)initWithType:(int)arg1 mode:(int)arg2 learningDictionaryURL:(id)arg3;
- (void*)languageModel;
- (unsigned long long)lastCharacterStrokeCount;
- (id)lastCharacterStrokeIndexes;
- (id)learningDictionaryURL;
- (id)lineCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2 rejectionResult:(id*)arg3;
- (void)loadEngineModel;
- (void)logCandidateIfAppropriate:(void*)arg1;
- (id)manhattanLineCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2 rejectionResult:(id*)arg3;
- (unsigned long long)maxRecognitionResultCount;
- (struct __Mecabra { }*)mecabra;
- (void*)mecabraDynamicLexicon;
- (void*)mecabraStaticLexicon;
- (struct CGSize { double x1; double x2; })minimumDrawingSize;
- (id)outlineArrowCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (id)pentagonCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (struct Network { unsigned int x1; unsigned int x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; unsigned int x4; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_5_1_1; struct NetworkNode {} *x_5_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_5_1_3; } x5; struct vector<NetworkEdge, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_6_1_1; struct NetworkEdge {} *x_6_1_2; struct __compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_3_2_1; } x_6_1_3; } x6; }*)radicalClusterFST;
- (int)recognitionMode;
- (id)recognitionQueue;
- (id)recognitionResultsForDrawing:(id)arg1 options:(id)arg2;
- (id)recognitionResultsForDrawing:(id)arg1 options:(id)arg2 shouldCancel:(id)arg3;
- (id)recognitionResultsForMultipleCharacterDrawing:(id)arg1 sortedStrokeIndices:(struct vector<unsigned long, std::__1::allocator<unsigned long> > { unsigned long long *x1; unsigned long long *x2; struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > { unsigned long long *x_3_1_1; } x3; }*)arg2 network:(struct Network { unsigned int x1; unsigned int x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; unsigned int x4; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_5_1_1; struct NetworkNode {} *x_5_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_5_1_3; } x5; struct vector<NetworkEdge, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_6_1_1; struct NetworkEdge {} *x_6_1_2; struct __compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_3_2_1; } x_6_1_3; } x6; }*)arg3 options:(id)arg4 ch:(struct Hanzi { struct vector<std::__1::vector<Coord, std::__1::allocator<Coord> >, std::__1::allocator<std::__1::vector<Coord, std::__1::allocator<Coord> > > > { struct vector<Coord, std::__1::allocator<Coord> > {} *x_1_1_1; struct vector<Coord, std::__1::allocator<Coord> > {} *x_1_1_2; struct __compressed_pair<std::__1::vector<Coord, std::__1::allocator<Coord> > *, std::__1::allocator<std::__1::vector<Coord, std::__1::allocator<Coord> > > > { struct vector<Coord, std::__1::allocator<Coord> > {} *x_3_2_1; } x_1_1_3; } x1; }*)arg5 shouldCancel:(id)arg6;
- (id)recognitionResultsForSingleCharacterDrawing:(id)arg1 options:(id)arg2;
- (id)recognitionResultsForSketchDrawing:(id)arg1 options:(id)arg2;
- (int)recognitionType;
- (id)rectangleCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (void)releaseLMResources;
- (void)rescoreCandidatesWithLangaugeModel:(struct vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x1; struct CHCandidateResult {} *x2; struct __compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x_3_1_1; } x3; }*)arg1 history:(id)arg2;
- (bool)saveDrawingUntilNextCandidateAccepted;
- (id)savedDrawing;
- (id)savedTop1CandidateString;
- (struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*)scVariantMap;
- (void)setActiveCharacterSet:(id)arg1;
- (void)setCachedDrawing:(id)arg1;
- (void)setCachedResults:(struct map<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { struct __tree<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { struct __tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })arg1;
- (void)setEngine:(struct CHNeuralNetwork { int (**x1)(); int x2; char *x3; unsigned long long x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; }*)arg1;
- (void)setFormatGrammarFST:(struct Network { unsigned int x1; unsigned int x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; unsigned int x4; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_5_1_1; struct NetworkNode {} *x_5_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_5_1_3; } x5; struct vector<NetworkEdge, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_6_1_1; struct NetworkEdge {} *x_6_1_2; struct __compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_3_2_1; } x_6_1_3; } x6; }*)arg1;
- (void)setFreeformEngine:(struct CHNeuralNetwork { int (**x1)(); int x2; char *x3; unsigned long long x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; }*)arg1;
- (void)setIcuTransliterator:(void**)arg1;
- (void)setLanguageModel:(void*)arg1;
- (void)setLastCharacterStrokeCount:(unsigned long long)arg1;
- (void)setLastCharacterStrokeIndexes:(id)arg1;
- (void)setLearningDictionaryURL:(id)arg1;
- (void)setMaxRecognitionResultCount:(unsigned long long)arg1;
- (void)setMecabra:(struct __Mecabra { }*)arg1;
- (void)setMecabraDynamicLexicon:(void*)arg1;
- (void)setMecabraStaticLexicon:(void*)arg1;
- (void)setRadicalClusterFST:(struct Network { unsigned int x1; unsigned int x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; unsigned int x4; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_5_1_1; struct NetworkNode {} *x_5_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_5_1_3; } x5; struct vector<NetworkEdge, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_6_1_1; struct NetworkEdge {} *x_6_1_2; struct __compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_3_2_1; } x_6_1_3; } x6; }*)arg1;
- (void)setRecognitionMode:(int)arg1;
- (void)setRecognitionQueue:(id)arg1;
- (void)setRecognitionType:(int)arg1;
- (void)setSaveDrawingUntilNextCandidateAccepted:(bool)arg1;
- (void)setSavedDrawing:(id)arg1;
- (void)setSavedTop1CandidateString:(id)arg1;
- (void)setScVariantMap:(struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*)arg1;
- (void)setTcVariantMap:(struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*)arg1;
- (id)sketchCodeForDescription:(id)arg1;
- (id)sketchDescriptionForCode:(int)arg1;
- (id)starCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (id)strokeIndexesForLastCharacter;
- (id)supportedCharacterSet;
- (id)supportedStrings;
- (struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*)tcVariantMap;
- (id)triangleCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (void)updateAddressBookLexicon:(id)arg1;
- (void)updateUserDictionaryLexicon:(id)arg1;

@end
