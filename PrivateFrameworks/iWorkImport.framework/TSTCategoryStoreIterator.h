/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSTCategoryStoreIterator : NSObject <TSTCellIterating, TSTCellRegionIterating, TSTMutableCellIteratorDataUpdating> {
    TSTTableDataStore * _baseDataStore;
    TSTColumnRowUIDMap * _baseMap;
    TSTTableTileRowInfo * _baseRow;
    unsigned int  _baseRowIndex;
    TSTTableTile * _baseTile;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _baseTileRange;
    unsigned short  _categoryColumnIndex;
    TSTCell * _cell;
    struct TSUCellCoord { 
        unsigned int row; 
        unsigned short column; 
        bool _preserveRow; 
        bool _preserveColumn; 
    }  _curCellID;
    unsigned int  _curRowIndex;
    TSTGroupBy * _groupBy;
    unsigned char  _groupLevel;
    TSTTableInfo * _info;
    bool  _isLabelRow;
    bool  _isSummaryRow;
    struct unordered_map<TSUViewColumnIndex, TSUModelColumnIndex, std::__1::hash<TSUViewColumnIndex>, std::__1::equal_to<TSUViewColumnIndex>, std::__1::allocator<std::__1::pair<const TSUViewColumnIndex, TSUModelColumnIndex> > > { 
        struct __hash_table<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, std::__1::__unordered_map_hasher<TSUViewColumnIndex, std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, std::__1::hash<TSUViewColumnIndex>, true>, std::__1::__unordered_map_equal<TSUViewColumnIndex, std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, std::__1::equal_to<TSUViewColumnIndex>, true>, std::__1::allocator<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex> > > { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *> *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *> {} **__value_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *> *> > { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *> {} *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSUViewColumnIndex, std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, std::__1::hash<TSUViewColumnIndex>, true> > { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<TSUViewColumnIndex, std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, std::__1::equal_to<TSUViewColumnIndex>, true> > { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _mapFromViewToBaseColumnInCurrentRow;
    NSIndexSet * _populatedColumnsForGroupLevel1;
    NSIndexSet * _populatedColumnsForGroupLevel2;
    NSIndexSet * _populatedColumnsForGroupLevel3;
    NSIndexSet * _populatedColumnsForGroupLevel4;
    NSIndexSet * _populatedColumnsForGroupLevel5;
    TSTCellRegion * _region;
    struct NSObject { Class x1; } * _regionIterator;
    bool  _rightToLeft;
    unsigned long long  _searchMask;
    TSTSummaryCellVendor * _summaryCellVendor;
    TSTColumnRowUIDMap * _summaryMap;
    TSTCell * _tempSummaryCell;
    bool  _terminated;
    TSTCategoryTranslator * _translator;
    struct UUIDData<TSP::UUIDData> { 
        union { 
            unsigned char _uuid[16]; 
            struct { 
                unsigned char byte0; 
                unsigned char byte1; 
                unsigned char byte2; 
                unsigned char byte3; 
                unsigned char byte4; 
                unsigned char byte5; 
                unsigned char byte6; 
                unsigned char byte7; 
                unsigned char byte8; 
                unsigned char byte9; 
                unsigned char byte10; 
                unsigned char byte11; 
                unsigned char byte12; 
                unsigned char byte13; 
                unsigned char byte14; 
                unsigned char byte15; 
            } _cfuuid; 
            struct { 
                unsigned long long _lower; 
                unsigned long long _upper; 
            } ; 
        } ; 
    }  _uuid;
    NSIndexSet * _viewColumnIndexesInCurrentRow;
    TSTColumnRowUIDMap * _viewMap;
}

@property (nonatomic, readonly) TSTTableDataStore *baseDataStore;
@property (nonatomic, readonly) TSTColumnRowUIDMap *baseMap;
@property (nonatomic, retain) TSTTableTileRowInfo *baseRow;
@property (nonatomic) unsigned int baseRowIndex;
@property (nonatomic, retain) TSTTableTile *baseTile;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } baseTileRange;
@property (nonatomic, readonly) unsigned short categoryColumnIndex;
@property (nonatomic, readonly) TSTCell *cell;
@property (nonatomic) struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; } curCellID;
@property (nonatomic) unsigned int curRowIndex;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) TSTGroupBy *groupBy;
@property (nonatomic) unsigned char groupLevel;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) TSTTableInfo *info;
@property (nonatomic) bool isLabelRow;
@property (nonatomic) bool isSummaryRow;
@property (nonatomic, retain) NSIndexSet *populatedColumnsForGroupLevel1;
@property (nonatomic, retain) NSIndexSet *populatedColumnsForGroupLevel2;
@property (nonatomic, retain) NSIndexSet *populatedColumnsForGroupLevel3;
@property (nonatomic, retain) NSIndexSet *populatedColumnsForGroupLevel4;
@property (nonatomic, retain) NSIndexSet *populatedColumnsForGroupLevel5;
@property (nonatomic, readonly) TSTCellRegion *region;
@property (nonatomic, readonly) NSObject<TSTCellRegionIterating> *regionIterator;
@property (nonatomic) bool rightToLeft;
@property (nonatomic) unsigned long long searchMask;
@property (nonatomic, readonly) TSTSummaryCellVendor *summaryCellVendor;
@property (nonatomic, readonly) TSTColumnRowUIDMap *summaryMap;
@property (readonly) Class superclass;
@property (nonatomic, readonly, retain) TSTTableInfo *tableInfo;
@property (nonatomic) bool terminated;
@property (nonatomic, readonly) TSTCategoryTranslator *translator;
@property (nonatomic) struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; } uuid;
@property (nonatomic, retain) NSIndexSet *viewColumnIndexesInCurrentRow;
@property (nonatomic, readonly) TSTColumnRowUIDMap *viewMap;

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })advanceToCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (id)baseDataStore;
- (id)baseMap;
- (id)baseRow;
- (unsigned int)baseRowIndex;
- (id)baseTile;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })baseTileRange;
- (unsigned short)categoryColumnIndex;
- (id)cell;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })curCellID;
- (unsigned int)curRowIndex;
- (void)dealloc;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })getNext;
- (bool)getNextCellData:(id*)arg1;
- (id)groupBy;
- (unsigned char)groupLevel;
- (id)info;
- (id)initWithInfo:(id)arg1 region:(id)arg2 flags:(unsigned long long)arg3 searchMask:(unsigned long long)arg4;
- (bool)isLabelRow;
- (bool)isSummaryRow;
- (void)iterateCellsUsingBlock:(id /* block */)arg1;
- (id)nextCellData;
- (bool)p_searchSummaryVendorCell:(id)arg1 searchFlags:(unsigned long long)arg2;
- (id)populatedColumnsForGroupLevel1;
- (id)populatedColumnsForGroupLevel2;
- (id)populatedColumnsForGroupLevel3;
- (id)populatedColumnsForGroupLevel4;
- (id)populatedColumnsForGroupLevel5;
- (id)region;
- (struct NSObject { Class x1; }*)regionIterator;
- (bool)rightToLeft;
- (unsigned long long)searchMask;
- (void)setBaseRow:(id)arg1;
- (void)setBaseRowIndex:(unsigned int)arg1;
- (void)setBaseTile:(id)arg1;
- (void)setBaseTileRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setCurCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (void)setCurRowIndex:(unsigned int)arg1;
- (void)setGroupLevel:(unsigned char)arg1;
- (void)setIsLabelRow:(bool)arg1;
- (void)setIsSummaryRow:(bool)arg1;
- (void)setPopulatedColumnsForGroupLevel1:(id)arg1;
- (void)setPopulatedColumnsForGroupLevel2:(id)arg1;
- (void)setPopulatedColumnsForGroupLevel3:(id)arg1;
- (void)setPopulatedColumnsForGroupLevel4:(id)arg1;
- (void)setPopulatedColumnsForGroupLevel5:(id)arg1;
- (void)setRightToLeft:(bool)arg1;
- (void)setSearchMask:(unsigned long long)arg1;
- (void)setTerminated:(bool)arg1;
- (void)setUuid:(struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })arg1;
- (void)setViewColumnIndexesInCurrentRow:(id)arg1;
- (id)summaryCellVendor;
- (id)summaryMap;
- (id)tempSummaryCell;
- (void)terminate;
- (bool)terminated;
- (id)translator;
- (void)updateCellData:(id)arg1;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })uuid;
- (id)viewColumnIndexesInCurrentRow;
- (id)viewMap;

@end
