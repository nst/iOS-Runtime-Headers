/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ProofReader.framework/ProofReader
 */

@interface AppleSpell : NSObject {
    NSMutableArray * _altBundleURLs;
    NSObject<OS_dispatch_queue> * _assetDataBundleSerialQueue;
    NSMutableDictionary * _assetDataBundleURLDictionary;
    NSMutableDictionary * _autocorrections;
    bool  _automaticTextCompletionCollapsed;
    bool  _automaticTextCompletionEnabled;
    NSMutableDictionary * _bindicts;
    NSMutableDictionary * _capitalizations;
    NSBundle * _dataBundle;
    struct __CFDictionary { } * _databaseConnections;
    NSMutableArray * _diagnosticInfo;
    struct __CFDictionary { } * _emojiPredictorDict;
    NSMutableSet * _foundNames;
    NSMutableSet * _foundShortcuts;
    NSMutableDictionary * _foundShortcutsDictionary;
    NSMutableArray * _globalBindictDataArray;
    NSMutableArray * _globalNameBindictDataArray;
    NSMutableArray * _globalNegBindictDataArray;
    bool  _hasUpdatedDataBundleLanguages;
    unsigned long long * _keyboardHistogram;
    NSMutableDictionary * _languageCounts;
    NSMutableDictionary * _languageModelDicts;
    unsigned long long  _languageModelWordCount;
    double  _lastAssetRequest;
    NSString * _lastCandidateLanguage;
    double  _lastDecayLanguageModels;
    double  _lastFindNames;
    NSData * _lastKeyEventArray;
    double  _lastKeyboardHistogramRecording;
    NSString * _lastLanguage;
    double  _lastLanguageCounts;
    double  _lastMaintainLanguageModels;
    double  _lastReleaseLanguageModels;
    NSMutableDictionary * _lastSampleCollected;
    double  _lastSampleCollection;
    NSMutableDictionary * _lastSampleRecorded;
    double  _lastSampleRecording;
    double  _lastWriteLanguageModels;
    NSMutableDictionary * _learnedResponses;
    NSMutableDictionary * _lexiconDict;
    unsigned long long  _numberOfSamplesCollected;
    NSMutableDictionary * _phraseLexiconDict;
    NSMutableDictionary * _probationaryLearnedResponseTimes;
    NSMutableDictionary * _probationaryLearnedResponses;
    void * _proofReaderConnection;
    NSMutableArray * _receivedAssets;
    NSMutableArray * _recordedCorrections;
    NSMutableArray * _recordedTICorrections;
    double  _referenceResetTimer;
    NSMutableArray * _requestedAssets;
    NSMutableArray * _retainedSamples;
    NSObject<OS_dispatch_queue> * _serialQueue;
    bool  _shouldClearFoundNames;
    NSURL * _updateBundleURL;
    NSMutableSet * _updatedDataBundleLanguages;
    NSMutableDictionary * _userAdaptationDictionary;
    NSArray * _userPreferredLanguages;
    NSArray * _userPreferredLatinLanguages;
    bool  _userPrefersUncheckedCyrillicLanguage;
    bool  _userPrefersUncheckedLatinLanguage;
    NSArray * _userTopLanguages;
}

- (void)_addGuessesForWordBuffer:(char *)arg1 length:(unsigned long long)arg2 language:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5 minAutocorrectionLength:(unsigned long long)arg6 previousLetter:(unsigned short)arg7 nextLetter:(unsigned short)arg8 basicOnly:(bool)arg9 toGuesses:(id)arg10;
- (bool)_addLanguageModelCompletionsForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 language:(id)arg2 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg3 sender:(id)arg4 encoding:(unsigned int)arg5 tagger:(id)arg6 taggerIndex:(unsigned long long)arg7 appIdentifier:(id)arg8 waitForLanguageModel:(bool)arg9 candidates:(id)arg10;
- (void)_addLanguageModelCompletionsForPrefix:(id)arg1 languageModel:(id)arg2 language:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5 encoding:(unsigned int)arg6 capitalized:(bool)arg7 candidates:(id)arg8;
- (id)_capitalizationResultForString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 offset:(unsigned long long)arg4 language:(id)arg5 onlyAtInsertionPoint:(bool)arg6 keyEventArray:(id)arg7 selectedRangeValue:(id)arg8;
- (bool)_checkEnglishGrammarInString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 indexIntoBuffer:(unsigned long long)arg3 bufferLength:(unsigned long long)arg4 language:(id)arg5 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg6 sender:(id)arg7 bufIO:(struct _PR_BUF_IO { char *x1; unsigned char x2; unsigned char x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; struct _PR_LIMITS {} *x8; struct _PR_PARA_INFO {} *x9; struct _PR_ERROR {} *x10; struct _PR_PARSE_INFO {} **x11; unsigned char x12; short x13; BOOL x14; BOOL x15; struct _PR_STATUS { unsigned int x_16_1_1; int x_16_1_2; unsigned short x_16_1_3; } x16; }*)arg8 retval:(int*)arg9 errorRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg10 details:(id*)arg11;
- (bool)_checkGrammarInString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 language:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5 bufIO:(struct _PR_BUF_IO { char *x1; unsigned char x2; unsigned char x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; struct _PR_LIMITS {} *x8; struct _PR_PARA_INFO {} *x9; struct _PR_ERROR {} *x10; struct _PR_PARSE_INFO {} **x11; unsigned char x12; short x13; BOOL x14; BOOL x15; struct _PR_STATUS { unsigned int x_16_1_1; int x_16_1_2; unsigned short x_16_1_3; } x16; }*)arg6 errorRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg7 details:(id*)arg8;
- (unsigned long long)_contextLengthForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 language:(id)arg2 tagger:(id)arg3 taggerIndex:(unsigned long long)arg4 languageModel:(id)arg5 maxContextLength:(unsigned long long)arg6 context:(unsigned int*)arg7 cleanOffset:(unsigned long long*)arg8;
- (id)_correctionForSuggestedPhrase:(const char *)arg1 originalBuffer:(const char *)arg2 length:(unsigned long long)arg3;
- (id)_correctionResultForKoreanString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 offset:(unsigned long long)arg4 tagger:(id)arg5 taggerIndex:(unsigned long long)arg6 appIdentifier:(id)arg7 dictionary:(id)arg8 keyEventArray:(id)arg9;
- (id)_correctionResultForString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 offset:(unsigned long long)arg4 tagger:(id)arg5 taggerIndex:(unsigned long long)arg6 appIdentifier:(id)arg7 dictionary:(id)arg8 languages:(id)arg9 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg10 onlyAtInsertionPoint:(bool)arg11 capitalize:(bool)arg12 autocapitalize:(bool)arg13 keyEventArray:(id)arg14 selectedRangeValue:(id)arg15 previousLetter:(unsigned short)arg16 nextLetter:(unsigned short)arg17 isAlternateLanguage:(bool)arg18 extraMisspellingCount:(unsigned long long)arg19 extraCorrectionCount:(unsigned long long*)arg20;
- (id)_crudeNextWordInString:(id)arg1 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (id)_crudePreviousWordInString:(id)arg1 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (id)_crudePreviousWordInString:(id)arg1 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 precededBy:(id*)arg3;
- (id)_detailWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 description:(id)arg2 corrections:(id)arg3;
- (void)_findAlternateDataBundleURLs;
- (bool)_findMatchingRangesForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 inString:(id)arg2 keyEventArray:(id)arg3 endingAtIndex:(unsigned long long)arg4 matchingStringRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg5 correctableStringRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg6 matchingKeyEventRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg7 firstMisspelledKeyEventIndex:(unsigned long long*)arg8 lastMisspelledKeyEventIndex:(unsigned long long*)arg9 previousBackspaceCount:(unsigned long long*)arg10;
- (unsigned long long)_getSplitIndexes:(unsigned long long*)arg1 maxCount:(unsigned long long)arg2 forPinyinInputString:(id)arg3;
- (bool)_getUnigramProbabilityForString:(id)arg1 languageModel:(id)arg2 probability:(double*)arg3;
- (id)_lexiconPathForLanguage:(id)arg1 type:(id)arg2;
- (id)_lexiconPathForLocalization:(id)arg1 type:(id)arg2;
- (id)_lexiconsForLanguage:(id)arg1;
- (id)_lexiconsForLanguage:(id)arg1 waitForResult:(bool)arg2;
- (id)_loadLanguageModelForLanguage:(id)arg1 localization:(id)arg2 appIdentifier:(id)arg3 onQueue:(id)arg4;
- (id)_loadLexiconsForLanguage:(id)arg1 localization:(id)arg2 onQueue:(id)arg3;
- (id)_modifiedGrammarDescriptionForDescription:(id)arg1;
- (id)_orthographyByModifyingOrthography:(id)arg1 withLatinLanguage:(id)arg2;
- (id)_phraseCapitalizationResultForString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 currentWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 inString:(id)arg4 offset:(unsigned long long)arg5 language:(id)arg6 onlyAtInsertionPoint:(bool)arg7 keyEventArray:(id)arg8 selectedRangeValue:(id)arg9;
- (id)_phraseLexiconPathForLanguage:(id)arg1;
- (id)_phraseLexiconsForLanguage:(id)arg1;
- (id)_pinyinStringByCombiningPinyinString:(id)arg1 withPinyinString:(id)arg2;
- (id)_primitiveRetainedAlternativesForPinyinInputString:(id)arg1;
- (id)_rankedCandidatesForCandidateList:(id)arg1 language:(id)arg2 tagger:(id)arg3 taggerIndex:(unsigned long long)arg4 appIdentifier:(id)arg5;
- (id)_rankedCandidatesForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 candidates:(id)arg2 language:(id)arg3 tagger:(id)arg4 taggerIndex:(unsigned long long)arg5 appIdentifier:(id)arg6 scoreDictionary:(id)arg7;
- (void)_readLanguageModelParametersFromDefaults;
- (void)_readLanguageModelParametersFromDictionary:(id)arg1;
- (id)_recursiveRetainedAlternativesForPinyinInputString:(id)arg1 depth:(unsigned long long)arg2;
- (id)_retainedAlternativesByCombiningAlternatives:(id)arg1 withAlternatives:(id)arg2 andAddingAlternatives:(id)arg3;
- (bool)_shouldBlockWord:(id)arg1 language:(id)arg2 encoding:(unsigned int)arg3;
- (id)_standardizedLanguageModelStringForString:(id)arg1;
- (id)_stemSuffixConverterPathForLanguage:(id)arg1;
- (id)_stringForTokenIDs:(const unsigned int*)arg1 tokenCount:(unsigned long long)arg2 languageModel:(id)arg3 language:(id)arg4 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg5 sender:(id)arg6 encoding:(unsigned int)arg7 prefix:(id)arg8 capitalized:(bool)arg9;
- (unsigned int)_tokenIDForString:(id)arg1 languageModel:(id)arg2 language:(id)arg3 createIfAbsent:(bool)arg4 terminatorTokenID:(unsigned int)arg5;
- (unsigned int)_tokenIDForString:(id)arg1 languageModel:(id)arg2 language:(id)arg3 terminatorTokenID:(unsigned int)arg4;
- (bool)_useAlternateLanguageForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 ofString:(id)arg2 language:(id)arg3 tagger:(id)arg4 taggerIndex:(unsigned long long)arg5 alternateLanguage:(id)arg6 alternateTagger:(id)arg7 alternateTaggerIndex:(unsigned long long)arg8 appIdentifier:(id)arg9;
- (unsigned long long)acceptibilityOfWordBuffer:(char *)arg1 length:(unsigned long long)arg2 language:(id)arg3 encoding:(unsigned int)arg4 forPrediction:(bool)arg5;
- (unsigned long long)acceptibilityOfWordBuffer:(char *)arg1 length:(unsigned long long)arg2 language:(id)arg3 encoding:(unsigned int)arg4 forPrediction:(bool)arg5 depth:(unsigned long long)arg6;
- (void)addAlternateDataBundleURL:(id)arg1;
- (void)addGuessesForKoreanWord:(id)arg1 includeAdditionalGuesses:(bool)arg2 toGuesses:(id)arg3;
- (void)addModifiedPartialPinyinToArray:(id)arg1 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg2 fromIndex:(unsigned long long)arg3 prevIndex:(unsigned long long)arg4 prevPrevIndex:(unsigned long long)arg5 prePrevPrevIndex:(unsigned long long)arg6 startingModificationsAt:(unsigned long long)arg7 inBuffer:(char *)arg8 length:(unsigned long long)arg9 initialSyllableCount:(unsigned long long)arg10 initialScore:(unsigned long long)arg11 prevScore:(unsigned long long)arg12 prevPrevScore:(unsigned long long)arg13 lastSyllableScore:(unsigned long long)arg14;
- (void)addModifiedPinyinToArray:(id)arg1 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg2 fromIndex:(unsigned long long)arg3 prevIndex:(unsigned long long)arg4 prevPrevIndex:(unsigned long long)arg5 startingModificationsAt:(unsigned long long)arg6 inBuffer:(char *)arg7 length:(unsigned long long)arg8 initialSyllableCount:(unsigned long long)arg9 initialScore:(unsigned long long)arg10 prevScore:(unsigned long long)arg11 prevPrevScore:(unsigned long long)arg12 lastSyllableScore:(unsigned long long)arg13 couldBeAbbreviatedPinyin:(bool)arg14;
- (void)addSpecialModifiedPinyinToArray:(id)arg1 inBuffer:(char *)arg2 length:(unsigned long long)arg3 atEnd:(bool)arg4;
- (id)assetDataBundleURLsForLanguage:(id)arg1;
- (id)autocorrectionDictionaryForLanguage:(id)arg1;
- (id)backgroundLoadingQueue;
- (id)bindictDataArrayForLanguage:(id)arg1 index:(unsigned long long)arg2;
- (id)bindictDataForLanguage:(id)arg1 index:(unsigned long long)arg2;
- (id)capitalizationDictionaryForLanguage:(id)arg1;
- (bool)checkNameWordBuffer:(char *)arg1 length:(unsigned long long)arg2 language:(id)arg3 encoding:(unsigned int)arg4 globalOnly:(bool)arg5;
- (bool)checkNegativeWordBuffer:(char *)arg1 length:(unsigned long long)arg2 language:(id)arg3 encoding:(unsigned int)arg4;
- (bool)checkNoCapAbbreviationWordBuffer:(char *)arg1 length:(unsigned long long)arg2 language:(id)arg3 encoding:(unsigned int)arg4;
- (bool)checkSpecialPrefixesForWordBuffer:(char *)arg1 length:(unsigned long long)arg2;
- (bool)checkWordBuffer:(char *)arg1 length:(unsigned long long)arg2 language:(id)arg3 encoding:(unsigned int)arg4 index:(unsigned long long)arg5;
- (void)clearCaches;
- (id)dataBundle;
- (id)dataBundlesForLanguage:(id)arg1;
- (struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)databaseConnectionForLanguage:(id)arg1;
- (id)databasePathForLanguage:(id)arg1;
- (float)dynamicScoreForWord:(id)arg1 language:(id)arg2 appIdentifier:(id)arg3;
- (float)dynamicScoreForWord:(id)arg1 languageModel:(id)arg2 language:(id)arg3;
- (unsigned int)encodingForLanguage:(id)arg1;
- (id)englishStringFromWordBuffer:(char *)arg1 length:(unsigned long long)arg2 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg3;
- (id)englishStringsFromWordBuffer:(char *)arg1 length:(unsigned long long)arg2 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg3;
- (void)enumerateAssetDataItemsForLocale:(id)arg1 withBlock:(id /* block */)arg2;
- (id)externalStringForKoreanInternalString:(id)arg1;
- (id)fallbackLocalizationForLanguage:(id)arg1;
- (bool)findMatchingRangesForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 inString:(id)arg2 keyEventArray:(id)arg3 selectedRangeValue:(id)arg4 matchingStringRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg5 correctableStringRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg6 matchingKeyEventRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg7 firstMisspelledKeyEventIndex:(unsigned long long*)arg8 lastMisspelledKeyEventIndex:(unsigned long long*)arg9 previousBackspaceCount:(unsigned long long*)arg10;
- (id)globalBindictDataArray;
- (id)globalNameBindictDataArray;
- (id)globalNegativeBindictDataArray;
- (id)init;
- (id)internalStringForKoreanExternalString:(id)arg1;
- (id)languageModelCompletionsForPartialWord:(id)arg1 language:(id)arg2 sender:(id)arg3 appIdentifier:(id)arg4;
- (id)languageModelFallbackLocalizationForLanguage:(id)arg1;
- (id)languageModelForLanguage:(id)arg1 appIdentifier:(id)arg2 waitForResult:(bool)arg3;
- (id)languageModelLocalizationForLanguage:(id)arg1;
- (id)lexiconForLanguage:(id)arg1;
- (id)linguisticTaggerForLanguage:(id)arg1 string:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 taggerIndex:(unsigned long long*)arg4;
- (id)localizationForLanguage:(id)arg1;
- (id)localizationsForLanguage:(id)arg1;
- (bool)looksLikeAdverb:(id)arg1 language:(id)arg2 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg3 sender:(id)arg4;
- (bool)looksLikeArticledNoun:(id)arg1 language:(id)arg2 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg3;
- (bool)looksLikeParticiple:(id)arg1 language:(id)arg2 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg3 sender:(id)arg4;
- (unsigned int)metaFlagsForWord:(id)arg1 inLexiconForLanguage:(id)arg2;
- (unsigned long long)numberOfTurkishSuffixPointsInBuffer:(char *)arg1 length:(unsigned long long)arg2 maxSuffixPoints:(unsigned long long)arg3 suffixPoints:(struct { unsigned long long x1; int x2; }*)arg4;
- (bool)onContractionList:(id)arg1 language:(id)arg2 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg3 sender:(id)arg4;
- (bool)onNoContractionList:(id)arg1 language:(id)arg2 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg3 sender:(id)arg4;
- (void)personalizeEmojiArray:(id)arg1;
- (id)phraseMatching:(id)arg1 inLexiconForLanguage:(id)arg2;
- (void)releaseDatabaseConnections;
- (void)resetDataBundlesForLanguage:(id)arg1;
- (void)resetTimer;
- (void)setUpdateBundleURL:(id)arg1;
- (bool)spellServer:(id)arg1 _canChangeCaseOfFirstLetterInString:(id)arg2 toUpperCase:(bool)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 _retainedAlternativesForPinyinInputString:(id)arg2 extended:(bool)arg3;
- (id)spellServer:(id)arg1 _retainedCorrectionsForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 _retainedFinalModificationsForPinyinInputString:(id)arg2 geometryModelData:(id)arg3;
- (id)spellServer:(id)arg1 _retainedModificationsForPinyinInputString:(id)arg2 geometryModelData:(id)arg3;
- (id)spellServer:(id)arg1 _retainedPrefixesForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 alternativesForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 alternativesForPinyinInputString:(id)arg2 language:(id)arg3;
- (bool)spellServer:(id)arg1 canChangeCaseOfFirstLetterInString:(id)arg2 toUpperCase:(bool)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 candidatesForSelectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 offset:(unsigned long long)arg4 types:(unsigned long long)arg5 options:(id)arg6 orthography:(id)arg7;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })spellServer:(id)arg1 checkGrammarInString:(id)arg2 language:(id)arg3 details:(id*)arg4;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })spellServer:(id)arg1 checkGrammarInString:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 language:(id)arg4 orthography:(id)arg5 mutableResults:(id)arg6 offset:(unsigned long long)arg7 details:(id*)arg8;
- (id)spellServer:(id)arg1 checkString:(id)arg2 offset:(unsigned long long)arg3 types:(unsigned long long)arg4 options:(id)arg5 orthography:(id)arg6 wordCount:(long long*)arg7;
- (id)spellServer:(id)arg1 correctionsForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 correctionsForPinyinInputString:(id)arg2 language:(id)arg3;
- (id)spellServer:(id)arg1 extendedAlternativesForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 extendedAlternativesForPinyinInputString:(id)arg2 language:(id)arg3;
- (id)spellServer:(id)arg1 finalModificationsForPinyinInputString:(id)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })spellServer:(id)arg1 findMisspelledWordInString:(id)arg2 language:(id)arg3 wordCount:(long long*)arg4 countOnly:(bool)arg5;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })spellServer:(id)arg1 findMisspelledWordInString:(id)arg2 language:(id)arg3 wordCount:(long long*)arg4 countOnly:(bool)arg5 correction:(id*)arg6;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })spellServer:(id)arg1 findMisspelledWordInString:(id)arg2 languages:(id)arg3 wordCount:(long long*)arg4 countOnly:(bool)arg5 correction:(id*)arg6;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })spellServer:(id)arg1 findMisspelledWordInString:(id)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 languages:(id)arg4 topLanguages:(id)arg5 orthography:(id)arg6 checkOrthography:(bool)arg7 mutableResults:(id)arg8 offset:(unsigned long long)arg9 autocorrect:(bool)arg10 onlyAtInsertionPoint:(bool)arg11 initialCapitalize:(bool)arg12 autocapitalize:(bool)arg13 keyEventArray:(id)arg14 appIdentifier:(id)arg15 selectedRangeValue:(id)arg16 wordCount:(long long*)arg17 countOnly:(bool)arg18 correction:(id*)arg19;
- (id)spellServer:(id)arg1 generateCandidatesForSelectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 offset:(unsigned long long)arg4 types:(unsigned long long)arg5 options:(id)arg6 orthography:(id)arg7;
- (id)spellServer:(id)arg1 modificationsForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 modificationsForPinyinInputString:(id)arg2 geometryModelData:(id)arg3;
- (id)spellServer:(id)arg1 prefixesForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 prefixesForPinyinInputString:(id)arg2 language:(id)arg3;
- (id)spellServer:(id)arg1 stringForInputString:(id)arg2 language:(id)arg3;
- (id)spellServer:(id)arg1 suggestCompletionDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 inLanguage:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestCompletionDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 suggestCompletionDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestCompletionsForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 inLanguage:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestCompletionsForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 suggestCompletionsForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestGuessesForKoreanWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 options:(id)arg4;
- (id)spellServer:(id)arg1 suggestGuessesForWord:(id)arg2 inLanguage:(id)arg3;
- (id)spellServer:(id)arg1 suggestGuessesForWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 inLanguage:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestGuessesForWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 suggestGuessesForWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestNextLetterDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 inLanguage:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestNextLetterDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 suggestNextLetterDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 inString:(id)arg3 language:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestWordWithLengthInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 language:(id)arg3;
- (id)spellServer:(id)arg1 suggestWordWithMinimumLength:(unsigned long long)arg2 maximumLength:(unsigned long long)arg3 language:(id)arg4;
- (void)timeout:(id)arg1;
- (void)updateLexiconsForLanguage:(id)arg1;
- (bool)useLanguageModelForLanguage:(id)arg1 tagger:(id)arg2 taggerIndex:(unsigned long long)arg3 appIdentifier:(id)arg4;
- (bool)useUnigramProbabilityForLanguage:(id)arg1;
- (bool)validateAbbreviationOrNumberWordBuffer:(char *)arg1 length:(unsigned long long)arg2 language:(id)arg3 encoding:(unsigned int)arg4 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg5 sender:(id)arg6;
- (bool)validateNoCapAbbreviation:(id)arg1 inLexiconForLanguage:(id)arg2;
- (bool)validateUntilLearnedWord:(id)arg1 inLexiconForLanguage:(id)arg2;
- (bool)validateVariantWord:(id)arg1 inLexiconForLanguage:(id)arg2;
- (bool)validateWord:(id)arg1 inLexiconForLanguage:(id)arg2;
- (bool)validateWord:(id)arg1 inLexiconForLanguage:(id)arg2 requiredMetaFlags:(unsigned int)arg3 alternativeRequiredMetaFlags:(unsigned int)arg4 prohibitedMetaFlags:(unsigned int)arg5 caseInsensitive:(bool)arg6;
- (bool)validateWordBuffer:(char *)arg1 length:(unsigned long long)arg2 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg3;
- (bool)validateWordBuffer:(char *)arg1 length:(unsigned long long)arg2 language:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5 checkBase:(bool)arg6 checkDict:(bool)arg7 checkNames:(bool)arg8 checkHyphens:(bool)arg9 checkIntercaps:(bool)arg10 checkOptions:(bool)arg11 depth:(unsigned long long)arg12;
- (bool)validateWordBuffer:(char *)arg1 length:(unsigned long long)arg2 language:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5 checkBase:(bool)arg6 checkDict:(bool)arg7 checkTemp:(bool)arg8 checkNames:(bool)arg9 checkHyphens:(bool)arg10 checkIntercaps:(bool)arg11 checkOptions:(bool)arg12 depth:(unsigned long long)arg13;
- (bool)validateWordBuffer:(char *)arg1 length:(unsigned long long)arg2 language:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5 checkBase:(bool)arg6 checkDict:(bool)arg7 checkTemp:(bool)arg8 checkUser:(bool)arg9 checkNames:(bool)arg10 checkHyphens:(bool)arg11 checkIntercaps:(bool)arg12 checkOptions:(bool)arg13 depth:(unsigned long long)arg14;
- (bool)validateWordBuffer:(char *)arg1 length:(unsigned long long)arg2 language:(id)arg3 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg4 sender:(id)arg5 checkBase:(bool)arg6 checkDict:(bool)arg7 checkTemp:(bool)arg8 checkUser:(bool)arg9 checkNames:(bool)arg10 checkHyphens:(bool)arg11 checkIntercaps:(bool)arg12 checkOptions:(bool)arg13 forCorrection:(bool)arg14 depth:(unsigned long long)arg15;
- (bool)validateWordPrefixBuffer:(char *)arg1 length:(unsigned long long)arg2 connection:(struct _PR_DB_IO { unsigned char x1; unsigned char x2; struct _PR_DOC_FORMAT { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned char x_3_1_6; unsigned short x_3_1_7; unsigned short x_3_1_8; } x3; unsigned short x4; unsigned short x5; unsigned int *x6; unsigned char x7; short x8; short x9; short x10; short x11; unsigned short x12; struct _PR_DBINIT { struct _PR_FILE {} *x_13_1_1[1]; struct _PR_FILE {} *x_13_1_2; struct _PR_FILE {} *x_13_1_3; struct _PR_FILE {} *x_13_1_4; struct _PR_FILE {} *x_13_1_5; } x13; struct _RULEFILE {} *x14[1]; struct _PR_STATUS { unsigned int x_15_1_1; int x_15_1_2; unsigned short x_15_1_3; } x15; }*)arg3;

@end
