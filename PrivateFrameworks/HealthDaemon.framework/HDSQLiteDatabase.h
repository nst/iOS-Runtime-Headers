/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
 */

@interface HDSQLiteDatabase : NSObject {
    struct unordered_set<sqlite3_stmt *, std::__1::hash<sqlite3_stmt *>, std::__1::equal_to<sqlite3_stmt *>, std::__1::allocator<sqlite3_stmt *> > { 
        struct __hash_table<sqlite3_stmt *, std::__1::hash<sqlite3_stmt *>, std::__1::equal_to<sqlite3_stmt *>, std::__1::allocator<sqlite3_stmt *> > { 
            struct unique_ptr<std::__1::__hash_node<sqlite3_stmt *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node<sqlite3_stmt *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> *> > > { 
                    struct __hash_node<sqlite3_stmt *, void *> {} **__first_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> *> > { 
                            unsigned long long __first_; 
                        } __data_; 
                    } __second_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<sqlite3_stmt *, void *> *>, std::__1::allocator<std::__1::__hash_node<sqlite3_stmt *, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<sqlite3_stmt *, void *> *> { 
                    struct __hash_node<sqlite3_stmt *, void *> {} *__next_; 
                } __first_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::hash<sqlite3_stmt *> > { 
                unsigned long long __first_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::equal_to<sqlite3_stmt *> > { 
                float __first_; 
            } __p3_; 
        } __table_; 
    }  _activeStatements;
    NSMutableDictionary * _attachedDatabaseURLsByName;
    bool  _checkpointRequired;
    struct sqlite3 { } * _db;
    <HDSQLiteDatabaseDelegate> * _delegate;
    NSURL * _fileURL;
    bool  _isHandlingTransactionEnd;
    bool  _isInTransaction;
    bool  _isWriter;
    NSMutableArray * _onCommitBlocks;
    NSMutableArray * _onRollbackBlocks;
    bool  _requiresRollback;
    struct __CFDictionary { } * _statementCache;
    long long  _transactionType;
}

@property (nonatomic) bool checkpointRequired;
@property (nonatomic) <HDSQLiteDatabaseDelegate> *delegate;
@property (nonatomic, readonly) NSURL *fileURL;
@property (nonatomic) bool isWriter;

+ (bool)_stepStatement:(struct sqlite3_stmt { }*)arg1 hasRow:(bool*)arg2 resultCode:(int*)arg3 error:(id*)arg4;
+ (id)highFrequencyDatabaseURLWithHomeDirectoryPath:(id)arg1;
+ (id)mainDatabaseURLWithHomeDirectoryPath:(id)arg1;
+ (id)protectedDatabaseURLWithHomeDirectoryPath:(id)arg1;
+ (id)virtualFilesystemModule;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_assertNoActiveStatements;
- (bool)_executeSQL:(id)arg1 cache:(bool)arg2 error:(id*)arg3 bindingHandler:(id)arg4 enumerationHandler:(id)arg5;
- (bool)_executeSQL:(id)arg1 error:(id*)arg2;
- (bool)_executeSQL:(id)arg1 error:(id*)arg2 retryIfBusy:(bool)arg3;
- (bool)_integerValueForPragma:(id)arg1 databaseName:(id)arg2 value:(long long*)arg3 error:(id*)arg4;
- (int)_openForWriting:(bool)arg1 error:(id*)arg2;
- (bool)_prepareStatementForSQL:(id)arg1 cache:(bool)arg2 error:(id*)arg3 usingBlock:(id)arg4;
- (void)_resetStatement:(struct sqlite3_stmt { }*)arg1 finalize:(bool)arg2;
- (id)_schemaForDatabaseWithName:(id)arg1 error:(id*)arg2;
- (id)_schemaForIndexWithName:(id)arg1 database:(id)arg2 error:(id*)arg3;
- (id)_schemaForTableWithName:(id)arg1 database:(id)arg2 error:(id*)arg3;
- (bool)_setPragma:(id)arg1 integerValue:(long long)arg2 withDatabaseName:(id)arg3 error:(id*)arg4;
- (struct sqlite3_stmt { }*)_statementForSQL:(id)arg1 cache:(bool)arg2 error:(id*)arg3;
- (bool)_verifyDatabaseOpenAndReturnError:(id*)arg1;
- (void)accessDatabaseUsingBlock:(id)arg1;
- (bool)accessHFDForReadingWithError:(id*)arg1 block:(id)arg2;
- (bool)accessHFDForWritingWithError:(id*)arg1 block:(id)arg2;
- (bool)attachDatabaseWithName:(id)arg1 fileURL:(id)arg2 error:(id*)arg3;
- (bool)attachProtectedDatabaseWithURL:(id)arg1 error:(id*)arg2;
- (bool)checkpointRequired;
- (void)close;
- (bool)columnIsNullable:(id)arg1 inTable:(id)arg2 error:(id*)arg3;
- (void)dealloc;
- (id)delegate;
- (bool)detachDatabaseWithName:(id)arg1 error:(id*)arg2;
- (bool)detachProtectedDatabaseWithError:(id*)arg1;
- (id)dumpSchemaWithError:(id*)arg1;
- (bool)enableIncrementalAutovacuumWithError:(id*)arg1;
- (bool)executeSQL:(id)arg1 error:(id*)arg2 bindingHandler:(id)arg3 enumerationHandler:(id)arg4;
- (bool)executeUncachedSQL:(id)arg1 error:(id*)arg2 bindingHandler:(id)arg3 enumerationHandler:(id)arg4;
- (id)fileURL;
- (bool)foreignKeyExistsFromTable:(id)arg1 column:(id)arg2 toTable:(id)arg3 column:(id)arg4 error:(id*)arg5;
- (id)getLastErrorWithResultCode:(int)arg1;
- (id)highFrequenceDatabaseURL;
- (bool)incrementalVacuumDatabaseIfNeeded:(id)arg1 error:(id*)arg2;
- (id)initWithDatabaseURL:(id)arg1 delegate:(id)arg2;
- (bool)isDatabaseWithNameAttached:(id)arg1;
- (bool)isProtectedDatabaseAttached;
- (bool)isWriter;
- (id)lastInsertRowID;
- (void)onCommit:(id)arg1 orRollback:(id)arg2;
- (int)openForReadingWithError:(id*)arg1;
- (int)openWithError:(id*)arg1;
- (bool)performTransactionWithType:(long long)arg1 error:(id*)arg2 usingBlock:(id)arg3;
- (void)requireRollback;
- (void)setCheckpointRequired:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setIsWriter:(bool)arg1;
- (bool)setUserVersion:(long long)arg1 withDatabaseName:(id)arg2 error:(id*)arg3;
- (bool)table:(id)arg1 hasColumnWithName:(id)arg2 error:(id*)arg3;
- (id)typeOfColumn:(id)arg1 inTable:(id)arg2 error:(id*)arg3;
- (long long)userVersionWithDatabaseName:(id)arg1 error:(id*)arg2;
- (bool)validateForeignKeysForTable:(id)arg1 databaseName:(id)arg2 error:(id*)arg3;

@end
