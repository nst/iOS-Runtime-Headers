/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSDMovieRep : TSDMediaRep <TSDPlayableMediaRep> {
    struct CGImage { } * mAlternatePosterImage;
    AVAsset * mAssetForPlayability;
    bool  mCurrentlyObservingPlayerLayer;
    bool  mDelayTearingDownPlayerController;
    bool  mDidCancelUpdatingPlayButtonVisibility;
    bool  mDidCheckPlayability;
    bool  mDirectlyManagesLayerContent;
    float  mDynamicVolume;
    bool  mInReadMode;
    unsigned long long  mIsChangingDynamicVisibleTimeCount;
    bool  mIsChangingDynamicVolume;
    bool  mIsPlayable;
    CALayer * mLayerToStroke;
    CALayer * mMovieReflectionLayer;
    CALayer * mMovieReflectionMaskLayer;
    bool  mNeedsTeardownPlayerController;
    TSDButtonKnob * mPlayButtonKnob;
    bool  mPlayButtonKnobVisible;
    NSObject<TSKMediaPlayerController> * mPlayerController;
    CALayer * mPlayerLayer;
    bool  mPlayerLayerShouldBeDisplayed;
    CALayer * mPlayerStrokeLayer;
    CALayer * mReflectionFrameMaskLayer;
    TSDFrameRep * mReflectionFrameRep;
    CALayer * mReflectionPlayerLayer;
    CALayer * mReflectionPlayerStrokeLayer;
    CALayer * mReflectionPlayerStrokeMaskLayer;
}

@property (nonatomic) struct CGImage { }*alternatePosterImage;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) TSDMovieInfo *movieInfo;
@property (getter=isPlayable, nonatomic, readonly) bool playable;
@property (readonly) Class superclass;

+ (double)magicMoveAttributeMatchPercentBetweenOutgoingObject:(id)arg1 incomingObject:(id)arg2 mixingTypeContext:(id)arg3;

- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (struct CGImage { }*)alternatePosterImage;
- (void)dealloc;
- (id)downloadProgressPlaceholderImage;
- (void)drawInContextWithoutEffects:(struct CGContext { }*)arg1 withContent:(bool)arg2 strokeDrawOptions:(unsigned long long)arg3 withOpacity:(bool)arg4 forAlphaOnly:(bool)arg5 drawChildren:(bool)arg6;
- (void)drawInLayerContext:(struct CGContext { }*)arg1;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;
- (bool)isDataCurrentlyDownloading;
- (id)movieInfo;
- (id)movieLayout;
- (struct CGImage { }*)newFrameMaskForViewScale:(double)arg1 frameRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2;
- (void)p_drawInContext:(struct CGContext { }*)arg1 withContent:(bool)arg2 withStroke:(bool)arg3 withOpacity:(double)arg4 withMask:(bool)arg5 forShadowOrHitTest:(bool)arg6;
- (void)p_drawPosterImageInContext:(struct CGContext { }*)arg1 forShadowOrHitTest:(bool)arg2;
- (void)p_drawReflectionGradientIntoMovieReflectionLayer:(struct CGContext { }*)arg1 reflectionSize:(struct CGSize { double x1; double x2; })arg2;
- (void)p_updateMovieReflectionMaskLayer;
- (void)setAlternatePosterImage:(struct CGImage { }*)arg1;
- (bool)shouldShowCheckerboard;

@end
