/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit
 */

@interface CKMessageEntryContentView : UIScrollView <CKMessageEntryRichTextViewDelegate, CKMessageEntryViewStyleProtocol, UITextViewDelegate> {
    CKMessageEntryTextView * _activeView;
    UIButton * _clearPluginButton;
    CKComposition * _composition;
    double  _containerViewLineWidth;
    CKConversation * _conversation;
    bool  _ignoreEndEditing;
    bool  _isCompositionExpirable;
    double  _maxContentWidthWhenExpanded;
    bool  _needsEnsureSelectionVisible;
    bool  _needsEnsureTextViewVisible;
    bool  _needsTextLayout;
    NSString * _overridePlaceholderText;
    bool  _pendingShelfPayloadWillAnimateIn;
    double  _placeHolderWidth;
    UIView * _pluginDividerLine;
    UIViewController<CKPluginEntryViewController> * _pluginEntryViewController;
    NSString * _requestedPlaceholderText;
    double  _sendButtonTextInsetWidth;
    IMPluginPayload * _shelfPluginPayload;
    bool  _shouldShowSubject;
    long long  _style;
    CKMessageEntryTextView * _subjectView;
    UIView * _textAndSubjectDividerLine;
    CKMessageEntryRichTextView * _textView;
}

@property (getter=isActive, nonatomic, readonly) bool active;
@property (nonatomic) CKMessageEntryTextView *activeView;
@property (nonatomic) BOOL balloonColor;
@property (nonatomic, retain) UIButton *clearPluginButton;
@property (nonatomic, retain) CKComposition *composition;
@property (nonatomic) double containerViewLineWidth;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentTextAlignmentInsets;
@property (nonatomic) CKConversation *conversation;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool ignoreEndEditing;
@property (nonatomic) bool isCompositionExpirable;
@property (nonatomic) double maxContentWidthWhenExpanded;
@property (nonatomic) bool needsEnsureSelectionVisible;
@property (nonatomic) bool needsEnsureTextViewVisible;
@property (nonatomic) bool needsTextLayout;
@property (nonatomic, retain) NSString *overridePlaceholderText;
@property (nonatomic) bool pendingShelfPayloadWillAnimateIn;
@property (nonatomic) double placeHolderWidth;
@property (nonatomic, copy) NSString *placeholderText;
@property (nonatomic, retain) UIView *pluginDividerLine;
@property (nonatomic, retain) UIViewController<CKPluginEntryViewController> *pluginEntryViewController;
@property (nonatomic, readonly) UIView *pluginView;
@property (nonatomic, retain) NSString *requestedPlaceholderText;
@property (nonatomic) double sendButtonTextInsetWidth;
@property (nonatomic, retain) IMPluginPayload *shelfPluginPayload;
@property (nonatomic, readonly) bool shouldShowPlugin;
@property (nonatomic) bool shouldShowSubject;
@property (getter=isShowingDictationPlaceholder, nonatomic, readonly) bool showingDictationPlaceholder;
@property (getter=isSingleLine, nonatomic, readonly) bool singleLine;
@property (nonatomic) long long style;
@property (nonatomic, retain) CKMessageEntryTextView *subjectView;
@property (readonly) Class superclass;
@property (nonatomic, retain) UIView *textAndSubjectDividerLine;
@property (nonatomic, retain) CKMessageEntryRichTextView *textView;

+ (id)_createSubjectView;
+ (id)_createTextView;
+ (void)prewarmTextView;

- (void).cxx_destruct;
- (double)_calcuateIdealMaxPluginHeight:(bool)arg1;
- (void)_layoutDividerLine:(id)arg1 leftInset:(double)arg2 rightInset:(double)arg3 currentYOffset:(double*)arg4;
- (void)_layoutTextView:(id)arg1 currentYOffset:(double*)arg2 originX:(double)arg3 maxWidth:(double)arg4;
- (double)_maxWidthForTextView;
- (bool)_shouldDeferUpdateUI;
- (void)_updateUI;
- (void)acceptAutocorrection;
- (id)activeView;
- (BOOL)balloonColor;
- (id)clearPluginButton;
- (void)clearPluginButtonTapped:(id)arg1;
- (id)composition;
- (void)configureShelfForPluginPayload:(id)arg1;
- (double)containerViewLineWidth;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentTextAlignmentInsets;
- (id)conversation;
- (void)dealloc;
- (void)didFinishAnimatedBoundsChange;
- (void)ensureSelectionVisibleIfNeeded;
- (void)ensureTextViewVisibleIfNeeded;
- (bool)ignoreEndEditing;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 shouldShowSubject:(bool)arg2;
- (void)invalidateComposition;
- (bool)isActive;
- (bool)isCompositionExpirable;
- (bool)isShowingDictationPlaceholder;
- (bool)isSingleLine;
- (void)layoutSubviews;
- (bool)makeActive;
- (double)maxContentWidthWhenExpanded;
- (double)maxWidthForPreviewImagesInMessageEntryRichTextView:(id)arg1;
- (void)messageEntryRichTextView:(id)arg1 didTapMediaObject:(id)arg2;
- (void)messageEntryRichTextView:(id)arg1 pastedURL:(id)arg2;
- (bool)messageEntryRichTextView:(id)arg1 shouldPasteMediaObjects:(id)arg2;
- (void)messageEntryRichTextViewDidTapHandwritingKey:(id)arg1;
- (void)messageEntryRichTextViewWasTapped:(id)arg1 isLongPress:(bool)arg2;
- (bool)needsEnsureSelectionVisible;
- (bool)needsEnsureTextViewVisible;
- (bool)needsTextLayout;
- (id)overridePlaceholderText;
- (bool)pendingShelfPayloadWillAnimateIn;
- (double)placeHolderWidth;
- (id)placeholderText;
- (id)pluginDividerLine;
- (id)pluginEntryViewController;
- (void)pluginPayloadWantsResize:(id)arg1;
- (id)pluginView;
- (void)plugingPayloadDidLoad:(id)arg1;
- (void)prepareForShelfPayloadAnimation;
- (id)requestedPlaceholderText;
- (double)sendButtonTextInsetWidth;
- (void)setActiveView:(id)arg1;
- (void)setBalloonColor:(BOOL)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setClearPluginButton:(id)arg1;
- (void)setComposition:(id)arg1;
- (void)setContainerViewLineWidth:(double)arg1;
- (void)setConversation:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setIgnoreEndEditing:(bool)arg1;
- (void)setIsCompositionExpirable:(bool)arg1;
- (void)setMaxContentWidthWhenExpanded:(double)arg1;
- (void)setNeedsEnsureSelectionVisible:(bool)arg1;
- (void)setNeedsEnsureTextViewVisible:(bool)arg1;
- (void)setNeedsTextLayout:(bool)arg1;
- (void)setOverridePlaceholderText:(id)arg1;
- (void)setPendingShelfPayloadWillAnimateIn:(bool)arg1;
- (void)setPlaceHolderWidth:(double)arg1;
- (void)setPlaceholderText:(id)arg1;
- (void)setPluginDividerLine:(id)arg1;
- (void)setPluginEntryViewController:(id)arg1;
- (void)setRequestedPlaceholderText:(id)arg1;
- (void)setSendButtonTextInsetWidth:(double)arg1;
- (void)setShelfPluginPayload:(id)arg1;
- (void)setShouldShowSubject:(bool)arg1;
- (void)setStyle:(long long)arg1;
- (void)setSubjectView:(id)arg1;
- (void)setTextAndSubjectDividerLine:(id)arg1;
- (void)setTextView:(id)arg1;
- (id)shelfPluginPayload;
- (bool)shouldLayoutPluginEdgeToEdge;
- (bool)shouldShowClearButton;
- (bool)shouldShowPlugin;
- (bool)shouldShowSubject;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (long long)style;
- (id)subjectView;
- (id)textAndSubjectDividerLine;
- (id)textView;
- (void)textViewDidBeginEditing:(id)arg1;
- (void)textViewDidChange:(id)arg1;
- (void)textViewDidEndEditing:(id)arg1;
- (bool)textViewShouldBeginEditing:(id)arg1;
- (void)willAnimateBoundsChange;

@end
