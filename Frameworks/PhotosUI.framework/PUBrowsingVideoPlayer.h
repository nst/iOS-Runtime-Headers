/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI
 */

@interface PUBrowsingVideoPlayer : PUViewModel <ISChangeObserver, ISWrappedAVPlayerDelegate> {
    ISWrappedAVAudioSession * __audioSession;
    int  __currentRequestID;
    long long  __currentUnloadRequestId;
    bool  __isBuffering;
    bool  __isPlayerTimeAdvancing;
    bool  __isUpdatingAudioSession;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  __lastPlayerTime;
    id /* block */  __onPlayerLoadedBlock;
    NSDate * __playRequestDate;
    NSMutableSet * __playerLoadingDisablingReasons;
    NSTimer * __playerTimeAdvancementTimer;
    id  __playerTimeObservationToken;
    NSMutableSet * __playingDisablingReasons;
    bool  __shouldLoadPlayer;
    bool  __shouldRewindBeforePlaying;
    NSHashTable * __timeObservers;
    bool  _alwaysRespectsMuteSwitch;
    <PUDisplayAsset> * _asset;
    NSObject<OS_dispatch_queue> * _audioSessionQueue;
    ISWrappedAVPlayer * _avPlayer;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _currentTime;
    long long  _desiredPlayState;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _desiredSeekTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _duration;
    NSError * _error;
    bool  _isActivated;
    bool  _isAtBeginning;
    bool  _isAtEnd;
    bool  _isPlayable;
    bool  _isPlayerLoadingAllowed;
    bool  _isPlayingAllowed;
    bool  _isStalled;
    PUMediaProvider * _mediaProvider;
    long long  _playState;
    AVPlayerItem * _playerItem;
    PXUpdater * _updater;
}

@property (setter=_setAudioSession:, nonatomic, retain) ISWrappedAVAudioSession *_audioSession;
@property (setter=_setCurrentRequestID:, nonatomic) int _currentRequestID;
@property (setter=_setCurrentUnloadRequestId:, nonatomic) long long _currentUnloadRequestId;
@property (setter=_setBuffering:, nonatomic) bool _isBuffering;
@property (setter=_setPlayerTimeAdvancing:, nonatomic) bool _isPlayerTimeAdvancing;
@property (setter=_setUpdatingAudioSession:, nonatomic) bool _isUpdatingAudioSession;
@property (setter=_setLastPlayerTime:, nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } _lastPlayerTime;
@property (setter=_setOnPlayerLoadedBlock:, nonatomic, copy) id /* block */ _onPlayerLoadedBlock;
@property (setter=_setPlayRequestDate:, nonatomic, retain) NSDate *_playRequestDate;
@property (setter=_setPlayerLoadingDisablingReasons:, nonatomic, retain) NSMutableSet *_playerLoadingDisablingReasons;
@property (setter=_setPlayerTimeAdvancementTimer:, nonatomic, retain) NSTimer *_playerTimeAdvancementTimer;
@property (setter=_setPlayerTimeObservationToken:, nonatomic, retain) id _playerTimeObservationToken;
@property (setter=_setPlayingDisablingReasons:, nonatomic, retain) NSMutableSet *_playingDisablingReasons;
@property (setter=_setShouldLoadPlayer:, nonatomic) bool _shouldLoadPlayer;
@property (setter=_setShouldRewindBeforePlaying:, nonatomic) bool _shouldRewindBeforePlaying;
@property (nonatomic, readonly) NSHashTable *_timeObservers;
@property (nonatomic) bool alwaysRespectsMuteSwitch;
@property (nonatomic, retain) <PUDisplayAsset> *asset;
@property (setter=_setAVPlayer:, nonatomic, retain) ISWrappedAVPlayer *avPlayer;
@property (nonatomic, readonly) PUBrowsingVideoPlayerChange *currentChange;
@property (setter=_setCurrentTime:, nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } currentTime;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) long long desiredPlayState;
@property (setter=setDesiredSeekTime:, nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } desiredSeekTime;
@property (setter=_setDuration:, nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } duration;
@property (setter=_setError:, nonatomic, retain) NSError *error;
@property (readonly) unsigned long long hash;
@property (setter=setActivated:, nonatomic) bool isActivated;
@property (setter=_setAtBeginning:, nonatomic) bool isAtBeginning;
@property (setter=_setAtEnd:, nonatomic) bool isAtEnd;
@property (setter=_setPlayable:, nonatomic) bool isPlayable;
@property (setter=_setPlayerLoadingAllowed:, nonatomic) bool isPlayerLoadingAllowed;
@property (setter=_setPlayingAllowed:, nonatomic) bool isPlayingAllowed;
@property (setter=_setStalled:, nonatomic) bool isStalled;
@property (nonatomic, readonly) PUMediaProvider *mediaProvider;
@property (setter=_setPlayState:, nonatomic) long long playState;
@property (setter=_setPlayerItem:, nonatomic, retain) AVPlayerItem *playerItem;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_adoptAudioSession:(id)arg1;
- (id)_audioSession;
- (void)_audiosessionQueue_setAudioCategory:(id)arg1;
- (void)_avPlayerTimeDidChange:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (int)_currentRequestID;
- (long long)_currentUnloadRequestId;
- (void)_dequeueAllOnPlayerLoadedBlocksIfApplicable;
- (void)_enqueueOnPlayerLoadedBlock:(id /* block */)arg1;
- (void)_handleDidBecomeActiveNotification:(id)arg1;
- (void)_handlePlayerTimeAdvancementTimer:(id)arg1;
- (void)_handlePlayerUnloadWithRequestId:(long long)arg1;
- (void)_handleResultOfPlayerItemRequestWithID:(int)arg1 playerItem:(id)arg2 info:(id)arg3;
- (void)_handleShouldReloadAssetMediaNotification:(id)arg1;
- (void)_handleWillResignActiveNotification:(id)arg1;
- (void)_invalidatePlayerItem;
- (bool)_isAVPlayerPlayStateOutOfSync;
- (bool)_isBuffering;
- (bool)_isPlayerTimeAdvancing;
- (bool)_isUpdatingAudioSession;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_lastPlayerTime;
- (void)_logPlaybackState;
- (id /* block */)_onPlayerLoadedBlock;
- (void)_performBlockWithLoadedAVPlayer:(id /* block */)arg1;
- (id)_playRequestDate;
- (id)_playbackStateDescription;
- (id)_playerLoadingDisablingReasons;
- (id)_playerTimeAdvancementTimer;
- (id)_playerTimeObservationToken;
- (id)_playingDisablingReasons;
- (void)_setAVPlayer:(id)arg1;
- (void)_setAtBeginning:(bool)arg1;
- (void)_setAtEnd:(bool)arg1;
- (void)_setAudioSession:(id)arg1;
- (void)_setBuffering:(bool)arg1;
- (void)_setCurrentRequestID:(int)arg1;
- (void)_setCurrentTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_setCurrentUnloadRequestId:(long long)arg1;
- (void)_setDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_setError:(id)arg1;
- (void)_setLastPlayerTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_setOnPlayerLoadedBlock:(id /* block */)arg1;
- (void)_setPlayRequestDate:(id)arg1;
- (void)_setPlayState:(long long)arg1;
- (void)_setPlayabilityFromAsset;
- (void)_setPlayable:(bool)arg1;
- (void)_setPlayerItem:(id)arg1;
- (void)_setPlayerLoadingAllowed:(bool)arg1;
- (void)_setPlayerLoadingDisablingReasons:(id)arg1;
- (void)_setPlayerTimeAdvancementTimer:(id)arg1;
- (void)_setPlayerTimeAdvancing:(bool)arg1;
- (void)_setPlayerTimeObservationToken:(id)arg1;
- (void)_setPlayingAllowed:(bool)arg1;
- (void)_setPlayingDisablingReasons:(id)arg1;
- (void)_setShouldLoadPlayer:(bool)arg1;
- (void)_setShouldRewindBeforePlaying:(bool)arg1;
- (void)_setStalled:(bool)arg1;
- (void)_setUpdatingAudioSession:(bool)arg1;
- (bool)_shouldLoadPlayer;
- (bool)_shouldRewindBeforePlaying;
- (void)_startObservingAVPlayer;
- (void)_stopObservingAVPlayer;
- (id)_timeObservers;
- (void)_updateAVPlayer;
- (void)_updateAVPlayerPlayState;
- (void)_updateAtBeginningOrEnd;
- (void)_updateAudioSession;
- (void)_updateBuffering;
- (void)_updateDuration;
- (void)_updatePlayState;
- (void)_updatePlayability;
- (void)_updatePlayerItem;
- (void)_updateStalled;
- (bool)alwaysRespectsMuteSwitch;
- (id)asset;
- (id)avPlayer;
- (void)avPlayer:(id)arg1 itemDidPlayToEnd:(id)arg2;
- (void)avPlayerDidDeallocate;
- (id)currentChange;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })currentTime;
- (void)dealloc;
- (id)debugDetailedDescription;
- (long long)desiredPlayState;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })desiredSeekTime;
- (void)didPerformChanges;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })duration;
- (id)error;
- (id)init;
- (id)initWithAsset:(id)arg1 mediaProvider:(id)arg2;
- (void)invalidateExistingPlayer;
- (bool)isActivated;
- (bool)isAtBeginning;
- (bool)isAtEnd;
- (bool)isPlayable;
- (bool)isPlayerLoadingAllowed;
- (bool)isPlayingAllowed;
- (bool)isStalled;
- (id)mediaProvider;
- (id)newViewModelChange;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3;
- (long long)playState;
- (id)playerItem;
- (void)registerChangeObserver:(id)arg1;
- (void)registerTimeObserver:(id)arg1;
- (void)rewindExistingPlayer;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 completionHandler:(id /* block */)arg2;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toleranceBefore:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 toleranceAfter:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 completionHandler:(id /* block */)arg4;
- (void)setActivated:(bool)arg1;
- (void)setAlwaysRespectsMuteSwitch:(bool)arg1;
- (void)setAsset:(id)arg1;
- (void)setDesiredPlayState:(long long)arg1;
- (void)setDesiredSeekTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setPlayerLoadingDisabled:(bool)arg1 forReason:(id)arg2;
- (void)setPlayingDisabled:(bool)arg1 forReason:(id)arg2;
- (void)unregisterChangeObserver:(id)arg1;
- (void)unregisterTimeObserver:(id)arg1;

@end
