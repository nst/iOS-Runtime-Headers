/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TNPageController : NSObject {
    long long  _cachedPageCountDuringDynamicContentScaleChange;
    bool  _computingPageCounts;
    NSObject<TNPageControllerDelegate> * _delegate;
    TNDocumentRoot * _documentRoot;
    TNPageCoordinateDictionary * _footerLayerCache;
    double  _footerTextHeight;
    TNPageCoordinateDictionary * _headerLayerCache;
    double  _headerTextHeight;
    TSUPointerKeyDictionary * _hintCacheDictionary;
    bool  _inDynamicContentScaleChange;
    struct TSUCellCoord { 
        unsigned short row; 
        unsigned char column; 
        unsigned char reserved; 
    }  _maxPageCoordinate;
    bool  _maxPageCoordinateValid;
    bool  _pageCountsValid;
    TNPageCoordinateDictionary * _pageLayoutCache;
    bool  _postAutoFitContentScaleDidChangeNotificationAfterProcessingChanges;
    TNPrintProperties * _printProperties;
    long long  _priorPageCount;
    bool  _processingChanges;
    TNSheet * _sheet;
    TSUPointerKeyDictionary * _sheetPageCountCache;
    long long  _subsequentPageCount;
    bool  _updateViewScaleForDrawablesChangeAfterProcessingChanges;
    double  _userViewScale;
}

@property (nonatomic) long long cachedPageCountDuringDynamicContentScaleChange;
@property (nonatomic) bool computingPageCounts;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentFrame;
@property (nonatomic, readonly) double contentScale;
@property (nonatomic) NSObject<TNPageControllerDelegate> *delegate;
@property (nonatomic) TNDocumentRoot *documentRoot;
@property (nonatomic, retain) TNPageCoordinateDictionary *footerLayerCache;
@property (nonatomic) double footerTextHeight;
@property (nonatomic, retain) TNPageCoordinateDictionary *headerLayerCache;
@property (nonatomic) double headerTextHeight;
@property (nonatomic, retain) TSUPointerKeyDictionary *hintCacheDictionary;
@property (nonatomic, readonly) bool inDynamicContentScaleChange;
@property (nonatomic) struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; } maxPageCoordinate;
@property (nonatomic) bool maxPageCoordinateValid;
@property (nonatomic, readonly) unsigned long long numPages;
@property (nonatomic) bool pageCountsValid;
@property (nonatomic, retain) TNPageCoordinateDictionary *pageLayoutCache;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } pageSize;
@property (getter=isPortrait, nonatomic, readonly) bool portrait;
@property (nonatomic) bool postAutoFitContentScaleDidChangeNotificationAfterProcessingChanges;
@property (nonatomic, retain) TNPrintProperties *printProperties;
@property (nonatomic) long long priorPageCount;
@property (getter=isProcessingChanges, nonatomic) bool processingChanges;
@property (nonatomic) TNSheet *sheet;
@property (nonatomic, retain) TSUPointerKeyDictionary *sheetPageCountCache;
@property (nonatomic) long long subsequentPageCount;
@property (nonatomic) bool updateViewScaleForDrawablesChangeAfterProcessingChanges;
@property (nonatomic) double userViewScale;

+ (double)autoFitContentScaleForSheet:(id)arg1;
+ (id)cachedAutoFitContentScaleDictionary;
+ (double)p_unclampedAutoFitContentScaleForSheet:(id)arg1;

- (void).cxx_destruct;
- (long long)cachedPageCountDuringDynamicContentScaleChange;
- (void)canvasViewScaleDidChange:(double)arg1;
- (bool)computingPageCounts;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentFrame;
- (double)contentScale;
- (struct CGSize { double x1; double x2; })contentSizeForCanvasLayer;
- (void)dealloc;
- (id)delegate;
- (id)documentRoot;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })firstPartitionFrameForInfo:(id)arg1 outStartPageCoordinate:(out struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; }*)arg2;
- (id)footerLayerCache;
- (double)footerTextHeight;
- (id)headerLayerCache;
- (double)headerTextHeight;
- (id)hintCacheDictionary;
- (void)i_invalidateHintCache;
- (void)i_invalidatePageLayoutCache;
- (id)i_layerForHeaderType:(int)arg1 fragment:(int)arg2 atPageCoordinate:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg3;
- (void)i_setLayer:(id)arg1 forHeaderType:(int)arg2 fragment:(int)arg3 atPageCoordinate:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg4;
- (bool)inDynamicContentScaleChange;
- (id)initWithDocumentRoot:(id)arg1;
- (void)invalidateCachedAutoFitContentScaleForSheet:(id)arg1;
- (void)invalidateDrawableLayouts;
- (void)invalidatePageLayout;
- (void)invalidatePageLayoutGeometries;
- (bool)isPagePlaceholderAtPageCoordinate:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (bool)isPortrait;
- (bool)isProcessingChanges;
- (void)layoutAtPageIndex:(unsigned long long)arg1 forLayoutController:(id)arg2;
- (void)layoutInPageRange:(struct { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct TSUCellCoord { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg1 forLayoutController:(id)arg2;
- (struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })maxPageCoordinate;
- (bool)maxPageCoordinateValid;
- (unsigned long long)numPages;
- (void)p_clearHintCache;
- (void)p_computePriorPageCountForCurrentSheet;
- (void)p_computeSubsequentPageCountForCurrentSheet;
- (void)p_didEndDynamicContentScaleChange:(id)arg1;
- (void)p_enumerateOverPageRange:(struct { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct TSUCellCoord { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg1 usingBlock:(id /* block */)arg2;
- (bool)p_headersOrFootersContainPageNumberRelatedAttachments;
- (id)p_hintCacheForInfo:(id)arg1;
- (void)p_invalidateCachedAutoFitContentScaleForSheet:(id)arg1 notify:(bool)arg2;
- (void)p_invalidatePageCounts;
- (id)p_layoutForInfo:(id)arg1 atCoordinate:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg2 parentLayout:(id)arg3;
- (void)p_layoutInfo:(id)arg1 intoPageLayout:(id)arg2 atPageCoordinate:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg3;
- (void)p_layoutInfo:(id)arg1 intoPageRange:(struct { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct TSUCellCoord { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg2;
- (void)p_measureHeadersAndFooters;
- (struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })p_pageCoordinateForPageLayoutAtDevicePoint:(struct CGPoint { double x1; double x2; })arg1;
- (long long)p_pageCountForSheet:(id)arg1;
- (id)p_pageInfoForPageAtIndex:(unsigned long long)arg1;
- (id)p_pageLayoutAtCoordinate:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (void)p_postAutoFitContentScaleDidChangeNotification;
- (double)p_printViewDefaultUserViewScale;
- (long long)p_priorPageCount;
- (long long)p_updateCachedPageCountForCurrentSheet;
- (void)p_updateVisiblePageRange:(struct { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct TSUCellCoord { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg1 forLayoutController:(id)arg2;
- (void)p_willBeginDynamicContentScaleChange:(id)arg1;
- (struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })pageCoordinateForDrawableAtUnscaledPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })pageCoordinateForMaxVisiblePage;
- (struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })pageCoordinateForPageIndex:(unsigned long long)arg1;
- (struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })pageCoordinateForPageLayoutAtUnscaledPoint:(struct CGPoint { double x1; double x2; })arg1;
- (unsigned long long)pageCount;
- (bool)pageCountsValid;
- (id)pageInfoForPageIndex:(unsigned long long)arg1;
- (id)pageLayoutCache;
- (id)pageLayoutGeometryForPageCoordinate:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (id)pageLayoutGeometryForPrintingAtPageCoordinate:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (unsigned long long)pageNumberForPageCoordinate:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (struct { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct TSUCellCoord { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })pageRangeForContent;
- (struct { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct TSUCellCoord { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })pageRangeForContentWithUpperBound:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (struct { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct TSUCellCoord { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })pageRangeForInfo:(id)arg1 upperBound:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (struct { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct TSUCellCoord { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })pageRangeForPageIndex:(unsigned long long)arg1;
- (struct { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct TSUCellCoord { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })pageRangeWithPlaceholdersWithUpperBound:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (struct CGSize { double x1; double x2; })pageSize;
- (struct CGSize { double x1; double x2; })pageSizeWithGutter;
- (bool)postAutoFitContentScaleDidChangeNotificationAfterProcessingChanges;
- (id)printProperties;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })printingLayoutRectForPageIndex:(unsigned long long)arg1;
- (long long)priorPageCount;
- (void)registerPageLayout:(id)arg1 atPageCoordinate:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (void)removeLayoutsFromPages;
- (void)setCachedPageCountDuringDynamicContentScaleChange:(long long)arg1;
- (void)setComputingPageCounts:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDocumentRoot:(id)arg1;
- (void)setFooterLayerCache:(id)arg1;
- (void)setFooterTextHeight:(double)arg1;
- (void)setHeaderLayerCache:(id)arg1;
- (void)setHeaderTextHeight:(double)arg1;
- (void)setHintCacheDictionary:(id)arg1;
- (void)setMaxPageCoordinate:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (void)setMaxPageCoordinateValid:(bool)arg1;
- (void)setPageCountsValid:(bool)arg1;
- (void)setPageLayoutCache:(id)arg1;
- (void)setPostAutoFitContentScaleDidChangeNotificationAfterProcessingChanges:(bool)arg1;
- (void)setPrintProperties:(id)arg1;
- (void)setPriorPageCount:(long long)arg1;
- (void)setProcessingChanges:(bool)arg1;
- (void)setSheet:(id)arg1;
- (void)setSheetPageCountCache:(id)arg1;
- (void)setSubsequentPageCount:(long long)arg1;
- (void)setUpdateViewScaleForDrawablesChangeAfterProcessingChanges:(bool)arg1;
- (void)setUserViewScale:(double)arg1;
- (id)sheet;
- (id)sheetPageCountCache;
- (long long)subsequentPageCount;
- (void)syncPositionOfLayout:(id)arg1 atCoordinate:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (void)updateContentScale;
- (void)updatePrintMargins;
- (void)updateUserViewScale;
- (void)updateViewScale;
- (bool)updateViewScaleForDrawablesChangeAfterProcessingChanges;
- (double)userViewScale;
- (void)willExitPrintView;

@end
