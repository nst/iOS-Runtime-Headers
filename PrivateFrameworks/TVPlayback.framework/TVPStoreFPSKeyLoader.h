/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback
 */

@interface TVPStoreFPSKeyLoader : NSObject <TVPSecureKeyDeliveryCoordinatorDelegate, TVPSecureKeyLoaderDelegate> {
    NSURL * _certificateDataURL;
    NSObject<TVPStoreFPSKeyLoaderDelegate> * _delegate;
    bool  _didSkipRentalCheckout;
    NSError * _error;
    TVPPlaybackReportingEventCollection * _eventCollection;
    TVPSecureKeyStandardLoader * _fpsCertLoader;
    bool  _holdKeyResponses;
    bool  _includeGUID;
    NSURL * _keyDataURL;
    NSMutableArray * _pendingKeyRequests;
    NSNumber * _rentalID;
    bool  _requiresExternalEntitlementCheck;
    TVPSecureKeyDeliveryCoordinator * _secureKeyDeliveryCoordinator;
    TVPSecureKeyStandardLoader * _secureKeyStandardLoader;
    NSString * _serviceProviderID;
}

@property (nonatomic, copy) NSURL *certificateDataURL;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) NSObject<TVPStoreFPSKeyLoaderDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool didSkipRentalCheckout;
@property (nonatomic, retain) NSError *error;
@property (nonatomic, retain) TVPPlaybackReportingEventCollection *eventCollection;
@property (nonatomic, retain) TVPSecureKeyStandardLoader *fpsCertLoader;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool holdKeyResponses;
@property (nonatomic) bool includeGUID;
@property (nonatomic, copy) NSURL *keyDataURL;
@property (nonatomic, retain) NSMutableArray *pendingKeyRequests;
@property (nonatomic, retain) NSNumber *rentalID;
@property (nonatomic) bool requiresExternalEntitlementCheck;
@property (nonatomic, retain) TVPSecureKeyDeliveryCoordinator *secureKeyDeliveryCoordinator;
@property (nonatomic, retain) TVPSecureKeyStandardLoader *secureKeyStandardLoader;
@property (nonatomic, retain) NSString *serviceProviderID;
@property (readonly) Class superclass;

+ (void)initialize;
+ (void)preFetchFPSCertificate;

- (void).cxx_destruct;
- (void)_failPendingKeyRequestsWithError:(id)arg1;
- (void)_preFetchFPSCertificate;
- (id)certificateDataURL;
- (id)delegate;
- (bool)didSkipRentalCheckout;
- (id)error;
- (id)eventCollection;
- (id)fpsCertLoader;
- (bool)holdKeyResponses;
- (bool)includeGUID;
- (id)initWithCertificateDataURL:(id)arg1 keyDataURL:(id)arg2;
- (id)keyDataURL;
- (void)loadSecureKeyRequest:(id)arg1;
- (id)pendingKeyRequests;
- (id)rentalID;
- (bool)requiresExternalEntitlementCheck;
- (id)secureKeyDeliveryCoordinator;
- (void)secureKeyDeliveryCoordinator:(id)arg1 didReceiveOfflineKeyData:(id)arg2 forKeyRequest:(id)arg3;
- (void)secureKeyDeliveryCoordinator:(id)arg1 didReceiveUpdatedRentalExpirationDate:(id)arg2;
- (void)secureKeyDeliveryCoordinator:(id)arg1 didReceiveUpdatedRentalExpirationDate:(id)arg2 playbackStartDate:(id)arg3;
- (void)secureKeyDeliveryCoordinator:(id)arg1 didReceiveUpdatedRentalPlaybackStartDate:(id)arg2;
- (void)secureKeyDeliveryCoordinator:(id)arg1 willFailWithError:(id)arg2;
- (void)secureKeyDeliveryCoordinator:(id)arg1 willFailWithError:(id)arg2 forKeyRequest:(id)arg3;
- (void)secureKeyDeliveryCoordinatorWillSucceed:(id)arg1;
- (void)secureKeyDeliveryCoordinatorWillSucceed:(id)arg1 forKeyRequest:(id)arg2;
- (void)secureKeyLoader:(id)arg1 didFailWithError:(id)arg2 forRequest:(id)arg3;
- (void)secureKeyLoader:(id)arg1 didLoadCertificateData:(id)arg2 forRequest:(id)arg3;
- (void)secureKeyLoader:(id)arg1 didLoadContentIdentifierData:(id)arg2 forRequest:(id)arg3;
- (void)secureKeyLoader:(id)arg1 didLoadKeyResponseData:(id)arg2 renewalDate:(id)arg3 forRequest:(id)arg4;
- (void)secureKeyLoader:(id)arg1 didReceiveUpdatedRentalExpirationDate:(id)arg2;
- (id)secureKeyStandardLoader;
- (void)sendStopRequest;
- (id)serviceProviderID;
- (void)setCertificateDataURL:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDidSkipRentalCheckout:(bool)arg1;
- (void)setError:(id)arg1;
- (void)setEventCollection:(id)arg1;
- (void)setFpsCertLoader:(id)arg1;
- (void)setHoldKeyResponses:(bool)arg1;
- (void)setIncludeGUID:(bool)arg1;
- (void)setKeyDataURL:(id)arg1;
- (void)setPendingKeyRequests:(id)arg1;
- (void)setRentalID:(id)arg1;
- (void)setRequiresExternalEntitlementCheck:(bool)arg1;
- (void)setSecureKeyDeliveryCoordinator:(id)arg1;
- (void)setSecureKeyStandardLoader:(id)arg1;
- (void)setServiceProviderID:(id)arg1;

@end
