/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon
 */

@interface BRCAccountSession : NSObject <BRCCloudDocsAppsObserver, BRCIndexingArbiter, BRCPQLDBCorruptionHandler> {
    NSString * _accountID;
    bool  _accountIsReady;
    BRCAccountWaitOperation * _accountWaitOperation;
    NSMutableDictionary * _appLibrariesByRowID;
    BRCThrottle * _appLibraryAliasRemovalThrottle;
    BRCThrottle * _appLibraryResetThrottle;
    BRCThrottle * _appLibraryScanThrottle;
    NSString * _appSupportDirPath;
    BRCApplyScheduler * _applyScheduler;
    unsigned long long  _availableDiskSpace;
    NSString * _cacheDirPath;
    BRCPQLConnection * _clientDB;
    BRCClientState * _clientState;
    int  _cloudDocsFD;
    BRCContainerScheduler * _containerScheduler;
    CDSession * _coreDuetSession;
    NSString * _databaseID;
    NSObject<OS_dispatch_queue> * _dbCorruptionQueue;
    id  _dbProfilingHook;
    NSURL * _dbURL;
    NSObject<OS_dispatch_source> * _dbWatcher;
    NSObject<OS_dispatch_queue> * _dbWatcherQueue;
    BRCDeadlineScheduler * _defaultScheduler;
    BRCDiskSpaceReclaimer * _diskReclaimer;
    BRCFSDownloader * _fsDownloader;
    NSMutableDictionary * _fsEventsMonitors;
    BRCFSReader * _fsReader;
    BRCFSUploader * _fsUploader;
    BRCFSWriter * _fsWriter;
    BRCGlobalProgress * _globalProgress;
    bool  _isCancelled;
    bool  _isDBOpened;
    bool  _isGreedy;
    unsigned long long  _lastDiskSpaceCheckTime;
    NSMutableDictionary * _libraryRowIDsByMangledID;
    BRCThrottle * _lostItemThrottle;
    NSHashTable * _miscOperations;
    BRCNotificationManager * _notificationManager;
    BRCThrottle * _operationFailureThrottle;
    NSMutableDictionary * _privateClientZonesByID;
    NSMutableDictionary * _privateServerZonesByID;
    BRCPQLConnection * _readOnlyDB;
    br_pacer * _reschedulePendingDiskItemsPacer;
    NSObject<OS_dispatch_queue> * _resetQueue;
    bool  _resumed;
    NSMutableDictionary * _rootsByFolderType;
    BRCPQLConnection * _serverDB;
    BRCServerPersistedState * _serverState;
    NSMutableDictionary * _serverZonesByZoneRowID;
    BRCThrottle * _sharedAppLibraryResetThrottle;
    NSMutableDictionary * _sharedClientZonesByMangledID;
    NSMutableDictionary * _sharedServerZonesByMangledID;
    BRCApplicationShortcutService * _shortcutService;
    BRCSpotlightIndexer * _spotlightIndexer;
    BRCStageRegistry * _stageRegistry;
    BRCThrottle * _syncClientZoneErrorThrottle;
    BRCThrottle * _syncClientZoneThrottle;
    NSMutableDictionary * _syncContexts;
    unsigned long long  _totalDiskSpace;
    NSString * _ubiquityTokenSalt;
    br_pacer * _updateDiskSpacePacer;
    BRCUserNotification * _userNotification;
    BRCVolume * _volume;
    NSMutableSet * _xpcClients;
    struct brc_mutex { 
        struct _opaque_pthread_mutex_t { 
            long long __sig; 
            BOOL __opaque[56]; 
        } pthread; 
    }  _zonesCreationLock;
    struct brc_mutex { 
        struct _opaque_pthread_mutex_t { 
            long long __sig; 
            BOOL __opaque[56]; 
        } pthread; 
    }  _zonesLock;
}

@property (nonatomic, readonly) NSString *accountID;
@property (nonatomic, readonly) BRCAccountWaitOperation *accountWaitOperation;
@property (nonatomic, readonly) BRCThrottle *appLibraryAliasRemovalThrottle;
@property (nonatomic, readonly) BRCThrottle *appLibraryResetThrottle;
@property (nonatomic, readonly) BRCThrottle *appLibraryScanThrottle;
@property (nonatomic, retain) NSString *appSupportDirPath;
@property (nonatomic, readonly) BRCApplyScheduler *applyScheduler;
@property (nonatomic, readonly) unsigned long long availableDiskSpace;
@property (nonatomic, retain) NSString *cacheDirPath;
@property (nonatomic, readonly) BRCPQLConnection *clientDB;
@property (nonatomic, readonly) BRCClientState *clientState;
@property (nonatomic, readonly) BRCContainerScheduler *containerScheduler;
@property (nonatomic, readonly) CDSession *coreDuetSession;
@property (nonatomic, readonly) NSString *databaseID;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) BRCDeadlineScheduler *defaultScheduler;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) BRCDiskSpaceReclaimer *diskReclaimer;
@property (nonatomic, readonly) BRCFSDownloader *fsDownloader;
@property (nonatomic, readonly) BRCFSReader *fsReader;
@property (nonatomic, readonly) BRCFSUploader *fsUploader;
@property (nonatomic, readonly) BRCFSWriter *fsWriter;
@property (nonatomic, readonly) BRCGlobalProgress *globalProgress;
@property (nonatomic, readonly) bool hasOptimizeStorageEnabled;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isCancelled;
@property (nonatomic, readonly) bool isGreedy;
@property (nonatomic, readonly) BRCThrottle *lostItemThrottle;
@property (nonatomic, readonly) BRCNotificationManager *notificationManager;
@property (nonatomic, readonly) BRCThrottle *operationFailureThrottle;
@property (nonatomic, readonly) BRCPQLConnection *readOnlyDB;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *resetQueue;
@property (nonatomic, readonly) BRCPQLConnection *serverDB;
@property (nonatomic, readonly) BRCServerPersistedState *serverState;
@property (nonatomic, readonly) BRCThrottle *sharedAppLibraryResetThrottle;
@property (nonatomic, readonly) BRCSpotlightIndexer *spotlightIndexer;
@property (nonatomic, readonly) BRCStageRegistry *stageRegistry;
@property (readonly) Class superclass;
@property (nonatomic, readonly) BRCThrottle *syncClientZoneErrorThrottle;
@property (nonatomic, readonly) BRCThrottle *syncClientZoneThrottle;
@property (nonatomic, readonly) NSString *ubiquityTokenSalt;
@property (nonatomic, readonly) BRCUserNotification *userNotification;
@property (nonatomic, readonly) BRCVolume *volume;

+ (id)sessionForDumpingDatabasesAtURL:(id)arg1;
+ (id)userIdentityForKey:(id)arg1 db:(id)arg2;
+ (id)userIdentityForName:(id)arg1 db:(id)arg2;

- (void).cxx_destruct;
- (bool)PCSMigrationComplete;
- (id)__getOrCreateAppLibrary:(id)arg1 ownerName:(id)arg2 rowID:(id)arg3 createOnDisk:(bool)arg4 alreadyExists:(bool*)arg5 withClientZone:(id)arg6 createCZMMoved:(bool)arg7;
- (id)__getOrCreateClientZone:(id)arg1 ownerName:(id)arg2 withServerZone:(id)arg3;
- (id)__getOrCreateServerZone:(id)arg1 ownerName:(id)arg2;
- (void)__registerServerZone:(id)arg1 clientZone:(id)arg2 appLibrary:(id)arg3 isShared:(bool)arg4;
- (bool)_checkIntegrity:(id)arg1 serverTruth:(bool)arg2 error:(id*)arg3;
- (void)_clearNeedsUpgradeErrorsIfNeeded:(id)arg1 brVersion:(id)arg2;
- (id)_clientZonesMatchingSearchString:(id)arg1;
- (id)_containerMetadataRecordsToSaveWithBatchSize:(unsigned long long)arg1;
- (void)_createAccountSupportPathIfNeeded:(id)arg1 protectParent:(bool)arg2;
- (bool)_createAppLibrary:(id)arg1;
- (bool)_createAppLibraryRootIfNeededAtPath:(id)arg1 error:(id*)arg2;
- (bool)_createAppLibraryRootsIfNeededWithError:(id*)arg1;
- (bool)_createClientZone:(id)arg1 ownerName:(id)arg2;
- (bool)_createPrivateAppLibrary:(id)arg1;
- (bool)_createPrivateClientZone:(id)arg1;
- (bool)_createSharedAppLibrary:(id)arg1;
- (bool)_createSharedClientZone:(id)arg1 ownerName:(id)arg2;
- (bool)_deleteAppLibrary:(id)arg1;
- (bool)_deleteClientZone:(id)arg1;
- (bool)_dumpClientZone:(id)arg1 toContext:(id)arg2 error:(id*)arg3;
- (void)_dumpClientZoneBlockedState:(id)arg1 toContext:(id)arg2;
- (bool)_dumpClientZoneStatus:(id)arg1 toContext:(id)arg2 error:(id*)arg3;
- (void)_enumerateAccountHandlerSupportedFolderTypes:(id)arg1;
- (void)_enumerateAppLibraryRowIDs:(id)arg1 usingBlock:(id)arg2;
- (id)_getOrCreateAppLibraryAndZonesIfNecessary:(id)arg1 ownerName:(id)arg2 creationFlags:(unsigned int*)arg3;
- (bool)_getRootPathXattrValue:(id*)arg1 forRootPath:(id)arg2 error:(id*)arg3;
- (void)_loadClientZonesFromDisk;
- (bool)_openClientTruthConnectionWithError:(id*)arg1;
- (bool)_openServerTruthConnectionWithError:(id*)arg1;
- (struct PQLResultSet { Class x1; }*)_privateAppLibrariesEnumerator:(id)arg1;
- (id)_privateClientZoneByName:(id)arg1 db:(id)arg2;
- (struct PQLResultSet { Class x1; }*)_privateClientZonesEnumerator:(id)arg1;
- (id)_privateServerZoneByName:(id)arg1 db:(id)arg2;
- (struct PQLResultSet { Class x1; }*)_privateServerZonesEnumerator:(id)arg1;
- (void)_recreateSymlinkIfNecessaryForDocumentsPath:(id)arg1 folderName:(id)arg2 destinationPath:(id)arg3;
- (bool)_recursivelyPrepareFolderForLogOutAtURL:(id)arg1 pruneEmptyFolders:(bool)arg2 pruneEmptyTopLevelFolder:(bool)arg3 maxDepth:(unsigned long long)arg4;
- (void)_registerLastBootIfNeeded:(id)arg1 table:(struct NSObject { Class x1; }*)arg2;
- (id)_reserveRowIDForLibrary:(id)arg1 owner:(id)arg2;
- (void)_resolvePathInMobileDocsRoot:(id)arg1 appLibrary:(id*)arg2 clientZone:(id*)arg3;
- (bool)_setRootPathXattrValue:(id)arg1 forRootPath:(id)arg2 error:(id*)arg3;
- (void)_setUserIdentity:(id)arg1 forName:(id)arg2;
- (bool)_setupBackupDetector:(struct backup_detector { unsigned long long x1; unsigned long long x2; unsigned long long x3; }*)arg1 error:(id*)arg2;
- (bool)_setupConnection:(id)arg1 databaseName:(id)arg2 flags:(int)arg3 error:(id*)arg4;
- (bool)_setupConnection:(id)arg1 databaseName:(id)arg2 readonly:(bool)arg3 error:(id*)arg4;
- (void)_setupSharedPackageExtensionsPlist;
- (void)_setupThrottles;
- (struct PQLResultSet { Class x1; }*)_sharedAppLibrariesEnumerator:(id)arg1;
- (struct PQLResultSet { Class x1; }*)_sharedClientZonesEnumerator:(id)arg1;
- (id)_sharedServerZoneByName:(id)arg1 ownerName:(id)arg2 db:(id)arg3;
- (struct PQLResultSet { Class x1; }*)_sharedServerZonesEnumerator:(id)arg1;
- (void)_showiCloudDriveAppInstallationNotificationIfNeeded;
- (void)_startWatcher;
- (bool)_stepBackupDetector:(struct backup_detector { unsigned long long x1; unsigned long long x2; unsigned long long x3; })arg1 newState:(struct backup_detector { unsigned long long x1; unsigned long long x2; unsigned long long x3; }*)arg2 error:(id*)arg3;
- (id)_syncContextForContextIdentifier:(id)arg1 sourceAppIdentifier:(id)arg2 isShared:(bool)arg3 createIfNeeded:(bool)arg4;
- (id)_unloadClientZones;
- (id)accountID;
- (unsigned long long)accountSize;
- (id)accountWaitOperation;
- (void)addMiscOperation:(id)arg1;
- (void)addOfflineAppLibrary:(id)arg1;
- (void)addOfflineClientZone:(id)arg1;
- (void)addOfflineServerZone:(id)arg1;
- (id)allSyncContexts;
- (id)appLibraryAliasRemovalThrottle;
- (id)appLibraryByMangledID:(id)arg1;
- (id)appLibraryByRowID:(id)arg1;
- (id)appLibraryResetThrottle;
- (id)appLibraryScanThrottle;
- (id)appSupportDirPath;
- (id)applyScheduler;
- (bool)applySyncPolicy:(long long)arg1 forSyncedFolderType:(unsigned long long)arg2 isInitialCreation:(bool)arg3 error:(id*)arg4;
- (unsigned long long)availableDiskSpace;
- (void)availableDiskSpaceDidChange;
- (unsigned long long)availableDiskSpaceUsingCache:(bool)arg1;
- (unsigned long long)availableDiskSpaceUsingCache:(bool)arg1 schedulingPendingDiskItemsIfNeeded:(bool)arg2;
- (bool)backupDatabaseToURL:(id)arg1 error:(id*)arg2;
- (struct PQLResultSet { Class x1; }*)bouncedItemsEnumerator;
- (id)cacheDirPath;
- (id)clientDB;
- (id)clientState;
- (id)clientZoneByMangledID:(id)arg1;
- (id)clientZonesMatchingSearchString:(id)arg1 error:(id*)arg2;
- (void)close;
- (void)closeAndResetLocalState;
- (void)closeDBs;
- (void)closeXPCClientsSync;
- (void)cloudDocsAppsListDidChange:(id)arg1;
- (id)cloudDocsClientZone;
- (id)containerScheduler;
- (id)coreDuetSession;
- (bool)createAppLibrariesIfNeededWithError:(id*)arg1;
- (bool)createAppLibraryOnDisk:(id)arg1 createdRoot:(bool*)arg2 createdDocuments:(bool*)arg3 rootFileID:(unsigned long long*)arg4;
- (id)createDeviceKeyForNameInServerDB:(id)arg1;
- (id)createFSEventsMonitorForSyncedFolderType:(unsigned long long)arg1;
- (id)createRootForSyncedFolderType:(unsigned long long)arg1;
- (bool)createServerZone:(id)arg1;
- (bool)createSharedAppLibraryOnDiskWithMangledID:(id)arg1 createdRoot:(bool*)arg2 rootFileID:(unsigned long long*)arg3;
- (id)createUserKeyForName:(id)arg1;
- (id)databaseID;
- (void)dbBecameCorrupted:(id)arg1 completion:(id)arg2;
- (void)dealloc;
- (id)defaultScheduler;
- (id)defaultSyncContext;
- (bool)deleteServerZone:(id)arg1;
- (id)description;
- (void)destroyLocalData;
- (void)destroyLocalDataWaitingForFilesToBeUnlinked:(bool)arg1 completionBlock:(id)arg2;
- (void)destroyLocalDataWaitingForFilesToBeUnlinked:(bool)arg1 pristineContainerIDs:(id)arg2 completionBlock:(id)arg3;
- (void)destroyLocalDataWithPristingContainerIDs:(id)arg1;
- (void)destroySharedClientZone:(id)arg1;
- (id)deviceKeyForName:(id)arg1 db:(id)arg2;
- (id)dirPathForSyncedFolderType:(unsigned long long)arg1;
- (void)disableDatabaseProfilingForDB:(id)arg1;
- (bool)disableSyncforSyncedFolderType:(unsigned long long)arg1 isInitialCreation:(bool)arg2 error:(id*)arg3;
- (id)diskReclaimer;
- (bool)dumpDatabaseToFileHandle:(id)arg1 zoneName:(id)arg2 error:(id*)arg3;
- (void)dumpMiscOperationsToContext:(id)arg1;
- (bool)dumpStatusToFileHandle:(id)arg1 zoneName:(id)arg2 error:(id*)arg3;
- (void)dumpXPCClientsToContext:(id)arg1;
- (void)enableDatabaseProfilingForDB:(id)arg1;
- (bool)enableSyncforSyncedFolderType:(unsigned long long)arg1 isInitialCreation:(bool)arg2 error:(id*)arg3;
- (void)enumerateAppLibraries:(id)arg1;
- (void)enumerateClientZones:(id)arg1;
- (void)enumerateFileTypesWithFilterBlock:(id)arg1 enumerationBlock:(id)arg2;
- (void)enumeratePrivateAppLibraries:(id)arg1;
- (void)enumeratePrivateClientZones:(id)arg1;
- (void)enumeratePrivateServerZones:(id)arg1;
- (void)enumerateServerZones:(id)arg1;
- (void)enumerateSharedAppLibraries:(id)arg1;
- (void)enumerateSharedClientZones:(id)arg1;
- (void)enumerateSupportedFolderTypes:(id)arg1;
- (id)fetchAccountWaitOperationWithAccountReady:(bool*)arg1;
- (id)fsDownloader;
- (id)fsEventsMonitorForAppLibraryID:(id)arg1;
- (id)fsEventsMonitorForSyncedFolderType:(unsigned long long)arg1;
- (id)fsEventsMonitors;
- (id)fsReader;
- (id)fsUploader;
- (id)fsWriter;
- (id)getOrCreatePrivateAppLibraryAndZonesIfNecessary:(id)arg1;
- (id)getOrCreatePrivateAppLibraryAndZonesIfNecessary:(id)arg1 appLibraryExists:(bool*)arg2;
- (id)getOrCreateSharedAppLibraryAndZones:(id)arg1 ownerName:(id)arg2;
- (id)getOrCreateSharedAppLibraryAndZones:(id)arg1 ownerName:(id)arg2 needsActivate:(bool*)arg3;
- (id)getOrReserveLibraryRowIDForLibrary:(id)arg1 ownerName:(id)arg2;
- (id)globalItemByDocumentID:(unsigned int)arg1;
- (id)globalItemByDocumentID:(unsigned int)arg1 db:(id)arg2;
- (id)globalItemByFileID:(unsigned long long)arg1;
- (id)globalItemByFileID:(unsigned long long)arg1 db:(id)arg2;
- (id)globalProgress;
- (bool)hasFSEventsMonitorForSyncedFolderType:(unsigned long long)arg1;
- (bool)hasOptimizeStorageEnabled;
- (bool)hasRootForSyncedFolderType:(unsigned long long)arg1;
- (id)init;
- (id)initWithAccountID:(id)arg1 salt:(id)arg2;
- (bool)initializeOfflineDatabase:(id*)arg1;
- (bool)isCancelled;
- (bool)isGreedy;
- (id)itemByRowID:(unsigned long long)arg1;
- (id)itemByRowID:(unsigned long long)arg1 db:(id)arg2;
- (id)itemIDByRowID:(unsigned long long)arg1;
- (id)itemIDByRowID:(unsigned long long)arg1 db:(id)arg2;
- (struct PQLResultSet { Class x1; }*)itemsNeedingIndexingEnumeratorWithMinNotifRank:(unsigned long long)arg1 maxNotifRank:(unsigned long long)arg2;
- (void)learnOwnerIdentityForShare:(id)arg1 forceUpdate:(bool)arg2;
- (id)lostItemThrottle;
- (void)markAccountMigrationComplete;
- (id)newConnection:(id)arg1;
- (id)newConnectionWithLabel:(id)arg1 readonly:(bool)arg2 error:(id*)arg3;
- (id)newLocalItemFromPQLResultSet:(id)arg1 db:(id)arg2 error:(id*)arg3;
- (id)newPrivateAppLibraryFromPQLResultSet:(id)arg1 error:(id*)arg2;
- (id)newPrivateClientZoneFromPQLResultSet:(id)arg1 error:(id*)arg2;
- (id)newPrivateServerZoneFromPQLResultSet:(id)arg1 error:(id*)arg2;
- (id)newSharedAppLibraryFromPQLResultSet:(id)arg1 error:(id*)arg2;
- (id)newSharedClientZoneFromPQLResultSet:(id)arg1 error:(id*)arg2;
- (id)newSharedServerZoneFromPQLResultSet:(id)arg1 error:(id*)arg2;
- (id)notificationManager;
- (bool)openDBWithError:(id*)arg1;
- (bool)openWithError:(id*)arg1;
- (id)operationFailureThrottle;
- (id)pendingDownloadItemWithDocumentID:(unsigned int)arg1;
- (void)performBlock:(id)arg1 whileRemovingPrivateClientZone:(id)arg2;
- (void)preventDatabaseFromBeingReused;
- (id)privateAppLibraryByID:(id)arg1;
- (id)privateAppLibraryByMangledID:(id)arg1;
- (id)privateClientZoneByID:(id)arg1;
- (id)privateClientZoneByMangledID:(id)arg1;
- (id)privateServerZoneByID:(id)arg1;
- (id)privateServerZoneByMangledID:(id)arg1;
- (id)readOnlyDB;
- (id)recentDocumentsService;
- (void)recreateDesktopSymlinksIfNecessary;
- (void)registerClient:(id)arg1;
- (void)removeDesktopSymlink:(bool)arg1 andDocumentsSymlink:(bool)arg2;
- (void)removeFSEventsMonitorForSyncedFolderType:(unsigned long long)arg1;
- (void)removeRootForSyncedFolderType:(unsigned long long)arg1;
- (id)resetQueue;
- (void)resetThrottles;
- (int)resolvePathAdditionalMetadata:(id)arg1 appLibrary:(id*)arg2 clientZone:(id*)arg3;
- (id)resolvedOpenRelpathForPath:(id)arg1 mustExist:(bool)arg2 errcode:(int*)arg3;
- (void)resume;
- (id)rootForSyncedFolderType:(unsigned long long)arg1;
- (id)roots;
- (bool)saveAppLibraryToDB:(id)arg1;
- (bool)saveClientZoneToDB:(id)arg1;
- (bool)saveServerZoneToDB:(id)arg1;
- (id)serverDB;
- (id)serverState;
- (id)serverZoneByID:(id)arg1;
- (id)serverZoneByMangledID:(id)arg1;
- (id)serverZoneByName:(id)arg1 ownerName:(id)arg2;
- (id)serverZoneByRowID:(id)arg1;
- (void)setAppSupportDirPath:(id)arg1;
- (void)setCacheDirPath:(id)arg1;
- (void)setFSEventsMonitor:(id)arg1 forSyncedFolderType:(unsigned long long)arg2;
- (void)setNeedsPCSMigration:(bool)arg1;
- (void)setOptimizeStorageEnabled:(bool)arg1;
- (void)setRoot:(id)arg1 forSyncedFolderType:(unsigned long long)arg2;
- (void)setupDatabase;
- (id)sharedAppLibraryByMangledID:(id)arg1;
- (id)sharedAppLibraryResetThrottle;
- (id)sharedClientZoneByMangledID:(id)arg1;
- (id)sharedServerZoneByMangledID:(id)arg1;
- (id)sharedSyncContext;
- (bool)shouldIndexDocument:(id)arg1;
- (bool)shouldPathBeDesktopSymlink:(id)arg1;
- (bool)shouldPerformPCSMigration;
- (id)singleClientZoneMatchingSearchString:(id)arg1 error:(id*)arg2;
- (id)spotlightIndexer;
- (id)stageRegistry;
- (struct PQLResultSet { Class x1; }*)stagedItemsEnumerator;
- (void)startDownloadsForGreediness;
- (void)stopDBWatcher;
- (id)syncClientZoneErrorThrottle;
- (id)syncClientZoneThrottle;
- (id)syncContextForAppLibrary:(id)arg1 createIfNeeded:(bool)arg2;
- (id)syncContextForZone:(id)arg1;
- (id)syncContextForZone:(id)arg1 createIfNeeded:(bool)arg2;
- (id)syncContextForZone:(id)arg1 metadata:(bool)arg2;
- (id)syncContextForZone:(id)arg1 metadata:(bool)arg2 createIfNeeded:(bool)arg3;
- (unsigned long long)syncedFolderTypeForURL:(id)arg1;
- (unsigned long long)totalEvictableSizeWithAccessTimeDelta:(double)arg1;
- (id)ubiquityTokenSalt;
- (void)unregisterClient:(id)arg1;
- (void)userDefaultsChanged;
- (id)userIdentityForKey:(id)arg1;
- (id)userKeyForName:(id)arg1 db:(id)arg2;
- (id)userNameForKey:(id)arg1 db:(id)arg2;
- (id)userNotification;
- (bool)validateDatabase:(id)arg1 serverTruth:(bool)arg2 error:(id*)arg3;
- (id)volume;
- (id)zoneHealthSyncContext;

@end
