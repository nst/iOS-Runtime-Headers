/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKRoadTile : VKVectorTile {
    struct unique_ptr<md::PatternedLayer, std::__1::default_delete<md::PatternedLayer> > { 
        struct __compressed_pair<md::PatternedLayer *, std::__1::default_delete<md::PatternedLayer> > { 
            struct PatternedLayer {} *__first_; 
        } __ptr_; 
    }  _patternedRibbonLayer;
    struct unique_ptr<md::RoadLayer, std::__1::default_delete<md::RoadLayer> > { 
        struct __compressed_pair<md::RoadLayer *, std::__1::default_delete<md::RoadLayer> > { 
            struct RoadLayer {} *__first_; 
        } __ptr_; 
    }  _roadLayer;
    struct unique_ptr<md::RoadLayer, std::__1::default_delete<md::RoadLayer> > { 
        struct __compressed_pair<md::RoadLayer *, std::__1::default_delete<md::RoadLayer> > { 
            struct RoadLayer {} *__first_; 
        } __ptr_; 
    }  _roadTrafficLayer;
    VKTrafficTile * _trafficTile;
}

@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{PatternedLayer=^^?{vector<md::PatternedBatch *' */ struct *patternedRibbonLayer; /* unknown property attribute:  std::__1::allocator<ggl::PatternedRibbon::BaseMesh *> >=^^{BaseMesh}}}[2^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}Q^{PatternedSharedResources}} */
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{RoadLayer=^^?{vector<md::RoadBatch *' */ struct *roadLayer; /* unknown property attribute:  std::__1::allocator<ggl::Ribbon::BaseMesh *> >=^^{BaseMesh}}}[8^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}Q^{RoadSharedResources}} */
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{RoadLayer=^^?{vector<md::RoadBatch *' */ struct *roadTrafficLayer; /* unknown property attribute:  std::__1::allocator<ggl::Ribbon::BaseMesh *> >=^^{BaseMesh}}}[8^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}Q^{RoadSharedResources}} */
@property (nonatomic, retain) VKTrafficTile *trafficTile;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addPatternedRibbonTo:(struct unordered_map<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > > > >, std::__1::hash<md::PatternedBatchKey>, std::__1::equal_to<md::PatternedBatchKey>, std::__1::allocator<std::__1::pair<const md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > > > > > > > { struct __hash_table<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > > > > >, std::__1::__unordered_map_hasher<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > > > > >, std::__1::hash<md::PatternedBatchKey>, true>, std::__1::__unordered_map_equal<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > > > > >, std::__1::equal_to<md::PatternedBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > > > > > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > > > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > > > > >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > > > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > > > > >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > > > > >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > > > > >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::PatternRibbon>, std::__1::default_delete<md::Ribbon<ggl::PatternRibbon> > > > > >, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; } x1; }*)arg1 styleQuery:(struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> {} *x1; struct __shared_weak_count {} *x2; })arg2 painterZ:(unsigned int)arg3 numPoints:(unsigned long long)arg4 points:(struct Matrix<float, 2, 1> { float x1[2]; }*)arg5;
- (void)addRoadRibbonTo:(struct unordered_map<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > > > >, std::__1::hash<md::RoadBatchKey>, std::__1::equal_to<md::RoadBatchKey>, std::__1::allocator<std::__1::pair<const md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > > > > > > > { struct __hash_table<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > > > > >, std::__1::__unordered_map_hasher<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > > > > >, std::__1::hash<md::RoadBatchKey>, true>, std::__1::__unordered_map_equal<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > > > > >, std::__1::equal_to<md::RoadBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > > > > > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > > > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > > > > >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > > > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > > > > >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > > > > >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > > > > >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > >, std::__1::allocator<std::__1::unique_ptr<md::Ribbon<ggl::RoadRibbon>, std::__1::default_delete<md::Ribbon<ggl::RoadRibbon> > > > > >, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; } x1; }*)arg1 styleQuery:(struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> {} *x1; struct __shared_weak_count {} *x2; })arg2 painterZ:(unsigned int)arg3 numPoints:(unsigned long long)arg4 points:(struct Matrix<float, 2, 1> { float x1[2]; }*)arg5 startCap:(bool)arg6 endCap:(bool)arg7 trafficTexelRun:(const struct TexelRun { float x1; float x2; float x3; float x4; float x5; }*)arg8 trafficSkeleton:(bool)arg9;
- (void)buildGglMeshesWithDevice:(struct Device { int (**x1)(); struct DeviceVersion { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; struct DeviceCapabilities { bool x_3_1_1; unsigned int x_3_1_2; unsigned int x_3_1_3; unsigned int x_3_1_4; } x3; struct DeviceAPIProperties { int x_4_1_1; double x_4_1_2; } x4; int x5; int x6; }*)arg1 trafficStream:(const struct TrafficStream { unsigned int x1; unsigned int x2; unsigned int x3; float x4; struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> > { struct __compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> > { struct Texture2D {} *x_1_2_1; } x_5_1_1; } x5; float x6; struct TexelRun { float x_7_1_1; float x_7_1_2; float x_7_1_3; float x_7_1_4; float x_7_1_5; } x7; struct unordered_map<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun, md::TrafficStream::SectionKeyHash, std::__1::equal_to<md::TrafficStream::SectionKey>, std::__1::allocator<std::__1::pair<const md::TrafficStream::SectionKey, md::TrafficStream::TexelRun> > > { struct __hash_table<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::__unordered_map_hasher<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, md::TrafficStream::SectionKeyHash, true>, std::__1::__unordered_map_equal<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::equal_to<md::TrafficStream::SectionKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; } x_8_1_1; } x8; }*)arg2;
- (void)dealloc;
- (id)initWithKey:(const struct VKTileKey { unsigned int x1; int x2; int x3; unsigned int x4; }*)arg1 modelTile:(id)arg2 styleManager:(struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x1; struct __shared_weak_count {} *x2; })arg3 sharedResources:(id)arg4 contentScale:(double)arg5 device:(struct Device { int (**x1)(); struct DeviceVersion { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; struct DeviceCapabilities { bool x_3_1_1; unsigned int x_3_1_2; unsigned int x_3_1_3; unsigned int x_3_1_4; } x3; struct DeviceAPIProperties { int x_4_1_1; double x_4_1_2; } x4; int x5; int x6; }*)arg6;
- (struct PatternedLayer { int (**x1)(); struct vector<md::PatternedBatch *, std::__1::allocator<md::PatternedBatch *> > { struct PatternedBatch {} **x_2_1_1; struct PatternedBatch {} **x_2_1_2; struct __compressed_pair<md::PatternedBatch **, std::__1::allocator<md::PatternedBatch *> > { struct PatternedBatch {} **x_3_2_1; } x_2_1_3; } x2; struct vector<ggl::PatternedRibbon::BaseMesh *, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *> > { struct BaseMesh {} **x_3_1_1; struct BaseMesh {} **x_3_1_2; struct __compressed_pair<ggl::PatternedRibbon::BaseMesh **, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *> > { struct BaseMesh {} **x_3_2_1; } x_3_1_3; } x3; struct RenderState {} *x4[2]; struct shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> > { struct ConstantDataTyped<ggl::Tile::View> {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; unsigned long long x6; struct PatternedSharedResources {} *x7; }*)patternedRibbonLayer;
- (struct RoadLayer { int (**x1)(); struct vector<md::RoadBatch *, std::__1::allocator<md::RoadBatch *> > { struct RoadBatch {} **x_2_1_1; struct RoadBatch {} **x_2_1_2; struct __compressed_pair<md::RoadBatch **, std::__1::allocator<md::RoadBatch *> > { struct RoadBatch {} **x_3_2_1; } x_2_1_3; } x2; struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *> > { struct BaseMesh {} **x_3_1_1; struct BaseMesh {} **x_3_1_2; struct __compressed_pair<ggl::Ribbon::BaseMesh **, std::__1::allocator<ggl::Ribbon::BaseMesh *> > { struct BaseMesh {} **x_3_2_1; } x_3_1_3; } x3; struct RenderState {} *x4[8]; struct shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> > { struct ConstantDataTyped<ggl::Tile::View> {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; unsigned long long x6; struct RoadSharedResources {} *x7; }*)roadLayer;
- (struct RoadLayer { int (**x1)(); struct vector<md::RoadBatch *, std::__1::allocator<md::RoadBatch *> > { struct RoadBatch {} **x_2_1_1; struct RoadBatch {} **x_2_1_2; struct __compressed_pair<md::RoadBatch **, std::__1::allocator<md::RoadBatch *> > { struct RoadBatch {} **x_3_2_1; } x_2_1_3; } x2; struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *> > { struct BaseMesh {} **x_3_1_1; struct BaseMesh {} **x_3_1_2; struct __compressed_pair<ggl::Ribbon::BaseMesh **, std::__1::allocator<ggl::Ribbon::BaseMesh *> > { struct BaseMesh {} **x_3_2_1; } x_3_1_3; } x3; struct RenderState {} *x4[8]; struct shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> > { struct ConstantDataTyped<ggl::Tile::View> {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; unsigned long long x6; struct RoadSharedResources {} *x7; }*)roadTrafficLayer;
- (void)setTrafficTile:(id)arg1;
- (id)trafficTile;
- (void)updateViewDependentStateIfNecessaryWithContext:(struct LayoutContext { }*)arg1;

@end
