/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon
 */

@interface BRCDaemon : NSObject <BRCAccountHandlerDelegate, BRCReachabilityDelegate, NSXPCListenerDelegate, UMUserSyncStakeholder> {
    BRCAccountHandler * _accountHandler;
    NSObject<OS_dispatch_queue> * _accountLoaderQueue;
    NSObject<OS_dispatch_queue> * _accountReadyQueue;
    NSObject<OS_dispatch_queue> * _accountResumedQueue;
    NSString * _appSupportDirPath;
    NSString * _cacheDirPath;
    Class  _containerClass;
    bool  _deviceUnlocked;
    NSMutableDictionary * _dirPaths;
    bool  _disableAccountChangesHandling;
    bool  _disableAppsChangesHandling;
    NSArray * _fileProviders;
    unsigned long long  _forceIsGreedyState;
    bool  _hasNotEnoughDiskSpaceToBeFunctional;
    bool  _isInSyncBubble;
    NSError * _loggedOutError;
    UMUserSyncTask * _loginTask;
    NSString * _logsDirPath;
    bool  _resumed;
    int  _serverAvailabilityNotifyToken;
    BRCAccountSession * _session;
    NSMutableDictionary * _shareAcceptOperationsByURL;
    NSOperationQueue * _shareAcceptQueue;
    NSObject<OS_dispatch_source> * _sigIntSrc;
    NSObject<OS_dispatch_source> * _sigQuitSrc;
    NSObject<OS_dispatch_source> * _sigTermSrc;
    NSDate * _startupDate;
    NSObject<OS_dispatch_queue> * _startupQueue;
    NSXPCListener * _tokenListener;
    NSString * _ubiquityTokenSalt;
    bool  _unitTestMode;
    BRCVersionsFileProvider * _versionsProvider;
    NSXPCListener * _xpcListener;
    NSObject<OS_dispatch_queue> * _xpcListenersReadyQueue;
}

@property (nonatomic, readonly) BRCAccountHandler *accountHandler;
@property (nonatomic, retain) NSString *appSupportDirPath;
@property (nonatomic, retain) NSString *cacheDirPath;
@property (nonatomic, retain) Class containerClass;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disableAccountChangesHandling;
@property (nonatomic) bool disableAppsChangesHandling;
@property (nonatomic) bool doesNotHaveEnoughDiskSpaceToBeFunctional;
@property (nonatomic, readonly) NSXPCListenerEndpoint *endpoint;
@property (nonatomic) unsigned long long forceIsGreedyState;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isInSyncBubble;
@property (nonatomic, retain) NSError *loggedOutError;
@property (nonatomic, retain) NSString *logsDirPath;
@property (nonatomic, retain) BRCAccountSession *session;
@property (nonatomic, readonly) NSDate *startupDate;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *ubiquityTokenSalt;
@property (nonatomic, readonly) BRCVersionsFileProvider *versionsProvider;

+ (id)daemon;

- (void).cxx_destruct;
- (void)_createSyncBubbleTasks;
- (void)_finishStartup;
- (bool)_haveRequiredKernelFeatures;
- (void)_initSignals;
- (bool)_isDeviceUnlocked;
- (void)_loadAccountIfNeeded;
- (void)_resumeAccount;
- (void)_setupCacheDelete;
- (bool)_shouldCacheDeleteForVolume:(id)arg1;
- (void)_startXPCListeners;
- (void)_startupAndLoadAccount;
- (id)accountHandler;
- (void)accountHandler:(id)arg1 didChangeSessionTo:(id)arg2;
- (void)accountHandler:(id)arg1 willChangeSessionFrom:(id)arg2;
- (id)appSupportDirPath;
- (id)cacheDirPath;
- (bool)checkEnoughDiskSpaceToBeFunctional;
- (Class)containerClass;
- (id)dirPathForSyncedFolderType:(unsigned long long)arg1;
- (bool)disableAccountChangesHandling;
- (bool)disableAppsChangesHandling;
- (bool)doesNotHaveEnoughDiskSpaceToBeFunctional;
- (void)dumpToContext:(id)arg1;
- (id)endpoint;
- (void)exitWithCode:(int)arg1;
- (id)fileProviderForSyncedFolderType:(unsigned long long)arg1;
- (id)fileProviderForURL:(id)arg1;
- (unsigned long long)forceIsGreedyState;
- (void)handleExitSignal:(int)arg1;
- (id)init;
- (bool)isInSyncBubble;
- (bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (void)loadAccount;
- (void)localeDidChange;
- (id)loggedOutError;
- (id)logsDirPath;
- (void)networkReachabilityChanged:(bool)arg1;
- (void)networkReachabilityFlagsChanged:(unsigned int)arg1;
- (id)registerShareAcceptOperation:(id)arg1 forURL:(id)arg2;
- (void)restart;
- (void)resumeFileProviderForSyncedFolderType:(unsigned long long)arg1;
- (void)resumeIPCAcceptation;
- (bool)retrySyncBubbleLaterIfNeededWithError:(id)arg1;
- (bool)selfCheck:(struct __sFILE { char *x1; int x2; int x3; short x4; short x5; struct __sbuf { char *x_6_1_1; int x_6_1_2; } x6; int x7; void *x8; int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); struct __sbuf { char *x_13_1_1; int x_13_1_2; } x13; struct __sFILEX {} *x14; int x15; unsigned char x16[3]; unsigned char x17[1]; struct __sbuf { char *x_18_1_1; int x_18_1_2; } x18; int x19; long long x20; }*)arg1;
- (id)session;
- (void)setAppSupportDirPath:(id)arg1;
- (void)setCacheDirPath:(id)arg1;
- (void)setContainerClass:(Class)arg1;
- (void)setDirPath:(id)arg1 forSyncedFolderType:(unsigned long long)arg2;
- (void)setDisableAccountChangesHandling:(bool)arg1;
- (void)setDisableAppsChangesHandling:(bool)arg1;
- (void)setDoesNotHaveEnoughDiskSpaceToBeFunctional:(bool)arg1;
- (void)setForceIsGreedyState:(unsigned long long)arg1;
- (void)setIsInSyncBubble:(bool)arg1;
- (void)setLoggedOutError:(id)arg1;
- (void)setLogsDirPath:(id)arg1;
- (void)setSession:(id)arg1;
- (void)setUpAnonymousListener;
- (void)setUpSandbox;
- (void)start;
- (id)startupDate;
- (void)suspendFileProviderForSyncedFolderType:(unsigned long long)arg1;
- (void)suspendIPCAcceptation;
- (id)ubiquityTokenSalt;
- (void)uploadContent;
- (id)versionsProvider;
- (void)waitForConfiguration;
- (void)waitOnAccountResumedQueue;
- (void)waitUntilDeviceIsUnlocked;
- (void)willSwitchUser;

@end
