/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference
 */

@interface VCAudioRelay : NSObject {
    double  _IOBufferDuration;
    unsigned int  _blocksRelayedCount;
    float  _clientDownlinkPowerMovingAverage;
    VCAudioRelayIO * _clientIO;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _clientIOLock;
    struct OpaqueAudioConverter { } * _clientToRemoteConverter;
    float  _clientUplinkPowerMovingAverage;
    bool  _isRelayRunning;
    NSObject<OS_dispatch_source> * _periodicHealthPrintDispatchSource;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _relayLock;
    struct _opaque_pthread_t { long long x1; struct __darwin_pthread_handler_rec {} *x2; BOOL x3[8176]; } * _relayThread;
    VCAudioRelayIO * _remoteIO;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _remoteIOLock;
    struct OpaqueAudioConverter { } * _remoteToClientConverter;
    struct _opaque_pthread_cond_t { 
        long long __sig; 
        BOOL __opaque[40]; 
    }  _wakeUpCondition;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _wakeUpMutex;
}

@property (readonly) double IOBufferDuration;
@property (readonly) unsigned int blocksRelayedCount;
@property (readonly) float clientDownlinkPowerMovingAverage;
@property (nonatomic, copy) VCAudioRelayIO *clientIO;
@property (readonly) struct OpaqueAudioConverter { }*clientToRemoteConverter;
@property (readonly) float clientUplinkPowerMovingAverage;
@property (readonly) bool isRelayRunning;
@property (readonly) NSObject<OS_dispatch_source> *periodicHealthPrintDispatchSource;
@property (nonatomic, copy) VCAudioRelayIO *remoteIO;
@property (readonly) struct OpaqueAudioConverter { }*remoteToClientConverter;

- (double)IOBufferDuration;
- (unsigned int)blocksRelayedCount;
- (bool)canSetPropertyWithError:(id*)arg1;
- (float)clientDownlinkPowerMovingAverage;
- (id)clientIO;
- (struct OpaqueAudioConverter { }*)clientToRemoteConverter;
- (float)clientUplinkPowerMovingAverage;
- (bool)createAudioConvertersWithError:(id*)arg1;
- (void)dealloc;
- (void)destroyAudioConverters;
- (void)forwardSamplesFromIO:(id)arg1 toIO:(id)arg2 withConverter:(struct OpaqueAudioConverter { }*)arg3;
- (id)init;
- (bool)isRelayRunning;
- (void)lock;
- (struct OpaqueAudioConverter { }*)newAudioConverterWithInputFormat:(struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; }*)arg1 outputFormat:(struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; }*)arg2 withError:(id*)arg3;
- (id)periodicHealthPrintDispatchSource;
- (void)printStreamFormats;
- (void)relayCallback;
- (id)remoteIO;
- (struct OpaqueAudioConverter { }*)remoteToClientConverter;
- (float)rmsPowerOfBuffer:(float*)arg1 numSamples:(unsigned int)arg2;
- (void)setClientIO:(id)arg1;
- (bool)setClientIO:(id)arg1 withError:(id*)arg2;
- (bool)setIOBufferDuration:(double)arg1 withError:(id*)arg2;
- (void)setRemoteIO:(id)arg1;
- (bool)setRemoteIO:(id)arg1 withError:(id*)arg2;
- (void)sleepTillTime:(struct timespec { long long x1; long long x2; }*)arg1;
- (bool)startClientIO;
- (void)startPeriodicHealthPrint;
- (bool)startRelayIO:(id)arg1 name:(id)arg2 recordingsName:(id)arg3;
- (bool)startRelayThreadWithError:(id*)arg1;
- (bool)startRemoteIO;
- (void)stopClientIO;
- (bool)stopRelayIO:(id)arg1;
- (void)stopRelayThread;
- (void)stopRemoteIO;
- (void)unlock;
- (void)updateRealTimeStats;

@end
