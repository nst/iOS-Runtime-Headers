/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation
 */

@interface SBFWallpaperConfigurationManager : NSObject <BSDescriptionProviding> {
    unsigned long long  _batchChangeCount;
    long long  _batchNotifyVariants;
    bool  _cachedVariantsShareWallpaperConfiguration;
    bool  _cachedVariantsShareWallpaperConfigurationValid;
    NSArray * _dataStores;
    <SBFWallpaperConfigurationManagerDelegate> * _delegate;
    int  _externalNotificationToken;
    SBFMagnifyMode * _magnifyMode;
    NSMutableDictionary * _proceduralWallpaperCache;
    <SBFProceduralWallpaperProvider> * _proceduralWallpaperProvider;
    NSMutableDictionary * _wallpaperImageCache;
    double  _wallpaperScale;
    struct CGSize { 
        double width; 
        double height; 
    }  _wallpaperSize;
    long long  _wallpaperSizeType;
}

@property (nonatomic) bool cachedVariantsShareWallpaperConfiguration;
@property (getter=isCachedVariantsShareWallpaperConfigurationValid, nonatomic) bool cachedVariantsShareWallpaperConfigurationValid;
@property (nonatomic, readonly, copy) NSArray *dataStores;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <SBFWallpaperConfigurationManagerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly, copy) SBFWallpaperConfiguration *homeScreenWallpaperConfiguration;
@property (nonatomic, readonly, copy) SBFWallpaperConfiguration *lockScreenWallpaperConfiguration;
@property (nonatomic, retain) SBFMagnifyMode *magnifyMode;
@property (nonatomic, readonly) unsigned long long numberOfCachedStaticImages;
@property (nonatomic) <SBFProceduralWallpaperProvider> *proceduralWallpaperProvider;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool variantsShareWallpaperConfiguration;
@property (nonatomic, readonly) double wallpaperScale;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } wallpaperSize;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } wallpaperSizeIncludingParallaxOverhang;
@property (nonatomic, readonly) long long wallpaperSizeType;

+ (long long)currentDeviceWallpaperSizeType;
+ (void)initialize;

- (void).cxx_destruct;
- (void)beginChangeBatch;
- (id)cachedProceduralWallpaperWithIdentifier:(id)arg1 options:(id)arg2 forVariant:(long long)arg3;
- (bool)cachedVariantsShareWallpaperConfiguration;
- (void)clearCacheForVariants:(long long)arg1;
- (void)clearDelayedChangeNotifications;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cropRectForOldCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 portrait:(bool)arg2 zoomScale:(double)arg3 oldParallaxFactor:(double)arg4 forImageSize:(struct CGSize { double x1; double x2; })arg5 newZoomScale:(double*)arg6;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cropRectForViewPort:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 portrait:(bool)arg2 zoomScale:(double)arg3 parallaxFactor:(double)arg4 forImageSize:(struct CGSize { double x1; double x2; })arg5 contentScaleFactor:(double)arg6;
- (id)dataStores;
- (void)dealloc;
- (void)delayNotifyingChangeForVariants:(long long)arg1;
- (id)delegate;
- (id)description;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (long long)effectiveSharedVariantForVariants:(long long)arg1;
- (void)endChangeBatch;
- (void)getBestCropRect:(out struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 zoomScale:(out double*)arg2 forImageSize:(struct CGSize { double x1; double x2; })arg3 portrait:(bool)arg4 parallaxFactor:(double)arg5;
- (id)homeScreenWallpaperConfiguration;
- (id)homeScreenWallpaperConfigurationIncludingValuesForTypes:(unsigned long long)arg1;
- (id)init;
- (id)initWithWallpaperDataStores:(id)arg1;
- (id)initWithWallpaperDataStores:(id)arg1 wallpaperSize:(struct CGSize { double x1; double x2; })arg2 scale:(double)arg3 sizeType:(long long)arg4;
- (bool)isCachedVariantsShareWallpaperConfigurationValid;
- (bool)isInChangeBatch;
- (bool)isProceduralWallpaperInfoValid:(id)arg1;
- (bool)isVideoSupportedByDefaultForVariant:(long long)arg1;
- (bool)isVideoSupportedForVariant:(long long)arg1;
- (id)lockScreenWallpaperConfiguration;
- (id)lockScreenWallpaperConfigurationIncludingValuesForTypes:(unsigned long long)arg1;
- (id)magnifyMode;
- (void)migrateWallpaperOptionsForImageIfNecessaryForVariant:(long long)arg1 representingVariants:(long long)arg2;
- (id)migratedWallpaperOptionsForWallpaperOptions:(id)arg1 originalImageSize:(struct CGSize { double x1; double x2; })arg2;
- (id)normalizeImage:(id)arg1;
- (void)notifyDelegateOfChangesToVariants:(long long)arg1;
- (unsigned long long)numberOfCachedStaticImages;
- (long long)parallaxDeviceType;
- (double)parallaxFactorForCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 portrait:(bool)arg2 forImageSize:(struct CGSize { double x1; double x2; })arg3 zoomScale:(double)arg4;
- (void)performMigrationWithFailureHandler:(id /* block */)arg1;
- (void)preheatImageCacheForVariant:(long long)arg1;
- (Class)proceduralWallpaperClassForIdentifier:(id)arg1;
- (id)proceduralWallpaperInfoForVariant:(long long)arg1;
- (id)proceduralWallpaperProvider;
- (void)regenerateStaticWallpaperThumbnailImages;
- (void)regenerateThumbnailIfNecessaryForVariant:(long long)arg1;
- (void)regenerateThumbnailsIfNecessary;
- (void)removeProceduralWallpaperForVariants:(long long)arg1;
- (void)removeVideoForVariants:(long long)arg1;
- (void)removeWallpaperColorForVariants:(long long)arg1;
- (void)removeWallpaperImagesForVariants:(long long)arg1;
- (void)removeWallpaperImagesForVariants:(long long)arg1 variantsShareWallpaperConfiguration:(bool)arg2;
- (void)removeWallpaperOptionsForVariants:(long long)arg1;
- (void)restoreDefaultWallpaperForAllVariantsAndNotify:(bool)arg1;
- (void)safeMigrateWallpaperImageIfNecessary;
- (bool)safeMigrateWallpaperImageIfNecessaryForVariant:(long long)arg1 representingVariants:(long long)arg2;
- (void)saveCroppedVideo:(id)arg1 toURL:(id)arg2 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 completionHandler:(id /* block */)arg4;
- (void)setCachedVariantsShareWallpaperConfiguration:(bool)arg1;
- (void)setCachedVariantsShareWallpaperConfigurationValid:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setMagnifyMode:(id)arg1;
- (bool)setProceduralWallpaperIdentifier:(id)arg1 options:(id)arg2 forVariants:(long long)arg3;
- (void)setProceduralWallpaperProvider:(id)arg1;
- (bool)setVideoURL:(id)arg1 forVariant:(long long)arg2 shoudCrop:(bool)arg3 relativeCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (bool)setWallpaperColor:(id)arg1 forVariants:(long long)arg2;
- (bool)setWallpaperColorName:(id)arg1 forVariants:(long long)arg2;
- (bool)setWallpaperConfigurationFromDefaultWallpaperConfiguration:(id)arg1 forVariants:(long long)arg2;
- (bool)setWallpaperConfigurationFromDefaultWallpaperConfigurationSet:(id)arg1;
- (bool)setWallpaperImage:(id)arg1 originalImage:(id)arg2 forVariants:(long long)arg3 options:(unsigned long long)arg4;
- (bool)setWallpaperImage:(id)arg1 originalImage:(id)arg2 wallpaperOptions:(id)arg3 forVariants:(long long)arg4 options:(unsigned long long)arg5;
- (bool)setWallpaperImage:(id)arg1 wallpaperOptions:(id)arg2 forVariants:(long long)arg3;
- (bool)setWallpaperOptions:(id)arg1 forVariants:(long long)arg2;
- (bool)setWallpaperThumbnailData:(id)arg1 forVariant:(long long)arg2;
- (bool)setWallpaperThumbnailFromFullsizeImage:(id)arg1 forVariant:(long long)arg2;
- (id)succinctDescription;
- (id)succinctDescriptionBuilder;
- (id)thumbnailDataForImage:(id)arg1;
- (double)thumbnailWidth;
- (bool)variantsShareWallpaperConfiguration;
- (bool)variantsShareWallpaperConfigurationForTypes:(unsigned long long)arg1;
- (id)videoURLForVariant:(long long)arg1;
- (id)wallpaperColorForVariant:(long long)arg1 fromDataStore:(id)arg2 colorName:(id*)arg3;
- (id)wallpaperConfigurationForVariant:(long long)arg1;
- (id)wallpaperConfigurationForVariant:(long long)arg1 includingValuesForTypes:(unsigned long long)arg2;
- (void)wallpaperDidChangeForVariants:(long long)arg1 shouldNotify:(bool)arg2;
- (id)wallpaperImageForVariant:(long long)arg1;
- (id)wallpaperOptionsForVariant:(long long)arg1;
- (id)wallpaperOriginalImageForVariant:(long long)arg1;
- (double)wallpaperScale;
- (struct CGSize { double x1; double x2; })wallpaperSize;
- (struct CGSize { double x1; double x2; })wallpaperSizeIncludingParallaxOverhang;
- (long long)wallpaperSizeType;
- (id)wallpaperThumbnailImageDataForFulfillingLookupForConfiguration:(id)arg1;
- (id)wallpaperThumbnailImageDataForVariant:(long long)arg1;
- (id)wallpaperThumbnailImageForFulfillingLookupForConfiguration:(id)arg1;
- (id)wallpaperThumbnailImageForVariant:(long long)arg1;
- (long long)wallpaperTypeForSharedWallpaperConfigurationForTypes:(unsigned long long)arg1;
- (void)wallpaperWillChangeForVariants:(long long)arg1;

@end
