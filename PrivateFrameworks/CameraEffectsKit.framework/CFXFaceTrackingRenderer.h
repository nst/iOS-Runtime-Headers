/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CameraEffectsKit.framework/CameraEffectsKit
 */

@interface CFXFaceTrackingRenderer : NSObject <SCNSceneRendererDelegate> {
    SCNNode * _billboardTransformPlaneNode;
    SCNNode * _cameraNode;
    bool  _clearGeometryPerFrame;
    <CFXFaceTrackingRendererDelegate> * _delegate;
    SCNNode * _faceAnchorNode;
    SCNNode * _faceRectNode;
    struct __CVPixelBufferPool { } * _inputBufferPool;
    struct __CVMetalTextureCache { } * _metalTextureCache;
    struct CGSize { 
        double width; 
        double height; 
    }  _outputSize;
    NSLock * _renderLock;
    SCNRenderer * _renderer;
    struct __CVPixelBufferPool { } * _rotateBufferPoolForLandscapeInputBuffer;
    struct OpaqueVTImageRotationSession { } * _rotationSession;
    struct OpaqueVTPixelTransferSession { } * _transferSession;
    SCNNode * _transform3DPlaneNode;
    bool  _usingARFaceAnchor;
    struct CGSize { 
        double width; 
        double height; 
    }  _workingSize;
}

@property (nonatomic, retain) SCNNode *billboardTransformPlaneNode;
@property (nonatomic, retain) SCNNode *cameraNode;
@property (nonatomic) bool clearGeometryPerFrame;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CFXFaceTrackingRendererDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) SCNNode *faceAnchorNode;
@property (nonatomic, retain) SCNNode *faceRectNode;
@property (readonly) unsigned long long hash;
@property (nonatomic) struct __CVPixelBufferPool { }*inputBufferPool;
@property (nonatomic) struct __CVMetalTextureCache { }*metalTextureCache;
@property (nonatomic) struct CGSize { double x1; double x2; } outputSize;
@property (nonatomic, retain) NSLock *renderLock;
@property (nonatomic, retain) SCNRenderer *renderer;
@property (nonatomic) struct __CVPixelBufferPool { }*rotateBufferPoolForLandscapeInputBuffer;
@property (nonatomic) struct OpaqueVTImageRotationSession { }*rotationSession;
@property (readonly) Class superclass;
@property (nonatomic) struct OpaqueVTPixelTransferSession { }*transferSession;
@property (nonatomic, retain) SCNNode *transform3DPlaneNode;
@property (nonatomic) bool usingARFaceAnchor;
@property (nonatomic) struct CGSize { double x1; double x2; } workingSize;

+ (double)billboardCompositionScaleForBufferSize:(struct CGSize { double x1; double x2; })arg1;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (void)CFX_ClearGeometry;
- (void)CFX_ClearGeometryOfPlaneNode:(id)arg1;
- (void)CFX_ClearUnusedNodesWithInputs:(id)arg1;
- (id)CFX_DEBUG_3DAxesNodeWithWidth:(double)arg1;
- (id)CFX_DEBUG_PlaneOutlineNodeWithWidth:(double)arg1 height:(double)arg2 thickness:(double)arg3 color:(id)arg4;
- (struct SCNVector3 { float x1; float x2; float x3; })CFX_LocalCoordinatesOfBillboardAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)CFX_billboardNodeWithWidth:(double)arg1 height:(double)arg2;
- (id)CFX_inputsOfTrackingType:(int)arg1 fromInputs:(id)arg2;
- (id)CFX_pitchYawNodeWithWidth:(double)arg1 height:(double)arg2;
- (struct SCNMatrix4 { float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; })CFX_translationFromPlaneToPointOnFaceMesh;
- (void)CFX_updateNode:(id)arg1 withImageBuffer:(id)arg2;
- (void)CFX_updateWithExplicitTransaction:(id /* block */)arg1;
- (id)billboardTransformPlaneNode;
- (id)cameraNode;
- (void)clear;
- (bool)clearGeometryPerFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })compositionSubRectOfBillboardWithFaceAnchor:(id)arg1 bufferSize:(struct CGSize { double x1; double x2; })arg2;
- (void)dealloc;
- (id)delegate;
- (id)faceAnchorNode;
- (id)faceRectNode;
- (id)init;
- (struct __CVPixelBufferPool { }*)inputBufferPool;
- (struct __CVMetalTextureCache { }*)metalTextureCache;
- (struct __CVBuffer { }*)newPixelBufferRenderedFromARFrame:(id)arg1 withInputs:(id)arg2 renderSize:(struct CGSize { double x1; double x2; })arg3 interfaceOrientation:(long long)arg4 withFaceRectScaleFactor:(struct CGSize { double x1; double x2; })arg5;
- (struct __CVBuffer { }*)newPixelBufferRenderedWithFaceAnchor:(id)arg1 withInputs:(id)arg2 renderSize:(struct CGSize { double x1; double x2; })arg3;
- (struct CGPoint { double x1; double x2; })normalizedTopLeftFacePlanePointFromNormalizedUIKitPoint:(struct CGPoint { double x1; double x2; })arg1 onFacePlane:(bool)arg2;
- (struct CGSize { double x1; double x2; })outputSize;
- (struct CGPoint { double x1; double x2; })pointTranslatedToSceneKitForHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (double)relativeScaleBetweenTrackingModesWithFaceAnchor:(id)arg1;
- (void)renderFrameWithCompletionBlock:(id /* block */)arg1;
- (id)renderLock;
- (id)renderWithInputs:(id)arg1 time:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 metadata:(id)arg3;
- (id)renderer;
- (void)resetCameraTransform;
- (void)resetRenderer;
- (void)resetSceneNodes;
- (struct __CVPixelBufferPool { }*)rotateBufferPoolForLandscapeInputBuffer;
- (struct OpaqueVTImageRotationSession { }*)rotationSession;
- (void)setBillboardTransformPlaneNode:(id)arg1;
- (void)setCameraNode:(id)arg1;
- (void)setClearGeometryPerFrame:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFaceAnchorNode:(id)arg1;
- (void)setFaceRectNode:(id)arg1;
- (void)setInputBufferPool:(struct __CVPixelBufferPool { }*)arg1;
- (void)setInputBufferSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMetalTextureCache:(struct __CVMetalTextureCache { }*)arg1;
- (void)setOutputSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setRenderLock:(id)arg1;
- (void)setRenderer:(id)arg1;
- (void)setRotateBufferPoolForLandscapeInputBuffer:(struct __CVPixelBufferPool { }*)arg1;
- (void)setRotationSession:(struct OpaqueVTImageRotationSession { }*)arg1;
- (void)setTransferSession:(struct OpaqueVTPixelTransferSession { }*)arg1;
- (void)setTransform3DPlaneNode:(id)arg1;
- (void)setUsingARFaceAnchor:(bool)arg1;
- (void)setWorkingSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setupInputBufferPoolForSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setupSCNRenderer;
- (struct OpaqueVTPixelTransferSession { }*)transferSession;
- (id)transform3DPlaneNode;
- (void)updateFaceTrackedNodesForParentNode:(id)arg1 usingFaceAnchor:(id)arg2 withInputs:(id)arg3;
- (void)updateSceneForFaceAnchor:(id)arg1 withInputs:(id)arg2;
- (bool)usingARFaceAnchor;
- (struct CGSize { double x1; double x2; })workingSize;

@end
