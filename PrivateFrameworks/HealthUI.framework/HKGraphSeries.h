/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HealthUI.framework/HealthUI
 */

@interface HKGraphSeries : NSObject <HKGraphSeriesDataSourceDelegate> {
    NSUUID * _UUID;
    bool  _allowsSelection;
    double  _alpha;
    HKPropertyAnimationApplier * _animationApplier;
    <HKGraphSeriesAxisScalingRule> * _axisScalingRule;
    NSMutableDictionary * _cachedCoordinateListsByBlockPath;
    NSMutableDictionary * _cachedDataBlocksByBlockPath;
    NSNumber * _closestSelectedXCoordinate;
    HKGraphSeriesDataSource * _dataSource;
    <HKSeriesDelegate> * _delegate;
    bool  _dirty;
    UIColor * _offScreenIndicatorColor;
    double  _offscreenIndicatorAlpha;
    struct { 
        struct { 
            long long index; 
            long long zoom; 
        } blockPath; 
        long long index; 
    }  _selectedPointPath;
    HKAxis * _yAxis;
}

@property (nonatomic, readonly) NSUUID *UUID;
@property (nonatomic) bool allowsSelection;
@property (nonatomic) double alpha;
@property (nonatomic, retain) <HKGraphSeriesAxisScalingRule> *axisScalingRule;
@property (nonatomic, retain) HKGraphSeriesDataSource *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <HKSeriesDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) UIColor *offScreenIndicatorColor;
@property (nonatomic) double offscreenIndicatorAlpha;
@property (readonly) Class superclass;
@property (nonatomic, copy) HKAxis *yAxis;

- (void).cxx_destruct;
- (id)UUID;
- (void)_cacheCoordinates:(id)arg1 forBlockPath:(struct { long long x1; long long x2; })arg2;
- (id)_cachedCoordinatesForBlockPath:(struct { long long x1; long long x2; })arg1;
- (id)_coordinateListsForGeneratorWithXAxis:(id)arg1 zoomScale:(double)arg2 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 contentOffset:(struct CGPoint { double x1; double x2; })arg4;
- (id)_coordinateListsWithXValueRange:(id)arg1 xAxis:(id)arg2 zoomLevel:(long long)arg3;
- (id)_coordinatesForBlockPath:(struct { long long x1; long long x2; })arg1 xAxis:(id)arg2;
- (id)_dataBlockForBlockPath:(struct { long long x1; long long x2; })arg1;
- (void)_enumeratePathIndexesInDateRange:(id)arg1 zoomLevel:(long long)arg2 block:(id)arg3;
- (void)_sendInvalidateToDelegate;
- (void)_setDirty;
- (id)_valueRangeForYAxisWithXAxisRange:(id)arg1 xAxis:(id)arg2 dateZoom:(long long)arg3;
- (id)_visibleXValueRangeWithAxis:(id)arg1 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 contentOffset:(struct CGPoint { double x1; double x2; })arg3 zoomScale:(double)arg4;
- (bool)allowsSelection;
- (double)alpha;
- (void)autoscaleYAxisIfNecessaryWithValueRange:(id)arg1 xAxis:(id)arg2 dateZoom:(long long)arg3 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (void)autoscaleYAxisWithValueRange:(id)arg1 xAxis:(id)arg2 dateZoom:(long long)arg3 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 animated:(bool)arg5;
- (id)axisScalingRule;
- (bool)blockCoordinateIsVisibleInsideOfChartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 blockCoordinate:(id)arg2;
- (id)closestSelectedXCoordinate;
- (bool)containsCoordinatesInChartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 xAxis:(id)arg2 zoomScale:(double)arg3 contentOffset:(struct CGPoint { double x1; double x2; })arg4 xAxisTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg5;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })coordinateTransformForChartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 xAxisTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (id)coordinatesForBlock:(id)arg1 blockPath:(struct { long long x1; long long x2; })arg2 xAxis:(id)arg3 yAxis:(id)arg4;
- (id)dataSource;
- (void)dataSourceDidUpdateCache:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (void)deselectPath;
- (double)distanceFromPoint:(struct CGPoint { double x1; double x2; })arg1 blockCoordinate:(id)arg2 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (double)distanceFromTouchPoint:(struct CGPoint { double x1; double x2; })arg1 inChartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 xAxis:(id)arg3 zoomScale:(double)arg4 contentOffset:(struct CGPoint { double x1; double x2; })arg5 xAxisTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg6;
- (void)drawSeriesWithBlockCoordinates:(id)arg1 axisRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 zoomLevelConfiguration:(id)arg3 pointTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg4 renderContext:(struct CGContext { }*)arg5 secondaryRenderContext:(id)arg6;
- (void)drawWithChartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 xAxis:(id)arg2 zoomScale:(double)arg3 contentOffset:(struct CGPoint { double x1; double x2; })arg4 zoomLevelConfiguration:(id)arg5 xAxisTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg6 inContext:(struct CGContext { }*)arg7 secondaryRenderContext:(id)arg8;
- (void)enumerateCoordinatesInChartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 xAxis:(id)arg2 zoomScale:(double)arg3 contentOffset:(struct CGPoint { double x1; double x2; })arg4 xAxisTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg5 roundToViewScale:(bool)arg6 block:(id)arg7;
- (void)enumerateCoordinatesInChartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 xAxis:(id)arg2 zoomScale:(double)arg3 contentOffset:(struct CGPoint { double x1; double x2; })arg4 xAxisTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg5 roundToViewScale:(bool)arg6 rejectPointsOutOfChartRect:(bool)arg7 block:(id)arg8;
- (id)init;
- (bool)isHighlighted;
- (id)offScreenIndicatorColor;
- (double)offscreenIndicatorAlpha;
- (void)selectPathAtPoint:(struct { struct { long long x_1_1_1; long long x_1_1_2; } x1; long long x2; })arg1 closestXCoordinate:(id)arg2;
- (struct { struct { long long x_1_1_1; long long x_1_1_2; } x1; long long x2; })selectedPointPath;
- (void)setAllowsSelection:(bool)arg1;
- (void)setAlpha:(double)arg1;
- (void)setAxisScalingRule:(id)arg1;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setOffScreenIndicatorColor:(id)arg1;
- (void)setOffscreenIndicatorAlpha:(double)arg1;
- (void)setYAxis:(id)arg1;
- (bool)shouldInvertAxis;
- (double)xAxisDistanceFromPoint:(struct CGPoint { double x1; double x2; })arg1 blockCoordinate:(id)arg2 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (double)xAxisSelectedCoordinate:(double)arg1 blockCoordinate:(id)arg2 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (id)yAxis;
- (double)yAxisDifferenceToPoint:(struct CGPoint { double x1; double x2; })arg1 blockCoordinate:(id)arg2 chartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;

@end
