/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet
 */

@interface _CDActivity : NSObject {
    CDAttribute * _admissionAttribute;
    bool  _afterUserIsInactive;
    bool  _allowOnBattery;
    bool  _beforeUserIsActive;
    bool  _budgeted;
    int  _budgetedPid;
    unsigned long long  _budgetingToken;
    NSString * _bundleId;
    bool  _cpuIntensive;
    bool  _deviceWakeAllowed;
    bool  _discretionaryActivity;
    NSDate * _executeBefore;
    NSObject<OS_dispatch_queue> * _handlerQueue;
    NSNumber * _identifier;
    bool  _ioIntensive;
    double  _leeway;
    bool  _memoryIntensive;
    CDAttribute * _meteringAttribute;
    NSString * _name;
    NSString * _networkAvailability;
    int  _pid;
    NSDate * _scheduledTime;
    NSDate * _startAfter;
    id  _startHandler;
    unsigned long long  _state;
    id  _suspendHandler;
    bool  _triggersRestart;
}

@property (retain) CDAttribute *admissionAttribute;
@property (nonatomic) bool afterUserIsInactive;
@property (nonatomic) bool allowOnBattery;
@property (nonatomic) bool beforeUserIsActive;
@property (nonatomic) bool budgeted;
@property (nonatomic) int budgetedPid;
@property unsigned long long budgetingToken;
@property (nonatomic, retain) NSString *bundleId;
@property (nonatomic) bool cpuIntensive;
@property (nonatomic) bool deviceWakeAllowed;
@property (nonatomic) bool discretionaryActivity;
@property (nonatomic, copy) NSDate *executeBefore;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *handlerQueue;
@property (retain) NSNumber *identifier;
@property (nonatomic) bool ioIntensive;
@property double leeway;
@property (nonatomic) bool memoryIntensive;
@property (retain) CDAttribute *meteringAttribute;
@property (nonatomic, copy) NSString *name;
@property (nonatomic, retain) NSString *networkAvailability;
@property int pid;
@property (retain) NSDate *scheduledTime;
@property (nonatomic, copy) NSDate *startAfter;
@property (nonatomic, copy) id startHandler;
@property unsigned long long state;
@property (nonatomic, copy) id suspendHandler;
@property (nonatomic) bool triggersRestart;

+ (id)activityWithName:(id)arg1 startAfter:(id)arg2 executeBefore:(id)arg3 handlerQueue:(id)arg4 handler:(id)arg5;

- (void).cxx_destruct;
- (id)admissionAttribute;
- (bool)afterUserIsInactive;
- (bool)allowOnBattery;
- (bool)beforeUserIsActive;
- (bool)budgeted;
- (int)budgetedPid;
- (unsigned long long)budgetingToken;
- (id)bundleId;
- (bool)checkForBudget;
- (bool)cpuIntensive;
- (bool)deviceWakeAllowed;
- (bool)discretionaryActivity;
- (id)executeBefore;
- (id)handlerQueue;
- (id)identifier;
- (id)init;
- (id)initWithName:(id)arg1 startAfter:(id)arg2 executeBefore:(id)arg3 handlerQueue:(id)arg4 handler:(id)arg5;
- (bool)ioIntensive;
- (double)leeway;
- (bool)memoryIntensive;
- (id)meteringAttribute;
- (id)name;
- (id)networkAvailability;
- (int)pid;
- (id)scheduledTime;
- (void)setAdmissionAttribute:(id)arg1;
- (void)setAfterUserIsInactive:(bool)arg1;
- (void)setAllowOnBattery:(bool)arg1;
- (void)setBeforeUserIsActive:(bool)arg1;
- (void)setBudgeted:(bool)arg1;
- (void)setBudgetedPid:(int)arg1;
- (void)setBudgetingToken:(unsigned long long)arg1;
- (void)setBundleId:(id)arg1;
- (void)setCpuIntensive:(bool)arg1;
- (void)setDeviceWakeAllowed:(bool)arg1;
- (void)setDiscretionaryActivity:(bool)arg1;
- (void)setExecuteBefore:(id)arg1;
- (void)setHandlerQueue:(id)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setIoIntensive:(bool)arg1;
- (void)setLeeway:(double)arg1;
- (void)setMemoryIntensive:(bool)arg1;
- (void)setMeteringAttribute:(id)arg1;
- (void)setName:(id)arg1;
- (void)setNetworkAvailability:(id)arg1;
- (void)setPid:(int)arg1;
- (void)setScheduledTime:(id)arg1;
- (void)setStartAfter:(id)arg1;
- (void)setStartHandler:(id)arg1;
- (void)setState:(unsigned long long)arg1;
- (void)setSuspendHandler:(id)arg1;
- (void)setTriggersRestart:(bool)arg1;
- (id)startAfter;
- (void)startBudgetAccounting;
- (id)startHandler;
- (unsigned long long)state;
- (void)stopBudgetAccounting;
- (id)suspendHandler;
- (bool)triggersRestart;
- (bool)updateAttribute;

@end
