/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSDImageRep : TSDMediaRep <TSDMagicMoveMatching> {
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  mBaseMaskLayoutTransform;
    bool  mCachedIsEquation;
    CALayer * mContentsLayer;
    bool  mDirectlyManagesLayerContent;
    bool  mFrameInUnscaledCanvasIsValid;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mFrameInUnscaledCanvasRelativeToSuper;
    NSCache * mHitTestCache;
    long long  mHitTestCacheOnce;
    CAShapeLayer * mIAMaskLayer;
    bool  mInInstantAlphaMode;
    struct CGImage { } * mInstantAlphaImage;
    TSDInstantAlphaTracker * mInstantAlphaTracker;
    bool  mIsEquation;
    TSDLayoutGeometry * mLastImageGeometryInRoot;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  mLastLayoutToImageTransform;
    TSDLayoutGeometry * mLastMaskGeometryInRoot;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  mLastPictureFrameLayerTransform;
    NSRecursiveLock * mLayerUpdateAndSizingStateLock;
    CAShapeLayer * mMaskPathLayer;
    CAShapeLayer * mMaskSublayer;
    bool  mShowImageHighlight;
    struct CGImage { } * mSizedImage;
    NSObject<OS_dispatch_queue> * mSizedImageAccessQueue;
    bool  mSizedImageHasAdjustmentsBakedIn;
    bool  mSizedImageHasMaskBakedIn;
    bool  mSizedImageIsWide;
    struct CGPath { } * mSizedImageMaskPath;
    long long  mSizedImageOrientation;
    struct CGSize { 
        double width; 
        double height; 
    }  mSizedImageSize;
    TSDImageRepSizingState * mSizingState;
    bool  mSizingStateReady;
    NSMutableArray * mUpdateFromLayoutBlocks;
    NSObject<OS_dispatch_semaphore> * mUpdateFromLayoutBlocksLock;
}

+ (double)magicMoveAttributeMatchPercentBetweenOutgoingObject:(id)arg1 incomingObject:(id)arg2 mixingTypeContext:(id)arg3;
+ (struct CGPath { }*)p_newPathToBakeIntoSizedImageForSize:(struct CGSize { double x1; double x2; })arg1 withImageLayout:(id)arg2 orientation:(long long)arg3;

- (bool)canDrawInParallel;
- (bool)canDrawShadowInOneStepWithChildren:(bool)arg1;
- (void)dealloc;
- (id)downloadProgressPlaceholderImage;
- (void)drawInContextWithoutEffects:(struct CGContext { }*)arg1 withContent:(bool)arg2 strokeDrawOptions:(unsigned long long)arg3 withOpacity:(bool)arg4 forAlphaOnly:(bool)arg5 drawChildren:(bool)arg6;
- (void)drawInLayerContext:(struct CGContext { }*)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameInUnscaledCanvas;
- (id)imageInfo;
- (id)imageLayout;
- (id)imageOfStroke:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;
- (bool)isDataCurrentlyDownloading;
- (id)maskInfo;
- (id)maskLayout;
- (void)p_drawInContext:(struct CGContext { }*)arg1 withContent:(bool)arg2 strokeDrawOptions:(unsigned long long)arg3 withOpacity:(double)arg4 withMask:(bool)arg5 withIAMask:(bool)arg6 forLayer:(bool)arg7 forShadow:(bool)arg8 forHitTest:(bool)arg9;
- (bool)p_drawsInOneStep;
- (id)p_imageData;
- (id)p_imageProvider;
- (bool)p_shouldUseSourceImageForContext:(id)arg1 clipBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 image:(struct CGImage { }*)arg4;
- (id)p_validatedBitmapImageProvider;
- (id)p_validatedImageProvider;
- (id)p_validatedThumbnailImageProvider;
- (void)setTextureAttributes:(id)arg1 textureBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (bool)shouldShowCheckerboard;
- (id)textureForContext:(id)arg1;
- (void)willBeRemoved;

@end
